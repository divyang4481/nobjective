//
// Copyright (C) 2009 Eugeny Grishul
//
// See license in License.txt
//

namespace NObjective.Proxies {
	using System;
	using System.Runtime.InteropServices;
	[ProxyBaseClass(typeof( NSOperation ))]
	public struct _AB_PeopleSorting_Operation : IEquatable<_AB_PeopleSorting_Operation> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses._AB_PeopleSorting_Operation;
		public static implicit operator IntPtr( _AB_PeopleSorting_Operation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _AB_PeopleSorting_Operation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is _AB_PeopleSorting_Operation ) ) return false; 
			return Handle == ( ( _AB_PeopleSorting_Operation )value ).Handle;
		}
		public bool Equals( _AB_PeopleSorting_Operation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _AB_PeopleSorting_Operation value1, _AB_PeopleSorting_Operation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _AB_PeopleSorting_Operation value1, _AB_PeopleSorting_Operation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _AB_PeopleSorting_Operation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _AB_PeopleSorting_Operation alloc() {
			return new _AB_PeopleSorting_Operation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct AB_AFCard : IEquatable<AB_AFCard> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.AB_AFCard;
		public static implicit operator IntPtr( AB_AFCard value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( AB_AFCard value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is AB_AFCard ) ) return false; 
			return Handle == ( ( AB_AFCard )value ).Handle;
		}
		public bool Equals( AB_AFCard value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( AB_AFCard value1, AB_AFCard value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( AB_AFCard value1, AB_AFCard value2 ) {
			return value1.Handle != value2.Handle;
		}
		public AB_AFCard( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static AB_AFCard alloc() {
			return new AB_AFCard( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cardsFromGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardsFromGroup( Handle, CachedSelectors.cardsFromGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dataFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataFile( Handle, CachedSelectors.dataFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dataValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataValueOfProperty_( Handle, CachedSelectors.dataValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public double doubleValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doubleValueOfProperty_( Handle, CachedSelectors.doubleValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject emailList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.emailList( Handle, CachedSelectors.emailList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject firstName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstName( Handle, CachedSelectors.firstName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject firstStringValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstStringValueOfProperty_( Handle, CachedSelectors.firstStringValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float floatValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.floatValueOfProperty_( Handle, CachedSelectors.floatValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int getRow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getRow( Handle, CachedSelectors.getRow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char hasTag_( NObjective.RuntimeObject tag ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasTag_( Handle, CachedSelectors.hasTag_, out ___occuredException, sizeof( NObjective.RuntimeObject ), tag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithUID_dataFile_( int uid, NObjective.RuntimeObject dataFile ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUID_dataFile_( Handle, CachedSelectors.initWithUID_dataFile_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), uid, dataFile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int intValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.intValueOfProperty_( Handle, CachedSelectors.intValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject stringValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringValueOfProperty_( Handle, CachedSelectors.stringValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringValuesOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringValuesOfProperty_( Handle, CachedSelectors.stringValuesOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tagList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tagList( Handle, CachedSelectors.tagList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int UID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.UID( Handle, CachedSelectors.UID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject valueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueOfProperty_( Handle, CachedSelectors.valueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cardsFromGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dataFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dataValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double doubleValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr emailList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr firstName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr firstStringValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float floatValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int getRow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasTag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject tag );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUID_dataFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int uid, NObjective.RuntimeObject dataFile );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int intValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringValuesOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr tagList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int UID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
		}
		static internal class CachedSelectors {
			public static readonly Selector cardsFromGroup = "cardsFromGroup";
			public static readonly Selector dataFile = "dataFile";
			public static readonly Selector dataValueOfProperty_ = "dataValueOfProperty:";
			public static readonly Selector doubleValueOfProperty_ = "doubleValueOfProperty:";
			public static readonly Selector emailList = "emailList";
			public static readonly Selector firstName = "firstName";
			public static readonly Selector firstStringValueOfProperty_ = "firstStringValueOfProperty:";
			public static readonly Selector floatValueOfProperty_ = "floatValueOfProperty:";
			public static readonly Selector getRow = "getRow";
			public static readonly Selector hasTag_ = "hasTag:";
			public static readonly Selector initWithUID_dataFile_ = "initWithUID:dataFile:";
			public static readonly Selector intValueOfProperty_ = "intValueOfProperty:";
			public static readonly Selector stringValueOfProperty_ = "stringValueOfProperty:";
			public static readonly Selector stringValuesOfProperty_ = "stringValuesOfProperty:";
			public static readonly Selector tagList = "tagList";
			public static readonly Selector UID = "UID";
			public static readonly Selector valueOfProperty_ = "valueOfProperty:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct AB_AFDataFile : IEquatable<AB_AFDataFile> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.AB_AFDataFile;
		public static implicit operator IntPtr( AB_AFDataFile value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( AB_AFDataFile value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is AB_AFDataFile ) ) return false; 
			return Handle == ( ( AB_AFDataFile )value ).Handle;
		}
		public bool Equals( AB_AFDataFile value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( AB_AFDataFile value1, AB_AFDataFile value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( AB_AFDataFile value1, AB_AFDataFile value2 ) {
			return value1.Handle != value2.Handle;
		}
		public AB_AFDataFile( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static AB_AFDataFile alloc() {
			return new AB_AFDataFile( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject allCards() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allCards( Handle, CachedSelectors.allCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject buildPropertyDict_( NObjective.RuntimeObject dict ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.buildPropertyDict_( Handle, CachedSelectors.buildPropertyDict_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dict );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cardsWithCategory_( NObjective.RuntimeObject category ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardsWithCategory_( Handle, CachedSelectors.cardsWithCategory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), category );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clearDataFileInfo() {
			RuntimeObject ___occuredException;
			NativeMethods.clearDataFileInfo( Handle, CachedSelectors.clearDataFileInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void closeDataFile() {
			RuntimeObject ___occuredException;
			NativeMethods.closeDataFile( Handle, CachedSelectors.closeDataFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject combineStructures_withCustom_( NObjective.RuntimeObject structures, NObjective.RuntimeObject withCustom ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.combineStructures_withCustom_( Handle, CachedSelectors.combineStructures_withCustom_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), structures, withCustom );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char dataTypeDoesNotExist_forKey_inCurrentStruct_inCustomStruct_( NObjective.RuntimeObject exist, NObjective.RuntimeObject forKey, NObjective.RuntimeObject inCurrentStruct, NObjective.RuntimeObject inCustomStruct ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataTypeDoesNotExist_forKey_inCurrentStruct_inCustomStruct_( Handle, CachedSelectors.dataTypeDoesNotExist_forKey_inCurrentStruct_inCustomStruct_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), exist, forKey, inCurrentStruct, inCustomStruct );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char initializeDataFileInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initializeDataFileInfo_( Handle, CachedSelectors.initializeDataFileInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char initWithDataFile_lockMode_cardClass_snoop_( NObjective.RuntimeObject file, short lockMode, NObjective.RuntimeClass cardClass, char snoop ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDataFile_lockMode_cardClass_snoop_( Handle, CachedSelectors.initWithDataFile_lockMode_cardClass_snoop_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( short ) + sizeof( NObjective.RuntimeClass ) + sizeof( char ), file, lockMode, cardClass, snoop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject makeProperties_verifyWith_( NObjective.RuntimeObject properties, NObjective.RuntimeObject verifyWith ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.makeProperties_verifyWith_( Handle, CachedSelectors.makeProperties_verifyWith_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), properties, verifyWith );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject ownerCard() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ownerCard( Handle, CachedSelectors.ownerCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void releaseLock_( short @lock ) {
			RuntimeObject ___occuredException;
			NativeMethods.releaseLock_( Handle, CachedSelectors.releaseLock_, out ___occuredException, sizeof( short ), @lock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char verifyDataType_forKey_( NObjective.RuntimeObject type, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.verifyDataType_forKey_( Handle, CachedSelectors.verifyDataType_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), type, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject whatIsKeyType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.whatIsKeyType_( Handle, CachedSelectors.whatIsKeyType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allCards( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr buildPropertyDict_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dict );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cardsWithCategory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject category );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearDataFileInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void closeDataFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr combineStructures_withCustom_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject structures, NObjective.RuntimeObject withCustom );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char dataTypeDoesNotExist_forKey_inCurrentStruct_inCustomStruct_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exist, NObjective.RuntimeObject forKey, NObjective.RuntimeObject inCurrentStruct, NObjective.RuntimeObject inCustomStruct );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char initializeDataFileInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char initWithDataFile_lockMode_cardClass_snoop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject file, short lockMode, NObjective.RuntimeClass cardClass, char snoop );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr makeProperties_verifyWith_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject properties, NObjective.RuntimeObject verifyWith );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr ownerCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void releaseLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short @lock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char verifyDataType_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr whatIsKeyType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
		}
		static internal class CachedSelectors {
			public static readonly Selector allCards = "allCards";
			public static readonly Selector buildPropertyDict_ = "buildPropertyDict:";
			public static readonly Selector cardsWithCategory_ = "cardsWithCategory:";
			public static readonly Selector clearDataFileInfo = "clearDataFileInfo";
			public static readonly Selector closeDataFile = "closeDataFile";
			public static readonly Selector combineStructures_withCustom_ = "combineStructures:withCustom:";
			public static readonly Selector dataTypeDoesNotExist_forKey_inCurrentStruct_inCustomStruct_ = "dataTypeDoesNotExist:forKey:inCurrentStruct:inCustomStruct:";
			public static readonly Selector initializeDataFileInfo_ = "initializeDataFileInfo:";
			public static readonly Selector initWithDataFile_lockMode_cardClass_snoop_ = "initWithDataFile:lockMode:cardClass:snoop:";
			public static readonly Selector makeProperties_verifyWith_ = "makeProperties:verifyWith:";
			public static readonly Selector ownerCard = "ownerCard";
			public static readonly Selector releaseLock_ = "releaseLock:";
			public static readonly Selector verifyDataType_forKey_ = "verifyDataType:forKey:";
			public static readonly Selector whatIsKeyType_ = "whatIsKeyType:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABAccessibilityMockUIElement : IEquatable<ABAccessibilityMockUIElement> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAccessibilityMockUIElement;
		public static implicit operator IntPtr( ABAccessibilityMockUIElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAccessibilityMockUIElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABAccessibilityMockUIElement ) ) return false; 
			return Handle == ( ( ABAccessibilityMockUIElement )value ).Handle;
		}
		public bool Equals( ABAccessibilityMockUIElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAccessibilityMockUIElement value1, ABAccessibilityMockUIElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAccessibilityMockUIElement value1, ABAccessibilityMockUIElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAccessibilityMockUIElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAccessibilityMockUIElement alloc() {
			return new ABAccessibilityMockUIElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject elementWithRole_parent_( NObjective.RuntimeObject role, NObjective.RuntimeObject parent ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementWithRole_parent_( ClassHandle, CachedSelectors.elementWithRole_parent_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), role, parent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityActionDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityActionDescription_( Handle, CachedSelectors.accessibilityActionDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityActionNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityActionNames( Handle, CachedSelectors.accessibilityActionNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeNames( Handle, CachedSelectors.accessibilityAttributeNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeValue_( Handle, CachedSelectors.accessibilityAttributeValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityFocusedAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityFocusedAttribute( Handle, CachedSelectors.accessibilityFocusedAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityFocusedUIElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityFocusedUIElement( Handle, CachedSelectors.accessibilityFocusedUIElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityHelpAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityHelpAttribute( Handle, CachedSelectors.accessibilityHelpAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char accessibilityIsAttributeSettable_( NObjective.RuntimeObject settable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsAttributeSettable_( Handle, CachedSelectors.accessibilityIsAttributeSettable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), settable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsFocusedAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsFocusedAttributeSettable( Handle, CachedSelectors.accessibilityIsFocusedAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsHelpAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsHelpAttributeSettable( Handle, CachedSelectors.accessibilityIsHelpAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsIgnored() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsIgnored( Handle, CachedSelectors.accessibilityIsIgnored, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsParentAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsParentAttributeSettable( Handle, CachedSelectors.accessibilityIsParentAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsPositionAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsPositionAttributeSettable( Handle, CachedSelectors.accessibilityIsPositionAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsRoleAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsRoleAttributeSettable( Handle, CachedSelectors.accessibilityIsRoleAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsRoleDescriptionAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsRoleDescriptionAttributeSettable( Handle, CachedSelectors.accessibilityIsRoleDescriptionAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsSizeAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsSizeAttributeSettable( Handle, CachedSelectors.accessibilityIsSizeAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsWindowAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsWindowAttributeSettable( Handle, CachedSelectors.accessibilityIsWindowAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject accessibilityParentAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityParentAttribute( Handle, CachedSelectors.accessibilityParentAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void accessibilityPerformAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilityPerformAction_( Handle, CachedSelectors.accessibilityPerformAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject accessibilityPositionAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityPositionAttribute( Handle, CachedSelectors.accessibilityPositionAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityRoleAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityRoleAttribute( Handle, CachedSelectors.accessibilityRoleAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityRoleDescriptionAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityRoleDescriptionAttribute( Handle, CachedSelectors.accessibilityRoleDescriptionAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void accessibilitySetFocusedAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilitySetFocusedAttribute_( Handle, CachedSelectors.accessibilitySetFocusedAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void accessibilitySetValue_forAttribute_( NObjective.RuntimeObject value, NObjective.RuntimeObject forAttribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilitySetValue_forAttribute_( Handle, CachedSelectors.accessibilitySetValue_forAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forAttribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char accessibilityShouldUseUniqueId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityShouldUseUniqueId( Handle, CachedSelectors.accessibilityShouldUseUniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject accessibilitySizeAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilitySizeAttribute( Handle, CachedSelectors.accessibilitySizeAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityWindowAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityWindowAttribute( Handle, CachedSelectors.accessibilityWindowAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRole_parent_( NObjective.RuntimeObject role, NObjective.RuntimeObject parent ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRole_parent_( Handle, CachedSelectors.initWithRole_parent_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), role, parent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isFocused() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFocused( Handle, CachedSelectors.isFocused, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setIsFocused_( char focused ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsFocused_( Handle, CachedSelectors.setIsFocused_, out ___occuredException, sizeof( char ), focused );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityActionDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityActionNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityAttributeNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityAttributeValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityFocusedAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityFocusedUIElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityHelpAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsAttributeSettable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject settable );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsFocusedAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsHelpAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsIgnored( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsParentAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsPositionAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsRoleAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsRoleDescriptionAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsSizeAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsWindowAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityParentAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void accessibilityPerformAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityPositionAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityRoleAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityRoleDescriptionAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void accessibilitySetFocusedAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void accessibilitySetValue_forAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forAttribute );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityShouldUseUniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilitySizeAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityWindowAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr elementWithRole_parent_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject role, NObjective.RuntimeObject parent );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithRole_parent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject role, NObjective.RuntimeObject parent );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isFocused( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIsFocused_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char focused );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityActionDescription_ = "accessibilityActionDescription:";
			public static readonly Selector accessibilityActionNames = "accessibilityActionNames";
			public static readonly Selector accessibilityAttributeNames = "accessibilityAttributeNames";
			public static readonly Selector accessibilityAttributeValue_ = "accessibilityAttributeValue:";
			public static readonly Selector accessibilityFocusedAttribute = "accessibilityFocusedAttribute";
			public static readonly Selector accessibilityFocusedUIElement = "accessibilityFocusedUIElement";
			public static readonly Selector accessibilityHelpAttribute = "accessibilityHelpAttribute";
			public static readonly Selector accessibilityIsAttributeSettable_ = "accessibilityIsAttributeSettable:";
			public static readonly Selector accessibilityIsFocusedAttributeSettable = "accessibilityIsFocusedAttributeSettable";
			public static readonly Selector accessibilityIsHelpAttributeSettable = "accessibilityIsHelpAttributeSettable";
			public static readonly Selector accessibilityIsIgnored = "accessibilityIsIgnored";
			public static readonly Selector accessibilityIsParentAttributeSettable = "accessibilityIsParentAttributeSettable";
			public static readonly Selector accessibilityIsPositionAttributeSettable = "accessibilityIsPositionAttributeSettable";
			public static readonly Selector accessibilityIsRoleAttributeSettable = "accessibilityIsRoleAttributeSettable";
			public static readonly Selector accessibilityIsRoleDescriptionAttributeSettable = "accessibilityIsRoleDescriptionAttributeSettable";
			public static readonly Selector accessibilityIsSizeAttributeSettable = "accessibilityIsSizeAttributeSettable";
			public static readonly Selector accessibilityIsWindowAttributeSettable = "accessibilityIsWindowAttributeSettable";
			public static readonly Selector accessibilityParentAttribute = "accessibilityParentAttribute";
			public static readonly Selector accessibilityPerformAction_ = "accessibilityPerformAction:";
			public static readonly Selector accessibilityPositionAttribute = "accessibilityPositionAttribute";
			public static readonly Selector accessibilityRoleAttribute = "accessibilityRoleAttribute";
			public static readonly Selector accessibilityRoleDescriptionAttribute = "accessibilityRoleDescriptionAttribute";
			public static readonly Selector accessibilitySetFocusedAttribute_ = "accessibilitySetFocusedAttribute:";
			public static readonly Selector accessibilitySetValue_forAttribute_ = "accessibilitySetValue:forAttribute:";
			public static readonly Selector accessibilityShouldUseUniqueId = "accessibilityShouldUseUniqueId";
			public static readonly Selector accessibilitySizeAttribute = "accessibilitySizeAttribute";
			public static readonly Selector accessibilityWindowAttribute = "accessibilityWindowAttribute";
			public static readonly Selector elementWithRole_parent_ = "elementWithRole:parent:";
			public static readonly Selector initWithRole_parent_ = "initWithRole:parent:";
			public static readonly Selector isFocused = "isFocused";
			public static readonly Selector setIsFocused_ = "setIsFocused:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABACE : IEquatable<ABACE> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABACE;
		public static implicit operator IntPtr( ABACE value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABACE value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABACE ) ) return false; 
			return Handle == ( ( ABACE )value ).Handle;
		}
		public bool Equals( ABACE value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABACE value1, ABACE value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABACE value1, ABACE value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABACE( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABACE alloc() {
			return new ABACE( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char canRead() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canRead( Handle, CachedSelectors.canRead, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char canWrite() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canWrite( Handle, CachedSelectors.canWrite, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithACENode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithACENode_( Handle, CachedSelectors.initWithACENode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithCurrentUserPrivNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCurrentUserPrivNode_( Handle, CachedSelectors.initWithCurrentUserPrivNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithPrincipal_( NObjective.RuntimeObject principal ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPrincipal_( Handle, CachedSelectors.initWithPrincipal_, out ___occuredException, sizeof( NObjective.RuntimeObject ), principal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isInherited() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isInherited( Handle, CachedSelectors.isInherited, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isProtected() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isProtected( Handle, CachedSelectors.isProtected, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject principal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.principal( Handle, CachedSelectors.principal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setCanRead_( char read ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCanRead_( Handle, CachedSelectors.setCanRead_, out ___occuredException, sizeof( char ), read );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCanWrite_( char write ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCanWrite_( Handle, CachedSelectors.setCanWrite_, out ___occuredException, sizeof( char ), write );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrincipal_( NObjective.RuntimeObject principal ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrincipal_( Handle, CachedSelectors.setPrincipal_, out ___occuredException, sizeof( NObjective.RuntimeObject ), principal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char canRead( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char canWrite( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithACENode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithCurrentUserPrivNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithPrincipal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject principal );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isInherited( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isProtected( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr principal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCanRead_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char read );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCanWrite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char write );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrincipal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject principal );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector canRead = "canRead";
			public static readonly Selector canWrite = "canWrite";
			public static readonly Selector initWithACENode_ = "initWithACENode:";
			public static readonly Selector initWithCurrentUserPrivNode_ = "initWithCurrentUserPrivNode:";
			public static readonly Selector initWithPrincipal_ = "initWithPrincipal:";
			public static readonly Selector isInherited = "isInherited";
			public static readonly Selector isProtected = "isProtected";
			public static readonly Selector principal = "principal";
			public static readonly Selector setCanRead_ = "setCanRead:";
			public static readonly Selector setCanWrite_ = "setCanWrite:";
			public static readonly Selector setPrincipal_ = "setPrincipal:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector type = "type";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABACL : IEquatable<ABACL> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABACL;
		public static implicit operator IntPtr( ABACL value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABACL value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABACL ) ) return false; 
			return Handle == ( ( ABACL )value ).Handle;
		}
		public bool Equals( ABACL value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABACL value1, ABACL value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABACL value1, ABACL value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABACL( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABACL alloc() {
			return new ABACL( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject ACEs() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ACEs( Handle, CachedSelectors.ACEs, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addACE_append_( NObjective.RuntimeObject ace, char append ) {
			RuntimeObject ___occuredException;
			NativeMethods.addACE_append_( Handle, CachedSelectors.addACE_append_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), ace, append );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addACEs_( NObjective.RuntimeObject es ) {
			RuntimeObject ___occuredException;
			NativeMethods.addACEs_( Handle, CachedSelectors.addACEs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), es );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char hasACEs() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasACEs( Handle, CachedSelectors.hasACEs, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithACLNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithACLNode_( Handle, CachedSelectors.initWithACLNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeACE_( NObjective.RuntimeObject ace ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeACE_( Handle, CachedSelectors.removeACE_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setACEs_( NObjective.RuntimeObject es ) {
			RuntimeObject ___occuredException;
			NativeMethods.setACEs_( Handle, CachedSelectors.setACEs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), es );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr ACEs( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addACE_append_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ace, char append );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addACEs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject es );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasACEs( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithACLNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeACE_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ace );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setACEs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject es );
		}
		static internal class CachedSelectors {
			public static readonly Selector ACEs = "ACEs";
			public static readonly Selector addACE_append_ = "addACE:append:";
			public static readonly Selector addACEs_ = "addACEs:";
			public static readonly Selector hasACEs = "hasACEs";
			public static readonly Selector initWithACLNode_ = "initWithACLNode:";
			public static readonly Selector removeACE_ = "removeACE:";
			public static readonly Selector setACEs_ = "setACEs:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABAddressAttributedString : IEquatable<ABAddressAttributedString> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAddressAttributedString;
		public static implicit operator IntPtr( ABAddressAttributedString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAddressAttributedString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABAddressAttributedString ) ) return false; 
			return Handle == ( ( ABAddressAttributedString )value ).Handle;
		}
		public bool Equals( ABAddressAttributedString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAddressAttributedString value1, ABAddressAttributedString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAddressAttributedString value1, ABAddressAttributedString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAddressAttributedString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAddressAttributedString alloc() {
			return new ABAddressAttributedString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void appendField_label_withText_( NObjective.RuntimeObject field, NObjective.RuntimeObject label, NObjective.RuntimeObject withText ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendField_label_withText_( Handle, CachedSelectors.appendField_label_withText_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), field, label, withText );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendString_withFont_andAttribute_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont, NObjective.RuntimeObject andAttribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendString_withFont_andAttribute_( Handle, CachedSelectors.appendString_withFont_andAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, withFont, andAttribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject attributedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedString( Handle, CachedSelectors.attributedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void buildString() {
			RuntimeObject ___occuredException;
			NativeMethods.buildString( Handle, CachedSelectors.buildString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCountryCode_identifier_label_insertPopups_andInputController_( NObjective.RuntimeObject code, NObjective.RuntimeObject identifier, NObjective.RuntimeObject label, char insertPopups, NObjective.RuntimeObject andInputController ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCountryCode_identifier_label_insertPopups_andInputController_( Handle, CachedSelectors.initWithCountryCode_identifier_label_insertPopups_andInputController_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), code, identifier, label, insertPopups, andInputController );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void appendField_label_withText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field, NObjective.RuntimeObject label, NObjective.RuntimeObject withText );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void appendString_withFont_andAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont, NObjective.RuntimeObject andAttribute );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr attributedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void buildString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithCountryCode_identifier_label_insertPopups_andInputController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject code, NObjective.RuntimeObject identifier, NObjective.RuntimeObject label, char insertPopups, NObjective.RuntimeObject andInputController );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendField_label_withText_ = "appendField:label:withText:";
			public static readonly Selector appendString_withFont_andAttribute_ = "appendString:withFont:andAttribute:";
			public static readonly Selector attributedString = "attributedString";
			public static readonly Selector buildString = "buildString";
			public static readonly Selector initWithCountryCode_identifier_label_insertPopups_andInputController_ = "initWithCountryCode:identifier:label:insertPopups:andInputController:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABAddressBook : IEquatable<ABAddressBook> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAddressBook;
		public static implicit operator IntPtr( ABAddressBook value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAddressBook value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABAddressBook ) ) return false; 
			return Handle == ( ( ABAddressBook )value ).Handle;
		}
		public bool Equals( ABAddressBook value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAddressBook value1, ABAddressBook value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAddressBook value1, ABAddressBook value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAddressBook( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAddressBook alloc() {
			return new ABAddressBook( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static ABAddressBook addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( ClassHandle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABAddressBook( ___result );
		}
		unsafe public static NObjective.RuntimeObject __addressBookCoreDataDatabaseFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__addressBookCoreDataDatabaseFile( ClassHandle, CachedSelectors.__addressBookCoreDataDatabaseFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject addressBookCoreDataDatabaseFileName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookCoreDataDatabaseFileName( ClassHandle, CachedSelectors.addressBookCoreDataDatabaseFileName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __addressBookDataFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__addressBookDataFile( ClassHandle, CachedSelectors.__addressBookDataFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __addressBookDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__addressBookDirectory( ClassHandle, CachedSelectors.__addressBookDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __addressBookImagesDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__addressBookImagesDirectory( ClassHandle, CachedSelectors.__addressBookImagesDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __addressBookLockFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__addressBookLockFile( ClassHandle, CachedSelectors.__addressBookLockFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject addressBookMetaKitDatabaseFileName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookMetaKitDatabaseFileName( ClassHandle, CachedSelectors.addressBookMetaKitDatabaseFileName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __addressBookSaveFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__addressBookSaveFile( ClassHandle, CachedSelectors.__addressBookSaveFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject addressBookWithDatabaseDirectory_( NObjective.RuntimeObject directory ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookWithDatabaseDirectory_( ClassHandle, CachedSelectors.addressBookWithDatabaseDirectory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject addressFormats() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressFormats( ClassHandle, CachedSelectors.addressFormats, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void initialize_MailRecents() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize_MailRecents( ClassHandle, CachedSelectors.initialize_MailRecents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static bool isInert() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isInert( ClassHandle, CachedSelectors.isInert, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isPredicateSearchingEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPredicateSearchingEnabled( ClassHandle, CachedSelectors.isPredicateSearchingEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char __isUsingDefaultAddressBookDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__isUsingDefaultAddressBookDirectory( ClassHandle, CachedSelectors.__isUsingDefaultAddressBookDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isUsingMailRecents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isUsingMailRecents( ClassHandle, CachedSelectors.isUsingMailRecents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject __mailRecentsCoreDataDatabaseFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__mailRecentsCoreDataDatabaseFile( ClassHandle, CachedSelectors.__mailRecentsCoreDataDatabaseFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject mailRecentsCoreDataDatabaseFileName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mailRecentsCoreDataDatabaseFileName( ClassHandle, CachedSelectors.mailRecentsCoreDataDatabaseFileName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_AddressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddressBook( ClassHandle, CachedSelectors.nts_AddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_AddressBookWithDatabaseDirectory_( NObjective.RuntimeObject directory ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddressBookWithDatabaseDirectory_( ClassHandle, CachedSelectors.nts_AddressBookWithDatabaseDirectory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_CreateSharedAddressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_CreateSharedAddressBook( ClassHandle, CachedSelectors.nts_CreateSharedAddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char nts_hasSharedInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_hasSharedInstance( ClassHandle, CachedSelectors.nts_hasSharedInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject nts_SharedAddressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SharedAddressBook( ClassHandle, CachedSelectors.nts_SharedAddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __recordClassFromUniqueId_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__recordClassFromUniqueId_( ClassHandle, CachedSelectors.__recordClassFromUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void setAddressBookDirectory_( NObjective.RuntimeObject directory ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAddressBookDirectory_( ClassHandle, CachedSelectors.setAddressBookDirectory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setIsInert_( char inert ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsInert_( ClassHandle, CachedSelectors.setIsInert_, out ___occuredException, sizeof( char ), inert );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setIsUsingMailRecents_( char recents ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsUsingMailRecents_( ClassHandle, CachedSelectors.setIsUsingMailRecents_, out ___occuredException, sizeof( char ), recents );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setShouldCreateEmptyDatabase_( char database ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldCreateEmptyDatabase_( ClassHandle, CachedSelectors.setShouldCreateEmptyDatabase_, out ___occuredException, sizeof( char ), database );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setShouldDisableSync_( char sync ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldDisableSync_( ClassHandle, CachedSelectors.setShouldDisableSync_, out ___occuredException, sizeof( char ), sync );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static ABAddressBook sharedAddressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedAddressBook( ClassHandle, CachedSelectors.sharedAddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABAddressBook( ___result );
		}
		unsafe public static bool shouldCreateEmptyDatabase() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldCreateEmptyDatabase( ClassHandle, CachedSelectors.shouldCreateEmptyDatabase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool shouldDisableSync() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldDisableSync( ClassHandle, CachedSelectors.shouldDisableSync, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void abDidRevertFromBackupCompleteResetContextAndUnlock_( NObjective.RuntimeObject unlock ) {
			RuntimeObject ___occuredException;
			NativeMethods.abDidRevertFromBackupCompleteResetContextAndUnlock_( Handle, CachedSelectors.abDidRevertFromBackupCompleteResetContextAndUnlock_, out ___occuredException, sizeof( NObjective.RuntimeObject ), unlock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void abGlobalAPILockInFile_line_( System.IntPtr file, uint line ) {
			RuntimeObject ___occuredException;
			NativeMethods.abGlobalAPILockInFile_line_( Handle, CachedSelectors.abGlobalAPILockInFile_line_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), file, line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char abGlobalAPITryLockInFile_line_( System.IntPtr file, uint line ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abGlobalAPITryLockInFile_line_( Handle, CachedSelectors.abGlobalAPITryLockInFile_line_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), file, line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void abGlobalAPIUnlockInFile_line_( System.IntPtr file, uint line ) {
			RuntimeObject ___occuredException;
			NativeMethods.abGlobalAPIUnlockInFile_line_( Handle, CachedSelectors.abGlobalAPIUnlockInFile_line_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), file, line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void abGlobalMailRecentAPILockInFile_line_( System.IntPtr file, uint line ) {
			RuntimeObject ___occuredException;
			NativeMethods.abGlobalMailRecentAPILockInFile_line_( Handle, CachedSelectors.abGlobalMailRecentAPILockInFile_line_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), file, line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void abGlobalMailRecentAPIUnlockInFile_line_( System.IntPtr file, uint line ) {
			RuntimeObject ___occuredException;
			NativeMethods.abGlobalMailRecentAPIUnlockInFile_line_( Handle, CachedSelectors.abGlobalMailRecentAPIUnlockInFile_line_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), file, line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void abManagedObjectContextDidSave_( NObjective.RuntimeObject save ) {
			RuntimeObject ___occuredException;
			NativeMethods.abManagedObjectContextDidSave_( Handle, CachedSelectors.abManagedObjectContextDidSave_, out ___occuredException, sizeof( NObjective.RuntimeObject ), save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool addRecord_( ABRecord record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addRecord_( Handle, CachedSelectors.addRecord_, out ___occuredException, sizeof( ABRecord ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject addressBookCoreDataDatabaseFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookCoreDataDatabaseFile( Handle, CachedSelectors.addressBookCoreDataDatabaseFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressBookDatabaseFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookDatabaseFile( Handle, CachedSelectors.addressBookDatabaseFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressBookDataFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookDataFile( Handle, CachedSelectors.addressBookDataFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressBookDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookDirectory( Handle, CachedSelectors.addressBookDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressBookImagesDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookImagesDirectory( Handle, CachedSelectors.addressBookImagesDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressBookLockFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookLockFile( Handle, CachedSelectors.addressBookLockFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressBookMetaDataDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookMetaDataDirectory( Handle, CachedSelectors.addressBookMetaDataDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressBookSaveFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookSaveFile( Handle, CachedSelectors.addressBookSaveFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allGroup( Handle, CachedSelectors.allGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allUniqueIds() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allUniqueIds( Handle, CachedSelectors.allUniqueIds, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allUniqueIdsWithModificationDates() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allUniqueIdsWithModificationDates( Handle, CachedSelectors.allUniqueIdsWithModificationDates, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject autorelease() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autorelease( Handle, CachedSelectors.autorelease, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject backupDatabaseToPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupDatabaseToPath_( Handle, CachedSelectors.backupDatabaseToPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void cacheCustomProperties_withRecordType_( NObjective.RuntimeObject properties, NObjective.RuntimeObject withRecordType ) {
			RuntimeObject ___occuredException;
			NativeMethods.cacheCustomProperties_withRecordType_( Handle, CachedSelectors.cacheCustomProperties_withRecordType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), properties, withRecordType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject cachedCustomPropertiesByNameForRecordType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedCustomPropertiesByNameForRecordType_( Handle, CachedSelectors.cachedCustomPropertiesByNameForRecordType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject categories() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.categories( Handle, CachedSelectors.categories, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clearCustomPropertyCaches() {
			RuntimeObject ___occuredException;
			NativeMethods.clearCustomPropertyCaches( Handle, CachedSelectors.clearCustomPropertyCaches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearTemporaryCaches() {
			RuntimeObject ___occuredException;
			NativeMethods.clearTemporaryCaches( Handle, CachedSelectors.clearTemporaryCaches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint countOfRecordsForClass_matchingPredicate_takeLock_( NObjective.RuntimeClass @class, NObjective.RuntimeObject matchingPredicate, char takeLock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countOfRecordsForClass_matchingPredicate_takeLock_( Handle, CachedSelectors.countOfRecordsForClass_matchingPredicate_takeLock_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), @class, matchingPredicate, takeLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public NObjective.RuntimeObject createCommonNotificationUserInfoDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createCommonNotificationUserInfoDictionary( Handle, CachedSelectors.createCommonNotificationUserInfoDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void databaseChangedExternally_( NObjective.RuntimeObject externally ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChangedExternally_( Handle, CachedSelectors.databaseChangedExternally_, out ___occuredException, sizeof( NObjective.RuntimeObject ), externally );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject dbCache() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dbCache( Handle, CachedSelectors.dbCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char dblCheckPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dblCheckPath_( Handle, CachedSelectors.dblCheckPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string defaultCountryCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultCountryCode( Handle, CachedSelectors.defaultCountryCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int defaultNameOrdering() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultNameOrdering( Handle, CachedSelectors.defaultNameOrdering, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject deltasSinceAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deltasSinceAddressBook_( Handle, CachedSelectors.deltasSinceAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void disconnect_( NObjective.RuntimeObject disconnect ) {
			RuntimeObject ___occuredException;
			NativeMethods.disconnect_( Handle, CachedSelectors.disconnect_, out ___occuredException, sizeof( NObjective.RuntimeObject ), disconnect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char doesPropertyExist_forClass_( NObjective.RuntimeObject exist, NObjective.RuntimeClass forClass ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doesPropertyExist_forClass_( Handle, CachedSelectors.doesPropertyExist_forClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), exist, forClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void doValidateMetaData() {
			RuntimeObject ___occuredException;
			NativeMethods.doValidateMetaData( Handle, CachedSelectors.doValidateMetaData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject fetchAllRecordsForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fetchAllRecordsForClass_( Handle, CachedSelectors.fetchAllRecordsForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char fileManager_shouldProceedAfterError_( NObjective.RuntimeObject manager, NObjective.RuntimeObject shouldProceedAfterError ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileManager_shouldProceedAfterError_( Handle, CachedSelectors.fileManager_shouldProceedAfterError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), manager, shouldProceedAfterError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void finishAddingGroupDictionaryRepresentations_recordsByUniqueId_( NObjective.RuntimeObject representations, NObjective.RuntimeObject recordsByUniqueId ) {
			RuntimeObject ___occuredException;
			NativeMethods.finishAddingGroupDictionaryRepresentations_recordsByUniqueId_( Handle, CachedSelectors.finishAddingGroupDictionaryRepresentations_recordsByUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), representations, recordsByUniqueId );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSAttributedString formattedAddressFromDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formattedAddressFromDictionary_( Handle, CachedSelectors.formattedAddressFromDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAttributedString( ___result );
		}
		unsafe public void frameworkPrefsChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.frameworkPrefsChanged_( Handle, CachedSelectors.frameworkPrefsChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray groups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groups( Handle, CachedSelectors.groups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject groupsAtRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsAtRemoteLocation_( Handle, CachedSelectors.groupsAtRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject groupsThatUseGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsThatUseGroup_( Handle, CachedSelectors.groupsThatUseGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool hasUnsavedChanges() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasUnsavedChanges( Handle, CachedSelectors.hasUnsavedChanges, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char importFromMetaKitDatabaseAtPath_andSave_( NObjective.RuntimeObject path, char andSave ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importFromMetaKitDatabaseAtPath_andSave_( Handle, CachedSelectors.importFromMetaKitDatabaseAtPath_andSave_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), path, andSave );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isABCoreDataImportCompleted() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isABCoreDataImportCompleted( Handle, CachedSelectors.isABCoreDataImportCompleted, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isPublished() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPublished( Handle, CachedSelectors.isPublished, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSharedInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSharedInstance( Handle, CachedSelectors.isSharedInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isUsingDefaultAddressBookDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isUsingDefaultAddressBookDirectory( Handle, CachedSelectors.isUsingDefaultAddressBookDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject lastImportGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastImportGroup( Handle, CachedSelectors.lastImportGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void launchABDForSyncing() {
			RuntimeObject ___occuredException;
			NativeMethods.launchABDForSyncing( Handle, CachedSelectors.launchABDForSyncing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char launchABDIfNeeded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.launchABDIfNeeded( Handle, CachedSelectors.launchABDIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject localizedDefaults() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedDefaults( Handle, CachedSelectors.localizedDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject logs() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.logs( Handle, CachedSelectors.logs, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mailRecentForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mailRecentForEmail_( Handle, CachedSelectors.mailRecentForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mailRecents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mailRecents( Handle, CachedSelectors.mailRecents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mailRecentsCoreDataDatabaseFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mailRecentsCoreDataDatabaseFile( Handle, CachedSelectors.mailRecentsCoreDataDatabaseFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mailRecentsMatching_( NObjective.RuntimeObject matching ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mailRecentsMatching_( Handle, CachedSelectors.mailRecentsMatching_, out ___occuredException, sizeof( NObjective.RuntimeObject ), matching );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject managedObjectContext() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.managedObjectContext( Handle, CachedSelectors.managedObjectContext, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void markABCoreDataImportCompleted() {
			RuntimeObject ___occuredException;
			NativeMethods.markABCoreDataImportCompleted( Handle, CachedSelectors.markABCoreDataImportCompleted, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public ABPerson me() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.me( Handle, CachedSelectors.me, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABPerson( ___result );
		}
		unsafe public char migrateSpotlightMetadataFiles_removingOrphansUsingRootedRecordIdentifiers_( NObjective.RuntimeObject files, NObjective.RuntimeObject removingOrphansUsingRootedRecordIdentifiers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.migrateSpotlightMetadataFiles_removingOrphansUsingRootedRecordIdentifiers_( Handle, CachedSelectors.migrateSpotlightMetadataFiles_removingOrphansUsingRootedRecordIdentifiers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), files, removingOrphansUsingRootedRecordIdentifiers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void moveAsideDatabaseAtPath_reason_( NObjective.RuntimeObject path, NObjective.RuntimeObject reason ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveAsideDatabaseAtPath_reason_( Handle, CachedSelectors.moveAsideDatabaseAtPath_reason_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), path, reason );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nonRetainedCachedRecordForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nonRetainedCachedRecordForKey_( Handle, CachedSelectors.nonRetainedCachedRecordForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_AddRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddRecord_( Handle, CachedSelectors.nts_AddRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_AddRecordsOfClass_fromDictionaryRepresentations_recordsByUniqueId_( NObjective.RuntimeClass @class, NObjective.RuntimeObject fromDictionaryRepresentations, NObjective.RuntimeObject recordsByUniqueId ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddRecordsOfClass_fromDictionaryRepresentations_recordsByUniqueId_( Handle, CachedSelectors.nts_AddRecordsOfClass_fromDictionaryRepresentations_recordsByUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, fromDictionaryRepresentations, recordsByUniqueId );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_AddToModifiedRecordsList_( NObjective.RuntimeObject list ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_AddToModifiedRecordsList_( Handle, CachedSelectors.nts_AddToModifiedRecordsList_, out ___occuredException, sizeof( NObjective.RuntimeObject ), list );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_AllRecordsForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AllRecordsForClass_( Handle, CachedSelectors.nts_AllRecordsForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_CachedRecordForUniqueId_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_CachedRecordForUniqueId_( Handle, CachedSelectors.nts_CachedRecordForUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_CachedRecordWithUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_CachedRecordWithUID_( Handle, CachedSelectors.nts_CachedRecordWithUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_Cleanup() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_Cleanup( Handle, CachedSelectors.nts_Cleanup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_ClearCachedRecordsByUniqueId() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ClearCachedRecordsByUniqueId( Handle, CachedSelectors.nts_ClearCachedRecordsByUniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_ClearCachedRecordsForUniqueIds_( NObjective.RuntimeObject ids ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ClearCachedRecordsForUniqueIds_( Handle, CachedSelectors.nts_ClearCachedRecordsForUniqueIds_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ids );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_ContactsMatchingNormalizedEmailAddress_inSubscribedContent_context_( NObjective.RuntimeObject address, char inSubscribedContent, NObjective.RuntimeObject context ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ContactsMatchingNormalizedEmailAddress_inSubscribedContent_context_( Handle, CachedSelectors.nts_ContactsMatchingNormalizedEmailAddress_inSubscribedContent_context_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), address, inSubscribedContent, context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_ConvertPumaAddressBook() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ConvertPumaAddressBook( Handle, CachedSelectors.nts_ConvertPumaAddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_dbCache() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_dbCache( Handle, CachedSelectors.nts_dbCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_Disconnect_( NObjective.RuntimeObject disconnect ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_Disconnect_( Handle, CachedSelectors.nts_Disconnect_, out ___occuredException, sizeof( NObjective.RuntimeObject ), disconnect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_DoesPropertyExist_forClass_( NObjective.RuntimeObject exist, NObjective.RuntimeClass forClass ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_DoesPropertyExist_forClass_( Handle, CachedSelectors.nts_DoesPropertyExist_forClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), exist, forClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_DoInitialImports() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_DoInitialImports( Handle, CachedSelectors.nts_DoInitialImports, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_GroupsMatchingNormalizedName_inSubscribedContent_context_( NObjective.RuntimeObject name, char inSubscribedContent, NObjective.RuntimeObject context ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_GroupsMatchingNormalizedName_inSubscribedContent_context_( Handle, CachedSelectors.nts_GroupsMatchingNormalizedName_inSubscribedContent_context_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), name, inSubscribedContent, context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_GroupsThatUseGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_GroupsThatUseGroup_( Handle, CachedSelectors.nts_GroupsThatUseGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_hasUnsavedChanges() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_hasUnsavedChanges( Handle, CachedSelectors.nts_hasUnsavedChanges, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_hasUnsavedMailRecentsChanges() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_hasUnsavedMailRecentsChanges( Handle, CachedSelectors.nts_hasUnsavedMailRecentsChanges, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_ImportAddressBookFromMetaKitIfNeeded() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ImportAddressBookFromMetaKitIfNeeded( Handle, CachedSelectors.nts_ImportAddressBookFromMetaKitIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_ImportFromMetaKitDatabaseAtPath_andSave_( NObjective.RuntimeObject path, char andSave ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ImportFromMetaKitDatabaseAtPath_andSave_( Handle, CachedSelectors.nts_ImportFromMetaKitDatabaseAtPath_andSave_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), path, andSave );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_ImportFromMetaKitDatabaseAtPath_includeMailRecents_includeAddressBook_andSave_( NObjective.RuntimeObject path, char includeMailRecents, char includeAddressBook, char andSave ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ImportFromMetaKitDatabaseAtPath_includeMailRecents_includeAddressBook_andSave_( Handle, CachedSelectors.nts_ImportFromMetaKitDatabaseAtPath_includeMailRecents_includeAddressBook_andSave_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ), path, includeMailRecents, includeAddressBook, andSave );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_ImportMacBuddyMeCard() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ImportMacBuddyMeCard( Handle, CachedSelectors.nts_ImportMacBuddyMeCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_ImportMailRecentsFromMetaKitIfNeededIntoContext_( NObjective.RuntimeObject context ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ImportMailRecentsFromMetaKitIfNeededIntoContext_( Handle, CachedSelectors.nts_ImportMailRecentsFromMetaKitIfNeededIntoContext_, out ___occuredException, sizeof( NObjective.RuntimeObject ), context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_ImportTipCards() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ImportTipCards( Handle, CachedSelectors.nts_ImportTipCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_InitAddressBookWithDatabaseDirectory_( NObjective.RuntimeObject directory ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitAddressBookWithDatabaseDirectory_( Handle, CachedSelectors.nts_InitAddressBookWithDatabaseDirectory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_InitDefaultContactManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitDefaultContactManager( Handle, CachedSelectors.nts_InitDefaultContactManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_InitializeDatabase() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitializeDatabase( Handle, CachedSelectors.nts_InitializeDatabase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_IsPublished() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsPublished( Handle, CachedSelectors.nts_IsPublished, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_LaunchABDIfNeeded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_LaunchABDIfNeeded( Handle, CachedSelectors.nts_LaunchABDIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_mailRecentsManagedObjectContext() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_mailRecentsManagedObjectContext( Handle, CachedSelectors.nts_mailRecentsManagedObjectContext, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_managedObjectContextWithModel_databasePath_dataType_version_loadFailure_( NObjective.RuntimeObject model, NObjective.RuntimeObject databasePath, int dataType, float version, System.IntPtr loadFailure ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_managedObjectContextWithModel_databasePath_dataType_version_loadFailure_( Handle, CachedSelectors.nts_managedObjectContextWithModel_databasePath_dataType_version_loadFailure_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( float ) + sizeof( System.IntPtr ), model, databasePath, dataType, version, loadFailure );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_Me() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Me( Handle, CachedSelectors.nts_Me, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_migrateMailRecentsToCurrentStoreWithPath_model_error_( NObjective.RuntimeObject path, NObjective.RuntimeObject model, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_migrateMailRecentsToCurrentStoreWithPath_model_error_( Handle, CachedSelectors.nts_migrateMailRecentsToCurrentStoreWithPath_model_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), path, model, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_migrateUniqueMailRecentsFromV2SQLiteStore_toBinaryV3Store_inContext_error_( NObjective.RuntimeObject store, NObjective.RuntimeObject toBinaryV3Store, NObjective.RuntimeObject inContext, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_migrateUniqueMailRecentsFromV2SQLiteStore_toBinaryV3Store_inContext_error_( Handle, CachedSelectors.nts_migrateUniqueMailRecentsFromV2SQLiteStore_toBinaryV3Store_inContext_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), store, toBinaryV3Store, inContext, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_OpenContactManagerWithMode_cacheSchema_( int mode, char cacheSchema ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_OpenContactManagerWithMode_cacheSchema_( Handle, CachedSelectors.nts_OpenContactManagerWithMode_cacheSchema_, out ___occuredException, sizeof( int ) + sizeof( char ), mode, cacheSchema );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_People() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_People( Handle, CachedSelectors.nts_People, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_PropertyTypesForRecordOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_PropertyTypesForRecordOfClass_( Handle, CachedSelectors.nts_PropertyTypesForRecordOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_Reconnect() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_Reconnect( Handle, CachedSelectors.nts_Reconnect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_RecordForUniqueId_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RecordForUniqueId_( Handle, CachedSelectors.nts_RecordForUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_RegisterQualifiedTable_forTable_hashView_( NObjective.RuntimeObject table, NObjective.RuntimeObject forTable, char hashView ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_RegisterQualifiedTable_forTable_hashView_( Handle, CachedSelectors.nts_RegisterQualifiedTable_forTable_hashView_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), table, forTable, hashView );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_RemoveRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveRecord_( Handle, CachedSelectors.nts_RemoveRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_RemoveRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveRecords_( Handle, CachedSelectors.nts_RemoveRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_RestoreFromMetaDataIfNeeded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RestoreFromMetaDataIfNeeded( Handle, CachedSelectors.nts_RestoreFromMetaDataIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_Save() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Save( Handle, CachedSelectors.nts_Save, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SaveAndTriggerSync_updateModificationDate_( char sync, NObjective.RuntimeObject updateModificationDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SaveAndTriggerSync_updateModificationDate_( Handle, CachedSelectors.nts_SaveAndTriggerSync_updateModificationDate_, out ___occuredException, sizeof( char ) + sizeof( NObjective.RuntimeObject ), sync, updateModificationDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SaveWithFileLock_( char @lock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SaveWithFileLock_( Handle, CachedSelectors.nts_SaveWithFileLock_, out ___occuredException, sizeof( char ), @lock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SaveWithFileLock_triggerSync_updateModificationDate_( char @lock, char triggerSync, NObjective.RuntimeObject updateModificationDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SaveWithFileLock_triggerSync_updateModificationDate_( Handle, CachedSelectors.nts_SaveWithFileLock_triggerSync_updateModificationDate_, out ___occuredException, sizeof( char ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), @lock, triggerSync, updateModificationDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_SchemaForTable_( NObjective.RuntimeObject table ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SchemaForTable_( Handle, CachedSelectors.nts_SchemaForTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), table );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_SendAddressBookDidSaveNotificationsWithPublicUserInfo_privateUserInfo_privateTablesChanged_( NObjective.RuntimeObject info, NObjective.RuntimeObject privateUserInfo, char privateTablesChanged ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SendAddressBookDidSaveNotificationsWithPublicUserInfo_privateUserInfo_privateTablesChanged_( Handle, CachedSelectors.nts_SendAddressBookDidSaveNotificationsWithPublicUserInfo_privateUserInfo_privateTablesChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), info, privateUserInfo, privateTablesChanged );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SetCachedRecord_forUniqueId_( NObjective.RuntimeObject record, NObjective.RuntimeObject forUniqueId ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetCachedRecord_forUniqueId_( Handle, CachedSelectors.nts_SetCachedRecord_forUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, forUniqueId );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SetMe_( NObjective.RuntimeObject me ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetMe_( Handle, CachedSelectors.nts_SetMe_, out ___occuredException, sizeof( NObjective.RuntimeObject ), me );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SetNeedsToRestoreAddressBookFromMetaData_( char data ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetNeedsToRestoreAddressBookFromMetaData_( Handle, CachedSelectors.nts_SetNeedsToRestoreAddressBookFromMetaData_, out ___occuredException, sizeof( char ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int nts_ShareCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ShareCount( Handle, CachedSelectors.nts_ShareCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_ShouldLaunchABDForListening() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ShouldLaunchABDForListening( Handle, CachedSelectors.nts_ShouldLaunchABDForListening, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_shouldUpdateDateRelatedSmartGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_shouldUpdateDateRelatedSmartGroups( Handle, CachedSelectors.nts_shouldUpdateDateRelatedSmartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_SmartGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SmartGroups( Handle, CachedSelectors.nts_SmartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_SubscribedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SubscribedPeople( Handle, CachedSelectors.nts_SubscribedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_SubscriptionListChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SubscriptionListChanged( Handle, CachedSelectors.nts_SubscriptionListChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int nts_SyncCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SyncCount( Handle, CachedSelectors.nts_SyncCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_syncGroupSmartGroupPropertiesWithLock_( char @lock ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_syncGroupSmartGroupPropertiesWithLock_( Handle, CachedSelectors.nts_syncGroupSmartGroupPropertiesWithLock_, out ___occuredException, sizeof( char ), @lock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int nts_TypeOfProperty_forTable_( NObjective.RuntimeObject property, NObjective.RuntimeObject forTable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_TypeOfProperty_forTable_( Handle, CachedSelectors.nts_TypeOfProperty_forTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, forTable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_UniqueIdsForRecordsInSet_( NObjective.RuntimeObject @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_UniqueIdsForRecordsInSet_( Handle, CachedSelectors.nts_UniqueIdsForRecordsInSet_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_UpdateDatabaseSchemasWithLock_( char @lock ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_UpdateDatabaseSchemasWithLock_( Handle, CachedSelectors.nts_UpdateDatabaseSchemasWithLock_, out ___occuredException, sizeof( char ), @lock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_UpdateDateRelatedSmartGroups() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_UpdateDateRelatedSmartGroups( Handle, CachedSelectors.nts_UpdateDateRelatedSmartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_VerifyDotMacAccountMatchesSharedContent() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_VerifyDotMacAccountMatchesSharedContent( Handle, CachedSelectors.nts_VerifyDotMacAccountMatchesSharedContent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray people() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.people( Handle, CachedSelectors.people, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject peopleAtRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peopleAtRemoteLocation_( Handle, CachedSelectors.peopleAtRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint peopleCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peopleCount( Handle, CachedSelectors.peopleCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public void prefetchDataForRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			NativeMethods.prefetchDataForRecords_( Handle, CachedSelectors.prefetchDataForRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char preparePublicChangeNotification_privateChangeNotification_couldAffectSyncing_couldAffectSharing_privateTablesChanged_modificationDate_( NObjective.RuntimeObject notification, NObjective.RuntimeObject privateChangeNotification, System.IntPtr couldAffectSyncing, System.IntPtr couldAffectSharing, System.IntPtr privateTablesChanged, NObjective.RuntimeObject modificationDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preparePublicChangeNotification_privateChangeNotification_couldAffectSyncing_couldAffectSharing_privateTablesChanged_modificationDate_( Handle, CachedSelectors.preparePublicChangeNotification_privateChangeNotification_couldAffectSyncing_couldAffectSharing_privateTablesChanged_modificationDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ), notification, privateChangeNotification, couldAffectSyncing, couldAffectSharing, privateTablesChanged, modificationDate
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject propertyTypesForRecordOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyTypesForRecordOfClass_( Handle, CachedSelectors.propertyTypesForRecordOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void rebroadcastUserPictureDidChange() {
			RuntimeObject ___occuredException;
			NativeMethods.rebroadcastUserPictureDidChange( Handle, CachedSelectors.rebroadcastUserPictureDidChange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string recordClassFromUniqueId_( string id ) {
			RuntimeObject ___occuredException;
			var ___wrappedid = Runtime.CreateStringProxy( id );
			var ___result = NativeMethods.recordClassFromUniqueId_( Handle, CachedSelectors.recordClassFromUniqueId_, out ___occuredException, sizeof( IntPtr ), ___wrappedid );
			Runtime.ReleaseNativeObject( ___wrappedid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject recordClassFromUniqueID_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordClassFromUniqueID_( Handle, CachedSelectors.recordClassFromUniqueID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ABRecord recordForUniqueId_( string id ) {
			RuntimeObject ___occuredException;
			var ___wrappedid = Runtime.CreateStringProxy( id );
			var ___result = NativeMethods.recordForUniqueId_( Handle, CachedSelectors.recordForUniqueId_, out ___occuredException, sizeof( IntPtr ), ___wrappedid );
			Runtime.ReleaseNativeObject( ___wrappedid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABRecord( ___result );
		}
		unsafe public NObjective.RuntimeObject recordsForClass_matchingPredicate_prefetchingKeyPaths_takeLock_( NObjective.RuntimeClass @class, NObjective.RuntimeObject matchingPredicate, NObjective.RuntimeObject prefetchingKeyPaths, char takeLock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordsForClass_matchingPredicate_prefetchingKeyPaths_takeLock_( Handle, CachedSelectors.recordsForClass_matchingPredicate_prefetchingKeyPaths_takeLock_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), @class, matchingPredicate, prefetchingKeyPaths, takeLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject recordsMatchingMailAddressWithEmail_fullName_firstName_lastName_inSubscribedContent_( NObjective.RuntimeObject email, NObjective.RuntimeObject fullName, NObjective.RuntimeObject firstName, NObjective.RuntimeObject lastName, char inSubscribedContent ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordsMatchingMailAddressWithEmail_fullName_firstName_lastName_inSubscribedContent_( Handle, CachedSelectors.recordsMatchingMailAddressWithEmail_fullName_firstName_lastName_inSubscribedContent_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), email, fullName, firstName, lastName, inSubscribedContent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSArray recordsMatchingSearchElement_( ABSearchElement element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordsMatchingSearchElement_( Handle, CachedSelectors.recordsMatchingSearchElement_, out ___occuredException, sizeof( ABSearchElement ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject recordsMatchingSearchElement_takeLock_( NObjective.RuntimeObject element, char takeLock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordsMatchingSearchElement_takeLock_( Handle, CachedSelectors.recordsMatchingSearchElement_takeLock_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), element, takeLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject recordsMatchingSearchElementNoHinting_( NObjective.RuntimeObject hinting ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordsMatchingSearchElementNoHinting_( Handle, CachedSelectors.recordsMatchingSearchElementNoHinting_, out ___occuredException, sizeof( NObjective.RuntimeObject ), hinting );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject recordsMatchingSearchElementNoHinting_takeLock_( NObjective.RuntimeObject hinting, char takeLock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordsMatchingSearchElementNoHinting_takeLock_( Handle, CachedSelectors.recordsMatchingSearchElementNoHinting_takeLock_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), hinting, takeLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool removeRecord_( ABRecord record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeRecord_( Handle, CachedSelectors.removeRecord_, out ___occuredException, sizeof( ABRecord ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject removeRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeRecords_( Handle, CachedSelectors.removeRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void resetRecordsWithUniqueIds_( NObjective.RuntimeObject ids ) {
			RuntimeObject ___occuredException;
			NativeMethods.resetRecordsWithUniqueIds_( Handle, CachedSelectors.resetRecordsWithUniqueIds_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ids );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void revertAndCloseManagedObjectContext_( NObjective.RuntimeObject context ) {
			RuntimeObject ___occuredException;
			NativeMethods.revertAndCloseManagedObjectContext_( Handle, CachedSelectors.revertAndCloseManagedObjectContext_, out ___occuredException, sizeof( NObjective.RuntimeObject ), context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char revertToBackupFromPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.revertToBackupFromPath_( Handle, CachedSelectors.revertToBackupFromPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool save() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.save( Handle, CachedSelectors.save, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool saveAndReturnError_( ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.saveAndReturnError_( Handle, CachedSelectors.saveAndReturnError_, out ___occuredException, sizeof( IntPtr ), ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char saveAndTriggerSync_udpateModificationDate_( char sync, NObjective.RuntimeObject udpateModificationDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.saveAndTriggerSync_udpateModificationDate_( Handle, CachedSelectors.saveAndTriggerSync_udpateModificationDate_, out ___occuredException, sizeof( char ) + sizeof( NObjective.RuntimeObject ), sync, udpateModificationDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject searchIndexForRecordsMatching_selectedGroup_( NObjective.RuntimeObject matching, NObjective.RuntimeObject selectedGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchIndexForRecordsMatching_selectedGroup_( Handle, CachedSelectors.searchIndexForRecordsMatching_selectedGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), matching, selectedGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char set_containsEntity_( NObjective.RuntimeObject @set, NObjective.RuntimeObject containsEntity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.set_containsEntity_( Handle, CachedSelectors.set_containsEntity_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @set, containsEntity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDefaultCountryCode_( NObjective.RuntimeObject code ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultCountryCode_( Handle, CachedSelectors.setDefaultCountryCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMe_( ABPerson me ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMe_( Handle, CachedSelectors.setMe_, out ___occuredException, sizeof( ABPerson ), me );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNonRetainedCachedRecord_forKey_( NObjective.RuntimeObject record, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNonRetainedCachedRecord_forKey_( Handle, CachedSelectors.setNonRetainedCachedRecord_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShareCount_( int count ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShareCount_( Handle, CachedSelectors.setShareCount_, out ___occuredException, sizeof( int ), count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSyncAnchorsFromString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSyncAnchorsFromString_( Handle, CachedSelectors.setSyncAnchorsFromString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSyncCount_( int count ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSyncCount_( Handle, CachedSelectors.setSyncCount_, out ___occuredException, sizeof( int ), count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int shareCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shareCount( Handle, CachedSelectors.shareCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject smartGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smartGroups( Handle, CachedSelectors.smartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject snapshotDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.snapshotDate( Handle, CachedSelectors.snapshotDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject storeKeyForDatabaseDataType_( int type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.storeKeyForDatabaseDataType_( Handle, CachedSelectors.storeKeyForDatabaseDataType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subscribedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subscribedGroups( Handle, CachedSelectors.subscribedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subscribedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subscribedPeople( Handle, CachedSelectors.subscribedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint subscribedPeopleCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subscribedPeopleCount( Handle, CachedSelectors.subscribedPeopleCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public NObjective.RuntimeObject subscriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subscriptions( Handle, CachedSelectors.subscriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject syncAnchors() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.syncAnchors( Handle, CachedSelectors.syncAnchors, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int syncCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.syncCount( Handle, CachedSelectors.syncCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int typeOfProperty_forTable_( NObjective.RuntimeObject property, NObjective.RuntimeObject forTable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeOfProperty_forTable_( Handle, CachedSelectors.typeOfProperty_forTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, forTable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject uniqueIdentifiersFromRecordClassCollections_( NObjective.RuntimeObject collections ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueIdentifiersFromRecordClassCollections_( Handle, CachedSelectors.uniqueIdentifiersFromRecordClassCollections_, out ___occuredException, sizeof( NObjective.RuntimeObject ), collections );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void updateDateRelatedSmartGroups() {
			RuntimeObject ___occuredException;
			NativeMethods.updateDateRelatedSmartGroups( Handle, CachedSelectors.updateDateRelatedSmartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updatePublicUserInfo_privateUserInfo_withRecords_userInfoKey_couldAffectSyncing_couldAffectSharing_privateTablesChanged_modificationDate_ignoreRecordsForKey_( NObjective.RuntimeObject info, NObjective.RuntimeObject privateUserInfo, NObjective.RuntimeObject withRecords, NObjective.RuntimeObject userInfoKey, System.IntPtr couldAffectSyncing, System.IntPtr couldAffectSharing, System.IntPtr privateTablesChanged, NObjective.RuntimeObject modificationDate, NObjective.RuntimeObject ignoreRecordsForKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.updatePublicUserInfo_privateUserInfo_withRecords_userInfoKey_couldAffectSyncing_couldAffectSharing_privateTablesChanged_modificationDate_ignoreRecordsForKey_( Handle, CachedSelectors.updatePublicUserInfo_privateUserInfo_withRecords_userInfoKey_couldAffectSyncing_couldAffectSharing_privateTablesChanged_modificationDate_ignoreRecordsForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), info, privateUserInfo, withRecords, userInfoKey, couldAffectSyncing, couldAffectSharing, 
			privateTablesChanged, modificationDate, ignoreRecordsForKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void validateMetaData() {
			RuntimeObject ___occuredException;
			NativeMethods.validateMetaData( Handle, CachedSelectors.validateMetaData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int version() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.version( Handle, CachedSelectors.version, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr __addressBookCoreDataDatabaseFile( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr __addressBookDataFile( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr __addressBookDirectory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr __addressBookImagesDirectory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr __addressBookLockFile( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr __addressBookSaveFile( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char __isUsingDefaultAddressBookDirectory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr __mailRecentsCoreDataDatabaseFile( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr __recordClassFromUniqueId_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abDidRevertFromBackupCompleteResetContextAndUnlock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject unlock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abGlobalAPILockInFile_line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr file, uint line );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abGlobalAPITryLockInFile_line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr file, uint line );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abGlobalAPIUnlockInFile_line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr file, uint line );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abGlobalMailRecentAPILockInFile_line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr file, uint line );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abGlobalMailRecentAPIUnlockInFile_line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr file, uint line );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abManagedObjectContextDidSave_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject save );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool addRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABRecord record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookCoreDataDatabaseFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookCoreDataDatabaseFileName( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookDatabaseFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookDataFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookImagesDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookLockFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookMetaDataDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookMetaKitDatabaseFileName( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookSaveFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBookWithDatabaseDirectory_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directory );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressFormats( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allUniqueIds( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allUniqueIdsWithModificationDates( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr autorelease( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr backupDatabaseToPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cacheCustomProperties_withRecordType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject properties, NObjective.RuntimeObject withRecordType );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cachedCustomPropertiesByNameForRecordType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr categories( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearCustomPropertyCaches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearTemporaryCaches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint countOfRecordsForClass_matchingPredicate_takeLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject matchingPredicate, char takeLock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr createCommonNotificationUserInfoDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void databaseChangedExternally_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject externally );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dbCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char dblCheckPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr defaultCountryCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int defaultNameOrdering( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr deltasSinceAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void disconnect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject disconnect );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char doesPropertyExist_forClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exist, NObjective.RuntimeClass forClass );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doValidateMetaData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fetchAllRecordsForClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char fileManager_shouldProceedAfterError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject shouldProceedAfterError );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void finishAddingGroupDictionaryRepresentations_recordsByUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representations, NObjective.RuntimeObject recordsByUniqueId );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr formattedAddressFromDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void frameworkPrefsChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groupsAtRemoteLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groupsThatUseGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool hasUnsavedChanges( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char importFromMetaKitDatabaseAtPath_andSave_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, char andSave );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void initialize_MailRecents( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isABCoreDataImportCompleted( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isInert( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isPredicateSearchingEnabled( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isPublished( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isSharedInstance( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isUsingDefaultAddressBookDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isUsingMailRecents( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr lastImportGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void launchABDForSyncing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char launchABDIfNeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr localizedDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr logs( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr mailRecentForEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr mailRecents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr mailRecentsCoreDataDatabaseFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr mailRecentsCoreDataDatabaseFileName( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr mailRecentsMatching_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr managedObjectContext( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markABCoreDataImportCompleted( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr me( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char migrateSpotlightMetadataFiles_removingOrphansUsingRootedRecordIdentifiers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject files, NObjective.RuntimeObject removingOrphansUsingRootedRecordIdentifiers );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void moveAsideDatabaseAtPath_reason_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, NObjective.RuntimeObject reason );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nonRetainedCachedRecordForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_AddRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_AddRecordsOfClass_fromDictionaryRepresentations_recordsByUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject fromDictionaryRepresentations, NObjective.RuntimeObject recordsByUniqueId );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_AddressBook( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_AddressBookWithDatabaseDirectory_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directory );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_AddToModifiedRecordsList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_AllRecordsForClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_CachedRecordForUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_CachedRecordWithUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_Cleanup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ClearCachedRecordsByUniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ClearCachedRecordsForUniqueIds_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ids );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_ContactsMatchingNormalizedEmailAddress_inSubscribedContent_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject address, char inSubscribedContent, NObjective.RuntimeObject context );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ConvertPumaAddressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_CreateSharedAddressBook( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_dbCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_Disconnect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject disconnect );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_DoesPropertyExist_forClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exist, NObjective.RuntimeClass forClass );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_DoInitialImports( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_GroupsMatchingNormalizedName_inSubscribedContent_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, char inSubscribedContent, NObjective.RuntimeObject context );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_GroupsThatUseGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_hasSharedInstance( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_hasUnsavedChanges( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_hasUnsavedMailRecentsChanges( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ImportAddressBookFromMetaKitIfNeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_ImportFromMetaKitDatabaseAtPath_andSave_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, char andSave );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_ImportFromMetaKitDatabaseAtPath_includeMailRecents_includeAddressBook_andSave_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, char includeMailRecents, char includeAddressBook, char andSave );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ImportMacBuddyMeCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ImportMailRecentsFromMetaKitIfNeededIntoContext_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject context );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ImportTipCards( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_InitAddressBookWithDatabaseDirectory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directory );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_InitDefaultContactManager( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_InitializeDatabase( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_IsPublished( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_LaunchABDIfNeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_mailRecentsManagedObjectContext( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_managedObjectContextWithModel_databasePath_dataType_version_loadFailure_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model, NObjective.RuntimeObject databasePath, int dataType, float version, System.IntPtr loadFailure );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_Me( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_migrateMailRecentsToCurrentStoreWithPath_model_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, NObjective.RuntimeObject model, System.IntPtr error );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_migrateUniqueMailRecentsFromV2SQLiteStore_toBinaryV3Store_inContext_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject store, NObjective.RuntimeObject toBinaryV3Store, NObjective.RuntimeObject inContext, System.IntPtr error );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_OpenContactManagerWithMode_cacheSchema_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int mode, char cacheSchema );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_People( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_PropertyTypesForRecordOfClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_Reconnect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_RecordForUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_RegisterQualifiedTable_forTable_hashView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject table, NObjective.RuntimeObject forTable, char hashView );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_RemoveRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_RemoveRecords_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_RestoreFromMetaDataIfNeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_Save( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_SaveAndTriggerSync_updateModificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char sync, NObjective.RuntimeObject updateModificationDate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_SaveWithFileLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @lock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_SaveWithFileLock_triggerSync_updateModificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @lock, char triggerSync, NObjective.RuntimeObject updateModificationDate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_SchemaForTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject table );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_SendAddressBookDidSaveNotificationsWithPublicUserInfo_privateUserInfo_privateTablesChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info, NObjective.RuntimeObject privateUserInfo, char privateTablesChanged );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_SetCachedRecord_forUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject forUniqueId );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_SetMe_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject me );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_SetNeedsToRestoreAddressBookFromMetaData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char data );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int nts_ShareCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_SharedAddressBook( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_ShouldLaunchABDForListening( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_shouldUpdateDateRelatedSmartGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_SmartGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_SubscribedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_SubscriptionListChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int nts_SyncCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_syncGroupSmartGroupPropertiesWithLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @lock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int nts_TypeOfProperty_forTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject forTable );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_UniqueIdsForRecordsInSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @set );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_UpdateDatabaseSchemasWithLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @lock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_UpdateDateRelatedSmartGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_VerifyDotMacAccountMatchesSharedContent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr people( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr peopleAtRemoteLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint peopleCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void prefetchDataForRecords_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char preparePublicChangeNotification_privateChangeNotification_couldAffectSyncing_couldAffectSharing_privateTablesChanged_modificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject notification, NObjective.RuntimeObject privateChangeNotification, System.IntPtr couldAffectSyncing, System.IntPtr couldAffectSharing, System.IntPtr privateTablesChanged, NObjective.RuntimeObject modificationDate
			 );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyTypesForRecordOfClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void rebroadcastUserPictureDidChange( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordClassFromUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordClassFromUniqueID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordForUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordsForClass_matchingPredicate_prefetchingKeyPaths_takeLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject matchingPredicate, NObjective.RuntimeObject prefetchingKeyPaths, char takeLock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordsMatchingMailAddressWithEmail_fullName_firstName_lastName_inSubscribedContent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email, NObjective.RuntimeObject fullName, NObjective.RuntimeObject firstName, NObjective.RuntimeObject lastName, char inSubscribedContent );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordsMatchingSearchElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABSearchElement element );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordsMatchingSearchElement_takeLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, char takeLock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordsMatchingSearchElementNoHinting_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject hinting );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordsMatchingSearchElementNoHinting_takeLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject hinting, char takeLock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool removeRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABRecord record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr removeRecords_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetRecordsWithUniqueIds_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ids );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void revertAndCloseManagedObjectContext_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject context );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char revertToBackupFromPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool save( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool saveAndReturnError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ref NSError error );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char saveAndTriggerSync_udpateModificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char sync, NObjective.RuntimeObject udpateModificationDate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchIndexForRecordsMatching_selectedGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching, NObjective.RuntimeObject selectedGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char set_containsEntity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @set, NObjective.RuntimeObject containsEntity );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAddressBookDirectory_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directory );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDefaultCountryCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject code );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIsInert_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char inert );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIsUsingMailRecents_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char recents );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMe_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABPerson me );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setNonRetainedCachedRecord_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShareCount_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int count );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShouldCreateEmptyDatabase_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char database );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShouldDisableSync_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char sync );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSyncAnchorsFromString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSyncCount_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int count );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int shareCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedAddressBook( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool shouldCreateEmptyDatabase( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool shouldDisableSync( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr smartGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr snapshotDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr storeKeyForDatabaseDataType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subscribedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subscribedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint subscribedPeopleCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subscriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr syncAnchors( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int syncCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int typeOfProperty_forTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject forTable );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uniqueIdentifiersFromRecordClassCollections_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject collections );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateDateRelatedSmartGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updatePublicUserInfo_privateUserInfo_withRecords_userInfoKey_couldAffectSyncing_couldAffectSharing_privateTablesChanged_modificationDate_ignoreRecordsForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info, NObjective.RuntimeObject privateUserInfo, NObjective.RuntimeObject withRecords, NObjective.RuntimeObject userInfoKey, System.IntPtr couldAffectSyncing, System.IntPtr couldAffectSharing, 
			System.IntPtr privateTablesChanged, NObjective.RuntimeObject modificationDate, NObjective.RuntimeObject ignoreRecordsForKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void validateMetaData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int version( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector __addressBookCoreDataDatabaseFile = "__addressBookCoreDataDatabaseFile";
			public static readonly Selector __addressBookDataFile = "__addressBookDataFile";
			public static readonly Selector __addressBookDirectory = "__addressBookDirectory";
			public static readonly Selector __addressBookImagesDirectory = "__addressBookImagesDirectory";
			public static readonly Selector __addressBookLockFile = "__addressBookLockFile";
			public static readonly Selector __addressBookSaveFile = "__addressBookSaveFile";
			public static readonly Selector __isUsingDefaultAddressBookDirectory = "__isUsingDefaultAddressBookDirectory";
			public static readonly Selector __mailRecentsCoreDataDatabaseFile = "__mailRecentsCoreDataDatabaseFile";
			public static readonly Selector __recordClassFromUniqueId_ = "__recordClassFromUniqueId:";
			public static readonly Selector abDidRevertFromBackupCompleteResetContextAndUnlock_ = "abDidRevertFromBackupCompleteResetContextAndUnlock:";
			public static readonly Selector abGlobalAPILockInFile_line_ = "abGlobalAPILockInFile:line:";
			public static readonly Selector abGlobalAPITryLockInFile_line_ = "abGlobalAPITryLockInFile:line:";
			public static readonly Selector abGlobalAPIUnlockInFile_line_ = "abGlobalAPIUnlockInFile:line:";
			public static readonly Selector abGlobalMailRecentAPILockInFile_line_ = "abGlobalMailRecentAPILockInFile:line:";
			public static readonly Selector abGlobalMailRecentAPIUnlockInFile_line_ = "abGlobalMailRecentAPIUnlockInFile:line:";
			public static readonly Selector abManagedObjectContextDidSave_ = "abManagedObjectContextDidSave:";
			public static readonly Selector addRecord_ = "addRecord:";
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector addressBookCoreDataDatabaseFile = "addressBookCoreDataDatabaseFile";
			public static readonly Selector addressBookCoreDataDatabaseFileName = "addressBookCoreDataDatabaseFileName";
			public static readonly Selector addressBookDatabaseFile = "addressBookDatabaseFile";
			public static readonly Selector addressBookDataFile = "addressBookDataFile";
			public static readonly Selector addressBookDirectory = "addressBookDirectory";
			public static readonly Selector addressBookImagesDirectory = "addressBookImagesDirectory";
			public static readonly Selector addressBookLockFile = "addressBookLockFile";
			public static readonly Selector addressBookMetaDataDirectory = "addressBookMetaDataDirectory";
			public static readonly Selector addressBookMetaKitDatabaseFileName = "addressBookMetaKitDatabaseFileName";
			public static readonly Selector addressBookSaveFile = "addressBookSaveFile";
			public static readonly Selector addressBookWithDatabaseDirectory_ = "addressBookWithDatabaseDirectory:";
			public static readonly Selector addressFormats = "addressFormats";
			public static readonly Selector allGroup = "allGroup";
			public static readonly Selector allUniqueIds = "allUniqueIds";
			public static readonly Selector allUniqueIdsWithModificationDates = "allUniqueIdsWithModificationDates";
			public static readonly Selector autorelease = "autorelease";
			public static readonly Selector backupDatabaseToPath_ = "backupDatabaseToPath:";
			public static readonly Selector cacheCustomProperties_withRecordType_ = "cacheCustomProperties:withRecordType:";
			public static readonly Selector cachedCustomPropertiesByNameForRecordType_ = "cachedCustomPropertiesByNameForRecordType:";
			public static readonly Selector categories = "categories";
			public static readonly Selector clearCustomPropertyCaches = "clearCustomPropertyCaches";
			public static readonly Selector clearTemporaryCaches = "clearTemporaryCaches";
			public static readonly Selector countOfRecordsForClass_matchingPredicate_takeLock_ = "countOfRecordsForClass:matchingPredicate:takeLock:";
			public static readonly Selector createCommonNotificationUserInfoDictionary = "createCommonNotificationUserInfoDictionary";
			public static readonly Selector databaseChangedExternally_ = "databaseChangedExternally:";
			public static readonly Selector dbCache = "dbCache";
			public static readonly Selector dblCheckPath_ = "dblCheckPath:";
			public static readonly Selector defaultCountryCode = "defaultCountryCode";
			public static readonly Selector defaultNameOrdering = "defaultNameOrdering";
			public static readonly Selector deltasSinceAddressBook_ = "deltasSinceAddressBook:";
			public static readonly Selector disconnect_ = "disconnect:";
			public static readonly Selector doesPropertyExist_forClass_ = "doesPropertyExist:forClass:";
			public static readonly Selector doValidateMetaData = "doValidateMetaData";
			public static readonly Selector fetchAllRecordsForClass_ = "fetchAllRecordsForClass:";
			public static readonly Selector fileManager_shouldProceedAfterError_ = "fileManager:shouldProceedAfterError:";
			public static readonly Selector finishAddingGroupDictionaryRepresentations_recordsByUniqueId_ = "finishAddingGroupDictionaryRepresentations:recordsByUniqueId:";
			public static readonly Selector formattedAddressFromDictionary_ = "formattedAddressFromDictionary:";
			public static readonly Selector frameworkPrefsChanged_ = "frameworkPrefsChanged:";
			public static readonly Selector groups = "groups";
			public static readonly Selector groupsAtRemoteLocation_ = "groupsAtRemoteLocation:";
			public static readonly Selector groupsThatUseGroup_ = "groupsThatUseGroup:";
			public static readonly Selector hasUnsavedChanges = "hasUnsavedChanges";
			public static readonly Selector importFromMetaKitDatabaseAtPath_andSave_ = "importFromMetaKitDatabaseAtPath:andSave:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector initialize_MailRecents = "initialize_MailRecents";
			public static readonly Selector isABCoreDataImportCompleted = "isABCoreDataImportCompleted";
			public static readonly Selector isInert = "isInert";
			public static readonly Selector isPredicateSearchingEnabled = "isPredicateSearchingEnabled";
			public static readonly Selector isPublished = "isPublished";
			public static readonly Selector isSharedInstance = "isSharedInstance";
			public static readonly Selector isUsingDefaultAddressBookDirectory = "isUsingDefaultAddressBookDirectory";
			public static readonly Selector isUsingMailRecents = "isUsingMailRecents";
			public static readonly Selector lastImportGroup = "lastImportGroup";
			public static readonly Selector launchABDForSyncing = "launchABDForSyncing";
			public static readonly Selector launchABDIfNeeded = "launchABDIfNeeded";
			public static readonly Selector localizedDefaults = "localizedDefaults";
			public static readonly Selector logs = "logs";
			public static readonly Selector mailRecentForEmail_ = "mailRecentForEmail:";
			public static readonly Selector mailRecents = "mailRecents";
			public static readonly Selector mailRecentsCoreDataDatabaseFile = "mailRecentsCoreDataDatabaseFile";
			public static readonly Selector mailRecentsCoreDataDatabaseFileName = "mailRecentsCoreDataDatabaseFileName";
			public static readonly Selector mailRecentsMatching_ = "mailRecentsMatching:";
			public static readonly Selector managedObjectContext = "managedObjectContext";
			public static readonly Selector markABCoreDataImportCompleted = "markABCoreDataImportCompleted";
			public static readonly Selector me = "me";
			public static readonly Selector migrateSpotlightMetadataFiles_removingOrphansUsingRootedRecordIdentifiers_ = "migrateSpotlightMetadataFiles:removingOrphansUsingRootedRecordIdentifiers:";
			public static readonly Selector moveAsideDatabaseAtPath_reason_ = "moveAsideDatabaseAtPath:reason:";
			public static readonly Selector nonRetainedCachedRecordForKey_ = "nonRetainedCachedRecordForKey:";
			public static readonly Selector nts_AddRecord_ = "nts_AddRecord:";
			public static readonly Selector nts_AddRecordsOfClass_fromDictionaryRepresentations_recordsByUniqueId_ = "nts_AddRecordsOfClass:fromDictionaryRepresentations:recordsByUniqueId:";
			public static readonly Selector nts_AddressBook = "nts_AddressBook";
			public static readonly Selector nts_AddressBookWithDatabaseDirectory_ = "nts_AddressBookWithDatabaseDirectory:";
			public static readonly Selector nts_AddToModifiedRecordsList_ = "nts_AddToModifiedRecordsList:";
			public static readonly Selector nts_AllRecordsForClass_ = "nts_AllRecordsForClass:";
			public static readonly Selector nts_CachedRecordForUniqueId_ = "nts_CachedRecordForUniqueId:";
			public static readonly Selector nts_CachedRecordWithUID_ = "nts_CachedRecordWithUID:";
			public static readonly Selector nts_Cleanup = "nts_Cleanup";
			public static readonly Selector nts_ClearCachedRecordsByUniqueId = "nts_ClearCachedRecordsByUniqueId";
			public static readonly Selector nts_ClearCachedRecordsForUniqueIds_ = "nts_ClearCachedRecordsForUniqueIds:";
			public static readonly Selector nts_ContactsMatchingNormalizedEmailAddress_inSubscribedContent_context_ = "nts_ContactsMatchingNormalizedEmailAddress:inSubscribedContent:context:";
			public static readonly Selector nts_ConvertPumaAddressBook = "nts_ConvertPumaAddressBook";
			public static readonly Selector nts_CreateSharedAddressBook = "nts_CreateSharedAddressBook";
			public static readonly Selector nts_dbCache = "nts_dbCache";
			public static readonly Selector nts_Disconnect_ = "nts_Disconnect:";
			public static readonly Selector nts_DoesPropertyExist_forClass_ = "nts_DoesPropertyExist:forClass:";
			public static readonly Selector nts_DoInitialImports = "nts_DoInitialImports";
			public static readonly Selector nts_GroupsMatchingNormalizedName_inSubscribedContent_context_ = "nts_GroupsMatchingNormalizedName:inSubscribedContent:context:";
			public static readonly Selector nts_GroupsThatUseGroup_ = "nts_GroupsThatUseGroup:";
			public static readonly Selector nts_hasSharedInstance = "nts_hasSharedInstance";
			public static readonly Selector nts_hasUnsavedChanges = "nts_hasUnsavedChanges";
			public static readonly Selector nts_hasUnsavedMailRecentsChanges = "nts_hasUnsavedMailRecentsChanges";
			public static readonly Selector nts_ImportAddressBookFromMetaKitIfNeeded = "nts_ImportAddressBookFromMetaKitIfNeeded";
			public static readonly Selector nts_ImportFromMetaKitDatabaseAtPath_andSave_ = "nts_ImportFromMetaKitDatabaseAtPath:andSave:";
			public static readonly Selector nts_ImportFromMetaKitDatabaseAtPath_includeMailRecents_includeAddressBook_andSave_ = "nts_ImportFromMetaKitDatabaseAtPath:includeMailRecents:includeAddressBook:andSave:";
			public static readonly Selector nts_ImportMacBuddyMeCard = "nts_ImportMacBuddyMeCard";
			public static readonly Selector nts_ImportMailRecentsFromMetaKitIfNeededIntoContext_ = "nts_ImportMailRecentsFromMetaKitIfNeededIntoContext:";
			public static readonly Selector nts_ImportTipCards = "nts_ImportTipCards";
			public static readonly Selector nts_InitAddressBookWithDatabaseDirectory_ = "nts_InitAddressBookWithDatabaseDirectory:";
			public static readonly Selector nts_InitDefaultContactManager = "nts_InitDefaultContactManager";
			public static readonly Selector nts_InitializeDatabase = "nts_InitializeDatabase";
			public static readonly Selector nts_IsPublished = "nts_IsPublished";
			public static readonly Selector nts_LaunchABDIfNeeded = "nts_LaunchABDIfNeeded";
			public static readonly Selector nts_mailRecentsManagedObjectContext = "nts_mailRecentsManagedObjectContext";
			public static readonly Selector nts_managedObjectContextWithModel_databasePath_dataType_version_loadFailure_ = "nts_managedObjectContextWithModel:databasePath:dataType:version:loadFailure:";
			public static readonly Selector nts_Me = "nts_Me";
			public static readonly Selector nts_migrateMailRecentsToCurrentStoreWithPath_model_error_ = "nts_migrateMailRecentsToCurrentStoreWithPath:model:error:";
			public static readonly Selector nts_migrateUniqueMailRecentsFromV2SQLiteStore_toBinaryV3Store_inContext_error_ = "nts_migrateUniqueMailRecentsFromV2SQLiteStore:toBinaryV3Store:inContext:error:";
			public static readonly Selector nts_OpenContactManagerWithMode_cacheSchema_ = "nts_OpenContactManagerWithMode:cacheSchema:";
			public static readonly Selector nts_People = "nts_People";
			public static readonly Selector nts_PropertyTypesForRecordOfClass_ = "nts_PropertyTypesForRecordOfClass:";
			public static readonly Selector nts_Reconnect = "nts_Reconnect";
			public static readonly Selector nts_RecordForUniqueId_ = "nts_RecordForUniqueId:";
			public static readonly Selector nts_RegisterQualifiedTable_forTable_hashView_ = "nts_RegisterQualifiedTable:forTable:hashView:";
			public static readonly Selector nts_RemoveRecord_ = "nts_RemoveRecord:";
			public static readonly Selector nts_RemoveRecords_ = "nts_RemoveRecords:";
			public static readonly Selector nts_RestoreFromMetaDataIfNeeded = "nts_RestoreFromMetaDataIfNeeded";
			public static readonly Selector nts_Save = "nts_Save";
			public static readonly Selector nts_SaveAndTriggerSync_updateModificationDate_ = "nts_SaveAndTriggerSync:updateModificationDate:";
			public static readonly Selector nts_SaveWithFileLock_ = "nts_SaveWithFileLock:";
			public static readonly Selector nts_SaveWithFileLock_triggerSync_updateModificationDate_ = "nts_SaveWithFileLock:triggerSync:updateModificationDate:";
			public static readonly Selector nts_SchemaForTable_ = "nts_SchemaForTable:";
			public static readonly Selector nts_SendAddressBookDidSaveNotificationsWithPublicUserInfo_privateUserInfo_privateTablesChanged_ = "nts_SendAddressBookDidSaveNotificationsWithPublicUserInfo:privateUserInfo:privateTablesChanged:";
			public static readonly Selector nts_SetCachedRecord_forUniqueId_ = "nts_SetCachedRecord:forUniqueId:";
			public static readonly Selector nts_SetMe_ = "nts_SetMe:";
			public static readonly Selector nts_SetNeedsToRestoreAddressBookFromMetaData_ = "nts_SetNeedsToRestoreAddressBookFromMetaData:";
			public static readonly Selector nts_ShareCount = "nts_ShareCount";
			public static readonly Selector nts_SharedAddressBook = "nts_SharedAddressBook";
			public static readonly Selector nts_ShouldLaunchABDForListening = "nts_ShouldLaunchABDForListening";
			public static readonly Selector nts_shouldUpdateDateRelatedSmartGroups = "nts_shouldUpdateDateRelatedSmartGroups";
			public static readonly Selector nts_SmartGroups = "nts_SmartGroups";
			public static readonly Selector nts_SubscribedPeople = "nts_SubscribedPeople";
			public static readonly Selector nts_SubscriptionListChanged = "nts_SubscriptionListChanged";
			public static readonly Selector nts_SyncCount = "nts_SyncCount";
			public static readonly Selector nts_syncGroupSmartGroupPropertiesWithLock_ = "nts_syncGroupSmartGroupPropertiesWithLock:";
			public static readonly Selector nts_TypeOfProperty_forTable_ = "nts_TypeOfProperty:forTable:";
			public static readonly Selector nts_UniqueIdsForRecordsInSet_ = "nts_UniqueIdsForRecordsInSet:";
			public static readonly Selector nts_UpdateDatabaseSchemasWithLock_ = "nts_UpdateDatabaseSchemasWithLock:";
			public static readonly Selector nts_UpdateDateRelatedSmartGroups = "nts_UpdateDateRelatedSmartGroups";
			public static readonly Selector nts_VerifyDotMacAccountMatchesSharedContent = "nts_VerifyDotMacAccountMatchesSharedContent";
			public static readonly Selector people = "people";
			public static readonly Selector peopleAtRemoteLocation_ = "peopleAtRemoteLocation:";
			public static readonly Selector peopleCount = "peopleCount";
			public static readonly Selector prefetchDataForRecords_ = "prefetchDataForRecords:";
			public static readonly Selector preparePublicChangeNotification_privateChangeNotification_couldAffectSyncing_couldAffectSharing_privateTablesChanged_modificationDate_ = "preparePublicChangeNotification:privateChangeNotification:couldAffectSyncing:couldAffectSharing:privateTablesChanged:modificationDate:";
			public static readonly Selector propertyTypesForRecordOfClass_ = "propertyTypesForRecordOfClass:";
			public static readonly Selector rebroadcastUserPictureDidChange = "rebroadcastUserPictureDidChange";
			public static readonly Selector recordClassFromUniqueId_ = "recordClassFromUniqueId:";
			public static readonly Selector recordClassFromUniqueID_ = "recordClassFromUniqueID:";
			public static readonly Selector recordForUniqueId_ = "recordForUniqueId:";
			public static readonly Selector recordsForClass_matchingPredicate_prefetchingKeyPaths_takeLock_ = "recordsForClass:matchingPredicate:prefetchingKeyPaths:takeLock:";
			public static readonly Selector recordsMatchingMailAddressWithEmail_fullName_firstName_lastName_inSubscribedContent_ = "recordsMatchingMailAddressWithEmail:fullName:firstName:lastName:inSubscribedContent:";
			public static readonly Selector recordsMatchingSearchElement_ = "recordsMatchingSearchElement:";
			public static readonly Selector recordsMatchingSearchElement_takeLock_ = "recordsMatchingSearchElement:takeLock:";
			public static readonly Selector recordsMatchingSearchElementNoHinting_ = "recordsMatchingSearchElementNoHinting:";
			public static readonly Selector recordsMatchingSearchElementNoHinting_takeLock_ = "recordsMatchingSearchElementNoHinting:takeLock:";
			public static readonly Selector release = "release";
			public static readonly Selector removeRecord_ = "removeRecord:";
			public static readonly Selector removeRecords_ = "removeRecords:";
			public static readonly Selector resetRecordsWithUniqueIds_ = "resetRecordsWithUniqueIds:";
			public static readonly Selector revertAndCloseManagedObjectContext_ = "revertAndCloseManagedObjectContext:";
			public static readonly Selector revertToBackupFromPath_ = "revertToBackupFromPath:";
			public static readonly Selector save = "save";
			public static readonly Selector saveAndReturnError_ = "saveAndReturnError:";
			public static readonly Selector saveAndTriggerSync_udpateModificationDate_ = "saveAndTriggerSync:udpateModificationDate:";
			public static readonly Selector searchIndexForRecordsMatching_selectedGroup_ = "searchIndexForRecordsMatching:selectedGroup:";
			public static readonly Selector set_containsEntity_ = "set:containsEntity:";
			public static readonly Selector setAddressBookDirectory_ = "setAddressBookDirectory:";
			public static readonly Selector setDefaultCountryCode_ = "setDefaultCountryCode:";
			public static readonly Selector setIsInert_ = "setIsInert:";
			public static readonly Selector setIsUsingMailRecents_ = "setIsUsingMailRecents:";
			public static readonly Selector setMe_ = "setMe:";
			public static readonly Selector setNonRetainedCachedRecord_forKey_ = "setNonRetainedCachedRecord:forKey:";
			public static readonly Selector setShareCount_ = "setShareCount:";
			public static readonly Selector setShouldCreateEmptyDatabase_ = "setShouldCreateEmptyDatabase:";
			public static readonly Selector setShouldDisableSync_ = "setShouldDisableSync:";
			public static readonly Selector setSyncAnchorsFromString_ = "setSyncAnchorsFromString:";
			public static readonly Selector setSyncCount_ = "setSyncCount:";
			public static readonly Selector shareCount = "shareCount";
			public static readonly Selector sharedAddressBook = "sharedAddressBook";
			public static readonly Selector shouldCreateEmptyDatabase = "shouldCreateEmptyDatabase";
			public static readonly Selector shouldDisableSync = "shouldDisableSync";
			public static readonly Selector smartGroups = "smartGroups";
			public static readonly Selector snapshotDate = "snapshotDate";
			public static readonly Selector storeKeyForDatabaseDataType_ = "storeKeyForDatabaseDataType:";
			public static readonly Selector subscribedGroups = "subscribedGroups";
			public static readonly Selector subscribedPeople = "subscribedPeople";
			public static readonly Selector subscribedPeopleCount = "subscribedPeopleCount";
			public static readonly Selector subscriptions = "subscriptions";
			public static readonly Selector syncAnchors = "syncAnchors";
			public static readonly Selector syncCount = "syncCount";
			public static readonly Selector typeOfProperty_forTable_ = "typeOfProperty:forTable:";
			public static readonly Selector uniqueIdentifiersFromRecordClassCollections_ = "uniqueIdentifiersFromRecordClassCollections:";
			public static readonly Selector updateDateRelatedSmartGroups = "updateDateRelatedSmartGroups";
			public static readonly Selector updatePublicUserInfo_privateUserInfo_withRecords_userInfoKey_couldAffectSyncing_couldAffectSharing_privateTablesChanged_modificationDate_ignoreRecordsForKey_ = "updatePublicUserInfo:privateUserInfo:withRecords:userInfoKey:couldAffectSyncing:couldAffectSharing:privateTablesChanged:modificationDate:ignoreRecordsForKey:";
			public static readonly Selector validateMetaData = "validateMetaData";
			public static readonly Selector version = "version";
		}
	}
	[ProxyBaseClass(typeof( ABGroupCommand ))]
	public struct ABAddToGroupCommand : IEquatable<ABAddToGroupCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAddToGroupCommand;
		public static implicit operator IntPtr( ABAddToGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAddToGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABAddToGroupCommand ) ) return false; 
			return Handle == ( ( ABAddToGroupCommand )value ).Handle;
		}
		public bool Equals( ABAddToGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAddToGroupCommand value1, ABAddToGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAddToGroupCommand value1, ABAddToGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAddToGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAddToGroupCommand alloc() {
			return new ABAddToGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_records_assimilatedMap_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject records, NObjective.RuntimeObject assimilatedMap, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_records_assimilatedMap_addressBook_( Handle, CachedSelectors.initWithGroup_records_assimilatedMap_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, records, assimilatedMap, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_records_assimilatedMap_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject records, NObjective.RuntimeObject assimilatedMap, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_records_assimilatedMap_addressBook_ = "initWithGroup:records:assimilatedMap:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABSpecialGroup ))]
	public struct ABAllGroup : IEquatable<ABAllGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAllGroup;
		public static implicit operator IntPtr( ABAllGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAllGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABAllGroup ) ) return false; 
			return Handle == ( ( ABAllGroup )value ).Handle;
		}
		public bool Equals( ABAllGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAllGroup value1, ABAllGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAllGroup value1, ABAllGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAllGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAllGroup alloc() {
			return new ABAllGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject allGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allGroup( ClassHandle, CachedSelectors.allGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject allGroupForRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allGroupForRemoteLocation_( ClassHandle, CachedSelectors.allGroupForRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject specialGroupForAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.specialGroupForAddressBook_( ClassHandle, CachedSelectors.specialGroupForAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRemoteLocation_( Handle, CachedSelectors.initWithRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRemoteLocation_addressBook_( NObjective.RuntimeObject location, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRemoteLocation_addressBook_( Handle, CachedSelectors.initWithRemoteLocation_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), location, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void markRecordWithGroupSubscription_( NObjective.RuntimeObject subscription ) {
			RuntimeObject ___occuredException;
			NativeMethods.markRecordWithGroupSubscription_( Handle, CachedSelectors.markRecordWithGroupSubscription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject remoteSubscription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.remoteSubscription( Handle, CachedSelectors.remoteSubscription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char removeValueforProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeValueforProperty_( Handle, CachedSelectors.removeValueforProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject subscription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subscription( Handle, CachedSelectors.subscription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allGroup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allGroupForRemoteLocation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithRemoteLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithRemoteLocation_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markRecordWithGroupSubscription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscription );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr remoteSubscription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char removeValueforProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr specialGroupForAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subscription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allGroup = "allGroup";
			public static readonly Selector allGroupForRemoteLocation_ = "allGroupForRemoteLocation:";
			public static readonly Selector initWithRemoteLocation_ = "initWithRemoteLocation:";
			public static readonly Selector initWithRemoteLocation_addressBook_ = "initWithRemoteLocation:addressBook:";
			public static readonly Selector markRecordWithGroupSubscription_ = "markRecordWithGroupSubscription:";
			public static readonly Selector remoteSubscription = "remoteSubscription";
			public static readonly Selector removeValueforProperty_ = "removeValueforProperty:";
			public static readonly Selector specialGroupForAddressBook_ = "specialGroupForAddressBook:";
			public static readonly Selector subscription = "subscription";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABAuthenticationInfo : IEquatable<ABAuthenticationInfo> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAuthenticationInfo;
		public static implicit operator IntPtr( ABAuthenticationInfo value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAuthenticationInfo value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABAuthenticationInfo ) ) return false; 
			return Handle == ( ( ABAuthenticationInfo )value ).Handle;
		}
		public bool Equals( ABAuthenticationInfo value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAuthenticationInfo value1, ABAuthenticationInfo value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAuthenticationInfo value1, ABAuthenticationInfo value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAuthenticationInfo( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAuthenticationInfo alloc() {
			return new ABAuthenticationInfo( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSButtonCell ))]
	public struct ABBackgroundImageButtonCell : IEquatable<ABBackgroundImageButtonCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABBackgroundImageButtonCell;
		public static implicit operator IntPtr( ABBackgroundImageButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABBackgroundImageButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABBackgroundImageButtonCell ) ) return false; 
			return Handle == ( ( ABBackgroundImageButtonCell )value ).Handle;
		}
		public bool Equals( ABBackgroundImageButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABBackgroundImageButtonCell value1, ABBackgroundImageButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABBackgroundImageButtonCell value1, ABBackgroundImageButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABBackgroundImageButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABBackgroundImageButtonCell alloc() {
			return new ABBackgroundImageButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject highlightImageBackgroundPiece() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.highlightImageBackgroundPiece( Handle, CachedSelectors.highlightImageBackgroundPiece, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedImageBackgroundPiece() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedImageBackgroundPiece( Handle, CachedSelectors.selectedImageBackgroundPiece, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject unSelectedImageBackgroundPiece() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unSelectedImageBackgroundPiece( Handle, CachedSelectors.unSelectedImageBackgroundPiece, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr highlightImageBackgroundPiece( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedImageBackgroundPiece( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr unSelectedImageBackgroundPiece( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector highlightImageBackgroundPiece = "highlightImageBackgroundPiece";
			public static readonly Selector selectedImageBackgroundPiece = "selectedImageBackgroundPiece";
			public static readonly Selector unSelectedImageBackgroundPiece = "unSelectedImageBackgroundPiece";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABBackupManager : IEquatable<ABBackupManager> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABBackupManager;
		public static implicit operator IntPtr( ABBackupManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABBackupManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABBackupManager ) ) return false; 
			return Handle == ( ( ABBackupManager )value ).Handle;
		}
		public bool Equals( ABBackupManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABBackupManager value1, ABBackupManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABBackupManager value1, ABBackupManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABBackupManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABBackupManager alloc() {
			return new ABBackupManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject backupFileExtension() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupFileExtension( ClassHandle, CachedSelectors.backupFileExtension, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject backupManagerWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupManagerWithAddressBook_( ClassHandle, CachedSelectors.backupManagerWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultBackupFileName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultBackupFileName( ClassHandle, CachedSelectors.defaultBackupFileName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultBackupFileNameConvertingFromHFSToPosix_( char posix ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultBackupFileNameConvertingFromHFSToPosix_( ClassHandle, CachedSelectors.defaultBackupFileNameConvertingFromHFSToPosix_, out ___occuredException, sizeof( char ), posix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultBackupManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultBackupManager( ClassHandle, CachedSelectors.defaultBackupManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject availableBackups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.availableBackups( Handle, CachedSelectors.availableBackups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject backupDatabaseToPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupDatabaseToPath_( Handle, CachedSelectors.backupDatabaseToPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject backupDatabaseToPath_addBackupInfo_( NObjective.RuntimeObject path, char addBackupInfo ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupDatabaseToPath_addBackupInfo_( Handle, CachedSelectors.backupDatabaseToPath_addBackupInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), path, addBackupInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject backupDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupDirectory( Handle, CachedSelectors.backupDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject backupInfoDictionariesSortedByDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupInfoDictionariesSortedByDate( Handle, CachedSelectors.backupInfoDictionariesSortedByDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject backupInfoForBackupAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupInfoForBackupAtPath_( Handle, CachedSelectors.backupInfoForBackupAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char fileManager_shouldProceedAfterError_( NObjective.RuntimeObject manager, NObjective.RuntimeObject shouldProceedAfterError ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileManager_shouldProceedAfterError_( Handle, CachedSelectors.fileManager_shouldProceedAfterError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), manager, shouldProceedAfterError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAddressBook_( Handle, CachedSelectors.initWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_ReopenDatabaseForAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ReopenDatabaseForAddressBook_( Handle, CachedSelectors.nts_ReopenDatabaseForAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char revertToBackupFromPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.revertToBackupFromPath_( Handle, CachedSelectors.revertToBackupFromPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void stopMetaDataControllerAndWait() {
			RuntimeObject ___occuredException;
			NativeMethods.stopMetaDataControllerAndWait( Handle, CachedSelectors.stopMetaDataControllerAndWait, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateBackupFileAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateBackupFileAtPath_( Handle, CachedSelectors.validateBackupFileAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr availableBackups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr backupDatabaseToPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr backupDatabaseToPath_addBackupInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, char addBackupInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr backupDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr backupFileExtension( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr backupInfoDictionariesSortedByDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr backupInfoForBackupAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr backupManagerWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr defaultBackupFileName( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr defaultBackupFileNameConvertingFromHFSToPosix_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char posix );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr defaultBackupManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char fileManager_shouldProceedAfterError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject shouldProceedAfterError );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ReopenDatabaseForAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char revertToBackupFromPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void stopMetaDataControllerAndWait( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char validateBackupFileAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
		}
		static internal class CachedSelectors {
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector availableBackups = "availableBackups";
			public static readonly Selector backupDatabaseToPath_ = "backupDatabaseToPath:";
			public static readonly Selector backupDatabaseToPath_addBackupInfo_ = "backupDatabaseToPath:addBackupInfo:";
			public static readonly Selector backupDirectory = "backupDirectory";
			public static readonly Selector backupFileExtension = "backupFileExtension";
			public static readonly Selector backupInfoDictionariesSortedByDate = "backupInfoDictionariesSortedByDate";
			public static readonly Selector backupInfoForBackupAtPath_ = "backupInfoForBackupAtPath:";
			public static readonly Selector backupManagerWithAddressBook_ = "backupManagerWithAddressBook:";
			public static readonly Selector defaultBackupFileName = "defaultBackupFileName";
			public static readonly Selector defaultBackupFileNameConvertingFromHFSToPosix_ = "defaultBackupFileNameConvertingFromHFSToPosix:";
			public static readonly Selector defaultBackupManager = "defaultBackupManager";
			public static readonly Selector fileManager_shouldProceedAfterError_ = "fileManager:shouldProceedAfterError:";
			public static readonly Selector initWithAddressBook_ = "initWithAddressBook:";
			public static readonly Selector nts_ReopenDatabaseForAddressBook_ = "nts_ReopenDatabaseForAddressBook:";
			public static readonly Selector revertToBackupFromPath_ = "revertToBackupFromPath:";
			public static readonly Selector stopMetaDataControllerAndWait = "stopMetaDataControllerAndWait";
			public static readonly Selector validateBackupFileAtPath_ = "validateBackupFileAtPath:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABBackupScheduler : IEquatable<ABBackupScheduler> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABBackupScheduler;
		public static implicit operator IntPtr( ABBackupScheduler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABBackupScheduler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABBackupScheduler ) ) return false; 
			return Handle == ( ( ABBackupScheduler )value ).Handle;
		}
		public bool Equals( ABBackupScheduler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABBackupScheduler value1, ABBackupScheduler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABBackupScheduler value1, ABBackupScheduler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABBackupScheduler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABBackupScheduler alloc() {
			return new ABBackupScheduler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject backupScheduler() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupScheduler( ClassHandle, CachedSelectors.backupScheduler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char autoBackupEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autoBackupEnabled( Handle, CachedSelectors.autoBackupEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int frequency() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frequency( Handle, CachedSelectors.frequency, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject frequencyArgument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frequencyArgument( Handle, CachedSelectors.frequencyArgument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char performScheduledBackup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performScheduledBackup( Handle, CachedSelectors.performScheduledBackup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void read() {
			RuntimeObject ___occuredException;
			NativeMethods.read( Handle, CachedSelectors.read, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeCurrentSchedule() {
			RuntimeObject ___occuredException;
			NativeMethods.removeCurrentSchedule( Handle, CachedSelectors.removeCurrentSchedule, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char removeExtraBackupsForInterval_endingOn_andUpdateList_( double interval, NObjective.RuntimeObject endingOn, NObjective.RuntimeObject andUpdateList ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeExtraBackupsForInterval_endingOn_andUpdateList_( Handle, CachedSelectors.removeExtraBackupsForInterval_endingOn_andUpdateList_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), interval, endingOn, andUpdateList );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeExtraBackupsForMinimumTimeInterval_maximumTimeInterval_andUpdateList_( double interval, double maximumTimeInterval, NObjective.RuntimeObject andUpdateList ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeExtraBackupsForMinimumTimeInterval_maximumTimeInterval_andUpdateList_( Handle, CachedSelectors.removeExtraBackupsForMinimumTimeInterval_maximumTimeInterval_andUpdateList_, out ___occuredException, sizeof( double ) + sizeof( double ) + sizeof( NObjective.RuntimeObject ), interval, maximumTimeInterval, andUpdateList );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void removeOldBackups_( NObjective.RuntimeObject backups ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeOldBackups_( Handle, CachedSelectors.removeOldBackups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void rescheduleWithFrequency_( int frequency ) {
			RuntimeObject ___occuredException;
			NativeMethods.rescheduleWithFrequency_( Handle, CachedSelectors.rescheduleWithFrequency_, out ___occuredException, sizeof( int ), frequency );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject scheduledDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scheduledDate( Handle, CachedSelectors.scheduledDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAutoBackupEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAutoBackupEnabled_( Handle, CachedSelectors.setAutoBackupEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFrequency_( int frequency ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFrequency_( Handle, CachedSelectors.setFrequency_, out ___occuredException, sizeof( int ), frequency );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScheduledDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScheduledDate_( Handle, CachedSelectors.setScheduledDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void write() {
			RuntimeObject ___occuredException;
			NativeMethods.write( Handle, CachedSelectors.write, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char autoBackupEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr backupScheduler( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int frequency( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr frequencyArgument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char performScheduledBackup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void read( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeCurrentSchedule( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char removeExtraBackupsForInterval_endingOn_andUpdateList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, NObjective.RuntimeObject endingOn, NObjective.RuntimeObject andUpdateList );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char removeExtraBackupsForMinimumTimeInterval_maximumTimeInterval_andUpdateList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, double maximumTimeInterval, NObjective.RuntimeObject andUpdateList );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeOldBackups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void rescheduleWithFrequency_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int frequency );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr scheduledDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAutoBackupEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setFrequency_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int frequency );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setScheduledDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void write( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector autoBackupEnabled = "autoBackupEnabled";
			public static readonly Selector backupScheduler = "backupScheduler";
			public static readonly Selector frequency = "frequency";
			public static readonly Selector frequencyArgument = "frequencyArgument";
			public static readonly Selector performScheduledBackup = "performScheduledBackup";
			public static readonly Selector read = "read";
			public static readonly Selector removeCurrentSchedule = "removeCurrentSchedule";
			public static readonly Selector removeExtraBackupsForInterval_endingOn_andUpdateList_ = "removeExtraBackupsForInterval:endingOn:andUpdateList:";
			public static readonly Selector removeExtraBackupsForMinimumTimeInterval_maximumTimeInterval_andUpdateList_ = "removeExtraBackupsForMinimumTimeInterval:maximumTimeInterval:andUpdateList:";
			public static readonly Selector removeOldBackups_ = "removeOldBackups:";
			public static readonly Selector rescheduleWithFrequency_ = "rescheduleWithFrequency:";
			public static readonly Selector scheduledDate = "scheduledDate";
			public static readonly Selector setAutoBackupEnabled_ = "setAutoBackupEnabled:";
			public static readonly Selector setFrequency_ = "setFrequency:";
			public static readonly Selector setScheduledDate_ = "setScheduledDate:";
			public static readonly Selector write = "write";
		}
	}
	[ProxyBaseClass(typeof( NSView ))]
	public struct ABBevellerView : IEquatable<ABBevellerView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABBevellerView;
		public static implicit operator IntPtr( ABBevellerView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABBevellerView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABBevellerView ) ) return false; 
			return Handle == ( ( ABBevellerView )value ).Handle;
		}
		public bool Equals( ABBevellerView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABBevellerView value1, ABBevellerView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABBevellerView value1, ABBevellerView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABBevellerView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABBevellerView alloc() {
			return new ABBevellerView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABBuddyStatus : IEquatable<ABBuddyStatus> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABBuddyStatus;
		public static implicit operator IntPtr( ABBuddyStatus value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABBuddyStatus value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABBuddyStatus ) ) return false; 
			return Handle == ( ( ABBuddyStatus )value ).Handle;
		}
		public bool Equals( ABBuddyStatus value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABBuddyStatus value1, ABBuddyStatus value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABBuddyStatus value1, ABBuddyStatus value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABBuddyStatus( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABBuddyStatus alloc() {
			return new ABBuddyStatus( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedBuddyStatus() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedBuddyStatus( ClassHandle, CachedSelectors.sharedBuddyStatus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char showStatus() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.showStatus( ClassHandle, CachedSelectors.showStatus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isAvaliable_( NObjective.RuntimeObject avaliable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAvaliable_( Handle, CachedSelectors.isAvaliable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), avaliable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isHandleAvailable_( NObjective.RuntimeObject available ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isHandleAvailable_( Handle, CachedSelectors.isHandleAvailable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), available );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint statusForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.statusForPerson_( Handle, CachedSelectors.statusForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public NObjective.RuntimeObject statusImageForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.statusImageForPerson_( Handle, CachedSelectors.statusImageForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void statusUpdate_( NObjective.RuntimeObject update ) {
			RuntimeObject ___occuredException;
			NativeMethods.statusUpdate_( Handle, CachedSelectors.statusUpdate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), update );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateStatus_( NObjective.RuntimeObject status ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateStatus_( Handle, CachedSelectors.updateStatus_, out ___occuredException, sizeof( NObjective.RuntimeObject ), status );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isAvaliable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject avaliable );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isHandleAvailable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject available );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedBuddyStatus( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char showStatus( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint statusForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr statusImageForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void statusUpdate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject update );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateStatus_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject status );
		}
		static internal class CachedSelectors {
			public static readonly Selector isAvaliable_ = "isAvaliable:";
			public static readonly Selector isHandleAvailable_ = "isHandleAvailable:";
			public static readonly Selector sharedBuddyStatus = "sharedBuddyStatus";
			public static readonly Selector showStatus = "showStatus";
			public static readonly Selector statusForPerson_ = "statusForPerson:";
			public static readonly Selector statusImageForPerson_ = "statusImageForPerson:";
			public static readonly Selector statusUpdate_ = "statusUpdate:";
			public static readonly Selector updateStatus_ = "updateStatus:";
		}
	}
	[ProxyBaseClass(typeof( NSButtonCell ))]
	public struct ABButtonCell : IEquatable<ABButtonCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABButtonCell;
		public static implicit operator IntPtr( ABButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABButtonCell ) ) return false; 
			return Handle == ( ( ABButtonCell )value ).Handle;
		}
		public bool Equals( ABButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABButtonCell value1, ABButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABButtonCell value1, ABButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABButtonCell alloc() {
			return new ABButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject disabledImageForControlTint_( uint tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabledImageForControlTint_( Handle, CachedSelectors.disabledImageForControlTint_, out ___occuredException, sizeof( uint ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject imageForControlTint_( uint tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageForControlTint_( Handle, CachedSelectors.imageForControlTint_, out ___occuredException, sizeof( uint ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pressedImageForControlTint_( uint tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pressedImageForControlTint_( Handle, CachedSelectors.pressedImageForControlTint_, out ___occuredException, sizeof( uint ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedImageForControlTint_( uint tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedImageForControlTint_( Handle, CachedSelectors.selectedImageForControlTint_, out ___occuredException, sizeof( uint ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDisabledImage_forControlTint_( NObjective.RuntimeObject image, uint forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabledImage_forControlTint_( Handle, CachedSelectors.setDisabledImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setImage_forControlTint_( NObjective.RuntimeObject image, uint forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setImage_forControlTint_( Handle, CachedSelectors.setImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPressedImage_forControlTint_( NObjective.RuntimeObject image, uint forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPressedImage_forControlTint_( Handle, CachedSelectors.setPressedImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedImage_forControlTint_( NObjective.RuntimeObject image, uint forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedImage_forControlTint_( Handle, CachedSelectors.setSelectedImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr disabledImageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint tint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr imageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint tint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pressedImageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint tint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedImageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint tint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDisabledImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, uint forControlTint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, uint forControlTint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPressedImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, uint forControlTint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, uint forControlTint );
		}
		static internal class CachedSelectors {
			public static readonly Selector disabledImageForControlTint_ = "disabledImageForControlTint:";
			public static readonly Selector imageForControlTint_ = "imageForControlTint:";
			public static readonly Selector pressedImageForControlTint_ = "pressedImageForControlTint:";
			public static readonly Selector selectedImageForControlTint_ = "selectedImageForControlTint:";
			public static readonly Selector setDisabledImage_forControlTint_ = "setDisabledImage:forControlTint:";
			public static readonly Selector setImage_forControlTint_ = "setImage:forControlTint:";
			public static readonly Selector setPressedImage_forControlTint_ = "setPressedImage:forControlTint:";
			public static readonly Selector setSelectedImage_forControlTint_ = "setSelectedImage:forControlTint:";
		}
	}
	[ProxyBaseClass(typeof( ABBevellerView ))]
	public struct ABCardBackgroundView : IEquatable<ABCardBackgroundView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCardBackgroundView;
		public static implicit operator IntPtr( ABCardBackgroundView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCardBackgroundView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCardBackgroundView ) ) return false; 
			return Handle == ( ( ABCardBackgroundView )value ).Handle;
		}
		public bool Equals( ABCardBackgroundView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCardBackgroundView value1, ABCardBackgroundView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCardBackgroundView value1, ABCardBackgroundView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCardBackgroundView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCardBackgroundView alloc() {
			return new ABCardBackgroundView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSRulerView ))]
	public struct ABCardItemRuler : IEquatable<ABCardItemRuler> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCardItemRuler;
		public static implicit operator IntPtr( ABCardItemRuler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCardItemRuler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCardItemRuler ) ) return false; 
			return Handle == ( ( ABCardItemRuler )value ).Handle;
		}
		public bool Equals( ABCardItemRuler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCardItemRuler value1, ABCardItemRuler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCardItemRuler value1, ABCardItemRuler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCardItemRuler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCardItemRuler alloc() {
			return new ABCardItemRuler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibleChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibleChildren( Handle, CachedSelectors.accessibleChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deletionMarkerForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deletionMarkerForProperty_( Handle, CachedSelectors.deletionMarkerForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void prepareForDifferentCard() {
			RuntimeObject ___occuredException;
			NativeMethods.prepareForDifferentCard( Handle, CachedSelectors.prepareForDifferentCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldUpdateMarkers_( char markers ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldUpdateMarkers_( Handle, CachedSelectors.setShouldUpdateMarkers_, out ___occuredException, sizeof( char ), markers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateMarkers() {
			RuntimeObject ___occuredException;
			NativeMethods.updateMarkers( Handle, CachedSelectors.updateMarkers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibleChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr deletionMarkerForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void prepareForDifferentCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShouldUpdateMarkers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char markers );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateMarkers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibleChildren = "accessibleChildren";
			public static readonly Selector deletionMarkerForProperty_ = "deletionMarkerForProperty:";
			public static readonly Selector prepareForDifferentCard = "prepareForDifferentCard";
			public static readonly Selector setShouldUpdateMarkers_ = "setShouldUpdateMarkers:";
			public static readonly Selector updateMarkers = "updateMarkers";
		}
	}
	[ProxyBaseClass(typeof( ABAccessibilityMockUIElement ))]
	public struct ABCardItemRulerAccessibilityElement : IEquatable<ABCardItemRulerAccessibilityElement> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCardItemRulerAccessibilityElement;
		public static implicit operator IntPtr( ABCardItemRulerAccessibilityElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCardItemRulerAccessibilityElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCardItemRulerAccessibilityElement ) ) return false; 
			return Handle == ( ( ABCardItemRulerAccessibilityElement )value ).Handle;
		}
		public bool Equals( ABCardItemRulerAccessibilityElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCardItemRulerAccessibilityElement value1, ABCardItemRulerAccessibilityElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCardItemRulerAccessibilityElement value1, ABCardItemRulerAccessibilityElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCardItemRulerAccessibilityElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCardItemRulerAccessibilityElement alloc() {
			return new ABCardItemRulerAccessibilityElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithRole_parent_marker_( NObjective.RuntimeObject role, NObjective.RuntimeObject parent, NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRole_parent_marker_( Handle, CachedSelectors.initWithRole_parent_marker_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), role, parent, marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject marker() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marker( Handle, CachedSelectors.marker, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithRole_parent_marker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject role, NObjective.RuntimeObject parent, NObjective.RuntimeObject marker );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr marker( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithRole_parent_marker_ = "initWithRole:parent:marker:";
			public static readonly Selector marker = "marker";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABCardViewerController : IEquatable<ABCardViewerController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCardViewerController;
		public static implicit operator IntPtr( ABCardViewerController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCardViewerController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCardViewerController ) ) return false; 
			return Handle == ( ( ABCardViewerController )value ).Handle;
		}
		public bool Equals( ABCardViewerController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCardViewerController value1, ABCardViewerController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCardViewerController value1, ABCardViewerController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCardViewerController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCardViewerController alloc() {
			return new ABCardViewerController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void apply() {
			RuntimeObject ___occuredException;
			NativeMethods.apply( Handle, CachedSelectors.apply, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void applyToAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.applyToAll_( Handle, CachedSelectors.applyToAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancel_( NObjective.RuntimeObject cancel ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancel_( Handle, CachedSelectors.cancel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cancel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeAction_( Handle, CachedSelectors.changeAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void go() {
			RuntimeObject ___occuredException;
			NativeMethods.go( Handle, CachedSelectors.go, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void help_( NObjective.RuntimeObject help ) {
			RuntimeObject ___occuredException;
			NativeMethods.help_( Handle, CachedSelectors.help_, out ___occuredException, sizeof( NObjective.RuntimeObject ), help );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCards_duplicates_group_selectGroup_uiController_( NObjective.RuntimeObject cards, NObjective.RuntimeObject duplicates, NObjective.RuntimeObject @group, char selectGroup, NObjective.RuntimeObject uiController ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCards_duplicates_group_selectGroup_uiController_( Handle, CachedSelectors.initWithCards_duplicates_group_selectGroup_uiController_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), cards, duplicates, @group, selectGroup, uiController );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void ok_( NObjective.RuntimeObject ok ) {
			RuntimeObject ___occuredException;
			NativeMethods.ok_( Handle, CachedSelectors.ok_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ok );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRecordDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRecordDelegate_( Handle, CachedSelectors.setRecordDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char splitView_canCollapseSubview_( NObjective.RuntimeObject view, NObjective.RuntimeObject canCollapseSubview ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView_canCollapseSubview_( Handle, CachedSelectors.splitView_canCollapseSubview_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, canCollapseSubview );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float splitView_constrainSplitPosition_ofSubviewAt_( NObjective.RuntimeObject view, float constrainSplitPosition, int ofSubviewAt ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView_constrainSplitPosition_ofSubviewAt_( Handle, CachedSelectors.splitView_constrainSplitPosition_ofSubviewAt_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ) + sizeof( int ), view, constrainSplitPosition, ofSubviewAt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void windowDidResize_( NObjective.RuntimeObject resize ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidResize_( Handle, CachedSelectors.windowDidResize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), resize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void apply( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void applyToAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cancel );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changeAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void go( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void help_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject help );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithCards_duplicates_group_selectGroup_uiController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cards, NObjective.RuntimeObject duplicates, NObjective.RuntimeObject @group, char selectGroup, NObjective.RuntimeObject uiController );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void ok_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ok );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setRecordDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char splitView_canCollapseSubview_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject canCollapseSubview );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float splitView_constrainSplitPosition_ofSubviewAt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, float constrainSplitPosition, int ofSubviewAt );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowDidResize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject resize );
		}
		static internal class CachedSelectors {
			public static readonly Selector apply = "apply";
			public static readonly Selector applyToAll_ = "applyToAll:";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector cancel_ = "cancel:";
			public static readonly Selector changeAction_ = "changeAction:";
			public static readonly Selector go = "go";
			public static readonly Selector help_ = "help:";
			public static readonly Selector initWithCards_duplicates_group_selectGroup_uiController_ = "initWithCards:duplicates:group:selectGroup:uiController:";
			public static readonly Selector ok_ = "ok:";
			public static readonly Selector setRecordDelegate_ = "setRecordDelegate:";
			public static readonly Selector splitView_canCollapseSubview_ = "splitView:canCollapseSubview:";
			public static readonly Selector splitView_constrainSplitPosition_ofSubviewAt_ = "splitView:constrainSplitPosition:ofSubviewAt:";
			public static readonly Selector windowDidResize_ = "windowDidResize:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABCardWindowController : IEquatable<ABCardWindowController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCardWindowController;
		public static implicit operator IntPtr( ABCardWindowController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCardWindowController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCardWindowController ) ) return false; 
			return Handle == ( ( ABCardWindowController )value ).Handle;
		}
		public bool Equals( ABCardWindowController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCardWindowController value1, ABCardWindowController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCardWindowController value1, ABCardWindowController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCardWindowController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCardWindowController alloc() {
			return new ABCardWindowController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void closeWindowForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.closeWindowForPerson_( ClassHandle, CachedSelectors.closeWindowForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject openInSeparateWindow_model_mainWindow_( NObjective.RuntimeObject window, NObjective.RuntimeObject model, NObjective.RuntimeObject mainWindow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.openInSeparateWindow_model_mainWindow_( ClassHandle, CachedSelectors.openInSeparateWindow_model_mainWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), window, model, mainWindow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void restoreCardWindowStateWithModel_( NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			NativeMethods.restoreCardWindowStateWithModel_( ClassHandle, CachedSelectors.restoreCardWindowStateWithModel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void saveCardWindowState() {
			RuntimeObject ___occuredException;
			NativeMethods.saveCardWindowState( ClassHandle, CachedSelectors.saveCardWindowState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject separateWindowForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.separateWindowForPerson_( ClassHandle, CachedSelectors.separateWindowForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char abShowWindowDragProxie() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abShowWindowDragProxie( Handle, CachedSelectors.abShowWindowDragProxie, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void addFieldWithNoPopup_( NObjective.RuntimeObject popup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addFieldWithNoPopup_( Handle, CachedSelectors.addFieldWithNoPopup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), popup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void chooseCustomImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.chooseCustomImage_( Handle, CachedSelectors.chooseCustomImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearCustomImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearCustomImage_( Handle, CachedSelectors.clearCustomImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.editCard_( Handle, CachedSelectors.editCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject filenameToDrag_( NObjective.RuntimeObject drag ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filenameToDrag_( Handle, CachedSelectors.filenameToDrag_, out ___occuredException, sizeof( NObjective.RuntimeObject ), drag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithPerson_model_( NObjective.RuntimeObject person, NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPerson_model_( Handle, CachedSelectors.initWithPerson_model_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void personChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.personChanged_( Handle, CachedSelectors.personChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetFirstLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.resetFirstLastName_( Handle, CachedSelectors.resetFirstLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showAsCompany_( NObjective.RuntimeObject company ) {
			RuntimeObject ___occuredException;
			NativeMethods.showAsCompany_( Handle, CachedSelectors.showAsCompany_, out ___occuredException, sizeof( NObjective.RuntimeObject ), company );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showAsPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.showAsPerson_( Handle, CachedSelectors.showAsPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showWindow() {
			RuntimeObject ___occuredException;
			NativeMethods.showWindow( Handle, CachedSelectors.showWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void swapFirstLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.swapFirstLastName_( Handle, CachedSelectors.swapFirstLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void thisIsACompany_( NObjective.RuntimeObject company ) {
			RuntimeObject ___occuredException;
			NativeMethods.thisIsACompany_( Handle, CachedSelectors.thisIsACompany_, out ___occuredException, sizeof( NObjective.RuntimeObject ), company );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void thisIsMe_( NObjective.RuntimeObject me ) {
			RuntimeObject ___occuredException;
			NativeMethods.thisIsMe_( Handle, CachedSelectors.thisIsMe_, out ___occuredException, sizeof( NObjective.RuntimeObject ), me );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateEditButton_( NObjective.RuntimeObject button ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateEditButton_( Handle, CachedSelectors.updateEditButton_, out ___occuredException, sizeof( NObjective.RuntimeObject ), button );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject window() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.window( Handle, CachedSelectors.window, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char window_shouldPopUpDocumentPathMenu_( NObjective.RuntimeObject window, NObjective.RuntimeObject shouldPopUpDocumentPathMenu ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.window_shouldPopUpDocumentPathMenu_( Handle, CachedSelectors.window_shouldPopUpDocumentPathMenu_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), window, shouldPopUpDocumentPathMenu );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void windowDidBecomeMain_( NObjective.RuntimeObject main ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidBecomeMain_( Handle, CachedSelectors.windowDidBecomeMain_, out ___occuredException, sizeof( NObjective.RuntimeObject ), main );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidResignKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidResignKey_( Handle, CachedSelectors.windowDidResignKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char windowProxydraggingSourceOperationMaskForLocal_( char local ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.windowProxydraggingSourceOperationMaskForLocal_( Handle, CachedSelectors.windowProxydraggingSourceOperationMaskForLocal_, out ___occuredException, sizeof( char ), local );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void windowWillClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowWillClose_( Handle, CachedSelectors.windowWillClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject windowWillReturnUndoManager_( NObjective.RuntimeObject manager ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.windowWillReturnUndoManager_( Handle, CachedSelectors.windowWillReturnUndoManager_, out ___occuredException, sizeof( NObjective.RuntimeObject ), manager );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abShowWindowDragProxie( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addFieldWithNoPopup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject popup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void chooseCustomImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearCustomImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void closeWindowForPerson_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr filenameToDrag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject drag );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithPerson_model_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject model );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr openInSeparateWindow_model_mainWindow_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window, NObjective.RuntimeObject model, NObjective.RuntimeObject mainWindow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void personChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetFirstLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void restoreCardWindowStateWithModel_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void saveCardWindowState( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr separateWindowForPerson_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showAsCompany_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject company );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showAsPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void swapFirstLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void thisIsACompany_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject company );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void thisIsMe_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject me );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateEditButton_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject button );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr window( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char window_shouldPopUpDocumentPathMenu_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window, NObjective.RuntimeObject shouldPopUpDocumentPathMenu );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowDidBecomeMain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject main );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowDidResignKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char windowProxydraggingSourceOperationMaskForLocal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char local );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowWillClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr windowWillReturnUndoManager_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager );
		}
		static internal class CachedSelectors {
			public static readonly Selector abShowWindowDragProxie = "abShowWindowDragProxie";
			public static readonly Selector addFieldWithNoPopup_ = "addFieldWithNoPopup:";
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector chooseCustomImage_ = "chooseCustomImage:";
			public static readonly Selector clearCustomImage_ = "clearCustomImage:";
			public static readonly Selector closeWindowForPerson_ = "closeWindowForPerson:";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector editCard_ = "editCard:";
			public static readonly Selector filenameToDrag_ = "filenameToDrag:";
			public static readonly Selector initWithPerson_model_ = "initWithPerson:model:";
			public static readonly Selector openInSeparateWindow_model_mainWindow_ = "openInSeparateWindow:model:mainWindow:";
			public static readonly Selector personChanged_ = "personChanged:";
			public static readonly Selector resetFirstLastName_ = "resetFirstLastName:";
			public static readonly Selector restoreCardWindowStateWithModel_ = "restoreCardWindowStateWithModel:";
			public static readonly Selector saveCardWindowState = "saveCardWindowState";
			public static readonly Selector separateWindowForPerson_ = "separateWindowForPerson:";
			public static readonly Selector showAsCompany_ = "showAsCompany:";
			public static readonly Selector showAsPerson_ = "showAsPerson:";
			public static readonly Selector showWindow = "showWindow";
			public static readonly Selector swapFirstLastName_ = "swapFirstLastName:";
			public static readonly Selector thisIsACompany_ = "thisIsACompany:";
			public static readonly Selector thisIsMe_ = "thisIsMe:";
			public static readonly Selector updateEditButton_ = "updateEditButton:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
			public static readonly Selector window = "window";
			public static readonly Selector window_shouldPopUpDocumentPathMenu_ = "window:shouldPopUpDocumentPathMenu:";
			public static readonly Selector windowDidBecomeMain_ = "windowDidBecomeMain:";
			public static readonly Selector windowDidResignKey_ = "windowDidResignKey:";
			public static readonly Selector windowProxydraggingSourceOperationMaskForLocal_ = "windowProxydraggingSourceOperationMaskForLocal:";
			public static readonly Selector windowWillClose_ = "windowWillClose:";
			public static readonly Selector windowWillReturnUndoManager_ = "windowWillReturnUndoManager:";
		}
	}
	[ProxyBaseClass(typeof( ABCDRecord ))]
	public struct ABCDAddressBookSource : IEquatable<ABCDAddressBookSource> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDAddressBookSource;
		public static implicit operator IntPtr( ABCDAddressBookSource value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDAddressBookSource value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDAddressBookSource ) ) return false; 
			return Handle == ( ( ABCDAddressBookSource )value ).Handle;
		}
		public bool Equals( ABCDAddressBookSource value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDAddressBookSource value1, ABCDAddressBookSource value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDAddressBookSource value1, ABCDAddressBookSource value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDAddressBookSource( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDAddressBookSource alloc() {
			return new ABCDAddressBookSource( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject localAddressBookSourceWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localAddressBookSourceWithAddressBook_( ClassHandle, CachedSelectors.localAddressBookSourceWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr localAddressBookSourceWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
		}
		static internal class CachedSelectors {
			public static readonly Selector localAddressBookSourceWithAddressBook_ = "localAddressBookSourceWithAddressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABCDRecord ))]
	public struct ABCDContact : IEquatable<ABCDContact> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDContact;
		public static implicit operator IntPtr( ABCDContact value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDContact value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDContact ) ) return false; 
			return Handle == ( ( ABCDContact )value ).Handle;
		}
		public bool Equals( ABCDContact value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDContact value1, ABCDContact value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDContact value1, ABCDContact value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDContact( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDContact alloc() {
			return new ABCDContact( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject stringForIndexingKeypaths() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringForIndexingKeypaths( ClassHandle, CachedSelectors.stringForIndexingKeypaths, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressEntityWithValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressEntityWithValue_( Handle, CachedSelectors.addressEntityWithValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressValueWithEntity_( NObjective.RuntimeObject entity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressValueWithEntity_( Handle, CachedSelectors.addressValueWithEntity_, out ___occuredException, sizeof( NObjective.RuntimeObject ), entity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int birthdayYear() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.birthdayYear( Handle, CachedSelectors.birthdayYear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double birthdayYearless() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.birthdayYearless( Handle, CachedSelectors.birthdayYearless, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject createAlternateNameForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createAlternateNameForPerson_( Handle, CachedSelectors.createAlternateNameForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createFirstLastSorting_part1_forPerson_( char sorting, char part1, NObjective.RuntimeObject forPerson ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createFirstLastSorting_part1_forPerson_( Handle, CachedSelectors.createFirstLastSorting_part1_forPerson_, out ___occuredException, sizeof( char ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), sorting, part1, forPerson );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nonNullValueForKey_inDictionary_( NObjective.RuntimeObject key, NObjective.RuntimeObject inDictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nonNullValueForKey_inDictionary_( Handle, CachedSelectors.nonNullValueForKey_inDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, inDictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setBirthday_( NObjective.RuntimeObject birthday ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBirthday_( Handle, CachedSelectors.setBirthday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), birthday );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBirthdayYear_( NObjective.RuntimeObject year ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBirthdayYear_( Handle, CachedSelectors.setBirthdayYear_, out ___occuredException, sizeof( NObjective.RuntimeObject ), year );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBirthdayYearless_( NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBirthdayYearless_( Handle, CachedSelectors.setBirthdayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisplayFlags_( NObjective.RuntimeObject flags ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisplayFlags_( Handle, CachedSelectors.setDisplayFlags_, out ___occuredException, sizeof( NObjective.RuntimeObject ), flags );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFirstName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFirstName_( Handle, CachedSelectors.setFirstName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLastName_( Handle, CachedSelectors.setLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOrganization_( NObjective.RuntimeObject organization ) {
			RuntimeObject ___occuredException;
			NativeMethods.setOrganization_( Handle, CachedSelectors.setOrganization_, out ___occuredException, sizeof( NObjective.RuntimeObject ), organization );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPhoneticFirstName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPhoneticFirstName_( Handle, CachedSelectors.setPhoneticFirstName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPhoneticLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPhoneticLastName_( Handle, CachedSelectors.setPhoneticLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject sortingFirstName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortingFirstName( Handle, CachedSelectors.sortingFirstName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject sortingLastName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortingLastName( Handle, CachedSelectors.sortingLastName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressEntityWithValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressValueWithEntity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entity );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int birthdayYear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double birthdayYearless( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr createAlternateNameForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr createFirstLastSorting_part1_forPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char sorting, char part1, NObjective.RuntimeObject forPerson );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nonNullValueForKey_inDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject inDictionary );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setBirthday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject birthday );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setBirthdayYear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject year );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setBirthdayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDisplayFlags_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject flags );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setFirstName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setOrganization_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject organization );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPhoneticFirstName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPhoneticLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sortingFirstName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sortingLastName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringForIndexingKeypaths( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addressEntityWithValue_ = "addressEntityWithValue:";
			public static readonly Selector addressValueWithEntity_ = "addressValueWithEntity:";
			public static readonly Selector birthdayYear = "birthdayYear";
			public static readonly Selector birthdayYearless = "birthdayYearless";
			public static readonly Selector createAlternateNameForPerson_ = "createAlternateNameForPerson:";
			public static readonly Selector createFirstLastSorting_part1_forPerson_ = "createFirstLastSorting:part1:forPerson:";
			public static readonly Selector nonNullValueForKey_inDictionary_ = "nonNullValueForKey:inDictionary:";
			public static readonly Selector setBirthday_ = "setBirthday:";
			public static readonly Selector setBirthdayYear_ = "setBirthdayYear:";
			public static readonly Selector setBirthdayYearless_ = "setBirthdayYearless:";
			public static readonly Selector setDisplayFlags_ = "setDisplayFlags:";
			public static readonly Selector setFirstName_ = "setFirstName:";
			public static readonly Selector setLastName_ = "setLastName:";
			public static readonly Selector setOrganization_ = "setOrganization:";
			public static readonly Selector setPhoneticFirstName_ = "setPhoneticFirstName:";
			public static readonly Selector setPhoneticLastName_ = "setPhoneticLastName:";
			public static readonly Selector sortingFirstName = "sortingFirstName";
			public static readonly Selector sortingLastName = "sortingLastName";
			public static readonly Selector stringForIndexingKeypaths = "stringForIndexingKeypaths";
		}
	}
	[ProxyBaseClass(typeof( NSManagedObject ))]
	public struct ABCDContactDate : IEquatable<ABCDContactDate> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDContactDate;
		public static implicit operator IntPtr( ABCDContactDate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDContactDate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDContactDate ) ) return false; 
			return Handle == ( ( ABCDContactDate )value ).Handle;
		}
		public bool Equals( ABCDContactDate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDContactDate value1, ABCDContactDate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDContactDate value1, ABCDContactDate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDContactDate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDContactDate alloc() {
			return new ABCDContactDate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int dateYear() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateYear( Handle, CachedSelectors.dateYear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double dateYearless() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateYearless( Handle, CachedSelectors.dateYearless, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDate_( Handle, CachedSelectors.setDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDateYear_( NObjective.RuntimeObject year ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDateYear_( Handle, CachedSelectors.setDateYear_, out ___occuredException, sizeof( NObjective.RuntimeObject ), year );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDateYearless_( NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDateYearless_( Handle, CachedSelectors.setDateYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int dateYear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double dateYearless( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDateYear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject year );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDateYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
		}
		static internal class CachedSelectors {
			public static readonly Selector dateYear = "dateYear";
			public static readonly Selector dateYearless = "dateYearless";
			public static readonly Selector setDate_ = "setDate:";
			public static readonly Selector setDateYear_ = "setDateYear:";
			public static readonly Selector setDateYearless_ = "setDateYearless:";
		}
	}
	[ProxyBaseClass(typeof( NSManagedObject ))]
	public struct ABCDContactIndex : IEquatable<ABCDContactIndex> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDContactIndex;
		public static implicit operator IntPtr( ABCDContactIndex value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDContactIndex value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDContactIndex ) ) return false; 
			return Handle == ( ( ABCDContactIndex )value ).Handle;
		}
		public bool Equals( ABCDContactIndex value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDContactIndex value1, ABCDContactIndex value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDContactIndex value1, ABCDContactIndex value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDContactIndex( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDContactIndex alloc() {
			return new ABCDContactIndex( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject stringForIndexing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringForIndexing( Handle, CachedSelectors.stringForIndexing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringForIndexing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector stringForIndexing = "stringForIndexing";
		}
	}
	[ProxyBaseClass(typeof( NSManagedObject ))]
	public struct ABCDCustomPropertyValue : IEquatable<ABCDCustomPropertyValue> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDCustomPropertyValue;
		public static implicit operator IntPtr( ABCDCustomPropertyValue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDCustomPropertyValue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDCustomPropertyValue ) ) return false; 
			return Handle == ( ( ABCDCustomPropertyValue )value ).Handle;
		}
		public bool Equals( ABCDCustomPropertyValue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDCustomPropertyValue value1, ABCDCustomPropertyValue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDCustomPropertyValue value1, ABCDCustomPropertyValue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDCustomPropertyValue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDCustomPropertyValue alloc() {
			return new ABCDCustomPropertyValue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int dateValueYear() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateValueYear( Handle, CachedSelectors.dateValueYear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double dateValueYearless() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateValueYearless( Handle, CachedSelectors.dateValueYearless, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDateValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDateValue_( Handle, CachedSelectors.setDateValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDateValueYear_( NObjective.RuntimeObject year ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDateValueYear_( Handle, CachedSelectors.setDateValueYear_, out ___occuredException, sizeof( NObjective.RuntimeObject ), year );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDateValueYearless_( NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDateValueYearless_( Handle, CachedSelectors.setDateValueYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int dateValueYear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double dateValueYearless( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDateValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDateValueYear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject year );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDateValueYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
		}
		static internal class CachedSelectors {
			public static readonly Selector dateValueYear = "dateValueYear";
			public static readonly Selector dateValueYearless = "dateValueYearless";
			public static readonly Selector setDateValue_ = "setDateValue:";
			public static readonly Selector setDateValueYear_ = "setDateValueYear:";
			public static readonly Selector setDateValueYearless_ = "setDateValueYearless:";
		}
	}
	[ProxyBaseClass(typeof( ABCDRecord ))]
	public struct ABCDDeletedRecordLog : IEquatable<ABCDDeletedRecordLog> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDDeletedRecordLog;
		public static implicit operator IntPtr( ABCDDeletedRecordLog value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDDeletedRecordLog value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDDeletedRecordLog ) ) return false; 
			return Handle == ( ( ABCDDeletedRecordLog )value ).Handle;
		}
		public bool Equals( ABCDDeletedRecordLog value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDDeletedRecordLog value1, ABCDDeletedRecordLog value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDDeletedRecordLog value1, ABCDDeletedRecordLog value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDDeletedRecordLog( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDDeletedRecordLog alloc() {
			return new ABCDDeletedRecordLog( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void doRemoveRecordsAndCreateLogsWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.doRemoveRecordsAndCreateLogsWithAddressBook_( ClassHandle, CachedSelectors.doRemoveRecordsAndCreateLogsWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject creationDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.creationDate( Handle, CachedSelectors.creationDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setPrimitiveCreationDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrimitiveCreationDate_( Handle, CachedSelectors.setPrimitiveCreationDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrimitiveCreationDateYear_( NObjective.RuntimeObject year ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrimitiveCreationDateYear_( Handle, CachedSelectors.setPrimitiveCreationDateYear_, out ___occuredException, sizeof( NObjective.RuntimeObject ), year );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrimitiveCreationDateYearless_( NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrimitiveCreationDateYearless_( Handle, CachedSelectors.setPrimitiveCreationDateYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr creationDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doRemoveRecordsAndCreateLogsWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrimitiveCreationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrimitiveCreationDateYear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject year );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrimitiveCreationDateYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
		}
		static internal class CachedSelectors {
			public static readonly Selector creationDate = "creationDate";
			public static readonly Selector doRemoveRecordsAndCreateLogsWithAddressBook_ = "doRemoveRecordsAndCreateLogsWithAddressBook:";
			public static readonly Selector setPrimitiveCreationDate_ = "setPrimitiveCreationDate:";
			public static readonly Selector setPrimitiveCreationDateYear_ = "setPrimitiveCreationDateYear:";
			public static readonly Selector setPrimitiveCreationDateYearless_ = "setPrimitiveCreationDateYearless:";
		}
	}
	[ProxyBaseClass(typeof( ABCDOwnedObject ))]
	public struct ABCDEmailAddress : IEquatable<ABCDEmailAddress> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDEmailAddress;
		public static implicit operator IntPtr( ABCDEmailAddress value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDEmailAddress value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDEmailAddress ) ) return false; 
			return Handle == ( ( ABCDEmailAddress )value ).Handle;
		}
		public bool Equals( ABCDEmailAddress value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDEmailAddress value1, ABCDEmailAddress value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDEmailAddress value1, ABCDEmailAddress value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDEmailAddress( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDEmailAddress alloc() {
			return new ABCDEmailAddress( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setAddress_( NObjective.RuntimeObject address ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAddress_( Handle, CachedSelectors.setAddress_, out ___occuredException, sizeof( NObjective.RuntimeObject ), address );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAddress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject address );
		}
		static internal class CachedSelectors {
			public static readonly Selector setAddress_ = "setAddress:";
		}
	}
	[ProxyBaseClass(typeof( ABCDRecord ))]
	public struct ABCDGroup : IEquatable<ABCDGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDGroup;
		public static implicit operator IntPtr( ABCDGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDGroup ) ) return false; 
			return Handle == ( ( ABCDGroup )value ).Handle;
		}
		public bool Equals( ABCDGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDGroup value1, ABCDGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDGroup value1, ABCDGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDGroup alloc() {
			return new ABCDGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject distributionListConfigWithKey_person_inGroup_( NObjective.RuntimeObject key, NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.distributionListConfigWithKey_person_inGroup_( Handle, CachedSelectors.distributionListConfigWithKey_person_inGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, person, inGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject distributionListConfigWithProperty_person_inGroup_( NObjective.RuntimeObject property, NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.distributionListConfigWithProperty_person_inGroup_( Handle, CachedSelectors.distributionListConfigWithProperty_person_inGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, person, inGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isGroup_parentOfRecord_( NObjective.RuntimeObject @group, NObjective.RuntimeObject parentOfRecord ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isGroup_parentOfRecord_( Handle, CachedSelectors.isGroup_parentOfRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, parentOfRecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_AddMember_toGroup_( NObjective.RuntimeObject member, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddMember_toGroup_( Handle, CachedSelectors.nts_AddMember_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), member, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_AddSubgroup_toGroup_( NObjective.RuntimeObject subgroup, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddSubgroup_toGroup_( Handle, CachedSelectors.nts_AddSubgroup_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), subgroup, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_ClearInstanceCachesForGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ClearInstanceCachesForGroup_( Handle, CachedSelectors.nts_ClearInstanceCachesForGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_DistributionIdentifierForProperty_person_inGroup_( NObjective.RuntimeObject property, NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_DistributionIdentifierForProperty_person_inGroup_( Handle, CachedSelectors.nts_DistributionIdentifierForProperty_person_inGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, person, inGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_MembersOfGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_MembersOfGroup_( Handle, CachedSelectors.nts_MembersOfGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_RemoveMember_fromGroup_( NObjective.RuntimeObject member, NObjective.RuntimeObject fromGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveMember_fromGroup_( Handle, CachedSelectors.nts_RemoveMember_fromGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), member, fromGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_RemoveSubgroup_fromGroup_( NObjective.RuntimeObject subgroup, NObjective.RuntimeObject fromGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveSubgroup_fromGroup_( Handle, CachedSelectors.nts_RemoveSubgroup_fromGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), subgroup, fromGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SetDistributionIdentifier_forProperty_person_inGroup_allowFetching_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup, char allowFetching ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetDistributionIdentifier_forProperty_person_inGroup_allowFetching_( Handle, CachedSelectors.nts_SetDistributionIdentifier_forProperty_person_inGroup_allowFetching_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), identifier, forProperty, person, inGroup, allowFetching );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_SubgroupsOfGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SubgroupsOfGroup_( Handle, CachedSelectors.nts_SubgroupsOfGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject sortingFirstName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortingFirstName( Handle, CachedSelectors.sortingFirstName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject sortingLastName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortingLastName( Handle, CachedSelectors.sortingLastName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr distributionListConfigWithKey_person_inGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr distributionListConfigWithProperty_person_inGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isGroup_parentOfRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject parentOfRecord );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_AddMember_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, NObjective.RuntimeObject toGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_AddSubgroup_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subgroup, NObjective.RuntimeObject toGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ClearInstanceCachesForGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_DistributionIdentifierForProperty_person_inGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_MembersOfGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_RemoveMember_fromGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, NObjective.RuntimeObject fromGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_RemoveSubgroup_fromGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subgroup, NObjective.RuntimeObject fromGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_SetDistributionIdentifier_forProperty_person_inGroup_allowFetching_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup, char allowFetching );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_SubgroupsOfGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sortingFirstName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sortingLastName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector distributionListConfigWithKey_person_inGroup_ = "distributionListConfigWithKey:person:inGroup:";
			public static readonly Selector distributionListConfigWithProperty_person_inGroup_ = "distributionListConfigWithProperty:person:inGroup:";
			public static readonly Selector isGroup_parentOfRecord_ = "isGroup:parentOfRecord:";
			public static readonly Selector nts_AddMember_toGroup_ = "nts_AddMember:toGroup:";
			public static readonly Selector nts_AddSubgroup_toGroup_ = "nts_AddSubgroup:toGroup:";
			public static readonly Selector nts_ClearInstanceCachesForGroup_ = "nts_ClearInstanceCachesForGroup:";
			public static readonly Selector nts_DistributionIdentifierForProperty_person_inGroup_ = "nts_DistributionIdentifierForProperty:person:inGroup:";
			public static readonly Selector nts_MembersOfGroup_ = "nts_MembersOfGroup:";
			public static readonly Selector nts_RemoveMember_fromGroup_ = "nts_RemoveMember:fromGroup:";
			public static readonly Selector nts_RemoveSubgroup_fromGroup_ = "nts_RemoveSubgroup:fromGroup:";
			public static readonly Selector nts_SetDistributionIdentifier_forProperty_person_inGroup_allowFetching_ = "nts_SetDistributionIdentifier:forProperty:person:inGroup:allowFetching:";
			public static readonly Selector nts_SubgroupsOfGroup_ = "nts_SubgroupsOfGroup:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector sortingFirstName = "sortingFirstName";
			public static readonly Selector sortingLastName = "sortingLastName";
		}
	}
	[ProxyBaseClass(typeof( ABCDRecord ))]
	public struct ABCDInfo : IEquatable<ABCDInfo> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDInfo;
		public static implicit operator IntPtr( ABCDInfo value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDInfo value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDInfo ) ) return false; 
			return Handle == ( ( ABCDInfo )value ).Handle;
		}
		public bool Equals( ABCDInfo value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDInfo value1, ABCDInfo value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDInfo value1, ABCDInfo value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDInfo( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDInfo alloc() {
			return new ABCDInfo( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject nts_CreateInfoWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_CreateInfoWithAddressBook_( ClassHandle, CachedSelectors.nts_CreateInfoWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject fetchedAddressBookSourceWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fetchedAddressBookSourceWithAddressBook_( Handle, CachedSelectors.fetchedAddressBookSourceWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject meUniqueId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.meUniqueId( Handle, CachedSelectors.meUniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject readSharingACL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.readSharingACL( Handle, CachedSelectors.readSharingACL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject readWriteSharingACL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.readWriteSharingACL( Handle, CachedSelectors.readWriteSharingACL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject remoteLocations() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.remoteLocations( Handle, CachedSelectors.remoteLocations, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject serialNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serialNumber( Handle, CachedSelectors.serialNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setMeUniqueId_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMeUniqueId_( Handle, CachedSelectors.setMeUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setReadSharingACL_( NObjective.RuntimeObject acl ) {
			RuntimeObject ___occuredException;
			NativeMethods.setReadSharingACL_( Handle, CachedSelectors.setReadSharingACL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), acl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setReadWriteSharingACL_( NObjective.RuntimeObject acl ) {
			RuntimeObject ___occuredException;
			NativeMethods.setReadWriteSharingACL_( Handle, CachedSelectors.setReadWriteSharingACL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), acl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRemoteLocations_( NObjective.RuntimeObject locations ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRemoteLocations_( Handle, CachedSelectors.setRemoteLocations_, out ___occuredException, sizeof( NObjective.RuntimeObject ), locations );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSerialNumber_( NObjective.RuntimeObject number ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSerialNumber_( Handle, CachedSelectors.setSerialNumber_, out ___occuredException, sizeof( NObjective.RuntimeObject ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fetchedAddressBookSourceWithAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr meUniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_CreateInfoWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr readSharingACL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr readWriteSharingACL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr remoteLocations( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr serialNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMeUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setReadSharingACL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject acl );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setReadWriteSharingACL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject acl );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setRemoteLocations_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject locations );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSerialNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject number );
		}
		static internal class CachedSelectors {
			public static readonly Selector fetchedAddressBookSourceWithAddressBook_ = "fetchedAddressBookSourceWithAddressBook:";
			public static readonly Selector meUniqueId = "meUniqueId";
			public static readonly Selector nts_CreateInfoWithAddressBook_ = "nts_CreateInfoWithAddressBook:";
			public static readonly Selector readSharingACL = "readSharingACL";
			public static readonly Selector readWriteSharingACL = "readWriteSharingACL";
			public static readonly Selector remoteLocations = "remoteLocations";
			public static readonly Selector serialNumber = "serialNumber";
			public static readonly Selector setMeUniqueId_ = "setMeUniqueId:";
			public static readonly Selector setReadSharingACL_ = "setReadSharingACL:";
			public static readonly Selector setReadWriteSharingACL_ = "setReadWriteSharingACL:";
			public static readonly Selector setRemoteLocations_ = "setRemoteLocations:";
			public static readonly Selector setSerialNumber_ = "setSerialNumber:";
		}
	}
	[ProxyBaseClass(typeof( ABCDRecord ))]
	public struct ABCDMailRecent : IEquatable<ABCDMailRecent> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDMailRecent;
		public static implicit operator IntPtr( ABCDMailRecent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDMailRecent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDMailRecent ) ) return false; 
			return Handle == ( ( ABCDMailRecent )value ).Handle;
		}
		public bool Equals( ABCDMailRecent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDMailRecent value1, ABCDMailRecent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDMailRecent value1, ABCDMailRecent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDMailRecent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDMailRecent alloc() {
			return new ABCDMailRecent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject creationDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.creationDate( Handle, CachedSelectors.creationDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lastEmailDatesArray() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastEmailDatesArray( Handle, CachedSelectors.lastEmailDatesArray, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject modificationDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modificationDate( Handle, CachedSelectors.modificationDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEmail_( Handle, CachedSelectors.setEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFirstName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFirstName_( Handle, CachedSelectors.setFirstName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLastEmailDatesArray_( NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLastEmailDatesArray_( Handle, CachedSelectors.setLastEmailDatesArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLastName_( Handle, CachedSelectors.setLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrimitiveCreationDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrimitiveCreationDate_( Handle, CachedSelectors.setPrimitiveCreationDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrimitiveCreationDateYear_( NObjective.RuntimeObject year ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrimitiveCreationDateYear_( Handle, CachedSelectors.setPrimitiveCreationDateYear_, out ___occuredException, sizeof( NObjective.RuntimeObject ), year );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrimitiveCreationDateYearless_( NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrimitiveCreationDateYearless_( Handle, CachedSelectors.setPrimitiveCreationDateYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrimitiveModificationDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrimitiveModificationDate_( Handle, CachedSelectors.setPrimitiveModificationDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrimitiveModificationDateYear_( NObjective.RuntimeObject year ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrimitiveModificationDateYear_( Handle, CachedSelectors.setPrimitiveModificationDateYear_, out ___occuredException, sizeof( NObjective.RuntimeObject ), year );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrimitiveModificationDateYearless_( NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrimitiveModificationDateYearless_( Handle, CachedSelectors.setPrimitiveModificationDateYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr creationDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr lastEmailDatesArray( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr modificationDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setFirstName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setLastEmailDatesArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrimitiveCreationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrimitiveCreationDateYear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject year );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrimitiveCreationDateYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrimitiveModificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrimitiveModificationDateYear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject year );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrimitiveModificationDateYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
		}
		static internal class CachedSelectors {
			public static readonly Selector creationDate = "creationDate";
			public static readonly Selector lastEmailDatesArray = "lastEmailDatesArray";
			public static readonly Selector modificationDate = "modificationDate";
			public static readonly Selector setEmail_ = "setEmail:";
			public static readonly Selector setFirstName_ = "setFirstName:";
			public static readonly Selector setLastEmailDatesArray_ = "setLastEmailDatesArray:";
			public static readonly Selector setLastName_ = "setLastName:";
			public static readonly Selector setPrimitiveCreationDate_ = "setPrimitiveCreationDate:";
			public static readonly Selector setPrimitiveCreationDateYear_ = "setPrimitiveCreationDateYear:";
			public static readonly Selector setPrimitiveCreationDateYearless_ = "setPrimitiveCreationDateYearless:";
			public static readonly Selector setPrimitiveModificationDate_ = "setPrimitiveModificationDate:";
			public static readonly Selector setPrimitiveModificationDateYear_ = "setPrimitiveModificationDateYear:";
			public static readonly Selector setPrimitiveModificationDateYearless_ = "setPrimitiveModificationDateYearless:";
		}
	}
	[ProxyBaseClass(typeof( NSManagedObject ))]
	public struct ABCDNote : IEquatable<ABCDNote> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDNote;
		public static implicit operator IntPtr( ABCDNote value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDNote value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDNote ) ) return false; 
			return Handle == ( ( ABCDNote )value ).Handle;
		}
		public bool Equals( ABCDNote value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDNote value1, ABCDNote value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDNote value1, ABCDNote value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDNote( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDNote alloc() {
			return new ABCDNote( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setText_( Handle, CachedSelectors.setText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
		}
		static internal class CachedSelectors {
			public static readonly Selector setText_ = "setText:";
		}
	}
	[ProxyBaseClass(typeof( NSManagedObject ))]
	public struct ABCDOwnedObject : IEquatable<ABCDOwnedObject> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDOwnedObject;
		public static implicit operator IntPtr( ABCDOwnedObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDOwnedObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDOwnedObject ) ) return false; 
			return Handle == ( ( ABCDOwnedObject )value ).Handle;
		}
		public bool Equals( ABCDOwnedObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDOwnedObject value1, ABCDOwnedObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDOwnedObject value1, ABCDOwnedObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDOwnedObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDOwnedObject alloc() {
			return new ABCDOwnedObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSManagedObject ))]
	public struct ABCDRecord : IEquatable<ABCDRecord> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDRecord;
		public static implicit operator IntPtr( ABCDRecord value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDRecord value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDRecord ) ) return false; 
			return Handle == ( ( ABCDRecord )value ).Handle;
		}
		public bool Equals( ABCDRecord value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDRecord value1, ABCDRecord value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDRecord value1, ABCDRecord value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDRecord( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDRecord alloc() {
			return new ABCDRecord( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject abEntityDescriptionInAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEntityDescriptionInAddressBook_( ClassHandle, CachedSelectors.abEntityDescriptionInAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char abEntityKnowsKey_inAddressBook_( NObjective.RuntimeObject key, NObjective.RuntimeObject inAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEntityKnowsKey_inAddressBook_( ClassHandle, CachedSelectors.abEntityKnowsKey_inAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, inAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char abEntityKnowsKey_inManagedObjectContext_( NObjective.RuntimeObject key, NObjective.RuntimeObject inManagedObjectContext ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEntityKnowsKey_inManagedObjectContext_( ClassHandle, CachedSelectors.abEntityKnowsKey_inManagedObjectContext_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, inManagedObjectContext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject abEntityName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEntityName( ClassHandle, CachedSelectors.abEntityName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static int addPropertiesAndTypes_forClass_withAddressBook_( NObjective.RuntimeObject types, NObjective.RuntimeClass forClass, NObjective.RuntimeObject withAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_forClass_withAddressBook_( ClassHandle, CachedSelectors.addPropertiesAndTypes_forClass_withAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ), types, forClass, withAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int addPropertiesAndTypes_forClass_withAddressBook_acquireLock_save_( NObjective.RuntimeObject types, NObjective.RuntimeClass forClass, NObjective.RuntimeObject withAddressBook, char acquireLock, char save ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_forClass_withAddressBook_acquireLock_save_( ClassHandle, CachedSelectors.addPropertiesAndTypes_forClass_withAddressBook_acquireLock_save_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), types, forClass, withAddressBook, acquireLock, save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject copyPublicRecordForClass_withDatabaseImpl_inAddressBook_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withDatabaseImpl, NObjective.RuntimeObject inAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.copyPublicRecordForClass_withDatabaseImpl_inAddressBook_( ClassHandle, CachedSelectors.copyPublicRecordForClass_withDatabaseImpl_inAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, withDatabaseImpl, inAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject copyPublicRecordsForClass_withDatabaseImpls_inAddressBook_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withDatabaseImpls, NObjective.RuntimeObject inAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.copyPublicRecordsForClass_withDatabaseImpls_inAddressBook_( ClassHandle, CachedSelectors.copyPublicRecordsForClass_withDatabaseImpls_inAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, withDatabaseImpls, inAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject customPropertyDefinitionsWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.customPropertyDefinitionsWithAddressBook_( ClassHandle, CachedSelectors.customPropertyDefinitionsWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject customPropertyDefinitionWithName_addressBook_( NObjective.RuntimeObject name, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.customPropertyDefinitionWithName_addressBook_( ClassHandle, CachedSelectors.customPropertyDefinitionWithName_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject customPropertyValueKeyNameForPropertyType_isSerializedPropertyList_( int type, System.IntPtr isSerializedPropertyList ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.customPropertyValueKeyNameForPropertyType_isSerializedPropertyList_( ClassHandle, CachedSelectors.customPropertyValueKeyNameForPropertyType_isSerializedPropertyList_, out ___occuredException, sizeof( int ) + sizeof( System.IntPtr ), type, isSerializedPropertyList );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject entityNameForPropertyKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.entityNameForPropertyKey_( ClassHandle, CachedSelectors.entityNameForPropertyKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void extractYear_yearlessDate_fromDate_( System.IntPtr year, System.IntPtr yearlessDate, NObjective.RuntimeObject fromDate ) {
			RuntimeObject ___occuredException;
			NativeMethods.extractYear_yearlessDate_fromDate_( ClassHandle, CachedSelectors.extractYear_yearlessDate_fromDate_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ), year, yearlessDate, fromDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject fetchCustomPropertyDefinitionsWithRecordType_addressBook_( NObjective.RuntimeObject type, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fetchCustomPropertyDefinitionsWithRecordType_addressBook_( ClassHandle, CachedSelectors.fetchCustomPropertyDefinitionsWithRecordType_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), type, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject keyForProperty_entityName_entityKey_( NObjective.RuntimeObject property, System.IntPtr entityName, System.IntPtr entityKey ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyForProperty_entityName_entityKey_( ClassHandle, CachedSelectors.keyForProperty_entityName_entityKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), property, entityName, entityKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject keyForProperty_entityName_entityKey_entityWithValueSel_valueWithEntitySel_( NObjective.RuntimeObject property, System.IntPtr entityName, System.IntPtr entityKey, System.IntPtr entityWithValueSel, System.IntPtr valueWithEntitySel ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyForProperty_entityName_entityKey_entityWithValueSel_valueWithEntitySel_( ClassHandle, CachedSelectors.keyForProperty_entityName_entityKey_entityWithValueSel_valueWithEntitySel_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), property, entityName, entityKey, entityWithValueSel, valueWithEntitySel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject managedObjectContextForAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.managedObjectContextForAddressBook_( ClassHandle, CachedSelectors.managedObjectContextForAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char moveRecord_toAddressBook_( NObjective.RuntimeObject record, NObjective.RuntimeObject toAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.moveRecord_toAddressBook_( ClassHandle, CachedSelectors.moveRecord_toAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, toAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject newIncrementedSearchString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newIncrementedSearchString_( ClassHandle, CachedSelectors.newIncrementedSearchString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject newNormalizedSearchString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newNormalizedSearchString_( ClassHandle, CachedSelectors.newNormalizedSearchString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject newNormalizedSortString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newNormalizedSortString_( ClassHandle, CachedSelectors.newNormalizedSortString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject prefetchRelationshipKeyPaths() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.prefetchRelationshipKeyPaths( ClassHandle, CachedSelectors.prefetchRelationshipKeyPaths, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject propertyTypesForClass_withAddressBook_acquireLock_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withAddressBook, char acquireLock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyTypesForClass_withAddressBook_acquireLock_( ClassHandle, CachedSelectors.propertyTypesForClass_withAddressBook_acquireLock_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), @class, withAddressBook, acquireLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject publicRecordsForClass_withDatabaseImpls_inAddressBook_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withDatabaseImpls, NObjective.RuntimeObject inAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicRecordsForClass_withDatabaseImpls_inAddressBook_( ClassHandle, CachedSelectors.publicRecordsForClass_withDatabaseImpls_inAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, withDatabaseImpls, inAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char removeRecord_fromAddressBook_( NObjective.RuntimeObject record, NObjective.RuntimeObject fromAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeRecord_fromAddressBook_( ClassHandle, CachedSelectors.removeRecord_fromAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, fromAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int typeOfCustomProperty_addressBook_( NObjective.RuntimeObject property, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeOfCustomProperty_addressBook_( ClassHandle, CachedSelectors.typeOfCustomProperty_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int typeOfProperty_forRecord_( NObjective.RuntimeObject property, NObjective.RuntimeObject forRecord ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeOfProperty_forRecord_( ClassHandle, CachedSelectors.typeOfProperty_forRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, forRecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void abPublicRecordIsGone_( NObjective.RuntimeObject gone ) {
			RuntimeObject ___occuredException;
			NativeMethods.abPublicRecordIsGone_( Handle, CachedSelectors.abPublicRecordIsGone_, out ___occuredException, sizeof( NObjective.RuntimeObject ), gone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject aggregateModificationDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.aggregateModificationDate( Handle, CachedSelectors.aggregateModificationDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allCustomPropertyValuesWithCustomProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allCustomPropertyValuesWithCustomProperty_( Handle, CachedSelectors.allCustomPropertyValuesWithCustomProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char applyMultiValue_withProperty_toRecord_( NObjective.RuntimeObject value, NObjective.RuntimeObject withProperty, NObjective.RuntimeObject toRecord ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.applyMultiValue_withProperty_toRecord_( Handle, CachedSelectors.applyMultiValue_withProperty_toRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, withProperty, toRecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cachePropertyValue_withKey_uniqueId_addressBook_( NObjective.RuntimeObject value, NObjective.RuntimeObject withKey, NObjective.RuntimeObject uniqueId, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			NativeMethods.cachePropertyValue_withKey_uniqueId_addressBook_( Handle, CachedSelectors.cachePropertyValue_withKey_uniqueId_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, withKey, uniqueId, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearCachedPropertyValue_withKey_( NObjective.RuntimeObject value, NObjective.RuntimeObject withKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearCachedPropertyValue_withKey_( Handle, CachedSelectors.clearCachedPropertyValue_withKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, withKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearCachedPropertyValuesWithKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearCachedPropertyValuesWithKey_( Handle, CachedSelectors.clearCachedPropertyValuesWithKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject copyMultiValueWithRecord_withProperty_( NObjective.RuntimeObject record, NObjective.RuntimeObject withProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.copyMultiValueWithRecord_withProperty_( Handle, CachedSelectors.copyMultiValueWithRecord_withProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, withProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int creationDateYear() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.creationDateYear( Handle, CachedSelectors.creationDateYear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double creationDateYearless() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.creationDateYearless( Handle, CachedSelectors.creationDateYearless, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject fetchCustomPropertyValuesWithCustomProperty_addressBook_( NObjective.RuntimeObject property, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fetchCustomPropertyValuesWithCustomProperty_addressBook_( Handle, CachedSelectors.fetchCustomPropertyValuesWithCustomProperty_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject fetchPropertyValuesWithKey_uniqueId_addressBook_( NObjective.RuntimeObject key, NObjective.RuntimeObject uniqueId, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fetchPropertyValuesWithKey_uniqueId_addressBook_( Handle, CachedSelectors.fetchPropertyValuesWithKey_uniqueId_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, uniqueId, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithUniqueId_addressBook_( NObjective.RuntimeObject id, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUniqueId_addressBook_( Handle, CachedSelectors.initWithUniqueId_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), id, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void invalidateAllCachedPropertyValues() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateAllCachedPropertyValues( Handle, CachedSelectors.invalidateAllCachedPropertyValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void invalidateCachedPropertyValuesWithKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateCachedPropertyValuesWithKey_( Handle, CachedSelectors.invalidateCachedPropertyValuesWithKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isCustomProperty_returnType_customProperty_addressBook_( NObjective.RuntimeObject property, System.IntPtr returnType, System.IntPtr customProperty, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCustomProperty_returnType_customProperty_addressBook_( Handle, CachedSelectors.isCustomProperty_returnType_customProperty_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ), property, returnType, customProperty, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int modificationDateYear() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modificationDateYear( Handle, CachedSelectors.modificationDateYear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double modificationDateYearless() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modificationDateYearless( Handle, CachedSelectors.modificationDateYearless, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_AffectsSmartGroupsIsNew_record_( char @new, NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AffectsSmartGroupsIsNew_record_( Handle, CachedSelectors.nts_AffectsSmartGroupsIsNew_record_, out ___occuredException, sizeof( char ) + sizeof( NObjective.RuntimeObject ), @new, record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_ChangedProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ChangedProperties( Handle, CachedSelectors.nts_ChangedProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_HasChangedProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_HasChangedProperties( Handle, CachedSelectors.nts_HasChangedProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_ParentGroupsOfRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ParentGroupsOfRecord_( Handle, CachedSelectors.nts_ParentGroupsOfRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_SetValue_forProperty_recordCouldBeInDatabase_record_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, char recordCouldBeInDatabase, NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetValue_forProperty_recordCouldBeInDatabase_record_( Handle, CachedSelectors.nts_SetValue_forProperty_recordCouldBeInDatabase_record_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), value, forProperty, recordCouldBeInDatabase, record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_UniqueId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_UniqueId( Handle, CachedSelectors.nts_UniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_ValueForProperty_row_record_( NObjective.RuntimeObject property, int row, NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ValueForProperty_row_record_( Handle, CachedSelectors.nts_ValueForProperty_row_record_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), property, row, record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyValuesWithKey_addressBook_( NObjective.RuntimeObject key, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyValuesWithKey_addressBook_( Handle, CachedSelectors.propertyValuesWithKey_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyValueWithKey_uniqueId_addressBook_( NObjective.RuntimeObject key, NObjective.RuntimeObject uniqueId, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyValueWithKey_uniqueId_addressBook_( Handle, CachedSelectors.propertyValueWithKey_uniqueId_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, uniqueId, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyValueWithKey_uniqueId_addressBook_preventFetching_( NObjective.RuntimeObject key, NObjective.RuntimeObject uniqueId, NObjective.RuntimeObject addressBook, char preventFetching ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyValueWithKey_uniqueId_addressBook_preventFetching_( Handle, CachedSelectors.propertyValueWithKey_uniqueId_addressBook_preventFetching_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), key, uniqueId, addressBook, preventFetching );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject publicRecord() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicRecord( Handle, CachedSelectors.publicRecord, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAggregateModificationDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAggregateModificationDate_( Handle, CachedSelectors.setAggregateModificationDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCreationDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCreationDate_( Handle, CachedSelectors.setCreationDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCreationDateYear_( NObjective.RuntimeObject year ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCreationDateYear_( Handle, CachedSelectors.setCreationDateYear_, out ___occuredException, sizeof( NObjective.RuntimeObject ), year );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCreationDateYearless_( NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCreationDateYearless_( Handle, CachedSelectors.setCreationDateYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setModificationDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setModificationDate_( Handle, CachedSelectors.setModificationDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setModificationDateYear_( NObjective.RuntimeObject year ) {
			RuntimeObject ___occuredException;
			NativeMethods.setModificationDateYear_( Handle, CachedSelectors.setModificationDateYear_, out ___occuredException, sizeof( NObjective.RuntimeObject ), year );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setModificationDateYearless_( NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			NativeMethods.setModificationDateYearless_( Handle, CachedSelectors.setModificationDateYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPublicRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPublicRecord_( Handle, CachedSelectors.setPublicRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject sortedPropertyValuesWithKey_addressBook_( NObjective.RuntimeObject key, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortedPropertyValuesWithKey_addressBook_( Handle, CachedSelectors.sortedPropertyValuesWithKey_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abEntityDescriptionInAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abEntityKnowsKey_inAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject inAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abEntityKnowsKey_inManagedObjectContext_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject inManagedObjectContext );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abEntityName( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abPublicRecordIsGone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject gone );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_forClass_withAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeClass forClass, NObjective.RuntimeObject withAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_forClass_withAddressBook_acquireLock_save_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeClass forClass, NObjective.RuntimeObject withAddressBook, char acquireLock, char save );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr aggregateModificationDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allCustomPropertyValuesWithCustomProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char applyMultiValue_withProperty_toRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject withProperty, NObjective.RuntimeObject toRecord );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cachePropertyValue_withKey_uniqueId_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject withKey, NObjective.RuntimeObject uniqueId, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearCachedPropertyValue_withKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject withKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearCachedPropertyValuesWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr copyMultiValueWithRecord_withProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject withProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr copyPublicRecordForClass_withDatabaseImpl_inAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withDatabaseImpl, NObjective.RuntimeObject inAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr copyPublicRecordsForClass_withDatabaseImpls_inAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withDatabaseImpls, NObjective.RuntimeObject inAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int creationDateYear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double creationDateYearless( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr customPropertyDefinitionsWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr customPropertyDefinitionWithName_addressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr customPropertyValueKeyNameForPropertyType_isSerializedPropertyList_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, System.IntPtr isSerializedPropertyList );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr entityNameForPropertyKey_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void extractYear_yearlessDate_fromDate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr year, System.IntPtr yearlessDate, NObjective.RuntimeObject fromDate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fetchCustomPropertyDefinitionsWithRecordType_addressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fetchCustomPropertyValuesWithCustomProperty_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fetchPropertyValuesWithKey_uniqueId_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject uniqueId, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUniqueId_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void invalidateAllCachedPropertyValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void invalidateCachedPropertyValuesWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isCustomProperty_returnType_customProperty_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, System.IntPtr returnType, System.IntPtr customProperty, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr keyForProperty_entityName_entityKey_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, System.IntPtr entityName, System.IntPtr entityKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr keyForProperty_entityName_entityKey_entityWithValueSel_valueWithEntitySel_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, System.IntPtr entityName, System.IntPtr entityKey, System.IntPtr entityWithValueSel, System.IntPtr valueWithEntitySel );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr managedObjectContextForAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int modificationDateYear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double modificationDateYearless( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char moveRecord_toAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject toAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr newIncrementedSearchString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr newNormalizedSearchString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr newNormalizedSortString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_AffectsSmartGroupsIsNew_record_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @new, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_ChangedProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_HasChangedProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_ParentGroupsOfRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_SetValue_forProperty_recordCouldBeInDatabase_record_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, char recordCouldBeInDatabase, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_UniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_ValueForProperty_row_record_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int row, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr prefetchRelationshipKeyPaths( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyTypesForClass_withAddressBook_acquireLock_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withAddressBook, char acquireLock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyValuesWithKey_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyValueWithKey_uniqueId_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject uniqueId, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyValueWithKey_uniqueId_addressBook_preventFetching_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject uniqueId, NObjective.RuntimeObject addressBook, char preventFetching );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr publicRecord( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr publicRecordsForClass_withDatabaseImpls_inAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withDatabaseImpls, NObjective.RuntimeObject inAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char removeRecord_fromAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject fromAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAggregateModificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCreationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCreationDateYear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject year );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCreationDateYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setModificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setModificationDateYear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject year );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setModificationDateYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPublicRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sortedPropertyValuesWithKey_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int typeOfCustomProperty_addressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int typeOfProperty_forRecord_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject forRecord );
		}
		static internal class CachedSelectors {
			public static readonly Selector abEntityDescriptionInAddressBook_ = "abEntityDescriptionInAddressBook:";
			public static readonly Selector abEntityKnowsKey_inAddressBook_ = "abEntityKnowsKey:inAddressBook:";
			public static readonly Selector abEntityKnowsKey_inManagedObjectContext_ = "abEntityKnowsKey:inManagedObjectContext:";
			public static readonly Selector abEntityName = "abEntityName";
			public static readonly Selector abPublicRecordIsGone_ = "abPublicRecordIsGone:";
			public static readonly Selector addPropertiesAndTypes_forClass_withAddressBook_ = "addPropertiesAndTypes:forClass:withAddressBook:";
			public static readonly Selector addPropertiesAndTypes_forClass_withAddressBook_acquireLock_save_ = "addPropertiesAndTypes:forClass:withAddressBook:acquireLock:save:";
			public static readonly Selector aggregateModificationDate = "aggregateModificationDate";
			public static readonly Selector allCustomPropertyValuesWithCustomProperty_ = "allCustomPropertyValuesWithCustomProperty:";
			public static readonly Selector applyMultiValue_withProperty_toRecord_ = "applyMultiValue:withProperty:toRecord:";
			public static readonly Selector cachePropertyValue_withKey_uniqueId_addressBook_ = "cachePropertyValue:withKey:uniqueId:addressBook:";
			public static readonly Selector clearCachedPropertyValue_withKey_ = "clearCachedPropertyValue:withKey:";
			public static readonly Selector clearCachedPropertyValuesWithKey_ = "clearCachedPropertyValuesWithKey:";
			public static readonly Selector copyMultiValueWithRecord_withProperty_ = "copyMultiValueWithRecord:withProperty:";
			public static readonly Selector copyPublicRecordForClass_withDatabaseImpl_inAddressBook_ = "copyPublicRecordForClass:withDatabaseImpl:inAddressBook:";
			public static readonly Selector copyPublicRecordsForClass_withDatabaseImpls_inAddressBook_ = "copyPublicRecordsForClass:withDatabaseImpls:inAddressBook:";
			public static readonly Selector creationDateYear = "creationDateYear";
			public static readonly Selector creationDateYearless = "creationDateYearless";
			public static readonly Selector customPropertyDefinitionsWithAddressBook_ = "customPropertyDefinitionsWithAddressBook:";
			public static readonly Selector customPropertyDefinitionWithName_addressBook_ = "customPropertyDefinitionWithName:addressBook:";
			public static readonly Selector customPropertyValueKeyNameForPropertyType_isSerializedPropertyList_ = "customPropertyValueKeyNameForPropertyType:isSerializedPropertyList:";
			public static readonly Selector entityNameForPropertyKey_ = "entityNameForPropertyKey:";
			public static readonly Selector extractYear_yearlessDate_fromDate_ = "extractYear:yearlessDate:fromDate:";
			public static readonly Selector fetchCustomPropertyDefinitionsWithRecordType_addressBook_ = "fetchCustomPropertyDefinitionsWithRecordType:addressBook:";
			public static readonly Selector fetchCustomPropertyValuesWithCustomProperty_addressBook_ = "fetchCustomPropertyValuesWithCustomProperty:addressBook:";
			public static readonly Selector fetchPropertyValuesWithKey_uniqueId_addressBook_ = "fetchPropertyValuesWithKey:uniqueId:addressBook:";
			public static readonly Selector initWithUniqueId_addressBook_ = "initWithUniqueId:addressBook:";
			public static readonly Selector invalidateAllCachedPropertyValues = "invalidateAllCachedPropertyValues";
			public static readonly Selector invalidateCachedPropertyValuesWithKey_ = "invalidateCachedPropertyValuesWithKey:";
			public static readonly Selector isCustomProperty_returnType_customProperty_addressBook_ = "isCustomProperty:returnType:customProperty:addressBook:";
			public static readonly Selector keyForProperty_entityName_entityKey_ = "keyForProperty:entityName:entityKey:";
			public static readonly Selector keyForProperty_entityName_entityKey_entityWithValueSel_valueWithEntitySel_ = "keyForProperty:entityName:entityKey:entityWithValueSel:valueWithEntitySel:";
			public static readonly Selector managedObjectContextForAddressBook_ = "managedObjectContextForAddressBook:";
			public static readonly Selector modificationDateYear = "modificationDateYear";
			public static readonly Selector modificationDateYearless = "modificationDateYearless";
			public static readonly Selector moveRecord_toAddressBook_ = "moveRecord:toAddressBook:";
			public static readonly Selector newIncrementedSearchString_ = "newIncrementedSearchString:";
			public static readonly Selector newNormalizedSearchString_ = "newNormalizedSearchString:";
			public static readonly Selector newNormalizedSortString_ = "newNormalizedSortString:";
			public static readonly Selector nts_AffectsSmartGroupsIsNew_record_ = "nts_AffectsSmartGroupsIsNew:record:";
			public static readonly Selector nts_ChangedProperties = "nts_ChangedProperties";
			public static readonly Selector nts_HasChangedProperties = "nts_HasChangedProperties";
			public static readonly Selector nts_ParentGroupsOfRecord_ = "nts_ParentGroupsOfRecord:";
			public static readonly Selector nts_SetValue_forProperty_recordCouldBeInDatabase_record_ = "nts_SetValue:forProperty:recordCouldBeInDatabase:record:";
			public static readonly Selector nts_UniqueId = "nts_UniqueId";
			public static readonly Selector nts_ValueForProperty_row_record_ = "nts_ValueForProperty:row:record:";
			public static readonly Selector prefetchRelationshipKeyPaths = "prefetchRelationshipKeyPaths";
			public static readonly Selector propertyTypesForClass_withAddressBook_acquireLock_ = "propertyTypesForClass:withAddressBook:acquireLock:";
			public static readonly Selector propertyValuesWithKey_addressBook_ = "propertyValuesWithKey:addressBook:";
			public static readonly Selector propertyValueWithKey_uniqueId_addressBook_ = "propertyValueWithKey:uniqueId:addressBook:";
			public static readonly Selector propertyValueWithKey_uniqueId_addressBook_preventFetching_ = "propertyValueWithKey:uniqueId:addressBook:preventFetching:";
			public static readonly Selector publicRecord = "publicRecord";
			public static readonly Selector publicRecordsForClass_withDatabaseImpls_inAddressBook_ = "publicRecordsForClass:withDatabaseImpls:inAddressBook:";
			public static readonly Selector removeRecord_fromAddressBook_ = "removeRecord:fromAddressBook:";
			public static readonly Selector setAggregateModificationDate_ = "setAggregateModificationDate:";
			public static readonly Selector setCreationDate_ = "setCreationDate:";
			public static readonly Selector setCreationDateYear_ = "setCreationDateYear:";
			public static readonly Selector setCreationDateYearless_ = "setCreationDateYearless:";
			public static readonly Selector setModificationDate_ = "setModificationDate:";
			public static readonly Selector setModificationDateYear_ = "setModificationDateYear:";
			public static readonly Selector setModificationDateYearless_ = "setModificationDateYearless:";
			public static readonly Selector setPublicRecord_ = "setPublicRecord:";
			public static readonly Selector sortedPropertyValuesWithKey_addressBook_ = "sortedPropertyValuesWithKey:addressBook:";
			public static readonly Selector typeOfCustomProperty_addressBook_ = "typeOfCustomProperty:addressBook:";
			public static readonly Selector typeOfProperty_forRecord_ = "typeOfProperty:forRecord:";
		}
	}
	[ProxyBaseClass(typeof( ABCDGroup ))]
	public struct ABCDSmartGroup : IEquatable<ABCDSmartGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDSmartGroup;
		public static implicit operator IntPtr( ABCDSmartGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDSmartGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDSmartGroup ) ) return false; 
			return Handle == ( ( ABCDSmartGroup )value ).Handle;
		}
		public bool Equals( ABCDSmartGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDSmartGroup value1, ABCDSmartGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDSmartGroup value1, ABCDSmartGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDSmartGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDSmartGroup alloc() {
			return new ABCDSmartGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject modifiedUniqueIdsSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modifiedUniqueIdsSet( Handle, CachedSelectors.modifiedUniqueIdsSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setModifiedUniqueIdsSet_( NObjective.RuntimeObject @set ) {
			RuntimeObject ___occuredException;
			NativeMethods.setModifiedUniqueIdsSet_( Handle, CachedSelectors.setModifiedUniqueIdsSet_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr modifiedUniqueIdsSet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setModifiedUniqueIdsSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @set );
		}
		static internal class CachedSelectors {
			public static readonly Selector modifiedUniqueIdsSet = "modifiedUniqueIdsSet";
			public static readonly Selector setModifiedUniqueIdsSet_ = "setModifiedUniqueIdsSet:";
		}
	}
	[ProxyBaseClass(typeof( ABCDContact ))]
	public struct ABCDSubscribedContact : IEquatable<ABCDSubscribedContact> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDSubscribedContact;
		public static implicit operator IntPtr( ABCDSubscribedContact value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDSubscribedContact value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDSubscribedContact ) ) return false; 
			return Handle == ( ( ABCDSubscribedContact )value ).Handle;
		}
		public bool Equals( ABCDSubscribedContact value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDSubscribedContact value1, ABCDSubscribedContact value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDSubscribedContact value1, ABCDSubscribedContact value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDSubscribedContact( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDSubscribedContact alloc() {
			return new ABCDSubscribedContact( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( ABCDGroup ))]
	public struct ABCDSubscribedGroup : IEquatable<ABCDSubscribedGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCDSubscribedGroup;
		public static implicit operator IntPtr( ABCDSubscribedGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCDSubscribedGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCDSubscribedGroup ) ) return false; 
			return Handle == ( ( ABCDSubscribedGroup )value ).Handle;
		}
		public bool Equals( ABCDSubscribedGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCDSubscribedGroup value1, ABCDSubscribedGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCDSubscribedGroup value1, ABCDSubscribedGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCDSubscribedGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCDSubscribedGroup alloc() {
			return new ABCDSubscribedGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABCertController : IEquatable<ABCertController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCertController;
		public static implicit operator IntPtr( ABCertController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCertController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCertController ) ) return false; 
			return Handle == ( ( ABCertController )value ).Handle;
		}
		public bool Equals( ABCertController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCertController value1, ABCertController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCertController value1, ABCertController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCertController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCertController alloc() {
			return new ABCertController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void loadBundle() {
			RuntimeObject ___occuredException;
			NativeMethods.loadBundle( ClassHandle, CachedSelectors.loadBundle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject sharedCertificatePanel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedCertificatePanel( ClassHandle, CachedSelectors.sharedCertificatePanel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int beginCertLookupForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.beginCertLookupForEmail_( Handle, CachedSelectors.beginCertLookupForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelPendingLookups() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelPendingLookups( Handle, CachedSelectors.cancelPendingLookups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDelegate_( Handle, CachedSelectors.initWithDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void tellDelegateAboutJobResult_( NObjective.RuntimeObject result ) {
			RuntimeObject ___occuredException;
			NativeMethods.tellDelegateAboutJobResult_( Handle, CachedSelectors.tellDelegateAboutJobResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ), result );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void workLoop() {
			RuntimeObject ___occuredException;
			NativeMethods.workLoop( Handle, CachedSelectors.workLoop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int beginCertLookupForEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelPendingLookups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void loadBundle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedCertificatePanel( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void tellDelegateAboutJobResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject result );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void workLoop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector beginCertLookupForEmail_ = "beginCertLookupForEmail:";
			public static readonly Selector cancelPendingLookups = "cancelPendingLookups";
			public static readonly Selector initWithDelegate_ = "initWithDelegate:";
			public static readonly Selector loadBundle = "loadBundle";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector sharedCertificatePanel = "sharedCertificatePanel";
			public static readonly Selector tellDelegateAboutJobResult_ = "tellDelegateAboutJobResult:";
			public static readonly Selector workLoop = "workLoop";
		}
	}
	[ProxyBaseClass(typeof( NSButtonCell ))]
	public struct ABCertificateButtonCell : IEquatable<ABCertificateButtonCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCertificateButtonCell;
		public static implicit operator IntPtr( ABCertificateButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCertificateButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCertificateButtonCell ) ) return false; 
			return Handle == ( ( ABCertificateButtonCell )value ).Handle;
		}
		public bool Equals( ABCertificateButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCertificateButtonCell value1, ABCertificateButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCertificateButtonCell value1, ABCertificateButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCertificateButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCertificateButtonCell alloc() {
			return new ABCertificateButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject attachment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attachment( Handle, CachedSelectors.attachment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject email() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.email( Handle, CachedSelectors.email, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithInputController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInputController_( Handle, CachedSelectors.initWithInputController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAttachment_( NObjective.RuntimeObject attachment ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttachment_( Handle, CachedSelectors.setAttachment_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attachment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEmail_( Handle, CachedSelectors.setEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char wantsToTrackMouse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wantsToTrackMouse( Handle, CachedSelectors.wantsToTrackMouse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr attachment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr email( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithInputController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAttachment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attachment );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char wantsToTrackMouse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attachment = "attachment";
			public static readonly Selector email = "email";
			public static readonly Selector initWithInputController_ = "initWithInputController:";
			public static readonly Selector setAttachment_ = "setAttachment:";
			public static readonly Selector setEmail_ = "setEmail:";
			public static readonly Selector wantsToTrackMouse = "wantsToTrackMouse";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABChangePropertiesCommand : IEquatable<ABChangePropertiesCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABChangePropertiesCommand;
		public static implicit operator IntPtr( ABChangePropertiesCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABChangePropertiesCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABChangePropertiesCommand ) ) return false; 
			return Handle == ( ( ABChangePropertiesCommand )value ).Handle;
		}
		public bool Equals( ABChangePropertiesCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABChangePropertiesCommand value1, ABChangePropertiesCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABChangePropertiesCommand value1, ABChangePropertiesCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABChangePropertiesCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABChangePropertiesCommand alloc() {
			return new ABChangePropertiesCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_person_properties_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject person, NObjective.RuntimeObject properties, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_person_properties_addressBook_( Handle, CachedSelectors.initWithGroup_person_properties_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, person, properties, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_person_properties_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject person, NObjective.RuntimeObject properties, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_person_properties_addressBook_ = "initWithGroup:person:properties:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABChangePropertyCommand : IEquatable<ABChangePropertyCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABChangePropertyCommand;
		public static implicit operator IntPtr( ABChangePropertyCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABChangePropertyCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABChangePropertyCommand ) ) return false; 
			return Handle == ( ( ABChangePropertyCommand )value ).Handle;
		}
		public bool Equals( ABChangePropertyCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABChangePropertyCommand value1, ABChangePropertyCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABChangePropertyCommand value1, ABChangePropertyCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABChangePropertyCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABChangePropertyCommand alloc() {
			return new ABChangePropertyCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithPerson_propertyPath_oldValue_inputController_( NObjective.RuntimeObject person, NObjective.RuntimeObject propertyPath, NObjective.RuntimeObject oldValue, NObjective.RuntimeObject inputController ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPerson_propertyPath_oldValue_inputController_( Handle, CachedSelectors.initWithPerson_propertyPath_oldValue_inputController_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, propertyPath, oldValue, inputController );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyPath( Handle, CachedSelectors.propertyPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setNewValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNewValue_( Handle, CachedSelectors.setNewValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithPerson_propertyPath_oldValue_inputController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject propertyPath, NObjective.RuntimeObject oldValue, NObjective.RuntimeObject inputController );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setNewValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithPerson_propertyPath_oldValue_inputController_ = "initWithPerson:propertyPath:oldValue:inputController:";
			public static readonly Selector propertyPath = "propertyPath";
			public static readonly Selector setNewValue_ = "setNewValue:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABCommand : IEquatable<ABCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCommand;
		public static implicit operator IntPtr( ABCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCommand ) ) return false; 
			return Handle == ( ( ABCommand )value ).Handle;
		}
		public bool Equals( ABCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCommand value1, ABCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCommand value1, ABCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCommand alloc() {
			return new ABCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject bundle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bundle( ClassHandle, CachedSelectors.bundle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char doIt() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doIt( Handle, CachedSelectors.doIt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAddressBook_( Handle, CachedSelectors.initWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char performWithActionName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performWithActionName_( Handle, CachedSelectors.performWithActionName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void redoIt() {
			RuntimeObject ___occuredException;
			NativeMethods.redoIt( Handle, CachedSelectors.redoIt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char save() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.save( Handle, CachedSelectors.save, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setSave_( char save ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSave_( Handle, CachedSelectors.setSave_, out ___occuredException, sizeof( char ), save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject undoer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.undoer( Handle, CachedSelectors.undoer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void undoIt() {
			RuntimeObject ___occuredException;
			NativeMethods.undoIt( Handle, CachedSelectors.undoIt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr bundle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char doIt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char performWithActionName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void redoIt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char save( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSave_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char save );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr undoer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void undoIt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector bundle = "bundle";
			public static readonly Selector doIt = "doIt";
			public static readonly Selector initWithAddressBook_ = "initWithAddressBook:";
			public static readonly Selector performWithActionName_ = "performWithActionName:";
			public static readonly Selector redoIt = "redoIt";
			public static readonly Selector save = "save";
			public static readonly Selector setSave_ = "setSave:";
			public static readonly Selector undoer = "undoer";
			public static readonly Selector undoIt = "undoIt";
		}
	}
	[ProxyBaseClass(typeof( NSButtonCell ))]
	public struct ABCompanyButtonCell : IEquatable<ABCompanyButtonCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCompanyButtonCell;
		public static implicit operator IntPtr( ABCompanyButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCompanyButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCompanyButtonCell ) ) return false; 
			return Handle == ( ( ABCompanyButtonCell )value ).Handle;
		}
		public bool Equals( ABCompanyButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCompanyButtonCell value1, ABCompanyButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCompanyButtonCell value1, ABCompanyButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCompanyButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCompanyButtonCell alloc() {
			return new ABCompanyButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject attachment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attachment( Handle, CachedSelectors.attachment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithInputController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInputController_( Handle, CachedSelectors.initWithInputController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAttachment_( NObjective.RuntimeObject attachment ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttachment_( Handle, CachedSelectors.setAttachment_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attachment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char wantsToTrackMouse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wantsToTrackMouse( Handle, CachedSelectors.wantsToTrackMouse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr attachment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithInputController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAttachment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attachment );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char wantsToTrackMouse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attachment = "attachment";
			public static readonly Selector initWithInputController_ = "initWithInputController:";
			public static readonly Selector setAttachment_ = "setAttachment:";
			public static readonly Selector wantsToTrackMouse = "wantsToTrackMouse";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABConverter : IEquatable<ABConverter> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABConverter;
		public static implicit operator IntPtr( ABConverter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABConverter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABConverter ) ) return false; 
			return Handle == ( ( ABConverter )value ).Handle;
		}
		public bool Equals( ABConverter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABConverter value1, ABConverter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABConverter value1, ABConverter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABConverter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABConverter alloc() {
			return new ABConverter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject converterLockFileName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.converterLockFileName( ClassHandle, CachedSelectors.converterLockFileName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char importLock() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importLock( ClassHandle, CachedSelectors.importLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void importUnlock() {
			RuntimeObject ___occuredException;
			NativeMethods.importUnlock( ClassHandle, CachedSelectors.importUnlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void stopSendingConversionUpdates() {
			RuntimeObject ___occuredException;
			NativeMethods.stopSendingConversionUpdates( ClassHandle, CachedSelectors.stopSendingConversionUpdates, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void updateLockFileTimeStamp() {
			RuntimeObject ___occuredException;
			NativeMethods.updateLockFileTimeStamp( ClassHandle, CachedSelectors.updateLockFileTimeStamp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void waitTillConversionIsDone() {
			RuntimeObject ___occuredException;
			NativeMethods.waitTillConversionIsDone( ClassHandle, CachedSelectors.waitTillConversionIsDone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int current() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.current( Handle, CachedSelectors.current, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char hasCardWithEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasCardWithEmail_( Handle, CachedSelectors.hasCardWithEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void importPumaAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.importPumaAddressBook_( Handle, CachedSelectors.importPumaAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importPumaLDAPServers() {
			RuntimeObject ___occuredException;
			NativeMethods.importPumaLDAPServers( Handle, CachedSelectors.importPumaLDAPServers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject pumaLDAPServers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pumaLDAPServers( Handle, CachedSelectors.pumaLDAPServers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int totalCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.totalCount( Handle, CachedSelectors.totalCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr converterLockFileName( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int current( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasCardWithEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char importLock( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importPumaAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importPumaLDAPServers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importUnlock( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pumaLDAPServers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void stopSendingConversionUpdates( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int totalCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateLockFileTimeStamp( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void waitTillConversionIsDone( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector converterLockFileName = "converterLockFileName";
			public static readonly Selector current = "current";
			public static readonly Selector hasCardWithEmail_ = "hasCardWithEmail:";
			public static readonly Selector importLock = "importLock";
			public static readonly Selector importPumaAddressBook_ = "importPumaAddressBook:";
			public static readonly Selector importPumaLDAPServers = "importPumaLDAPServers";
			public static readonly Selector importUnlock = "importUnlock";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector pumaLDAPServers = "pumaLDAPServers";
			public static readonly Selector stopSendingConversionUpdates = "stopSendingConversionUpdates";
			public static readonly Selector title = "title";
			public static readonly Selector totalCount = "totalCount";
			public static readonly Selector updateLockFileTimeStamp = "updateLockFileTimeStamp";
			public static readonly Selector waitTillConversionIsDone = "waitTillConversionIsDone";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABCustomLabelEditor : IEquatable<ABCustomLabelEditor> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCustomLabelEditor;
		public static implicit operator IntPtr( ABCustomLabelEditor value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCustomLabelEditor value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABCustomLabelEditor ) ) return false; 
			return Handle == ( ( ABCustomLabelEditor )value ).Handle;
		}
		public bool Equals( ABCustomLabelEditor value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCustomLabelEditor value1, ABCustomLabelEditor value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCustomLabelEditor value1, ABCustomLabelEditor value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCustomLabelEditor( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCustomLabelEditor alloc() {
			return new ABCustomLabelEditor( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void openCustomLabelEditorForProperty_withPopup_( NObjective.RuntimeObject property, NObjective.RuntimeObject withPopup ) {
			RuntimeObject ___occuredException;
			NativeMethods.openCustomLabelEditorForProperty_withPopup_( ClassHandle, CachedSelectors.openCustomLabelEditorForProperty_withPopup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, withPopup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancel_( NObjective.RuntimeObject cancel ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancel_( Handle, CachedSelectors.cancel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cancel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void help_( NObjective.RuntimeObject help ) {
			RuntimeObject ___occuredException;
			NativeMethods.help_( Handle, CachedSelectors.help_, out ___occuredException, sizeof( NObjective.RuntimeObject ), help );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithProperty_withPopup_( NObjective.RuntimeObject property, NObjective.RuntimeObject withPopup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProperty_withPopup_( Handle, CachedSelectors.initWithProperty_withPopup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, withPopup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void ok_( NObjective.RuntimeObject ok ) {
			RuntimeObject ___occuredException;
			NativeMethods.ok_( Handle, CachedSelectors.ok_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ok );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.sheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.sheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowWillClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowWillClose_( Handle, CachedSelectors.windowWillClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cancel );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void help_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject help );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithProperty_withPopup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject withPopup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void ok_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ok );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void openCustomLabelEditorForProperty_withPopup_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject withPopup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void sheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowWillClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancel_ = "cancel:";
			public static readonly Selector help_ = "help:";
			public static readonly Selector initWithProperty_withPopup_ = "initWithProperty:withPopup:";
			public static readonly Selector ok_ = "ok:";
			public static readonly Selector openCustomLabelEditorForProperty_withPopup_ = "openCustomLabelEditorForProperty:withPopup:";
			public static readonly Selector sheetDidEnd_returnCode_contextInfo_ = "sheetDidEnd:returnCode:contextInfo:";
			public static readonly Selector windowWillClose_ = "windowWillClose:";
		}
	}
	[ProxyBaseClass(typeof( ABRecord ))]
	public struct ABDataType : IEquatable<ABDataType> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDataType;
		public static implicit operator IntPtr( ABDataType value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDataType value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDataType ) ) return false; 
			return Handle == ( ( ABDataType )value ).Handle;
		}
		public bool Equals( ABDataType value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDataType value1, ABDataType value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDataType value1, ABDataType value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDataType( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDataType alloc() {
			return new ABDataType( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSDatePicker ))]
	public struct ABDatePicker : IEquatable<ABDatePicker> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDatePicker;
		public static implicit operator IntPtr( ABDatePicker value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDatePicker value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDatePicker ) ) return false; 
			return Handle == ( ( ABDatePicker )value ).Handle;
		}
		public bool Equals( ABDatePicker value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDatePicker value1, ABDatePicker value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDatePicker value1, ABDatePicker value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDatePicker( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDatePicker alloc() {
			return new ABDatePicker( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void datePickerCell_validateProposedDateValue_timeInterval_( NObjective.RuntimeObject cell, System.IntPtr validateProposedDateValue, System.IntPtr timeInterval ) {
			RuntimeObject ___occuredException;
			NativeMethods.datePickerCell_validateProposedDateValue_timeInterval_( Handle, CachedSelectors.datePickerCell_validateProposedDateValue_timeInterval_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), cell, validateProposedDateValue, timeInterval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void drawShadow() {
			RuntimeObject ___occuredException;
			NativeMethods.drawShadow( Handle, CachedSelectors.drawShadow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void revealText() {
			RuntimeObject ___occuredException;
			NativeMethods.revealText( Handle, CachedSelectors.revealText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void saveDateValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.saveDateValue_( Handle, CachedSelectors.saveDateValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeDateValue() {
			RuntimeObject ___occuredException;
			NativeMethods.writeDateValue( Handle, CachedSelectors.writeDateValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void datePickerCell_validateProposedDateValue_timeInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cell, System.IntPtr validateProposedDateValue, System.IntPtr timeInterval );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void drawShadow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void revealText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void saveDateValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void writeDateValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector datePickerCell_validateProposedDateValue_timeInterval_ = "datePickerCell:validateProposedDateValue:timeInterval:";
			public static readonly Selector drawShadow = "drawShadow";
			public static readonly Selector revealText = "revealText";
			public static readonly Selector saveDateValue_ = "saveDateValue:";
			public static readonly Selector writeDateValue = "writeDateValue";
		}
	}
	[ProxyBaseClass(typeof( NSDatePickerCell ))]
	public struct ABDatePickerCell : IEquatable<ABDatePickerCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDatePickerCell;
		public static implicit operator IntPtr( ABDatePickerCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDatePickerCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDatePickerCell ) ) return false; 
			return Handle == ( ( ABDatePickerCell )value ).Handle;
		}
		public bool Equals( ABDatePickerCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDatePickerCell value1, ABDatePickerCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDatePickerCell value1, ABDatePickerCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDatePickerCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDatePickerCell alloc() {
			return new ABDatePickerCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( ABFileManager ))]
	public struct ABDAVManager : IEquatable<ABDAVManager> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDAVManager;
		public static implicit operator IntPtr( ABDAVManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDAVManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDAVManager ) ) return false; 
			return Handle == ( ( ABDAVManager )value ).Handle;
		}
		public bool Equals( ABDAVManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDAVManager value1, ABDAVManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDAVManager value1, ABDAVManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDAVManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDAVManager alloc() {
			return new ABDAVManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char canReachDotMacError_( System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canReachDotMacError_( ClassHandle, CachedSelectors.canReachDotMacError_, out ___occuredException, sizeof( System.IntPtr ), error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char configDataChangedSince_( NObjective.RuntimeObject since ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.configDataChangedSince_( ClassHandle, CachedSelectors.configDataChangedSince_, out ___occuredException, sizeof( NObjective.RuntimeObject ), since );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject configValueForKey_defaultValue_( NObjective.RuntimeObject key, NObjective.RuntimeObject defaultValue ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.configValueForKey_defaultValue_( ClassHandle, CachedSelectors.configValueForKey_defaultValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, defaultValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject directoryListQuery() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryListQuery( ClassHandle, CachedSelectors.directoryListQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject dotMacBaseLocationForDotMacUser_( NObjective.RuntimeObject user ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dotMacBaseLocationForDotMacUser_( ClassHandle, CachedSelectors.dotMacBaseLocationForDotMacUser_, out ___occuredException, sizeof( NObjective.RuntimeObject ), user );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject dotMacSubscriptionTurdURLSubscriber_publisher_( NObjective.RuntimeObject subscriber, NObjective.RuntimeObject publisher ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dotMacSubscriptionTurdURLSubscriber_publisher_( ClassHandle, CachedSelectors.dotMacSubscriptionTurdURLSubscriber_publisher_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), subscriber, publisher );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject dotMacUserAgent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dotMacUserAgent( ClassHandle, CachedSelectors.dotMacUserAgent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject iDiskAddress() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iDiskAddress( ClassHandle, CachedSelectors.iDiskAddress, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject iDiskUser() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iDiskUser( ClassHandle, CachedSelectors.iDiskUser, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject modDateQuery() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modDateQuery( ClassHandle, CachedSelectors.modDateQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject password() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.password( ClassHandle, CachedSelectors.password, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void resetPasswordCache() {
			RuntimeObject ___occuredException;
			NativeMethods.resetPasswordCache( ClassHandle, CachedSelectors.resetPasswordCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void updateConfigDataIfNeeded() {
			RuntimeObject ___occuredException;
			NativeMethods.updateConfigDataIfNeeded( ClassHandle, CachedSelectors.updateConfigDataIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject clearACLsBody() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clearACLsBody( Handle, CachedSelectors.clearACLsBody, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char createDirectoryAtAURL_andReturnResultCode_( NObjective.RuntimeObject aurl, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createDirectoryAtAURL_andReturnResultCode_( Handle, CachedSelectors.createDirectoryAtAURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), aurl, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject dateFromHTTPStyleString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFromHTTPStyleString_( Handle, CachedSelectors.dateFromHTTPStyleString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dateFromISO8601String_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFromISO8601String_( Handle, CachedSelectors.dateFromISO8601String_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deniedPrivileges_( NObjective.RuntimeObject privileges ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deniedPrivileges_( Handle, CachedSelectors.deniedPrivileges_, out ___occuredException, sizeof( NObjective.RuntimeObject ), privileges );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dictionaryAtURL_securely_andReturnResultCode_( NObjective.RuntimeObject url, char securely, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryAtURL_securely_andReturnResultCode_( Handle, CachedSelectors.dictionaryAtURL_securely_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), url, securely, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryContentsAtURL_andReturnResultCode_( NObjective.RuntimeObject url, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryContentsAtURL_andReturnResultCode_( Handle, CachedSelectors.directoryContentsAtURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char fileExistsAtURL_andReturnResultCode_( NObjective.RuntimeObject url, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileExistsAtURL_andReturnResultCode_( Handle, CachedSelectors.fileExistsAtURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject fillTemplate_withReplacements_( NObjective.RuntimeObject template, NObjective.RuntimeObject withReplacements ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fillTemplate_withReplacements_( Handle, CachedSelectors.fillTemplate_withReplacements_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), template, withReplacements );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject infoForFilesInContainer_andReturnResultCode_( NObjective.RuntimeObject container, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoForFilesInContainer_andReturnResultCode_( Handle, CachedSelectors.infoForFilesInContainer_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), container, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject infoQuery() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoQuery( Handle, CachedSelectors.infoQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject modDateForURL_andReturnResultCode_( NObjective.RuntimeObject url, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modDateForURL_andReturnResultCode_( Handle, CachedSelectors.modDateForURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject passwordForUser_( NObjective.RuntimeObject user ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.passwordForUser_( Handle, CachedSelectors.passwordForUser_, out ___occuredException, sizeof( NObjective.RuntimeObject ), user );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char removeDirectoryAndContentsAtURL_andReturnResultCode_( NObjective.RuntimeObject url, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeDirectoryAndContentsAtURL_andReturnResultCode_( Handle, CachedSelectors.removeDirectoryAndContentsAtURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeFileAtURL_andReturnResultCode_( NObjective.RuntimeObject url, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeFileAtURL_andReturnResultCode_( Handle, CachedSelectors.removeFileAtURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char sanityCheckPublishStructureCreate_( char create ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sanityCheckPublishStructureCreate_( Handle, CachedSelectors.sanityCheckPublishStructureCreate_, out ___occuredException, sizeof( char ), create );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject simpleACLBodyForReadPrincipals_writePrincipals_( NObjective.RuntimeObject principals, NObjective.RuntimeObject writePrincipals ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.simpleACLBodyForReadPrincipals_writePrincipals_( Handle, CachedSelectors.simpleACLBodyForReadPrincipals_writePrincipals_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), principals, writePrincipals );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject user() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.user( Handle, CachedSelectors.user, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char write_toURL_securely_andReturnResultCode_( NObjective.RuntimeObject write, NObjective.RuntimeObject toURL, char securely, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.write_toURL_securely_andReturnResultCode_( Handle, CachedSelectors.write_toURL_securely_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), write, toURL, securely, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char writeDictionary_toURL_securely_( NObjective.RuntimeObject dictionary, NObjective.RuntimeObject toURL, char securely ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeDictionary_toURL_securely_( Handle, CachedSelectors.writeDictionary_toURL_securely_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), dictionary, toURL, securely );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char writeDictionary_toURL_securely_andReturnResultCode_( NObjective.RuntimeObject dictionary, NObjective.RuntimeObject toURL, char securely, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeDictionary_toURL_securely_andReturnResultCode_( Handle, CachedSelectors.writeDictionary_toURL_securely_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), dictionary, toURL, securely, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char canReachDotMacError_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr error );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr clearACLsBody( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char configDataChangedSince_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject since );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr configValueForKey_defaultValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject defaultValue );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char createDirectoryAtAURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject aurl, System.IntPtr andReturnResultCode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dateFromHTTPStyleString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dateFromISO8601String_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr deniedPrivileges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject privileges );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dictionaryAtURL_securely_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, char securely, System.IntPtr andReturnResultCode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryContentsAtURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr andReturnResultCode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryListQuery( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dotMacBaseLocationForDotMacUser_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject user );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dotMacSubscriptionTurdURLSubscriber_publisher_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscriber, NObjective.RuntimeObject publisher );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dotMacUserAgent( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char fileExistsAtURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr andReturnResultCode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fillTemplate_withReplacements_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject template, NObjective.RuntimeObject withReplacements );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr iDiskAddress( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr iDiskUser( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr infoForFilesInContainer_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject container, System.IntPtr andReturnResultCode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr infoQuery( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr modDateForURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr andReturnResultCode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr modDateQuery( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr password( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr passwordForUser_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject user );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char removeDirectoryAndContentsAtURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr andReturnResultCode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char removeFileAtURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr andReturnResultCode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetPasswordCache( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char sanityCheckPublishStructureCreate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char create );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr simpleACLBodyForReadPrincipals_writePrincipals_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject principals, NObjective.RuntimeObject writePrincipals );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateConfigDataIfNeeded( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr user( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char write_toURL_securely_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject write, NObjective.RuntimeObject toURL, char securely, System.IntPtr andReturnResultCode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char writeDictionary_toURL_securely_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, NObjective.RuntimeObject toURL, char securely );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char writeDictionary_toURL_securely_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, NObjective.RuntimeObject toURL, char securely, System.IntPtr andReturnResultCode );
		}
		static internal class CachedSelectors {
			public static readonly Selector canReachDotMacError_ = "canReachDotMacError:";
			public static readonly Selector clearACLsBody = "clearACLsBody";
			public static readonly Selector configDataChangedSince_ = "configDataChangedSince:";
			public static readonly Selector configValueForKey_defaultValue_ = "configValueForKey:defaultValue:";
			public static readonly Selector createDirectoryAtAURL_andReturnResultCode_ = "createDirectoryAtAURL:andReturnResultCode:";
			public static readonly Selector dateFromHTTPStyleString_ = "dateFromHTTPStyleString:";
			public static readonly Selector dateFromISO8601String_ = "dateFromISO8601String:";
			public static readonly Selector deniedPrivileges_ = "deniedPrivileges:";
			public static readonly Selector dictionaryAtURL_securely_andReturnResultCode_ = "dictionaryAtURL:securely:andReturnResultCode:";
			public static readonly Selector directoryContentsAtURL_andReturnResultCode_ = "directoryContentsAtURL:andReturnResultCode:";
			public static readonly Selector directoryListQuery = "directoryListQuery";
			public static readonly Selector dotMacBaseLocationForDotMacUser_ = "dotMacBaseLocationForDotMacUser:";
			public static readonly Selector dotMacSubscriptionTurdURLSubscriber_publisher_ = "dotMacSubscriptionTurdURLSubscriber:publisher:";
			public static readonly Selector dotMacUserAgent = "dotMacUserAgent";
			public static readonly Selector fileExistsAtURL_andReturnResultCode_ = "fileExistsAtURL:andReturnResultCode:";
			public static readonly Selector fillTemplate_withReplacements_ = "fillTemplate:withReplacements:";
			public static readonly Selector iDiskAddress = "iDiskAddress";
			public static readonly Selector iDiskUser = "iDiskUser";
			public static readonly Selector infoForFilesInContainer_andReturnResultCode_ = "infoForFilesInContainer:andReturnResultCode:";
			public static readonly Selector infoQuery = "infoQuery";
			public static readonly Selector modDateForURL_andReturnResultCode_ = "modDateForURL:andReturnResultCode:";
			public static readonly Selector modDateQuery = "modDateQuery";
			public static readonly Selector password = "password";
			public static readonly Selector passwordForUser_ = "passwordForUser:";
			public static readonly Selector removeDirectoryAndContentsAtURL_andReturnResultCode_ = "removeDirectoryAndContentsAtURL:andReturnResultCode:";
			public static readonly Selector removeFileAtURL_andReturnResultCode_ = "removeFileAtURL:andReturnResultCode:";
			public static readonly Selector resetPasswordCache = "resetPasswordCache";
			public static readonly Selector sanityCheckPublishStructureCreate_ = "sanityCheckPublishStructureCreate:";
			public static readonly Selector simpleACLBodyForReadPrincipals_writePrincipals_ = "simpleACLBodyForReadPrincipals:writePrincipals:";
			public static readonly Selector updateConfigDataIfNeeded = "updateConfigDataIfNeeded";
			public static readonly Selector user = "user";
			public static readonly Selector write_toURL_securely_andReturnResultCode_ = "write:toURL:securely:andReturnResultCode:";
			public static readonly Selector writeDictionary_toURL_securely_ = "writeDictionary:toURL:securely:";
			public static readonly Selector writeDictionary_toURL_securely_andReturnResultCode_ = "writeDictionary:toURL:securely:andReturnResultCode:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABDAVQuery : IEquatable<ABDAVQuery> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDAVQuery;
		public static implicit operator IntPtr( ABDAVQuery value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDAVQuery value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDAVQuery ) ) return false; 
			return Handle == ( ( ABDAVQuery )value ).Handle;
		}
		public bool Equals( ABDAVQuery value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDAVQuery value1, ABDAVQuery value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDAVQuery value1, ABDAVQuery value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDAVQuery( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDAVQuery alloc() {
			return new ABDAVQuery( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void addAuthInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			NativeMethods.addAuthInfo_( ClassHandle, CachedSelectors.addAuthInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject authenticationList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.authenticationList( ClassHandle, CachedSelectors.authenticationList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject lastQueryDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastQueryDate( ClassHandle, CachedSelectors.lastQueryDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void resetAuthList() {
			RuntimeObject ___occuredException;
			NativeMethods.resetAuthList( ClassHandle, CachedSelectors.resetAuthList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setLastQueryDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLastQueryDate_( ClassHandle, CachedSelectors.setLastQueryDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addHeaderValue_forKey_( NObjective.RuntimeObject value, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.addHeaderValue_forKey_( Handle, CachedSelectors.addHeaderValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject body() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.body( Handle, CachedSelectors.body, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int depth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.depth( Handle, CachedSelectors.depth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject dereferencedEntity_( NObjective.RuntimeObject entity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dereferencedEntity_( Handle, CachedSelectors.dereferencedEntity_, out ___occuredException, sizeof( NObjective.RuntimeObject ), entity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject execute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.execute( Handle, CachedSelectors.execute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithAuthDelegate_url_( NObjective.RuntimeObject @delegate, NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAuthDelegate_url_( Handle, CachedSelectors.initWithAuthDelegate_url_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @delegate, url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_( Handle, CachedSelectors.initWithURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithUser_password_url_( NObjective.RuntimeObject user, NObjective.RuntimeObject password, NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUser_password_url_( Handle, CachedSelectors.initWithUser_password_url_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), user, password, url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lockToken() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockToken( Handle, CachedSelectors.lockToken, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char parseData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseData_( Handle, CachedSelectors.parseData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject password() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.password( Handle, CachedSelectors.password, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int queryType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryType( Handle, CachedSelectors.queryType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject responseAsString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.responseAsString( Handle, CachedSelectors.responseAsString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject responseDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.responseDate( Handle, CachedSelectors.responseDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject responseList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.responseList( Handle, CachedSelectors.responseList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int resultCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resultCode( Handle, CachedSelectors.resultCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject resultData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resultData( Handle, CachedSelectors.resultData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject returnHeader() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.returnHeader( Handle, CachedSelectors.returnHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setBody_( NObjective.RuntimeObject body ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBody_( Handle, CachedSelectors.setBody_, out ___occuredException, sizeof( NObjective.RuntimeObject ), body );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDepth_( int depth ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDepth_( Handle, CachedSelectors.setDepth_, out ___occuredException, sizeof( int ), depth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setQueryType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setQueryType_( Handle, CachedSelectors.setQueryType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUserAgent_( NObjective.RuntimeObject agent ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUserAgent_( Handle, CachedSelectors.setUserAgent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), agent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char succeeded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.succeeded( Handle, CachedSelectors.succeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject user() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.user( Handle, CachedSelectors.user, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valuesForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valuesForProperty_( Handle, CachedSelectors.valuesForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addAuthInfo_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addHeaderValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr authenticationList( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr body( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int depth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dereferencedEntity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entity );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr execute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithAuthDelegate_url_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate, NObjective.RuntimeObject url );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUser_password_url_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject user, NObjective.RuntimeObject password, NObjective.RuntimeObject url );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr lastQueryDate( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr lockToken( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr password( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int queryType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetAuthList( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr responseAsString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr responseDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr responseList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int resultCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr resultData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr returnHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setBody_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject body );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDepth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int depth );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setLastQueryDate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setQueryType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUserAgent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject agent );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char succeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr user( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valuesForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
		}
		static internal class CachedSelectors {
			public static readonly Selector addAuthInfo_ = "addAuthInfo:";
			public static readonly Selector addHeaderValue_forKey_ = "addHeaderValue:forKey:";
			public static readonly Selector authenticationList = "authenticationList";
			public static readonly Selector body = "body";
			public static readonly Selector depth = "depth";
			public static readonly Selector dereferencedEntity_ = "dereferencedEntity:";
			public static readonly Selector execute = "execute";
			public static readonly Selector initWithAuthDelegate_url_ = "initWithAuthDelegate:url:";
			public static readonly Selector initWithURL_ = "initWithURL:";
			public static readonly Selector initWithUser_password_url_ = "initWithUser:password:url:";
			public static readonly Selector lastQueryDate = "lastQueryDate";
			public static readonly Selector lockToken = "lockToken";
			public static readonly Selector parseData_ = "parseData:";
			public static readonly Selector password = "password";
			public static readonly Selector queryType = "queryType";
			public static readonly Selector resetAuthList = "resetAuthList";
			public static readonly Selector responseAsString = "responseAsString";
			public static readonly Selector responseDate = "responseDate";
			public static readonly Selector responseList = "responseList";
			public static readonly Selector resultCode = "resultCode";
			public static readonly Selector resultData = "resultData";
			public static readonly Selector returnHeader = "returnHeader";
			public static readonly Selector setBody_ = "setBody:";
			public static readonly Selector setDepth_ = "setDepth:";
			public static readonly Selector setLastQueryDate_ = "setLastQueryDate:";
			public static readonly Selector setQueryType_ = "setQueryType:";
			public static readonly Selector setUserAgent_ = "setUserAgent:";
			public static readonly Selector succeeded = "succeeded";
			public static readonly Selector user = "user";
			public static readonly Selector valuesForProperty_ = "valuesForProperty:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABDBCache : IEquatable<ABDBCache> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDBCache;
		public static implicit operator IntPtr( ABDBCache value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDBCache value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDBCache ) ) return false; 
			return Handle == ( ( ABDBCache )value ).Handle;
		}
		public bool Equals( ABDBCache value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDBCache value1, ABDBCache value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDBCache value1, ABDBCache value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDBCache( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDBCache alloc() {
			return new ABDBCache( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject nts_SharedDBCache() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SharedDBCache( ClassHandle, CachedSelectors.nts_SharedDBCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sharedDBCache() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedDBCache( ClassHandle, CachedSelectors.sharedDBCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedGroups_( Handle, CachedSelectors.addedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedMembers_( Handle, CachedSelectors.addedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addedMembers_toGroup_( NObjective.RuntimeObject members, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedMembers_toGroup_( Handle, CachedSelectors.addedMembers_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allGroups( Handle, CachedSelectors.allGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPeople( Handle, CachedSelectors.allPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allPeopleForRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPeopleForRemoteLocation_( Handle, CachedSelectors.allPeopleForRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allSimpleGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allSimpleGroups( Handle, CachedSelectors.allSimpleGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void changedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.changedGroups_( Handle, CachedSelectors.changedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changedMember_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			NativeMethods.changedMember_( Handle, CachedSelectors.changedMember_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.changedMembers_( Handle, CachedSelectors.changedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearAll() {
			RuntimeObject ___occuredException;
			NativeMethods.clearAll( Handle, CachedSelectors.clearAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearAllForRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearAllForRemoteLocation_( Handle, CachedSelectors.clearAllForRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearCacheForGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearCacheForGroup_( Handle, CachedSelectors.clearCacheForGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChangedForUserInfo_groupsChanged_peopleChanged_( NObjective.RuntimeObject info, System.IntPtr groupsChanged, System.IntPtr peopleChanged ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChangedForUserInfo_groupsChanged_peopleChanged_( Handle, CachedSelectors.databaseChangedForUserInfo_groupsChanged_peopleChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), info, groupsChanged, peopleChanged );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseWasReset_( NObjective.RuntimeObject reset ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseWasReset_( Handle, CachedSelectors.databaseWasReset_, out ___occuredException, sizeof( NObjective.RuntimeObject ), reset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deletedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletedGroups_( Handle, CachedSelectors.deletedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deletedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletedMembers_( Handle, CachedSelectors.deletedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject enclosedSubscriptionGroupsForAllGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enclosedSubscriptionGroupsForAllGroup_( Handle, CachedSelectors.enclosedSubscriptionGroupsForAllGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void endEditing_( NObjective.RuntimeObject editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.endEditing_( Handle, CachedSelectors.endEditing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint indexOfMember_inSortedMembers_( NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfMember_inSortedMembers_( Handle, CachedSelectors.indexOfMember_inSortedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), member, inSortedMembers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint indexOfMember_inSortedMembers_withSortingOrder_( NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers, uint withSortingOrder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfMember_inSortedMembers_withSortingOrder_( Handle, CachedSelectors.indexOfMember_inSortedMembers_withSortingOrder_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), member, inSortedMembers, withSortingOrder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public NObjective.RuntimeObject initWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAddressBook_( Handle, CachedSelectors.initWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint insertionIndexForMember_inSortedMembers_( NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertionIndexForMember_inSortedMembers_( Handle, CachedSelectors.insertionIndexForMember_inSortedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), member, inSortedMembers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint insertionIndexForMember_inSortedMembers_withSortingOrder_( NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers, uint withSortingOrder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertionIndexForMember_inSortedMembers_withSortingOrder_( Handle, CachedSelectors.insertionIndexForMember_inSortedMembers_withSortingOrder_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), member, inSortedMembers, withSortingOrder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public bool isNewPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isNewPerson_( Handle, CachedSelectors.isNewPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject membersOfGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.membersOfGroup_( Handle, CachedSelectors.membersOfGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int nameSorting() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameSorting( Handle, CachedSelectors.nameSorting, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nonThreadedSave() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nonThreadedSave( Handle, CachedSelectors.nonThreadedSave, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_threaded_sortMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_threaded_sortMembers_( Handle, CachedSelectors.nts_threaded_sortMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void registerModel_( NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerModel_( Handle, CachedSelectors.registerModel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reinsertRecord_inSortedList_( NObjective.RuntimeObject record, NObjective.RuntimeObject inSortedList ) {
			RuntimeObject ___occuredException;
			NativeMethods.reinsertRecord_inSortedList_( Handle, CachedSelectors.reinsertRecord_inSortedList_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, inSortedList );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reloadGroups() {
			RuntimeObject ___occuredException;
			NativeMethods.reloadGroups( Handle, CachedSelectors.reloadGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reloadMembers() {
			RuntimeObject ___occuredException;
			NativeMethods.reloadMembers( Handle, CachedSelectors.reloadMembers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removedMembers_fromGroup_( NObjective.RuntimeObject members, NObjective.RuntimeObject fromGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.removedMembers_fromGroup_( Handle, CachedSelectors.removedMembers_fromGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, fromGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetCachesForPeople_groups_maintainSelection_( char people, char groups, char maintainSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.resetCachesForPeople_groups_maintainSelection_( Handle, CachedSelectors.resetCachesForPeople_groups_maintainSelection_, out ___occuredException, sizeof( char ) + sizeof( char ) + sizeof( char ), people, groups, maintainSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sortMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.sortMembers_( Handle, CachedSelectors.sortMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startEditingNewPerson_inGroup_( NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.startEditingNewPerson_inGroup_( Handle, CachedSelectors.startEditingNewPerson_inGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, inGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char threadedSave() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.threadedSave( Handle, CachedSelectors.threadedSave, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject undoManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.undoManager( Handle, CachedSelectors.undoManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void unregisterModel_( NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			NativeMethods.unregisterModel_( Handle, CachedSelectors.unregisterModel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateGroupSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateGroupSelection_( Handle, CachedSelectors.updateGroupSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateGroupsSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateGroupsSelection_( Handle, CachedSelectors.updateGroupsSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateMembersSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateMembersSelection_( Handle, CachedSelectors.updateMembersSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addedMembers_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject toGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allPeopleForRemoteLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allSimpleGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changedMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearAllForRemoteLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearCacheForGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void databaseChangedForUserInfo_groupsChanged_peopleChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info, System.IntPtr groupsChanged, System.IntPtr peopleChanged );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void databaseWasReset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject reset );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deletedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deletedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr enclosedSubscriptionGroupsForAllGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void endEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfMember_inSortedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfMember_inSortedMembers_withSortingOrder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers, uint withSortingOrder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint insertionIndexForMember_inSortedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint insertionIndexForMember_inSortedMembers_withSortingOrder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers, uint withSortingOrder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isNewPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr membersOfGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int nameSorting( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nonThreadedSave( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_SharedDBCache( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_threaded_sortMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void registerModel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reinsertRecord_inSortedList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject inSortedList );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reloadGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reloadMembers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removedMembers_fromGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject fromGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetCachesForPeople_groups_maintainSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char people, char groups, char maintainSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedDBCache( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void sortMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void startEditingNewPerson_inGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char threadedSave( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr undoManager( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void unregisterModel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateGroupsSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateMembersSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
		}
		static internal class CachedSelectors {
			public static readonly Selector addedGroups_ = "addedGroups:";
			public static readonly Selector addedMembers_ = "addedMembers:";
			public static readonly Selector addedMembers_toGroup_ = "addedMembers:toGroup:";
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector allGroups = "allGroups";
			public static readonly Selector allPeople = "allPeople";
			public static readonly Selector allPeopleForRemoteLocation_ = "allPeopleForRemoteLocation:";
			public static readonly Selector allSimpleGroups = "allSimpleGroups";
			public static readonly Selector changedGroups_ = "changedGroups:";
			public static readonly Selector changedMember_ = "changedMember:";
			public static readonly Selector changedMembers_ = "changedMembers:";
			public static readonly Selector clearAll = "clearAll";
			public static readonly Selector clearAllForRemoteLocation_ = "clearAllForRemoteLocation:";
			public static readonly Selector clearCacheForGroup_ = "clearCacheForGroup:";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector databaseChangedForUserInfo_groupsChanged_peopleChanged_ = "databaseChangedForUserInfo:groupsChanged:peopleChanged:";
			public static readonly Selector databaseWasReset_ = "databaseWasReset:";
			public static readonly Selector deletedGroups_ = "deletedGroups:";
			public static readonly Selector deletedMembers_ = "deletedMembers:";
			public static readonly Selector enclosedSubscriptionGroupsForAllGroup_ = "enclosedSubscriptionGroupsForAllGroup:";
			public static readonly Selector endEditing_ = "endEditing:";
			public static readonly Selector indexOfMember_inSortedMembers_ = "indexOfMember:inSortedMembers:";
			public static readonly Selector indexOfMember_inSortedMembers_withSortingOrder_ = "indexOfMember:inSortedMembers:withSortingOrder:";
			public static readonly Selector initWithAddressBook_ = "initWithAddressBook:";
			public static readonly Selector insertionIndexForMember_inSortedMembers_ = "insertionIndexForMember:inSortedMembers:";
			public static readonly Selector insertionIndexForMember_inSortedMembers_withSortingOrder_ = "insertionIndexForMember:inSortedMembers:withSortingOrder:";
			public static readonly Selector isNewPerson_ = "isNewPerson:";
			public static readonly Selector membersOfGroup_ = "membersOfGroup:";
			public static readonly Selector nameSorting = "nameSorting";
			public static readonly Selector nonThreadedSave = "nonThreadedSave";
			public static readonly Selector nts_SharedDBCache = "nts_SharedDBCache";
			public static readonly Selector nts_threaded_sortMembers_ = "nts_threaded_sortMembers:";
			public static readonly Selector registerModel_ = "registerModel:";
			public static readonly Selector reinsertRecord_inSortedList_ = "reinsertRecord:inSortedList:";
			public static readonly Selector reloadGroups = "reloadGroups";
			public static readonly Selector reloadMembers = "reloadMembers";
			public static readonly Selector removedMembers_fromGroup_ = "removedMembers:fromGroup:";
			public static readonly Selector resetCachesForPeople_groups_maintainSelection_ = "resetCachesForPeople:groups:maintainSelection:";
			public static readonly Selector sharedDBCache = "sharedDBCache";
			public static readonly Selector sortMembers_ = "sortMembers:";
			public static readonly Selector startEditingNewPerson_inGroup_ = "startEditingNewPerson:inGroup:";
			public static readonly Selector threadedSave = "threadedSave";
			public static readonly Selector undoManager = "undoManager";
			public static readonly Selector unregisterModel_ = "unregisterModel:";
			public static readonly Selector updateGroupSelection_ = "updateGroupSelection:";
			public static readonly Selector updateGroupsSelection_ = "updateGroupsSelection:";
			public static readonly Selector updateMembersSelection_ = "updateMembersSelection:";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABDeleteGroupsCommand : IEquatable<ABDeleteGroupsCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDeleteGroupsCommand;
		public static implicit operator IntPtr( ABDeleteGroupsCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDeleteGroupsCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDeleteGroupsCommand ) ) return false; 
			return Handle == ( ( ABDeleteGroupsCommand )value ).Handle;
		}
		public bool Equals( ABDeleteGroupsCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDeleteGroupsCommand value1, ABDeleteGroupsCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDeleteGroupsCommand value1, ABDeleteGroupsCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDeleteGroupsCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDeleteGroupsCommand alloc() {
			return new ABDeleteGroupsCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroups_addressBook_( NObjective.RuntimeObject groups, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroups_addressBook_( Handle, CachedSelectors.initWithGroups_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), groups, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroups_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroups_addressBook_ = "initWithGroups:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABDeleteRecordsCommand : IEquatable<ABDeleteRecordsCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDeleteRecordsCommand;
		public static implicit operator IntPtr( ABDeleteRecordsCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDeleteRecordsCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDeleteRecordsCommand ) ) return false; 
			return Handle == ( ( ABDeleteRecordsCommand )value ).Handle;
		}
		public bool Equals( ABDeleteRecordsCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDeleteRecordsCommand value1, ABDeleteRecordsCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDeleteRecordsCommand value1, ABDeleteRecordsCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDeleteRecordsCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDeleteRecordsCommand alloc() {
			return new ABDeleteRecordsCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject deletedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deletedGroups( Handle, CachedSelectors.deletedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deletedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deletedPeople( Handle, CachedSelectors.deletedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_records_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject records, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_records_addressBook_( Handle, CachedSelectors.initWithGroup_records_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, records, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr deletedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr deletedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_records_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject records, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector deletedGroups = "deletedGroups";
			public static readonly Selector deletedPeople = "deletedPeople";
			public static readonly Selector initWithGroup_records_addressBook_ = "initWithGroup:records:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABTableController ))]
	public struct ABDirectoriesController : IEquatable<ABDirectoriesController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDirectoriesController;
		public static implicit operator IntPtr( ABDirectoriesController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDirectoriesController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDirectoriesController ) ) return false; 
			return Handle == ( ( ABDirectoriesController )value ).Handle;
		}
		public bool Equals( ABDirectoriesController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDirectoriesController value1, ABDirectoriesController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDirectoriesController value1, ABDirectoriesController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDirectoriesController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDirectoriesController alloc() {
			return new ABDirectoriesController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void directoriesSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.directoriesSelectionChanged_( Handle, CachedSelectors.directoriesSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void LDAPConfigChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.LDAPConfigChanged_( Handle, CachedSelectors.LDAPConfigChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int numberOfRowsInTableView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfRowsInTableView_( Handle, CachedSelectors.numberOfRowsInTableView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void tableContentChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableContentChanged_( Handle, CachedSelectors.tableContentChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject tableView_objectValueForTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_objectValueForTableColumn_row_( Handle, CachedSelectors.tableView_objectValueForTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, objectValueForTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void tableViewSelectionDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableViewSelectionDidChange_( Handle, CachedSelectors.tableViewSelectionDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void directoriesSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void LDAPConfigChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int numberOfRowsInTableView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void tableContentChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr tableView_objectValueForTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void tableViewSelectionDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
		}
		static internal class CachedSelectors {
			public static readonly Selector directoriesSelectionChanged_ = "directoriesSelectionChanged:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector LDAPConfigChanged_ = "LDAPConfigChanged:";
			public static readonly Selector numberOfRowsInTableView_ = "numberOfRowsInTableView:";
			public static readonly Selector tableContentChanged_ = "tableContentChanged:";
			public static readonly Selector tableView_objectValueForTableColumn_row_ = "tableView:objectValueForTableColumn:row:";
			public static readonly Selector tableViewSelectionDidChange_ = "tableViewSelectionDidChange:";
		}
	}
	[ProxyBaseClass(typeof( ABGroup ))]
	public struct ABDirectoriesGroup : IEquatable<ABDirectoriesGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDirectoriesGroup;
		public static implicit operator IntPtr( ABDirectoriesGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDirectoriesGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDirectoriesGroup ) ) return false; 
			return Handle == ( ( ABDirectoriesGroup )value ).Handle;
		}
		public bool Equals( ABDirectoriesGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDirectoriesGroup value1, ABDirectoriesGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDirectoriesGroup value1, ABDirectoriesGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDirectoriesGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDirectoriesGroup alloc() {
			return new ABDirectoriesGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject allDirectoriesServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allDirectoriesServer( ClassHandle, CachedSelectors.allDirectoriesServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject directoriesGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoriesGroup( ClassHandle, CachedSelectors.directoriesGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject specialGroupForAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.specialGroupForAddressBook_( ClassHandle, CachedSelectors.specialGroupForAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directories() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directories( Handle, CachedSelectors.directories, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void LDAPConfigChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.LDAPConfigChanged_( Handle, CachedSelectors.LDAPConfigChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allDirectoriesServer( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directories( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoriesGroup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void LDAPConfigChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr specialGroupForAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
		}
		static internal class CachedSelectors {
			public static readonly Selector allDirectoriesServer = "allDirectoriesServer";
			public static readonly Selector directories = "directories";
			public static readonly Selector directoriesGroup = "directoriesGroup";
			public static readonly Selector LDAPConfigChanged_ = "LDAPConfigChanged:";
			public static readonly Selector specialGroupForAddressBook_ = "specialGroupForAddressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABPeopleController ))]
	public struct ABDirectoryResultsController : IEquatable<ABDirectoryResultsController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDirectoryResultsController;
		public static implicit operator IntPtr( ABDirectoryResultsController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDirectoryResultsController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDirectoryResultsController ) ) return false; 
			return Handle == ( ( ABDirectoryResultsController )value ).Handle;
		}
		public bool Equals( ABDirectoryResultsController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDirectoryResultsController value1, ABDirectoryResultsController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDirectoryResultsController value1, ABDirectoryResultsController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDirectoryResultsController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDirectoryResultsController alloc() {
			return new ABDirectoryResultsController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void copy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			NativeMethods.copy_( Handle, CachedSelectors.copy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void directoryResultsSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.directoryResultsSelectionChanged_( Handle, CachedSelectors.directoryResultsSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exportVCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportVCard_( Handle, CachedSelectors.exportVCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleRollOverSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleRollOverSelection_( Handle, CachedSelectors.handleRollOverSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void openInSeparateWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.openInSeparateWindow_( Handle, CachedSelectors.openInSeparateWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void personSelected_( NObjective.RuntimeObject selected ) {
			RuntimeObject ___occuredException;
			NativeMethods.personSelected_( Handle, CachedSelectors.personSelected_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selected );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint selectedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedPeople( Handle, CachedSelectors.selectedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public NObjective.RuntimeObject subrowObjectsForPerson2_( NObjective.RuntimeObject person2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrowObjectsForPerson2_( Handle, CachedSelectors.subrowObjectsForPerson2_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void tableContentChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableContentChanged_( Handle, CachedSelectors.tableContentChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void copy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void directoryResultsSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void exportVCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void handleRollOverSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void openInSeparateWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void personSelected_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selected );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint selectedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subrowObjectsForPerson2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person2 );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void tableContentChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
		}
		static internal class CachedSelectors {
			public static readonly Selector copy_ = "copy:";
			public static readonly Selector directoryResultsSelectionChanged_ = "directoryResultsSelectionChanged:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector exportVCard_ = "exportVCard:";
			public static readonly Selector handleRollOverSelection_ = "handleRollOverSelection:";
			public static readonly Selector openInSeparateWindow_ = "openInSeparateWindow:";
			public static readonly Selector personSelected_ = "personSelected:";
			public static readonly Selector selectedPeople = "selectedPeople";
			public static readonly Selector subrowObjectsForPerson2_ = "subrowObjectsForPerson2:";
			public static readonly Selector tableContentChanged_ = "tableContentChanged:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
		}
	}
	[ProxyBaseClass(typeof( NSView ))]
	public struct ABDragAnimationView : IEquatable<ABDragAnimationView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDragAnimationView;
		public static implicit operator IntPtr( ABDragAnimationView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDragAnimationView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDragAnimationView ) ) return false; 
			return Handle == ( ( ABDragAnimationView )value ).Handle;
		}
		public bool Equals( ABDragAnimationView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDragAnimationView value1, ABDragAnimationView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDragAnimationView value1, ABDragAnimationView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDragAnimationView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDragAnimationView alloc() {
			return new ABDragAnimationView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void animate() {
			RuntimeObject ___occuredException;
			NativeMethods.animate( Handle, CachedSelectors.animate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateDragProgress() {
			RuntimeObject ___occuredException;
			NativeMethods.updateDragProgress( Handle, CachedSelectors.updateDragProgress, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void animate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateDragProgress( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animate = "animate";
			public static readonly Selector updateDragProgress = "updateDragProgress";
		}
	}
	[ProxyBaseClass(typeof( NSWindow ))]
	public struct ABDragAnimationWindow : IEquatable<ABDragAnimationWindow> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDragAnimationWindow;
		public static implicit operator IntPtr( ABDragAnimationWindow value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDragAnimationWindow value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABDragAnimationWindow ) ) return false; 
			return Handle == ( ( ABDragAnimationWindow )value ).Handle;
		}
		public bool Equals( ABDragAnimationWindow value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDragAnimationWindow value1, ABDragAnimationWindow value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDragAnimationWindow value1, ABDragAnimationWindow value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDragAnimationWindow( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDragAnimationWindow alloc() {
			return new ABDragAnimationWindow( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void animate() {
			RuntimeObject ___occuredException;
			NativeMethods.animate( Handle, CachedSelectors.animate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithDragInfo_tableView_completion_andRow_( NObjective.RuntimeObject info, NObjective.RuntimeObject tableView, NObjective.RuntimeObject completion, int andRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDragInfo_tableView_completion_andRow_( Handle, CachedSelectors.initWithDragInfo_tableView_completion_andRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), info, tableView, completion, andRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tableView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView( Handle, CachedSelectors.tableView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void animate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithDragInfo_tableView_completion_andRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info, NObjective.RuntimeObject tableView, NObjective.RuntimeObject completion, int andRow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr tableView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animate = "animate";
			public static readonly Selector initWithDragInfo_tableView_completion_andRow_ = "initWithDragInfo:tableView:completion:andRow:";
			public static readonly Selector tableView = "tableView";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABEditSmartGroupCommand : IEquatable<ABEditSmartGroupCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABEditSmartGroupCommand;
		public static implicit operator IntPtr( ABEditSmartGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABEditSmartGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABEditSmartGroupCommand ) ) return false; 
			return Handle == ( ( ABEditSmartGroupCommand )value ).Handle;
		}
		public bool Equals( ABEditSmartGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABEditSmartGroupCommand value1, ABEditSmartGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABEditSmartGroupCommand value1, ABEditSmartGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABEditSmartGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABEditSmartGroupCommand alloc() {
			return new ABEditSmartGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithSmartGroup_name_searchElement_hilights_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject name, NObjective.RuntimeObject searchElement, char hilights, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSmartGroup_name_searchElement_hilights_addressBook_( Handle, CachedSelectors.initWithSmartGroup_name_searchElement_hilights_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), @group, name, searchElement, hilights, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithSmartGroup_name_searchElement_hilights_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject name, NObjective.RuntimeObject searchElement, char hilights, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithSmartGroup_name_searchElement_hilights_addressBook_ = "initWithSmartGroup:name:searchElement:hilights:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABExchangeSetup : IEquatable<ABExchangeSetup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABExchangeSetup;
		public static implicit operator IntPtr( ABExchangeSetup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABExchangeSetup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABExchangeSetup ) ) return false; 
			return Handle == ( ( ABExchangeSetup )value ).Handle;
		}
		public bool Equals( ABExchangeSetup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABExchangeSetup value1, ABExchangeSetup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABExchangeSetup value1, ABExchangeSetup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABExchangeSetup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABExchangeSetup alloc() {
			return new ABExchangeSetup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedExchangeSetup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedExchangeSetup( ClassHandle, CachedSelectors.sharedExchangeSetup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeDirectoryEmailAddress() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeDirectoryEmailAddress( Handle, CachedSelectors.activeDirectoryEmailAddress, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeDirectoryFullName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeDirectoryFullName( Handle, CachedSelectors.activeDirectoryFullName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeDirectoryPassword() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeDirectoryPassword( Handle, CachedSelectors.activeDirectoryPassword, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeDirectoryUser() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeDirectoryUser( Handle, CachedSelectors.activeDirectoryUser, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject exchangeServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.exchangeServer( Handle, CachedSelectors.exchangeServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject outlookWebAccessPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlookWebAccessPath( Handle, CachedSelectors.outlookWebAccessPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject outlookWebAccessPathFromUserString_withUserName_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withUserName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlookWebAccessPathFromUserString_withUserName_( Handle, CachedSelectors.outlookWebAccessPathFromUserString_withUserName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, withUserName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject outlookWebAccessServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlookWebAccessServer( Handle, CachedSelectors.outlookWebAccessServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char setActiveDirectoryPassword_( NObjective.RuntimeObject password ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setActiveDirectoryPassword_( Handle, CachedSelectors.setActiveDirectoryPassword_, out ___occuredException, sizeof( NObjective.RuntimeObject ), password );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setActiveDirectoryUser_( NObjective.RuntimeObject user ) {
			RuntimeObject ___occuredException;
			NativeMethods.setActiveDirectoryUser_( Handle, CachedSelectors.setActiveDirectoryUser_, out ___occuredException, sizeof( NObjective.RuntimeObject ), user );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setExchangeServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.setExchangeServer_( Handle, CachedSelectors.setExchangeServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOutlookWebAccessPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			NativeMethods.setOutlookWebAccessPath_( Handle, CachedSelectors.setOutlookWebAccessPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOutlookWebAccessServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.setOutlookWebAccessServer_( Handle, CachedSelectors.setOutlookWebAccessServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSyncsWithExchange_( char exchange ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSyncsWithExchange_( Handle, CachedSelectors.setSyncsWithExchange_, out ___occuredException, sizeof( char ), exchange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUseSSL_( char ssl ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUseSSL_( Handle, CachedSelectors.setUseSSL_, out ___occuredException, sizeof( char ), ssl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char syncsWithExchange() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.syncsWithExchange( Handle, CachedSelectors.syncsWithExchange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char useSSL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useSSL( Handle, CachedSelectors.useSSL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char usingActiveDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.usingActiveDirectory( Handle, CachedSelectors.usingActiveDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr activeDirectoryEmailAddress( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr activeDirectoryFullName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr activeDirectoryPassword( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr activeDirectoryUser( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr exchangeServer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr outlookWebAccessPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr outlookWebAccessPathFromUserString_withUserName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withUserName );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr outlookWebAccessServer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char setActiveDirectoryPassword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject password );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setActiveDirectoryUser_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject user );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setExchangeServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setOutlookWebAccessPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setOutlookWebAccessServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSyncsWithExchange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char exchange );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUseSSL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char ssl );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedExchangeSetup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char syncsWithExchange( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char useSSL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char usingActiveDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector activeDirectoryEmailAddress = "activeDirectoryEmailAddress";
			public static readonly Selector activeDirectoryFullName = "activeDirectoryFullName";
			public static readonly Selector activeDirectoryPassword = "activeDirectoryPassword";
			public static readonly Selector activeDirectoryUser = "activeDirectoryUser";
			public static readonly Selector exchangeServer = "exchangeServer";
			public static readonly Selector outlookWebAccessPath = "outlookWebAccessPath";
			public static readonly Selector outlookWebAccessPathFromUserString_withUserName_ = "outlookWebAccessPathFromUserString:withUserName:";
			public static readonly Selector outlookWebAccessServer = "outlookWebAccessServer";
			public static readonly Selector setActiveDirectoryPassword_ = "setActiveDirectoryPassword:";
			public static readonly Selector setActiveDirectoryUser_ = "setActiveDirectoryUser:";
			public static readonly Selector setExchangeServer_ = "setExchangeServer:";
			public static readonly Selector setOutlookWebAccessPath_ = "setOutlookWebAccessPath:";
			public static readonly Selector setOutlookWebAccessServer_ = "setOutlookWebAccessServer:";
			public static readonly Selector setSyncsWithExchange_ = "setSyncsWithExchange:";
			public static readonly Selector setUseSSL_ = "setUseSSL:";
			public static readonly Selector sharedExchangeSetup = "sharedExchangeSetup";
			public static readonly Selector syncsWithExchange = "syncsWithExchange";
			public static readonly Selector useSSL = "useSSL";
			public static readonly Selector usingActiveDirectory = "usingActiveDirectory";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABFileManager : IEquatable<ABFileManager> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABFileManager;
		public static implicit operator IntPtr( ABFileManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABFileManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABFileManager ) ) return false; 
			return Handle == ( ( ABFileManager )value ).Handle;
		}
		public bool Equals( ABFileManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABFileManager value1, ABFileManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABFileManager value1, ABFileManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABFileManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABFileManager alloc() {
			return new ABFileManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject defaultManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultManager( ClassHandle, CachedSelectors.defaultManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject failedPasswordHandler() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.failedPasswordHandler( ClassHandle, CachedSelectors.failedPasswordHandler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void setFailedPasswordHandler_( NObjective.RuntimeObject handler ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFailedPasswordHandler_( ClassHandle, CachedSelectors.setFailedPasswordHandler_, out ___occuredException, sizeof( NObjective.RuntimeObject ), handler );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char ACLsAtURL_read_write_( NObjective.RuntimeObject url, System.IntPtr read, System.IntPtr write ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ACLsAtURL_read_write_( Handle, CachedSelectors.ACLsAtURL_read_write_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), url, read, write );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char clearACLsForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clearACLsForURL_( Handle, CachedSelectors.clearACLsForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char createDirectoryAtAURL_( NObjective.RuntimeObject aurl ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createDirectoryAtAURL_( Handle, CachedSelectors.createDirectoryAtAURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), aurl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject dictionaryAtURL_errorCode_securely_( NObjective.RuntimeObject url, System.IntPtr errorCode, char securely ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryAtURL_errorCode_securely_( Handle, CachedSelectors.dictionaryAtURL_errorCode_securely_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( char ), url, errorCode, securely );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryContentsAtURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryContentsAtURL_( Handle, CachedSelectors.directoryContentsAtURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char fileExistsAtURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileExistsAtURL_( Handle, CachedSelectors.fileExistsAtURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject infoForFilesInContainer_( NObjective.RuntimeObject container ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoForFilesInContainer_( Handle, CachedSelectors.infoForFilesInContainer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), container );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject modDateForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modDateForURL_( Handle, CachedSelectors.modDateForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char removeDirectoryAndContentsAtURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeDirectoryAndContentsAtURL_( Handle, CachedSelectors.removeDirectoryAndContentsAtURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeFileAtURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeFileAtURL_( Handle, CachedSelectors.removeFileAtURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setACLsWithReadPrincipals_writePrincipals_onURL_( NObjective.RuntimeObject principals, NObjective.RuntimeObject writePrincipals, NObjective.RuntimeObject onURL ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setACLsWithReadPrincipals_writePrincipals_onURL_( Handle, CachedSelectors.setACLsWithReadPrincipals_writePrincipals_onURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), principals, writePrincipals, onURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char write_toURL_securely_( NObjective.RuntimeObject write, NObjective.RuntimeObject toURL, char securely ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.write_toURL_securely_( Handle, CachedSelectors.write_toURL_securely_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), write, toURL, securely );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char ACLsAtURL_read_write_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr read, System.IntPtr write );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char clearACLsForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char createDirectoryAtAURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject aurl );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr defaultManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dictionaryAtURL_errorCode_securely_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr errorCode, char securely );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryContentsAtURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr failedPasswordHandler( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char fileExistsAtURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr infoForFilesInContainer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject container );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr modDateForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char removeDirectoryAndContentsAtURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char removeFileAtURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char setACLsWithReadPrincipals_writePrincipals_onURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject principals, NObjective.RuntimeObject writePrincipals, NObjective.RuntimeObject onURL );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setFailedPasswordHandler_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject handler );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char write_toURL_securely_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject write, NObjective.RuntimeObject toURL, char securely );
		}
		static internal class CachedSelectors {
			public static readonly Selector ACLsAtURL_read_write_ = "ACLsAtURL:read:write:";
			public static readonly Selector clearACLsForURL_ = "clearACLsForURL:";
			public static readonly Selector createDirectoryAtAURL_ = "createDirectoryAtAURL:";
			public static readonly Selector defaultManager = "defaultManager";
			public static readonly Selector dictionaryAtURL_errorCode_securely_ = "dictionaryAtURL:errorCode:securely:";
			public static readonly Selector directoryContentsAtURL_ = "directoryContentsAtURL:";
			public static readonly Selector failedPasswordHandler = "failedPasswordHandler";
			public static readonly Selector fileExistsAtURL_ = "fileExistsAtURL:";
			public static readonly Selector infoForFilesInContainer_ = "infoForFilesInContainer:";
			public static readonly Selector modDateForURL_ = "modDateForURL:";
			public static readonly Selector removeDirectoryAndContentsAtURL_ = "removeDirectoryAndContentsAtURL:";
			public static readonly Selector removeFileAtURL_ = "removeFileAtURL:";
			public static readonly Selector setACLsWithReadPrincipals_writePrincipals_onURL_ = "setACLsWithReadPrincipals:writePrincipals:onURL:";
			public static readonly Selector setFailedPasswordHandler_ = "setFailedPasswordHandler:";
			public static readonly Selector write_toURL_securely_ = "write:toURL:securely:";
		}
	}
	[ProxyBaseClass(typeof( ABScrollView ))]
	public struct ABFlareScrollView : IEquatable<ABFlareScrollView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABFlareScrollView;
		public static implicit operator IntPtr( ABFlareScrollView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABFlareScrollView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABFlareScrollView ) ) return false; 
			return Handle == ( ( ABFlareScrollView )value ).Handle;
		}
		public bool Equals( ABFlareScrollView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABFlareScrollView value1, ABFlareScrollView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABFlareScrollView value1, ABFlareScrollView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABFlareScrollView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABFlareScrollView alloc() {
			return new ABFlareScrollView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int messageType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.messageType( Handle, CachedSelectors.messageType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setMessageType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMessageType_( Handle, CachedSelectors.setMessageType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowFlare_( char flare ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowFlare_( Handle, CachedSelectors.setShowFlare_, out ___occuredException, sizeof( char ), flare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char showFlare() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.showFlare( Handle, CachedSelectors.showFlare, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void updateFlare() {
			RuntimeObject ___occuredException;
			NativeMethods.updateFlare( Handle, CachedSelectors.updateFlare, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateFlareWindow() {
			RuntimeObject ___occuredException;
			NativeMethods.updateFlareWindow( Handle, CachedSelectors.updateFlareWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateNotifications() {
			RuntimeObject ___occuredException;
			NativeMethods.updateNotifications( Handle, CachedSelectors.updateNotifications, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidBecomeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidBecomeKey_( Handle, CachedSelectors.windowDidBecomeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidResignKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidResignKey_( Handle, CachedSelectors.windowDidResignKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowWillClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowWillClose_( Handle, CachedSelectors.windowWillClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int messageType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMessageType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShowFlare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char flare );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char showFlare( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateFlare( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateFlareWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateNotifications( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowDidBecomeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowDidResignKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowWillClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
		}
		static internal class CachedSelectors {
			public static readonly Selector messageType = "messageType";
			public static readonly Selector setMessageType_ = "setMessageType:";
			public static readonly Selector setShowFlare_ = "setShowFlare:";
			public static readonly Selector showFlare = "showFlare";
			public static readonly Selector updateFlare = "updateFlare";
			public static readonly Selector updateFlareWindow = "updateFlareWindow";
			public static readonly Selector updateNotifications = "updateNotifications";
			public static readonly Selector windowDidBecomeKey_ = "windowDidBecomeKey:";
			public static readonly Selector windowDidResignKey_ = "windowDidResignKey:";
			public static readonly Selector windowWillClose_ = "windowWillClose:";
		}
	}
	[ProxyBaseClass(typeof( ABRecord ))]
	public struct ABGroup : IEquatable<ABGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABGroup;
		public static implicit operator IntPtr( ABGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABGroup ) ) return false; 
			return Handle == ( ( ABGroup )value ).Handle;
		}
		public bool Equals( ABGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABGroup value1, ABGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABGroup value1, ABGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABGroup alloc() {
			return new ABGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject addGroupFromDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addGroupFromDictionary_( ClassHandle, CachedSelectors.addGroupFromDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static int addPropertiesAndTypes_( NSDictionary types ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_( ClassHandle, CachedSelectors.addPropertiesAndTypes_, out ___occuredException, sizeof( NSDictionary ), types );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int addPropertiesAndTypes_withAddressBook_( NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_withAddressBook_( ClassHandle, CachedSelectors.addPropertiesAndTypes_withAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), types, withAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int addPropertiesAndTypes_withAddressBook_acquireLock_( NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook, char acquireLock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_withAddressBook_acquireLock_( ClassHandle, CachedSelectors.addPropertiesAndTypes_withAddressBook_acquireLock_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), types, withAddressBook, acquireLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int addPropertiesAndTypes_withAddressBook_acquireLock_save_( NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook, char acquireLock, char save ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_withAddressBook_acquireLock_save_( ClassHandle, CachedSelectors.addPropertiesAndTypes_withAddressBook_acquireLock_save_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), types, withAddressBook, acquireLock, save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int removeProperties_( NSArray properties ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeProperties_( ClassHandle, CachedSelectors.removeProperties_, out ___occuredException, sizeof( NSArray ), properties );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static ABSearchElement searchElementForProperty_label_key_value_comparison_( string property, string label, string key, NObjective.RuntimeObject value, int comparison ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___wrappedlabel = Runtime.CreateStringProxy( label );
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.searchElementForProperty_label_key_value_comparison_( ClassHandle, CachedSelectors.searchElementForProperty_label_key_value_comparison_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), ___wrappedproperty, ___wrappedlabel, ___wrappedkey, value, comparison );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedlabel );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABSearchElement( ___result );
		}
		unsafe public NObjective.RuntimeObject abGroupDatabaseImpl() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abGroupDatabaseImpl( Handle, CachedSelectors.abGroupDatabaseImpl, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool addMember_( ABPerson member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addMember_( Handle, CachedSelectors.addMember_, out ___occuredException, sizeof( ABPerson ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool addSubgroup_( ABGroup subgroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addSubgroup_( Handle, CachedSelectors.addSubgroup_, out ___occuredException, sizeof( ABGroup ), subgroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char addSubrecord_( NObjective.RuntimeObject subrecord ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addSubrecord_( Handle, CachedSelectors.addSubrecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subrecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject allAssociatedMembersAndSubgroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allAssociatedMembersAndSubgroups( Handle, CachedSelectors.allAssociatedMembersAndSubgroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allAssociatedMembersAndSubgroups_( char subgroups ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allAssociatedMembersAndSubgroups_( Handle, CachedSelectors.allAssociatedMembersAndSubgroups_, out ___occuredException, sizeof( char ), subgroups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string distributionIdentifierForProperty_person_( string property, ABPerson person ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___result = NativeMethods.distributionIdentifierForProperty_person_( Handle, CachedSelectors.distributionIdentifierForProperty_person_, out ___occuredException, sizeof( IntPtr ) + sizeof( ABPerson ), ___wrappedproperty, person );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int distributionIndexForProperty_person_( NObjective.RuntimeObject property, NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.distributionIndexForProperty_person_( Handle, CachedSelectors.distributionIndexForProperty_person_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject distributionStringsForMembers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.distributionStringsForMembers( Handle, CachedSelectors.distributionStringsForMembers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject distributionValueForProperty_person_( NObjective.RuntimeObject property, NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.distributionValueForProperty_person_( Handle, CachedSelectors.distributionValueForProperty_person_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject enclosedSubscriptionGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enclosedSubscriptionGroups( Handle, CachedSelectors.enclosedSubscriptionGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject icon() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.icon( Handle, CachedSelectors.icon, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isPublishable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPublishable( Handle, CachedSelectors.isPublishable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isReadOnlyIgnoresInert_( char inert ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isReadOnlyIgnoresInert_( Handle, CachedSelectors.isReadOnlyIgnoresInert_, out ___occuredException, sizeof( char ), inert );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSpecialGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSpecialGroup( Handle, CachedSelectors.isSpecialGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray members() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.members( Handle, CachedSelectors.members, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject membersAndSubgroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.membersAndSubgroups( Handle, CachedSelectors.membersAndSubgroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void mergeRemoteLocations_( NObjective.RuntimeObject locations ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeRemoteLocations_( Handle, CachedSelectors.mergeRemoteLocations_, out ___occuredException, sizeof( NObjective.RuntimeObject ), locations );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_AddMember_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddMember_( Handle, CachedSelectors.nts_AddMember_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_( NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_( Handle, CachedSelectors.nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), representation, withRecordMapping );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_recordsByUniqueId_( NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping, NObjective.RuntimeObject recordsByUniqueId ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_recordsByUniqueId_( Handle, CachedSelectors.nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_recordsByUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), representation, withRecordMapping, recordsByUniqueId );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_AddSubgroup_( NObjective.RuntimeObject subgroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddSubgroup_( Handle, CachedSelectors.nts_AddSubgroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subgroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_ClearInstanceCaches() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ClearInstanceCaches( Handle, CachedSelectors.nts_ClearInstanceCaches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_IsParentGroupOfRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsParentGroupOfRecord_( Handle, CachedSelectors.nts_IsParentGroupOfRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_Members() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Members( Handle, CachedSelectors.nts_Members, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_MembersRecursive() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_MembersRecursive( Handle, CachedSelectors.nts_MembersRecursive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_RecursiveContainsGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RecursiveContainsGroup_( Handle, CachedSelectors.nts_RecursiveContainsGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_RemoveMember_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveMember_( Handle, CachedSelectors.nts_RemoveMember_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_RemoveSubgroup_( NObjective.RuntimeObject subgroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveSubgroup_( Handle, CachedSelectors.nts_RemoveSubgroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subgroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SetDistributionIdentifier_forProperty_person_allowFetching_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject person, char allowFetching ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetDistributionIdentifier_forProperty_person_allowFetching_( Handle, CachedSelectors.nts_SetDistributionIdentifier_forProperty_person_allowFetching_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), identifier, forProperty, person, allowFetching );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_Subgroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Subgroups( Handle, CachedSelectors.nts_Subgroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char recursiveContainsGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recursiveContainsGroup_( Handle, CachedSelectors.recursiveContainsGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool removeMember_( ABPerson member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeMember_( Handle, CachedSelectors.removeMember_, out ___occuredException, sizeof( ABPerson ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool removeSubgroup_( ABGroup subgroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeSubgroup_( Handle, CachedSelectors.removeSubgroup_, out ___occuredException, sizeof( ABGroup ), subgroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeSubrecord_( NObjective.RuntimeObject subrecord ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeSubrecord_( Handle, CachedSelectors.removeSubrecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subrecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool setDistributionIdentifier_forProperty_person_( string identifier, string forProperty, ABPerson person ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___wrappedforProperty = Runtime.CreateStringProxy( forProperty );
			var ___result = NativeMethods.setDistributionIdentifier_forProperty_person_( Handle, CachedSelectors.setDistributionIdentifier_forProperty_person_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( ABPerson ), ___wrappedidentifier, ___wrappedforProperty, person );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedforProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool shouldClearSearchWhenSwitchingTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldClearSearchWhenSwitchingTo_( Handle, CachedSelectors.shouldClearSearchWhenSwitchingTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray subgroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subgroups( Handle, CachedSelectors.subgroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abGroupDatabaseImpl( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addGroupFromDictionary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool addMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABPerson member );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary types );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_withAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_withAddressBook_acquireLock_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook, char acquireLock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_withAddressBook_acquireLock_save_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook, char acquireLock, char save );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool addSubgroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABGroup subgroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char addSubrecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subrecord );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allAssociatedMembersAndSubgroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allAssociatedMembersAndSubgroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char subgroups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr distributionIdentifierForProperty_person_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property, ABPerson person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int distributionIndexForProperty_person_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr distributionStringsForMembers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr distributionValueForProperty_person_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr enclosedSubscriptionGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr icon( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isPublishable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isReadOnlyIgnoresInert_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char inert );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isSpecialGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr members( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr membersAndSubgroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void mergeRemoteLocations_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject locations );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_AddMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_recordsByUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping, NObjective.RuntimeObject recordsByUniqueId );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_AddSubgroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subgroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ClearInstanceCaches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_IsParentGroupOfRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_Members( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_MembersRecursive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_RecursiveContainsGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_RemoveMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_RemoveSubgroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subgroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_SetDistributionIdentifier_forProperty_person_allowFetching_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject person, char allowFetching );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_Subgroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char recursiveContainsGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool removeMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABPerson member );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int removeProperties_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray properties );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool removeSubgroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABGroup subgroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char removeSubrecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subrecord );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchElementForProperty_label_key_value_comparison_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property, IntPtr label, IntPtr key, NObjective.RuntimeObject value, int comparison );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool setDistributionIdentifier_forProperty_person_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier, IntPtr forProperty, ABPerson person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool shouldClearSearchWhenSwitchingTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subgroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector abGroupDatabaseImpl = "abGroupDatabaseImpl";
			public static readonly Selector addGroupFromDictionary_ = "addGroupFromDictionary:";
			public static readonly Selector addMember_ = "addMember:";
			public static readonly Selector addPropertiesAndTypes_ = "addPropertiesAndTypes:";
			public static readonly Selector addPropertiesAndTypes_withAddressBook_ = "addPropertiesAndTypes:withAddressBook:";
			public static readonly Selector addPropertiesAndTypes_withAddressBook_acquireLock_ = "addPropertiesAndTypes:withAddressBook:acquireLock:";
			public static readonly Selector addPropertiesAndTypes_withAddressBook_acquireLock_save_ = "addPropertiesAndTypes:withAddressBook:acquireLock:save:";
			public static readonly Selector addSubgroup_ = "addSubgroup:";
			public static readonly Selector addSubrecord_ = "addSubrecord:";
			public static readonly Selector allAssociatedMembersAndSubgroups = "allAssociatedMembersAndSubgroups";
			public static readonly Selector allAssociatedMembersAndSubgroups_ = "allAssociatedMembersAndSubgroups:";
			public static readonly Selector distributionIdentifierForProperty_person_ = "distributionIdentifierForProperty:person:";
			public static readonly Selector distributionIndexForProperty_person_ = "distributionIndexForProperty:person:";
			public static readonly Selector distributionStringsForMembers = "distributionStringsForMembers";
			public static readonly Selector distributionValueForProperty_person_ = "distributionValueForProperty:person:";
			public static readonly Selector enclosedSubscriptionGroups = "enclosedSubscriptionGroups";
			public static readonly Selector icon = "icon";
			public static readonly Selector isPublishable = "isPublishable";
			public static readonly Selector isReadOnlyIgnoresInert_ = "isReadOnlyIgnoresInert:";
			public static readonly Selector isSpecialGroup = "isSpecialGroup";
			public static readonly Selector members = "members";
			public static readonly Selector membersAndSubgroups = "membersAndSubgroups";
			public static readonly Selector mergeRemoteLocations_ = "mergeRemoteLocations:";
			public static readonly Selector name = "name";
			public static readonly Selector nts_AddMember_ = "nts_AddMember:";
			public static readonly Selector nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_ = "nts_AddMembersAndSubgroupsFromDictionaryRepresentation:withRecordMapping:";
			public static readonly Selector nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_recordsByUniqueId_ = "nts_AddMembersAndSubgroupsFromDictionaryRepresentation:withRecordMapping:recordsByUniqueId:";
			public static readonly Selector nts_AddSubgroup_ = "nts_AddSubgroup:";
			public static readonly Selector nts_ClearInstanceCaches = "nts_ClearInstanceCaches";
			public static readonly Selector nts_IsParentGroupOfRecord_ = "nts_IsParentGroupOfRecord:";
			public static readonly Selector nts_Members = "nts_Members";
			public static readonly Selector nts_MembersRecursive = "nts_MembersRecursive";
			public static readonly Selector nts_RecursiveContainsGroup_ = "nts_RecursiveContainsGroup:";
			public static readonly Selector nts_RemoveMember_ = "nts_RemoveMember:";
			public static readonly Selector nts_RemoveSubgroup_ = "nts_RemoveSubgroup:";
			public static readonly Selector nts_SetDistributionIdentifier_forProperty_person_allowFetching_ = "nts_SetDistributionIdentifier:forProperty:person:allowFetching:";
			public static readonly Selector nts_Subgroups = "nts_Subgroups";
			public static readonly Selector recursiveContainsGroup_ = "recursiveContainsGroup:";
			public static readonly Selector removeMember_ = "removeMember:";
			public static readonly Selector removeProperties_ = "removeProperties:";
			public static readonly Selector removeSubgroup_ = "removeSubgroup:";
			public static readonly Selector removeSubrecord_ = "removeSubrecord:";
			public static readonly Selector searchElementForProperty_label_key_value_comparison_ = "searchElementForProperty:label:key:value:comparison:";
			public static readonly Selector setDistributionIdentifier_forProperty_person_ = "setDistributionIdentifier:forProperty:person:";
			public static readonly Selector shouldClearSearchWhenSwitchingTo_ = "shouldClearSearchWhenSwitchingTo:";
			public static readonly Selector subgroups = "subgroups";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABGroupCommand : IEquatable<ABGroupCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABGroupCommand;
		public static implicit operator IntPtr( ABGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABGroupCommand ) ) return false; 
			return Handle == ( ( ABGroupCommand )value ).Handle;
		}
		public bool Equals( ABGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABGroupCommand value1, ABGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABGroupCommand value1, ABGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABGroupCommand alloc() {
			return new ABGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject addRecordsToGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addRecordsToGroup( Handle, CachedSelectors.addRecordsToGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_records_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject records, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_records_addressBook_( Handle, CachedSelectors.initWithGroup_records_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, records, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject removeRecordsFromGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeRecordsFromGroup( Handle, CachedSelectors.removeRecordsFromGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addRecordsToGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_records_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject records, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr removeRecordsFromGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addRecordsToGroup = "addRecordsToGroup";
			public static readonly Selector initWithGroup_records_addressBook_ = "initWithGroup:records:addressBook:";
			public static readonly Selector removeRecordsFromGroup = "removeRecordsFromGroup";
		}
	}
	[ProxyBaseClass(typeof( ABRecord ))]
	public struct ABGroupContents : IEquatable<ABGroupContents> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABGroupContents;
		public static implicit operator IntPtr( ABGroupContents value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABGroupContents value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABGroupContents ) ) return false; 
			return Handle == ( ( ABGroupContents )value ).Handle;
		}
		public bool Equals( ABGroupContents value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABGroupContents value1, ABGroupContents value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABGroupContents value1, ABGroupContents value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABGroupContents( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABGroupContents alloc() {
			return new ABGroupContents( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int nts_FindMemberUID_inArray_( NObjective.RuntimeObject uid, NObjective.RuntimeObject inArray ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_FindMemberUID_inArray_( ClassHandle, CachedSelectors.nts_FindMemberUID_inArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), uid, inArray );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_AddToCache() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_AddToCache( Handle, CachedSelectors.nts_AddToCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_DistributionIdentifierForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_DistributionIdentifierForProperty_( Handle, CachedSelectors.nts_DistributionIdentifierForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_GroupUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_GroupUID( Handle, CachedSelectors.nts_GroupUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_InitWithGroupUID_memberUID_addressBook_( NObjective.RuntimeObject uid, NObjective.RuntimeObject memberUID, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitWithGroupUID_memberUID_addressBook_( Handle, CachedSelectors.nts_InitWithGroupUID_memberUID_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), uid, memberUID, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_InsertInArray_( NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_InsertInArray_( Handle, CachedSelectors.nts_InsertInArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_MemberUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_MemberUID( Handle, CachedSelectors.nts_MemberUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_RemoveFromCache() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_RemoveFromCache( Handle, CachedSelectors.nts_RemoveFromCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_SetDistributionIdentifier_forProperty_allowFetching_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject forProperty, char allowFetching ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetDistributionIdentifier_forProperty_allowFetching_( Handle, CachedSelectors.nts_SetDistributionIdentifier_forProperty_allowFetching_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), identifier, forProperty, allowFetching );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_AddToCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_DistributionIdentifierForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int nts_FindMemberUID_inArray_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid, NObjective.RuntimeObject inArray );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_GroupUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_InitWithGroupUID_memberUID_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid, NObjective.RuntimeObject memberUID, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_InsertInArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_MemberUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_RemoveFromCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_SetDistributionIdentifier_forProperty_allowFetching_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject forProperty, char allowFetching );
		}
		static internal class CachedSelectors {
			public static readonly Selector nts_AddToCache = "nts_AddToCache";
			public static readonly Selector nts_DistributionIdentifierForProperty_ = "nts_DistributionIdentifierForProperty:";
			public static readonly Selector nts_FindMemberUID_inArray_ = "nts_FindMemberUID:inArray:";
			public static readonly Selector nts_GroupUID = "nts_GroupUID";
			public static readonly Selector nts_InitWithGroupUID_memberUID_addressBook_ = "nts_InitWithGroupUID:memberUID:addressBook:";
			public static readonly Selector nts_InsertInArray_ = "nts_InsertInArray:";
			public static readonly Selector nts_MemberUID = "nts_MemberUID";
			public static readonly Selector nts_RemoveFromCache = "nts_RemoveFromCache";
			public static readonly Selector nts_SetDistributionIdentifier_forProperty_allowFetching_ = "nts_SetDistributionIdentifier:forProperty:allowFetching:";
		}
	}
	[ProxyBaseClass(typeof( ABTableController ))]
	public struct ABGroupsController : IEquatable<ABGroupsController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABGroupsController;
		public static implicit operator IntPtr( ABGroupsController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABGroupsController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABGroupsController ) ) return false; 
			return Handle == ( ( ABGroupsController )value ).Handle;
		}
		public bool Equals( ABGroupsController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABGroupsController value1, ABGroupsController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABGroupsController value1, ABGroupsController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABGroupsController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABGroupsController alloc() {
			return new ABGroupsController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject dividerRowItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dividerRowItem( ClassHandle, CachedSelectors.dividerRowItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void abdStartedSyncing_( NObjective.RuntimeObject syncing ) {
			RuntimeObject ___occuredException;
			NativeMethods.abdStartedSyncing_( Handle, CachedSelectors.abdStartedSyncing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), syncing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void abdStoppedSyncing_( NObjective.RuntimeObject syncing ) {
			RuntimeObject ___occuredException;
			NativeMethods.abdStoppedSyncing_( Handle, CachedSelectors.abdStoppedSyncing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), syncing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void abdSyncProgress_( NObjective.RuntimeObject progress ) {
			RuntimeObject ___occuredException;
			NativeMethods.abdSyncProgress_( Handle, CachedSelectors.abdSyncProgress_, out ___occuredException, sizeof( NObjective.RuntimeObject ), progress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char addGroupsFromPasteboard_toGroup_( NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addGroupsFromPasteboard_toGroup_( Handle, CachedSelectors.addGroupsFromPasteboard_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), pasteboard, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char addPeopleFromPasteboard_toGroup_( NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPeopleFromPasteboard_toGroup_( Handle, CachedSelectors.addPeopleFromPasteboard_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), pasteboard, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void adjustTableColumns() {
			RuntimeObject ___occuredException;
			NativeMethods.adjustTableColumns( Handle, CachedSelectors.adjustTableColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void alertDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.alertDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.alertDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelEditing() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelEditing( Handle, CachedSelectors.cancelEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void commitPendingChanges() {
			RuntimeObject ___occuredException;
			NativeMethods.commitPendingChanges( Handle, CachedSelectors.commitPendingChanges, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void copy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			NativeMethods.copy_( Handle, CachedSelectors.copy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void createDragProgressWindow_forRow_( NObjective.RuntimeObject window, int forRow ) {
			RuntimeObject ___occuredException;
			NativeMethods.createDragProgressWindow_forRow_( Handle, CachedSelectors.createDragProgressWindow_forRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), window, forRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cut_( NObjective.RuntimeObject cut ) {
			RuntimeObject ___occuredException;
			NativeMethods.cut_( Handle, CachedSelectors.cut_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cut );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject dataSource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataSource( Handle, CachedSelectors.dataSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deleteKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteKey_( Handle, CachedSelectors.deleteKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char deleteMeansRemoveSubscription_( NObjective.RuntimeObject subscription ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deleteMeansRemoveSubscription_( Handle, CachedSelectors.deleteMeansRemoveSubscription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doRemoveSubscription_( NObjective.RuntimeObject subscription ) {
			RuntimeObject ___occuredException;
			NativeMethods.doRemoveSubscription_( Handle, CachedSelectors.doRemoveSubscription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dragAnimationComplete_toRow_( NObjective.RuntimeObject complete, int toRow ) {
			RuntimeObject ___occuredException;
			NativeMethods.dragAnimationComplete_toRow_( Handle, CachedSelectors.dragAnimationComplete_toRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), complete, toRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editSelectedGroupWithUndo_( char undo ) {
			RuntimeObject ___occuredException;
			NativeMethods.editSelectedGroupWithUndo_( Handle, CachedSelectors.editSelectedGroupWithUndo_, out ___occuredException, sizeof( char ), undo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editSmartGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.editSmartGroup_( Handle, CachedSelectors.editSmartGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editSmartGroupSheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, NObjective.RuntimeObject contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.editSmartGroupSheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.editSmartGroupSheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void escapeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.escapeKey_( Handle, CachedSelectors.escapeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exportVCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportVCard_( Handle, CachedSelectors.exportVCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject firstSubscribedGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstSubscribedGroup( Handle, CachedSelectors.firstSubscribedGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float fontSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fontSize( Handle, CachedSelectors.fontSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void groupsChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupsChanged_( Handle, CachedSelectors.groupsChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void groupsSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupsSelectionChanged_( Handle, CachedSelectors.groupsSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isEditingCanceled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEditingCanceled( Handle, CachedSelectors.isEditingCanceled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEditingGroupName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEditingGroupName( Handle, CachedSelectors.isEditingGroupName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isRenameGroupUndoable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isRenameGroupUndoable( Handle, CachedSelectors.isRenameGroupUndoable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void membersSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersSelectionChanged_( Handle, CachedSelectors.membersSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject menuForEvent_( NObjective.RuntimeObject @event ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.menuForEvent_( Handle, CachedSelectors.menuForEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nameColumnTag() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameColumnTag( Handle, CachedSelectors.nameColumnTag, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject outlineView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView( Handle, CachedSelectors.outlineView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char outlineView_acceptDrop_item_childIndex_( NObjective.RuntimeObject view, NObjective.RuntimeObject acceptDrop, NObjective.RuntimeObject item, int childIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_acceptDrop_item_childIndex_( Handle, CachedSelectors.outlineView_acceptDrop_item_childIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, acceptDrop, item, childIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject outlineView_child_ofItem_( NObjective.RuntimeObject view, int child, NObjective.RuntimeObject ofItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_child_ofItem_( Handle, CachedSelectors.outlineView_child_ofItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, child, ofItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float outlineView_heightOfRowByItem_( NObjective.RuntimeObject view, NObjective.RuntimeObject heightOfRowByItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_heightOfRowByItem_( Handle, CachedSelectors.outlineView_heightOfRowByItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, heightOfRowByItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char outlineView_isItemExpandable_( NObjective.RuntimeObject view, NObjective.RuntimeObject isItemExpandable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_isItemExpandable_( Handle, CachedSelectors.outlineView_isItemExpandable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, isItemExpandable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject outlineView_namesOfPromisedFilesDroppedAtDestination_forDraggedItems_( NObjective.RuntimeObject view, NObjective.RuntimeObject namesOfPromisedFilesDroppedAtDestination, NObjective.RuntimeObject forDraggedItems ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_namesOfPromisedFilesDroppedAtDestination_forDraggedItems_( Handle, CachedSelectors.outlineView_namesOfPromisedFilesDroppedAtDestination_forDraggedItems_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, namesOfPromisedFilesDroppedAtDestination, forDraggedItems );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int outlineView_numberOfChildrenOfItem_( NObjective.RuntimeObject view, NObjective.RuntimeObject numberOfChildrenOfItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_numberOfChildrenOfItem_( Handle, CachedSelectors.outlineView_numberOfChildrenOfItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, numberOfChildrenOfItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject outlineView_objectValueForTableColumn_byItem_( NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, NObjective.RuntimeObject byItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_objectValueForTableColumn_byItem_( Handle, CachedSelectors.outlineView_objectValueForTableColumn_byItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, objectValueForTableColumn, byItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void outlineView_setObjectValue_forTableColumn_byItem_( NObjective.RuntimeObject view, NObjective.RuntimeObject setObjectValue, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject byItem ) {
			RuntimeObject ___occuredException;
			NativeMethods.outlineView_setObjectValue_forTableColumn_byItem_( Handle, CachedSelectors.outlineView_setObjectValue_forTableColumn_byItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, setObjectValue, forTableColumn, byItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char outlineView_shouldEditTableColumn_item_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldEditTableColumn, NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_shouldEditTableColumn_item_( Handle, CachedSelectors.outlineView_shouldEditTableColumn_item_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldEditTableColumn, item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char outlineView_shouldSelectItem_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldSelectItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_shouldSelectItem_( Handle, CachedSelectors.outlineView_shouldSelectItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldSelectItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint outlineView_validateDrop_proposedItem_proposedChildIndex_( NObjective.RuntimeObject view, NObjective.RuntimeObject validateDrop, NObjective.RuntimeObject proposedItem, int proposedChildIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_validateDrop_proposedItem_proposedChildIndex_( Handle, CachedSelectors.outlineView_validateDrop_proposedItem_proposedChildIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, validateDrop, proposedItem, proposedChildIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public void outlineView_willDisplayCell_forTableColumn_item_( NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			NativeMethods.outlineView_willDisplayCell_forTableColumn_item_( Handle, CachedSelectors.outlineView_willDisplayCell_forTableColumn_item_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, willDisplayCell, forTableColumn, item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void outlineView_willDisplayOutlineCell_forTableColumn_item_( NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayOutlineCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			NativeMethods.outlineView_willDisplayOutlineCell_forTableColumn_item_( Handle, CachedSelectors.outlineView_willDisplayOutlineCell_forTableColumn_item_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, willDisplayOutlineCell, forTableColumn, item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char outlineView_writeItems_toPasteboard_( NObjective.RuntimeObject view, NObjective.RuntimeObject writeItems, NObjective.RuntimeObject toPasteboard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_writeItems_toPasteboard_( Handle, CachedSelectors.outlineView_writeItems_toPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, writeItems, toPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void outlineViewSelectionDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.outlineViewSelectionDidChange_( Handle, CachedSelectors.outlineViewSelectionDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void paste_( NObjective.RuntimeObject paste ) {
			RuntimeObject ___occuredException;
			NativeMethods.paste_( Handle, CachedSelectors.paste_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paste );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pasteboard_provideDataForType_( NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject provideDataForType ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteboard_provideDataForType_( Handle, CachedSelectors.pasteboard_provideDataForType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), pasteboard, provideDataForType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void refreshDataSource() {
			RuntimeObject ___occuredException;
			NativeMethods.refreshDataSource( Handle, CachedSelectors.refreshDataSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendEmailToGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.sendEmailToGroup_( Handle, CachedSelectors.sendEmailToGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsGroupEditing_( char editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsGroupEditing_( Handle, CachedSelectors.setAllowsGroupEditing_, out ___occuredException, sizeof( char ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDataSource_( NObjective.RuntimeObject source ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDataSource_( Handle, CachedSelectors.setDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ), source );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEditingCanceled_( char canceled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEditingCanceled_( Handle, CachedSelectors.setEditingCanceled_, out ___occuredException, sizeof( char ), canceled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHidesOutlineColumn_( char column ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHidesOutlineColumn_( Handle, CachedSelectors.setHidesOutlineColumn_, out ___occuredException, sizeof( char ), column );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRenameGroupUndoable_( char undoable ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRenameGroupUndoable_( Handle, CachedSelectors.setRenameGroupUndoable_, out ___occuredException, sizeof( char ), undoable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectionFromGUIDs_( NObjective.RuntimeObject ds ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectionFromGUIDs_( Handle, CachedSelectors.setSelectionFromGUIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowGroupMembership_( char membership ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowGroupMembership_( Handle, CachedSelectors.setShowGroupMembership_, out ___occuredException, sizeof( char ), membership );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float sharingProgressForGroup_showUpdateSharingIndicator_( NObjective.RuntimeObject @group, System.IntPtr showUpdateSharingIndicator ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharingProgressForGroup_showUpdateSharingIndicator_( Handle, CachedSelectors.sharingProgressForGroup_showUpdateSharingIndicator_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), @group, showUpdateSharingIndicator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char showGroupMembership() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.showGroupMembership( Handle, CachedSelectors.showGroupMembership, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void startEditingSmartGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.startEditingSmartGroup_( Handle, CachedSelectors.startEditingSmartGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject stringsFromGUIDs_( NObjective.RuntimeObject ds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromGUIDs_( Handle, CachedSelectors.stringsFromGUIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringsFromSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromSelection( Handle, CachedSelectors.stringsFromSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char textView_doCommandBySelector_( NObjective.RuntimeObject view, NObjective.Selector doCommandBySelector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textView_doCommandBySelector_( Handle, CachedSelectors.textView_doCommandBySelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), view, doCommandBySelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void typeAhead_( NObjective.RuntimeObject ahead ) {
			RuntimeObject ___occuredException;
			NativeMethods.typeAhead_( Handle, CachedSelectors.typeAhead_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ahead );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateGroupMembership() {
			RuntimeObject ___occuredException;
			NativeMethods.updateGroupMembership( Handle, CachedSelectors.updateGroupMembership, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateSyncIndicators() {
			RuntimeObject ___occuredException;
			NativeMethods.updateSyncIndicators( Handle, CachedSelectors.updateSyncIndicators, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateSyncIndicatorsReloadItems_( char items ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateSyncIndicatorsReloadItems_( Handle, CachedSelectors.updateSyncIndicatorsReloadItems_, out ___occuredException, sizeof( char ), items );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char useTableViewLook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useTableViewLook( Handle, CachedSelectors.useTableViewLook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char validateAction_( NObjective.Selector action ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateAction_( Handle, CachedSelectors.validateAction_, out ___occuredException, sizeof( NObjective.Selector ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject vCardForGUIDs_( NObjective.RuntimeObject ds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vCardForGUIDs_( Handle, CachedSelectors.vCardForGUIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void windowDidUpdate_( NObjective.RuntimeObject update ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidUpdate_( Handle, CachedSelectors.windowDidUpdate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), update );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abdStartedSyncing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject syncing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abdStoppedSyncing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject syncing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abdSyncProgress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject progress );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char addGroupsFromPasteboard_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject toGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char addPeopleFromPasteboard_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject toGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void adjustTableColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void alertDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void commitPendingChanges( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void copy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void createDragProgressWindow_forRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window, int forRow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cut_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cut );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dataSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deleteKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char deleteMeansRemoveSubscription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscription );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dividerRowItem( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doRemoveSubscription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscription );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dragAnimationComplete_toRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject complete, int toRow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editSelectedGroupWithUndo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char undo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editSmartGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editSmartGroupSheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, NObjective.RuntimeObject contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void escapeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void exportVCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr firstSubscribedGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float fontSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void groupsChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void groupsSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isEditingCanceled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isEditingGroupName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isRenameGroupUndoable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void membersSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr menuForEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nameColumnTag( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr outlineView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char outlineView_acceptDrop_item_childIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject acceptDrop, NObjective.RuntimeObject item, int childIndex );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr outlineView_child_ofItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int child, NObjective.RuntimeObject ofItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float outlineView_heightOfRowByItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject heightOfRowByItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char outlineView_isItemExpandable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject isItemExpandable );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr outlineView_namesOfPromisedFilesDroppedAtDestination_forDraggedItems_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject namesOfPromisedFilesDroppedAtDestination, NObjective.RuntimeObject forDraggedItems );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int outlineView_numberOfChildrenOfItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject numberOfChildrenOfItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr outlineView_objectValueForTableColumn_byItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, NObjective.RuntimeObject byItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void outlineView_setObjectValue_forTableColumn_byItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject setObjectValue, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject byItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char outlineView_shouldEditTableColumn_item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldEditTableColumn, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char outlineView_shouldSelectItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldSelectItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint outlineView_validateDrop_proposedItem_proposedChildIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject validateDrop, NObjective.RuntimeObject proposedItem, int proposedChildIndex );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void outlineView_willDisplayCell_forTableColumn_item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void outlineView_willDisplayOutlineCell_forTableColumn_item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayOutlineCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char outlineView_writeItems_toPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject writeItems, NObjective.RuntimeObject toPasteboard );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void outlineViewSelectionDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void paste_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paste );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void pasteboard_provideDataForType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject provideDataForType );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void refreshDataSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void sendEmailToGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsGroupEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char editing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject source );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEditingCanceled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char canceled );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setHidesOutlineColumn_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char column );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setRenameGroupUndoable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char undoable );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectionFromGUIDs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ds );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShowGroupMembership_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char membership );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float sharingProgressForGroup_showUpdateSharingIndicator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, System.IntPtr showUpdateSharingIndicator );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char showGroupMembership( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void startEditingSmartGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringsFromGUIDs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ds );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringsFromSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char textView_doCommandBySelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.Selector doCommandBySelector );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void typeAhead_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ahead );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateGroupMembership( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateSyncIndicators( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateSyncIndicatorsReloadItems_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char items );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char useTableViewLook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char validateAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr vCardForGUIDs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ds );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowDidUpdate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject update );
		}
		static internal class CachedSelectors {
			public static readonly Selector abdStartedSyncing_ = "abdStartedSyncing:";
			public static readonly Selector abdStoppedSyncing_ = "abdStoppedSyncing:";
			public static readonly Selector abdSyncProgress_ = "abdSyncProgress:";
			public static readonly Selector addGroupsFromPasteboard_toGroup_ = "addGroupsFromPasteboard:toGroup:";
			public static readonly Selector addPeopleFromPasteboard_toGroup_ = "addPeopleFromPasteboard:toGroup:";
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector adjustTableColumns = "adjustTableColumns";
			public static readonly Selector alertDidEnd_returnCode_contextInfo_ = "alertDidEnd:returnCode:contextInfo:";
			public static readonly Selector cancelEditing = "cancelEditing";
			public static readonly Selector commitPendingChanges = "commitPendingChanges";
			public static readonly Selector copy_ = "copy:";
			public static readonly Selector createDragProgressWindow_forRow_ = "createDragProgressWindow:forRow:";
			public static readonly Selector cut_ = "cut:";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector dataSource = "dataSource";
			public static readonly Selector deleteKey_ = "deleteKey:";
			public static readonly Selector deleteMeansRemoveSubscription_ = "deleteMeansRemoveSubscription:";
			public static readonly Selector dividerRowItem = "dividerRowItem";
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector doRemoveSubscription_ = "doRemoveSubscription:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector dragAnimationComplete_toRow_ = "dragAnimationComplete:toRow:";
			public static readonly Selector editSelectedGroupWithUndo_ = "editSelectedGroupWithUndo:";
			public static readonly Selector editSmartGroup_ = "editSmartGroup:";
			public static readonly Selector editSmartGroupSheetDidEnd_returnCode_contextInfo_ = "editSmartGroupSheetDidEnd:returnCode:contextInfo:";
			public static readonly Selector escapeKey_ = "escapeKey:";
			public static readonly Selector exportVCard_ = "exportVCard:";
			public static readonly Selector firstSubscribedGroup = "firstSubscribedGroup";
			public static readonly Selector fontSize = "fontSize";
			public static readonly Selector groupsChanged_ = "groupsChanged:";
			public static readonly Selector groupsSelectionChanged_ = "groupsSelectionChanged:";
			public static readonly Selector isEditingCanceled = "isEditingCanceled";
			public static readonly Selector isEditingGroupName = "isEditingGroupName";
			public static readonly Selector isRenameGroupUndoable = "isRenameGroupUndoable";
			public static readonly Selector membersSelectionChanged_ = "membersSelectionChanged:";
			public static readonly Selector menuForEvent_ = "menuForEvent:";
			public static readonly Selector nameColumnTag = "nameColumnTag";
			public static readonly Selector outlineView = "outlineView";
			public static readonly Selector outlineView_acceptDrop_item_childIndex_ = "outlineView:acceptDrop:item:childIndex:";
			public static readonly Selector outlineView_child_ofItem_ = "outlineView:child:ofItem:";
			public static readonly Selector outlineView_heightOfRowByItem_ = "outlineView:heightOfRowByItem:";
			public static readonly Selector outlineView_isItemExpandable_ = "outlineView:isItemExpandable:";
			public static readonly Selector outlineView_namesOfPromisedFilesDroppedAtDestination_forDraggedItems_ = "outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:";
			public static readonly Selector outlineView_numberOfChildrenOfItem_ = "outlineView:numberOfChildrenOfItem:";
			public static readonly Selector outlineView_objectValueForTableColumn_byItem_ = "outlineView:objectValueForTableColumn:byItem:";
			public static readonly Selector outlineView_setObjectValue_forTableColumn_byItem_ = "outlineView:setObjectValue:forTableColumn:byItem:";
			public static readonly Selector outlineView_shouldEditTableColumn_item_ = "outlineView:shouldEditTableColumn:item:";
			public static readonly Selector outlineView_shouldSelectItem_ = "outlineView:shouldSelectItem:";
			public static readonly Selector outlineView_validateDrop_proposedItem_proposedChildIndex_ = "outlineView:validateDrop:proposedItem:proposedChildIndex:";
			public static readonly Selector outlineView_willDisplayCell_forTableColumn_item_ = "outlineView:willDisplayCell:forTableColumn:item:";
			public static readonly Selector outlineView_willDisplayOutlineCell_forTableColumn_item_ = "outlineView:willDisplayOutlineCell:forTableColumn:item:";
			public static readonly Selector outlineView_writeItems_toPasteboard_ = "outlineView:writeItems:toPasteboard:";
			public static readonly Selector outlineViewSelectionDidChange_ = "outlineViewSelectionDidChange:";
			public static readonly Selector paste_ = "paste:";
			public static readonly Selector pasteboard_provideDataForType_ = "pasteboard:provideDataForType:";
			public static readonly Selector refreshDataSource = "refreshDataSource";
			public static readonly Selector sendEmailToGroup_ = "sendEmailToGroup:";
			public static readonly Selector setAllowsGroupEditing_ = "setAllowsGroupEditing:";
			public static readonly Selector setDataSource_ = "setDataSource:";
			public static readonly Selector setEditingCanceled_ = "setEditingCanceled:";
			public static readonly Selector setHidesOutlineColumn_ = "setHidesOutlineColumn:";
			public static readonly Selector setRenameGroupUndoable_ = "setRenameGroupUndoable:";
			public static readonly Selector setSelectionFromGUIDs_ = "setSelectionFromGUIDs:";
			public static readonly Selector setShowGroupMembership_ = "setShowGroupMembership:";
			public static readonly Selector sharingProgressForGroup_showUpdateSharingIndicator_ = "sharingProgressForGroup:showUpdateSharingIndicator:";
			public static readonly Selector showGroupMembership = "showGroupMembership";
			public static readonly Selector startEditingSmartGroup_ = "startEditingSmartGroup:";
			public static readonly Selector stringsFromGUIDs_ = "stringsFromGUIDs:";
			public static readonly Selector stringsFromSelection = "stringsFromSelection";
			public static readonly Selector textView_doCommandBySelector_ = "textView:doCommandBySelector:";
			public static readonly Selector typeAhead_ = "typeAhead:";
			public static readonly Selector updateGroupMembership = "updateGroupMembership";
			public static readonly Selector updateSyncIndicators = "updateSyncIndicators";
			public static readonly Selector updateSyncIndicatorsReloadItems_ = "updateSyncIndicatorsReloadItems:";
			public static readonly Selector useTableViewLook = "useTableViewLook";
			public static readonly Selector validateAction_ = "validateAction:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
			public static readonly Selector vCardForGUIDs_ = "vCardForGUIDs:";
			public static readonly Selector windowDidUpdate_ = "windowDidUpdate:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABGroupsControllerDataSource : IEquatable<ABGroupsControllerDataSource> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABGroupsControllerDataSource;
		public static implicit operator IntPtr( ABGroupsControllerDataSource value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABGroupsControllerDataSource value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABGroupsControllerDataSource ) ) return false; 
			return Handle == ( ( ABGroupsControllerDataSource )value ).Handle;
		}
		public bool Equals( ABGroupsControllerDataSource value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABGroupsControllerDataSource value1, ABGroupsControllerDataSource value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABGroupsControllerDataSource value1, ABGroupsControllerDataSource value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABGroupsControllerDataSource( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABGroupsControllerDataSource alloc() {
			return new ABGroupsControllerDataSource( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint actualRowIndexWithGroupIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.actualRowIndexWithGroupIndex_( Handle, CachedSelectors.actualRowIndexWithGroupIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint extraGroupsCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.extraGroupsCount( Handle, CachedSelectors.extraGroupsCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public NObjective.RuntimeObject groupsController_outlineView_child_ofItem_( NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, int child, NObjective.RuntimeObject ofItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsController_outlineView_child_ofItem_( Handle, CachedSelectors.groupsController_outlineView_child_ofItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), controller, outlineView, child, ofItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float groupsController_outlineView_heightOfRowByItem_( NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject heightOfRowByItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsController_outlineView_heightOfRowByItem_( Handle, CachedSelectors.groupsController_outlineView_heightOfRowByItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, outlineView, heightOfRowByItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char groupsController_outlineView_isItemExpandable_( NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject isItemExpandable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsController_outlineView_isItemExpandable_( Handle, CachedSelectors.groupsController_outlineView_isItemExpandable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, outlineView, isItemExpandable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int groupsController_outlineView_numberOfChildrenOfItem_( NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject numberOfChildrenOfItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsController_outlineView_numberOfChildrenOfItem_( Handle, CachedSelectors.groupsController_outlineView_numberOfChildrenOfItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, outlineView, numberOfChildrenOfItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject groupsController_outlineView_objectValueForTableColumn_byItem_( NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject objectValueForTableColumn, NObjective.RuntimeObject byItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsController_outlineView_objectValueForTableColumn_byItem_( Handle, CachedSelectors.groupsController_outlineView_objectValueForTableColumn_byItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, outlineView, objectValueForTableColumn, byItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void groupsController_outlineView_setObjectValue_forTableColumn_byItem_( NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject setObjectValue, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject byItem ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupsController_outlineView_setObjectValue_forTableColumn_byItem_( Handle, CachedSelectors.groupsController_outlineView_setObjectValue_forTableColumn_byItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, outlineView, setObjectValue, forTableColumn, byItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char groupsController_outlineView_shouldEditTableColumn_item_( NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject shouldEditTableColumn, NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsController_outlineView_shouldEditTableColumn_item_( Handle, CachedSelectors.groupsController_outlineView_shouldEditTableColumn_item_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, outlineView, shouldEditTableColumn, item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void groupsController_outlineView_willDisplayCell_forTableColumn_item_( NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject willDisplayCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupsController_outlineView_willDisplayCell_forTableColumn_item_( Handle, CachedSelectors.groupsController_outlineView_willDisplayCell_forTableColumn_item_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, outlineView, willDisplayCell, forTableColumn, item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void groupsController_outlineView_willDisplayOutlineCell_forTableColumn_item_( NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject willDisplayOutlineCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupsController_outlineView_willDisplayOutlineCell_forTableColumn_item_( Handle, CachedSelectors.groupsController_outlineView_willDisplayOutlineCell_forTableColumn_item_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, outlineView, willDisplayOutlineCell, forTableColumn, item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void groupsController_outlineViewSelectionDidChange_( NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineViewSelectionDidChange ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupsController_outlineViewSelectionDidChange_( Handle, CachedSelectors.groupsController_outlineViewSelectionDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, outlineViewSelectionDidChange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char refreshWithGroupsController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.refreshWithGroupsController_( Handle, CachedSelectors.refreshWithGroupsController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint actualRowIndexWithGroupIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint extraGroupsCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groupsController_outlineView_child_ofItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, int child, NObjective.RuntimeObject ofItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float groupsController_outlineView_heightOfRowByItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject heightOfRowByItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char groupsController_outlineView_isItemExpandable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject isItemExpandable );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int groupsController_outlineView_numberOfChildrenOfItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject numberOfChildrenOfItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groupsController_outlineView_objectValueForTableColumn_byItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject objectValueForTableColumn, NObjective.RuntimeObject byItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void groupsController_outlineView_setObjectValue_forTableColumn_byItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject setObjectValue, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject byItem );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char groupsController_outlineView_shouldEditTableColumn_item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject shouldEditTableColumn, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void groupsController_outlineView_willDisplayCell_forTableColumn_item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject willDisplayCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void groupsController_outlineView_willDisplayOutlineCell_forTableColumn_item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineView, NObjective.RuntimeObject willDisplayOutlineCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void groupsController_outlineViewSelectionDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject outlineViewSelectionDidChange );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char refreshWithGroupsController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
		}
		static internal class CachedSelectors {
			public static readonly Selector actualRowIndexWithGroupIndex_ = "actualRowIndexWithGroupIndex:";
			public static readonly Selector extraGroupsCount = "extraGroupsCount";
			public static readonly Selector groupsController_outlineView_child_ofItem_ = "groupsController:outlineView:child:ofItem:";
			public static readonly Selector groupsController_outlineView_heightOfRowByItem_ = "groupsController:outlineView:heightOfRowByItem:";
			public static readonly Selector groupsController_outlineView_isItemExpandable_ = "groupsController:outlineView:isItemExpandable:";
			public static readonly Selector groupsController_outlineView_numberOfChildrenOfItem_ = "groupsController:outlineView:numberOfChildrenOfItem:";
			public static readonly Selector groupsController_outlineView_objectValueForTableColumn_byItem_ = "groupsController:outlineView:objectValueForTableColumn:byItem:";
			public static readonly Selector groupsController_outlineView_setObjectValue_forTableColumn_byItem_ = "groupsController:outlineView:setObjectValue:forTableColumn:byItem:";
			public static readonly Selector groupsController_outlineView_shouldEditTableColumn_item_ = "groupsController:outlineView:shouldEditTableColumn:item:";
			public static readonly Selector groupsController_outlineView_willDisplayCell_forTableColumn_item_ = "groupsController:outlineView:willDisplayCell:forTableColumn:item:";
			public static readonly Selector groupsController_outlineView_willDisplayOutlineCell_forTableColumn_item_ = "groupsController:outlineView:willDisplayOutlineCell:forTableColumn:item:";
			public static readonly Selector groupsController_outlineViewSelectionDidChange_ = "groupsController:outlineViewSelectionDidChange:";
			public static readonly Selector refreshWithGroupsController_ = "refreshWithGroupsController:";
		}
	}
	[ProxyBaseClass(typeof( NSImageCell ))]
	public struct ABImageCell : IEquatable<ABImageCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABImageCell;
		public static implicit operator IntPtr( ABImageCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABImageCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABImageCell ) ) return false; 
			return Handle == ( ( ABImageCell )value ).Handle;
		}
		public bool Equals( ABImageCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABImageCell value1, ABImageCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABImageCell value1, ABImageCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABImageCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABImageCell alloc() {
			return new ABImageCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABImportCommand : IEquatable<ABImportCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABImportCommand;
		public static implicit operator IntPtr( ABImportCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABImportCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABImportCommand ) ) return false; 
			return Handle == ( ( ABImportCommand )value ).Handle;
		}
		public bool Equals( ABImportCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABImportCommand value1, ABImportCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABImportCommand value1, ABImportCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABImportCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABImportCommand alloc() {
			return new ABImportCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithSelectedGroup_addedToGroup_deletedPeople_updatedPeople_updatedPeopleProperties_addedPeople_mergedIntoGroups_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject addedToGroup, NObjective.RuntimeObject deletedPeople, NObjective.RuntimeObject updatedPeople, NObjective.RuntimeObject updatedPeopleProperties, NObjective.RuntimeObject addedPeople, NObjective.RuntimeObject mergedIntoGroups, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSelectedGroup_addedToGroup_deletedPeople_updatedPeople_updatedPeopleProperties_addedPeople_mergedIntoGroups_addressBook_( Handle, CachedSelectors.initWithSelectedGroup_addedToGroup_deletedPeople_updatedPeople_updatedPeopleProperties_addedPeople_mergedIntoGroups_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, addedToGroup, deletedPeople, updatedPeople, updatedPeopleProperties, addedPeople, 
			mergedIntoGroups, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithSelectedGroup_addedToGroup_updatedPeople_updatedPeopleProperties_addedPeople_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject addedToGroup, NObjective.RuntimeObject updatedPeople, NObjective.RuntimeObject updatedPeopleProperties, NObjective.RuntimeObject addedPeople, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSelectedGroup_addedToGroup_updatedPeople_updatedPeopleProperties_addedPeople_addressBook_( Handle, CachedSelectors.initWithSelectedGroup_addedToGroup_updatedPeople_updatedPeopleProperties_addedPeople_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, addedToGroup, updatedPeople, updatedPeopleProperties, addedPeople, addressBook
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selection( Handle, CachedSelectors.selection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithSelectedGroup_addedToGroup_deletedPeople_updatedPeople_updatedPeopleProperties_addedPeople_mergedIntoGroups_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject addedToGroup, NObjective.RuntimeObject deletedPeople, NObjective.RuntimeObject updatedPeople, NObjective.RuntimeObject updatedPeopleProperties, NObjective.RuntimeObject addedPeople, 
			NObjective.RuntimeObject mergedIntoGroups, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithSelectedGroup_addedToGroup_updatedPeople_updatedPeopleProperties_addedPeople_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject addedToGroup, NObjective.RuntimeObject updatedPeople, NObjective.RuntimeObject updatedPeopleProperties, NObjective.RuntimeObject addedPeople, NObjective.RuntimeObject addressBook
			 );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithSelectedGroup_addedToGroup_deletedPeople_updatedPeople_updatedPeopleProperties_addedPeople_mergedIntoGroups_addressBook_ = "initWithSelectedGroup:addedToGroup:deletedPeople:updatedPeople:updatedPeopleProperties:addedPeople:mergedIntoGroups:addressBook:";
			public static readonly Selector initWithSelectedGroup_addedToGroup_updatedPeople_updatedPeopleProperties_addedPeople_addressBook_ = "initWithSelectedGroup:addedToGroup:updatedPeople:updatedPeopleProperties:addedPeople:addressBook:";
			public static readonly Selector selection = "selection";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABImportPanelController : IEquatable<ABImportPanelController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABImportPanelController;
		public static implicit operator IntPtr( ABImportPanelController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABImportPanelController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABImportPanelController ) ) return false; 
			return Handle == ( ( ABImportPanelController )value ).Handle;
		}
		public bool Equals( ABImportPanelController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABImportPanelController value1, ABImportPanelController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABImportPanelController value1, ABImportPanelController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABImportPanelController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABImportPanelController alloc() {
			return new ABImportPanelController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void cancelImport_( NObjective.RuntimeObject import ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelImport_( Handle, CachedSelectors.cancelImport_, out ___occuredException, sizeof( NObjective.RuntimeObject ), import );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelImporting_( NObjective.RuntimeObject importing ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelImporting_( Handle, CachedSelectors.cancelImporting_, out ___occuredException, sizeof( NObjective.RuntimeObject ), importing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject cardSourceDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardSourceDelegate( Handle, CachedSelectors.cardSourceDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void cleanUp() {
			RuntimeObject ___occuredException;
			NativeMethods.cleanUp( Handle, CachedSelectors.cleanUp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject duplicates() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.duplicates( Handle, CachedSelectors.duplicates, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void help_( NObjective.RuntimeObject help ) {
			RuntimeObject ___occuredException;
			NativeMethods.help_( Handle, CachedSelectors.help_, out ___occuredException, sizeof( NObjective.RuntimeObject ), help );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importBegan_( int began ) {
			RuntimeObject ___occuredException;
			NativeMethods.importBegan_( Handle, CachedSelectors.importBegan_, out ___occuredException, sizeof( int ), began );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importContinued_( int continued ) {
			RuntimeObject ___occuredException;
			NativeMethods.importContinued_( Handle, CachedSelectors.importContinued_, out ___occuredException, sizeof( int ), continued );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject importedCards() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importedCards( Handle, CachedSelectors.importedCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void importFinished() {
			RuntimeObject ___occuredException;
			NativeMethods.importFinished( Handle, CachedSelectors.importFinished, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUIController_( Handle, CachedSelectors.initWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char localDrag() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localDrag( Handle, CachedSelectors.localDrag, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void noImportableItemsSheetEnded() {
			RuntimeObject ___occuredException;
			NativeMethods.noImportableItemsSheetEnded( Handle, CachedSelectors.noImportableItemsSheetEnded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void proceedWithImport_( NObjective.RuntimeObject import ) {
			RuntimeObject ___occuredException;
			NativeMethods.proceedWithImport_( Handle, CachedSelectors.proceedWithImport_, out ___occuredException, sizeof( NObjective.RuntimeObject ), import );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reviewCards_( NObjective.RuntimeObject cards ) {
			RuntimeObject ___occuredException;
			NativeMethods.reviewCards_( Handle, CachedSelectors.reviewCards_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cards );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCardSourceDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCardSourceDelegate_( Handle, CachedSelectors.setCardSourceDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDoSelectGroup_( char @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDoSelectGroup_( Handle, CachedSelectors.setDoSelectGroup_, out ___occuredException, sizeof( char ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDuplicates_( NObjective.RuntimeObject duplicates ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDuplicates_( Handle, CachedSelectors.setDuplicates_, out ___occuredException, sizeof( NObjective.RuntimeObject ), duplicates );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroup_( Handle, CachedSelectors.setGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setImportedCards_( NObjective.RuntimeObject cards ) {
			RuntimeObject ___occuredException;
			NativeMethods.setImportedCards_( Handle, CachedSelectors.setImportedCards_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cards );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLocalDrag_( char drag ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLocalDrag_( Handle, CachedSelectors.setLocalDrag_, out ___occuredException, sizeof( char ), drag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setupImportPanelWithTitle_selector_target_object_( NObjective.RuntimeObject title, NObjective.Selector selector, NObjective.RuntimeObject target, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setupImportPanelWithTitle_selector_target_object_( Handle, CachedSelectors.setupImportPanelWithTitle_selector_target_object_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, selector, target, @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showImportDecisionPanelForDelegate_count_duplicatesCount_hasErrors_( NObjective.RuntimeObject @delegate, int count, int duplicatesCount, char hasErrors ) {
			RuntimeObject ___occuredException;
			NativeMethods.showImportDecisionPanelForDelegate_count_duplicatesCount_hasErrors_( Handle, CachedSelectors.showImportDecisionPanelForDelegate_count_duplicatesCount_hasErrors_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( char ), @delegate, count, duplicatesCount, hasErrors );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject verbForImportPanel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.verbForImportPanel( Handle, CachedSelectors.verbForImportPanel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelImport_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject import );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelImporting_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject importing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cardSourceDelegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cleanUp( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr duplicates( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void help_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject help );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importBegan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int began );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importContinued_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int continued );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr importedCards( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importFinished( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char localDrag( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void noImportableItemsSheetEnded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void proceedWithImport_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject import );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reviewCards_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cards );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCardSourceDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDoSelectGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDuplicates_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject duplicates );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setImportedCards_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cards );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setLocalDrag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char drag );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setupImportPanelWithTitle_selector_target_object_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.Selector selector, NObjective.RuntimeObject target, NObjective.RuntimeObject @object );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showImportDecisionPanelForDelegate_count_duplicatesCount_hasErrors_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate, int count, int duplicatesCount, char hasErrors );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr verbForImportPanel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancelImport_ = "cancelImport:";
			public static readonly Selector cancelImporting_ = "cancelImporting:";
			public static readonly Selector cardSourceDelegate = "cardSourceDelegate";
			public static readonly Selector cleanUp = "cleanUp";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector duplicates = "duplicates";
			public static readonly Selector help_ = "help:";
			public static readonly Selector importBegan_ = "importBegan:";
			public static readonly Selector importContinued_ = "importContinued:";
			public static readonly Selector importedCards = "importedCards";
			public static readonly Selector importFinished = "importFinished";
			public static readonly Selector initWithUIController_ = "initWithUIController:";
			public static readonly Selector localDrag = "localDrag";
			public static readonly Selector noImportableItemsSheetEnded = "noImportableItemsSheetEnded";
			public static readonly Selector proceedWithImport_ = "proceedWithImport:";
			public static readonly Selector reviewCards_ = "reviewCards:";
			public static readonly Selector setCardSourceDelegate_ = "setCardSourceDelegate:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setDoSelectGroup_ = "setDoSelectGroup:";
			public static readonly Selector setDuplicates_ = "setDuplicates:";
			public static readonly Selector setGroup_ = "setGroup:";
			public static readonly Selector setImportedCards_ = "setImportedCards:";
			public static readonly Selector setLocalDrag_ = "setLocalDrag:";
			public static readonly Selector setupImportPanelWithTitle_selector_target_object_ = "setupImportPanelWithTitle:selector:target:object:";
			public static readonly Selector showImportDecisionPanelForDelegate_count_duplicatesCount_hasErrors_ = "showImportDecisionPanelForDelegate:count:duplicatesCount:hasErrors:";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector verbForImportPanel = "verbForImportPanel";
		}
	}
	[ProxyBaseClass(typeof( ABRecord ))]
	public struct ABInfo : IEquatable<ABInfo> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABInfo;
		public static implicit operator IntPtr( ABInfo value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABInfo value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABInfo ) ) return false; 
			return Handle == ( ( ABInfo )value ).Handle;
		}
		public bool Equals( ABInfo value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABInfo value1, ABInfo value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABInfo value1, ABInfo value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABInfo( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABInfo alloc() {
			return new ABInfo( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject info() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.info( ClassHandle, CachedSelectors.info, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject infoWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoWithAddressBook_( ClassHandle, CachedSelectors.infoWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_Info() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Info( ClassHandle, CachedSelectors.nts_Info, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_InfoWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InfoWithAddressBook_( ClassHandle, CachedSelectors.nts_InfoWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr info( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr infoWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_Info( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_InfoWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
		}
		static internal class CachedSelectors {
			public static readonly Selector info = "info";
			public static readonly Selector infoWithAddressBook_ = "infoWithAddressBook:";
			public static readonly Selector nts_Info = "nts_Info";
			public static readonly Selector nts_InfoWithAddressBook_ = "nts_InfoWithAddressBook:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABInputController : IEquatable<ABInputController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABInputController;
		public static implicit operator IntPtr( ABInputController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABInputController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABInputController ) ) return false; 
			return Handle == ( ( ABInputController )value ).Handle;
		}
		public bool Equals( ABInputController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABInputController value1, ABInputController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABInputController value1, ABInputController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABInputController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABInputController alloc() {
			return new ABInputController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void addRollOver_( NObjective.RuntimeObject over ) {
			RuntimeObject ___occuredException;
			NativeMethods.addRollOver_( ClassHandle, CachedSelectors.addRollOver_, out ___occuredException, sizeof( NObjective.RuntimeObject ), over );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void chooseRollOverIdentifier_withSelection_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject withSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.chooseRollOverIdentifier_withSelection_( ClassHandle, CachedSelectors.chooseRollOverIdentifier_withSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), identifier, withSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject foundCardsForName_label_inRecord_( NObjective.RuntimeObject name, NObjective.RuntimeObject label, NObjective.RuntimeObject inRecord ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.foundCardsForName_label_inRecord_( ClassHandle, CachedSelectors.foundCardsForName_label_inRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, label, inRecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char respondsToProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.respondsToProperty_( ClassHandle, CachedSelectors.respondsToProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject rolloverMenuForCardProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rolloverMenuForCardProxy( ClassHandle, CachedSelectors.rolloverMenuForCardProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject rolloverMenuForSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rolloverMenuForSelection_( ClassHandle, CachedSelectors.rolloverMenuForSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addAdditionalField_( NObjective.RuntimeObject field ) {
			RuntimeObject ___occuredException;
			NativeMethods.addAdditionalField_( Handle, CachedSelectors.addAdditionalField_, out ___occuredException, sizeof( NObjective.RuntimeObject ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addFieldWithNoPopup_( int popup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addFieldWithNoPopup_( Handle, CachedSelectors.addFieldWithNoPopup_, out ___occuredException, sizeof( int ), popup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void adjustRulersForMaxSize() {
			RuntimeObject ___occuredException;
			NativeMethods.adjustRulersForMaxSize( Handle, CachedSelectors.adjustRulersForMaxSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char allowEditing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowEditing( Handle, CachedSelectors.allowEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowPictureEditing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowPictureEditing( Handle, CachedSelectors.allowPictureEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void associatePopup_withProperty_( NObjective.RuntimeObject popup, NObjective.RuntimeObject withProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.associatePopup_withProperty_( Handle, CachedSelectors.associatePopup_withProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), popup, withProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void beginCertLookupForEmail_cell_( NObjective.RuntimeObject email, NObjective.RuntimeObject cell ) {
			RuntimeObject ___occuredException;
			NativeMethods.beginCertLookupForEmail_cell_( Handle, CachedSelectors.beginCertLookupForEmail_cell_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), email, cell );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char birthdayFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.birthdayFieldPresent( Handle, CachedSelectors.birthdayFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char canAddField_( int field ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canAddField_( Handle, CachedSelectors.canAddField_, out ___occuredException, sizeof( int ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelPendingCertLookups() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelPendingCertLookups( Handle, CachedSelectors.cancelPendingCertLookups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject cardPane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardPane( Handle, CachedSelectors.cardPane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cardScrollView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardScrollView( Handle, CachedSelectors.cardScrollView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void cardWillCommitChanges_( NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.cardWillCommitChanges_( Handle, CachedSelectors.cardWillCommitChanges_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void certificateSheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.certificateSheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.certificateSheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeAddressFormat_( NObjective.RuntimeObject format ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeAddressFormat_( Handle, CachedSelectors.changeAddressFormat_, out ___occuredException, sizeof( NObjective.RuntimeObject ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeCompanyStatus_( NObjective.RuntimeObject status ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeCompanyStatus_( Handle, CachedSelectors.changeCompanyStatus_, out ___occuredException, sizeof( NObjective.RuntimeObject ), status );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject changedValues() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.changedValues( Handle, CachedSelectors.changedValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void changeFieldLabel_( NObjective.RuntimeObject label ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeFieldLabel_( Handle, CachedSelectors.changeFieldLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), label );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeInstantField_( NObjective.RuntimeObject field ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeInstantField_( Handle, CachedSelectors.changeInstantField_, out ___occuredException, sizeof( NObjective.RuntimeObject ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeValue_forKey_( NObjective.RuntimeObject value, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeValue_forKey_( Handle, CachedSelectors.changeValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void chatWithPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.chatWithPerson_( Handle, CachedSelectors.chatWithPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearAllFieldVisiblity() {
			RuntimeObject ___occuredException;
			NativeMethods.clearAllFieldVisiblity( Handle, CachedSelectors.clearAllFieldVisiblity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearField_( NObjective.RuntimeObject field ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearField_( Handle, CachedSelectors.clearField_, out ___occuredException, sizeof( NObjective.RuntimeObject ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clickedCert_( NObjective.RuntimeObject cert ) {
			RuntimeObject ___occuredException;
			NativeMethods.clickedCert_( Handle, CachedSelectors.clickedCert_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cert );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject colorForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.colorForProperty_( Handle, CachedSelectors.colorForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char commitPendingChangesAndSave_( char save ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.commitPendingChangesAndSave_( Handle, CachedSelectors.commitPendingChangesAndSave_, out ___occuredException, sizeof( char ), save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void consumeImageData_forTag_( NObjective.RuntimeObject data, int forTag ) {
			RuntimeObject ___occuredException;
			NativeMethods.consumeImageData_forTag_( Handle, CachedSelectors.consumeImageData_forTag_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), data, forTag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void controlDidResignFirstResponder_( NObjective.RuntimeObject responder ) {
			RuntimeObject ___occuredException;
			NativeMethods.controlDidResignFirstResponder_( Handle, CachedSelectors.controlDidResignFirstResponder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), responder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject dateFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFormat( Handle, CachedSelectors.dateFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char departmentFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.departmentFieldPresent( Handle, CachedSelectors.departmentFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void disableSelectionChanging() {
			RuntimeObject ___occuredException;
			NativeMethods.disableSelectionChanging( Handle, CachedSelectors.disableSelectionChanging, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject displayedCard() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedCard( Handle, CachedSelectors.displayedCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void edit_( NObjective.RuntimeObject edit ) {
			RuntimeObject ___occuredException;
			NativeMethods.edit_( Handle, CachedSelectors.edit_, out ___occuredException, sizeof( NObjective.RuntimeObject ), edit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject editButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editButton( Handle, CachedSelectors.editButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void editDisplayedCard_( char card ) {
			RuntimeObject ___occuredException;
			NativeMethods.editDisplayedCard_( Handle, CachedSelectors.editDisplayedCard_, out ___occuredException, sizeof( char ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char editMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editMode( Handle, CachedSelectors.editMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void editPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.editPerson_( Handle, CachedSelectors.editPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void email_forToken_hasCert_( NObjective.RuntimeObject email, int forToken, char hasCert ) {
			RuntimeObject ___occuredException;
			NativeMethods.email_forToken_hasCert_( Handle, CachedSelectors.email_forToken_hasCert_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( char ), email, forToken, hasCert );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void enabledSelectionChanging() {
			RuntimeObject ___occuredException;
			NativeMethods.enabledSelectionChanging( Handle, CachedSelectors.enabledSelectionChanging, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exportVCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportVCard_( Handle, CachedSelectors.exportVCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void fetchNoteOutOfRecordWithEmptyTemplate_( char template ) {
			RuntimeObject ___occuredException;
			NativeMethods.fetchNoteOutOfRecordWithEmptyTemplate_( Handle, CachedSelectors.fetchNoteOutOfRecordWithEmptyTemplate_, out ___occuredException, sizeof( char ), template );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject fieldContentsForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fieldContentsForProperty_( Handle, CachedSelectors.fieldContentsForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasChangesPending() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasChangesPending( Handle, CachedSelectors.hasChangesPending, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char homePageFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.homePageFieldPresent( Handle, CachedSelectors.homePageFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void insertRulers() {
			RuntimeObject ___occuredException;
			NativeMethods.insertRulers( Handle, CachedSelectors.insertRulers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isFieldVisible_( NObjective.RuntimeObject visible ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFieldVisible_( Handle, CachedSelectors.isFieldVisible_, out ___occuredException, sizeof( NObjective.RuntimeObject ), visible );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isMainInputController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMainInputController( Handle, CachedSelectors.isMainInputController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void issueChangePropertiesCommand() {
			RuntimeObject ___occuredException;
			NativeMethods.issueChangePropertiesCommand( Handle, CachedSelectors.issueChangePropertiesCommand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char jobTitleFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.jobTitleFieldPresent( Handle, CachedSelectors.jobTitleFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject keyNavigationView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyNavigationView( Handle, CachedSelectors.keyNavigationView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void layoutChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.layoutChanged_( Handle, CachedSelectors.layoutChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char maidenNameFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maidenNameFieldPresent( Handle, CachedSelectors.maidenNameFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void makeSelectedPrimary_( NObjective.RuntimeObject primary ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeSelectedPrimary_( Handle, CachedSelectors.makeSelectedPrimary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), primary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void markAsViewed_( NObjective.RuntimeObject viewed ) {
			RuntimeObject ___occuredException;
			NativeMethods.markAsViewed_( Handle, CachedSelectors.markAsViewed_, out ___occuredException, sizeof( NObjective.RuntimeObject ), viewed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void masterTemplateHasChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.masterTemplateHasChanged_( Handle, CachedSelectors.masterTemplateHasChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject matchableResultsForString_inSingleProperty_( NObjective.RuntimeObject @string, NObjective.RuntimeObject inSingleProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchableResultsForString_inSingleProperty_( Handle, CachedSelectors.matchableResultsForString_inSingleProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, inSingleProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void membersChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersChanged_( Handle, CachedSelectors.membersChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void membersSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersSelectionChanged_( Handle, CachedSelectors.membersSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char middleNameFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.middleNameFieldPresent( Handle, CachedSelectors.middleNameFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject model() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.model( Handle, CachedSelectors.model, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject multiValueForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.multiValueForProperty_( Handle, CachedSelectors.multiValueForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nickNameFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nickNameFieldPresent( Handle, CachedSelectors.nickNameFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char phoneticFieldsPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.phoneticFieldsPresent( Handle, CachedSelectors.phoneticFieldsPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject popupForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.popupForProperty_( Handle, CachedSelectors.popupForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reformatValueAtLocation_( uint location ) {
			RuntimeObject ___occuredException;
			NativeMethods.reformatValueAtLocation_( Handle, CachedSelectors.reformatValueAtLocation_, out ___occuredException, sizeof( uint ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reformatValueAtLocationInNumber_( NObjective.RuntimeObject number ) {
			RuntimeObject ___occuredException;
			NativeMethods.reformatValueAtLocationInNumber_( Handle, CachedSelectors.reformatValueAtLocationInNumber_, out ___occuredException, sizeof( NObjective.RuntimeObject ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void refreshAfterUndo_( NObjective.RuntimeObject undo ) {
			RuntimeObject ___occuredException;
			NativeMethods.refreshAfterUndo_( Handle, CachedSelectors.refreshAfterUndo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), undo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void refreshDisplayedCard() {
			RuntimeObject ___occuredException;
			NativeMethods.refreshDisplayedCard( Handle, CachedSelectors.refreshDisplayedCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void refreshDisplayedCardAndReloadImage_( char image ) {
			RuntimeObject ___occuredException;
			NativeMethods.refreshDisplayedCardAndReloadImage_( Handle, CachedSelectors.refreshDisplayedCardAndReloadImage_, out ___occuredException, sizeof( char ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reload() {
			RuntimeObject ___occuredException;
			NativeMethods.reload( Handle, CachedSelectors.reload, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void saveValueInUndo_forProperty_( NObjective.RuntimeObject undo, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.saveValueInUndo_forProperty_( Handle, CachedSelectors.saveValueInUndo_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), undo, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowEditing_( char editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowEditing_( Handle, CachedSelectors.setAllowEditing_, out ___occuredException, sizeof( char ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowPictureEditing_( char editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowPictureEditing_( Handle, CachedSelectors.setAllowPictureEditing_, out ___occuredException, sizeof( char ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChanged_( char changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChanged_( Handle, CachedSelectors.setChanged_, out ___occuredException, sizeof( char ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChangedValues_( NObjective.RuntimeObject values ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChangedValues_( Handle, CachedSelectors.setChangedValues_, out ___occuredException, sizeof( NObjective.RuntimeObject ), values );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisplayedCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisplayedCard_( Handle, CachedSelectors.setDisplayedCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisplayedCard_withHistory_( NObjective.RuntimeObject card, char withHistory ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisplayedCard_withHistory_( Handle, CachedSelectors.setDisplayedCard_withHistory_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), card, withHistory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEditButton_( NObjective.RuntimeObject button ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEditButton_( Handle, CachedSelectors.setEditButton_, out ___occuredException, sizeof( NObjective.RuntimeObject ), button );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEditMode_( char mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEditMode_( Handle, CachedSelectors.setEditMode_, out ___occuredException, sizeof( char ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFieldVisible_withBool_( NObjective.RuntimeObject visible, char withBool ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFieldVisible_withBool_( Handle, CachedSelectors.setFieldVisible_withBool_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), visible, withBool );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setModel_( NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			NativeMethods.setModel_( Handle, CachedSelectors.setModel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMultiValue_forProperty_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMultiValue_forProperty_( Handle, CachedSelectors.setMultiValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTemplateChangedObserver_withSelector_( NObjective.RuntimeObject observer, NObjective.Selector withSelector ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTemplateChangedObserver_withSelector_( Handle, CachedSelectors.setTemplateChangedObserver_withSelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), observer, withSelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUIController_( Handle, CachedSelectors.setUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUserImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUserImage_( Handle, CachedSelectors.setUserImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char suffixFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suffixFieldPresent( Handle, CachedSelectors.suffixFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void templateChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.templateChanged( Handle, CachedSelectors.templateChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void textDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.textDidChange_( Handle, CachedSelectors.textDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject textView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textView( Handle, CachedSelectors.textView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char textView_clickedOnLink_( NObjective.RuntimeObject view, NObjective.RuntimeObject clickedOnLink ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textView_clickedOnLink_( Handle, CachedSelectors.textView_clickedOnLink_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, clickedOnLink );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char titleFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.titleFieldPresent( Handle, CachedSelectors.titleFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void unassociatePopup_( NObjective.RuntimeObject popup ) {
			RuntimeObject ___occuredException;
			NativeMethods.unassociatePopup_( Handle, CachedSelectors.unassociatePopup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), popup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateOnlineStatus() {
			RuntimeObject ___occuredException;
			NativeMethods.updateOnlineStatus( Handle, CachedSelectors.updateOnlineStatus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updatePersonPicture() {
			RuntimeObject ___occuredException;
			NativeMethods.updatePersonPicture( Handle, CachedSelectors.updatePersonPicture, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateSearchHilight() {
			RuntimeObject ___occuredException;
			NativeMethods.updateSearchHilight( Handle, CachedSelectors.updateSearchHilight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateSearchHilightWithSearchString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateSearchHilightWithSearchString_( Handle, CachedSelectors.updateSearchHilightWithSearchString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateWidth_( float width ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateWidth_( Handle, CachedSelectors.updateWidth_, out ___occuredException, sizeof( float ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject valueForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForProperty_( Handle, CachedSelectors.valueForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForProperty_shouldTranslateToStrings_( NObjective.RuntimeObject property, char shouldTranslateToStrings ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForProperty_shouldTranslateToStrings_( Handle, CachedSelectors.valueForProperty_shouldTranslateToStrings_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), property, shouldTranslateToStrings );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void writePaneGeometryToDefaults() {
			RuntimeObject ___occuredException;
			NativeMethods.writePaneGeometryToDefaults( Handle, CachedSelectors.writePaneGeometryToDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addAdditionalField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addFieldWithNoPopup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int popup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addRollOver_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject over );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void adjustRulersForMaxSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowPictureEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void associatePopup_withProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject popup, NObjective.RuntimeObject withProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void beginCertLookupForEmail_cell_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email, NObjective.RuntimeObject cell );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char birthdayFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char canAddField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int field );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelPendingCertLookups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cardPane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cardScrollView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cardWillCommitChanges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void certificateSheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changeAddressFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changeCompanyStatus_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject status );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr changedValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changeFieldLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changeInstantField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changeValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void chatWithPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void chooseRollOverIdentifier_withSelection_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject withSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearAllFieldVisiblity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clickedCert_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cert );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr colorForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char commitPendingChangesAndSave_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char save );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void consumeImageData_forTag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, int forTag );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void controlDidResignFirstResponder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject responder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dateFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char departmentFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void disableSelectionChanging( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayedCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void edit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject edit );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr editButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editDisplayedCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char editMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void email_forToken_hasCert_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email, int forToken, char hasCert );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void enabledSelectionChanging( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void exportVCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void fetchNoteOutOfRecordWithEmptyTemplate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char template );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fieldContentsForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr foundCardsForName_label_inRecord_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject label, NObjective.RuntimeObject inRecord );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasChangesPending( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char homePageFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void insertRulers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isFieldVisible_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visible );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isMainInputController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void issueChangePropertiesCommand( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char jobTitleFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr keyNavigationView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void layoutChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char maidenNameFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void makeSelectedPrimary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject primary );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markAsViewed_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject viewed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void masterTemplateHasChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr matchableResultsForString_inSingleProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject inSingleProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void membersChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void membersSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char middleNameFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr model( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr multiValueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nickNameFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char phoneticFieldsPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr popupForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reformatValueAtLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint location );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reformatValueAtLocationInNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject number );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void refreshAfterUndo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject undo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void refreshDisplayedCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void refreshDisplayedCardAndReloadImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char image );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reload( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char respondsToProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr rolloverMenuForCardProxy( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr rolloverMenuForSelection_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void saveValueInUndo_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject undo, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char editing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowPictureEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char editing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setChangedValues_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject values );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDisplayedCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDisplayedCard_withHistory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card, char withHistory );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEditButton_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject button );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEditMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char mode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setFieldVisible_withBool_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visible, char withBool );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setModel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMultiValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setTemplateChangedObserver_withSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject observer, NObjective.Selector withSelector );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUserImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char suffixFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void templateChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void textDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr textView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char textView_clickedOnLink_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject clickedOnLink );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char titleFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void unassociatePopup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject popup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateOnlineStatus( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updatePersonPicture( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateSearchHilight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateSearchHilightWithSearchString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float width );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueForProperty_shouldTranslateToStrings_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, char shouldTranslateToStrings );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void writePaneGeometryToDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addAdditionalField_ = "addAdditionalField:";
			public static readonly Selector addFieldWithNoPopup_ = "addFieldWithNoPopup:";
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector addRollOver_ = "addRollOver:";
			public static readonly Selector adjustRulersForMaxSize = "adjustRulersForMaxSize";
			public static readonly Selector allowEditing = "allowEditing";
			public static readonly Selector allowPictureEditing = "allowPictureEditing";
			public static readonly Selector associatePopup_withProperty_ = "associatePopup:withProperty:";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector beginCertLookupForEmail_cell_ = "beginCertLookupForEmail:cell:";
			public static readonly Selector birthdayFieldPresent = "birthdayFieldPresent";
			public static readonly Selector canAddField_ = "canAddField:";
			public static readonly Selector cancelPendingCertLookups = "cancelPendingCertLookups";
			public static readonly Selector cardPane = "cardPane";
			public static readonly Selector cardScrollView = "cardScrollView";
			public static readonly Selector cardWillCommitChanges_ = "cardWillCommitChanges:";
			public static readonly Selector certificateSheetDidEnd_returnCode_contextInfo_ = "certificateSheetDidEnd:returnCode:contextInfo:";
			public static readonly Selector changeAddressFormat_ = "changeAddressFormat:";
			public static readonly Selector changeCompanyStatus_ = "changeCompanyStatus:";
			public static readonly Selector changedValues = "changedValues";
			public static readonly Selector changeFieldLabel_ = "changeFieldLabel:";
			public static readonly Selector changeInstantField_ = "changeInstantField:";
			public static readonly Selector changeValue_forKey_ = "changeValue:forKey:";
			public static readonly Selector chatWithPerson_ = "chatWithPerson:";
			public static readonly Selector chooseRollOverIdentifier_withSelection_ = "chooseRollOverIdentifier:withSelection:";
			public static readonly Selector clearAllFieldVisiblity = "clearAllFieldVisiblity";
			public static readonly Selector clearField_ = "clearField:";
			public static readonly Selector clickedCert_ = "clickedCert:";
			public static readonly Selector colorForProperty_ = "colorForProperty:";
			public static readonly Selector commitPendingChangesAndSave_ = "commitPendingChangesAndSave:";
			public static readonly Selector consumeImageData_forTag_ = "consumeImageData:forTag:";
			public static readonly Selector controlDidResignFirstResponder_ = "controlDidResignFirstResponder:";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector dateFormat = "dateFormat";
			public static readonly Selector departmentFieldPresent = "departmentFieldPresent";
			public static readonly Selector disableSelectionChanging = "disableSelectionChanging";
			public static readonly Selector displayedCard = "displayedCard";
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector edit_ = "edit:";
			public static readonly Selector editButton = "editButton";
			public static readonly Selector editDisplayedCard_ = "editDisplayedCard:";
			public static readonly Selector editMode = "editMode";
			public static readonly Selector editPerson_ = "editPerson:";
			public static readonly Selector email_forToken_hasCert_ = "email:forToken:hasCert:";
			public static readonly Selector enabledSelectionChanging = "enabledSelectionChanging";
			public static readonly Selector exportVCard_ = "exportVCard:";
			public static readonly Selector fetchNoteOutOfRecordWithEmptyTemplate_ = "fetchNoteOutOfRecordWithEmptyTemplate:";
			public static readonly Selector fieldContentsForProperty_ = "fieldContentsForProperty:";
			public static readonly Selector foundCardsForName_label_inRecord_ = "foundCardsForName:label:inRecord:";
			public static readonly Selector hasChangesPending = "hasChangesPending";
			public static readonly Selector homePageFieldPresent = "homePageFieldPresent";
			public static readonly Selector insertRulers = "insertRulers";
			public static readonly Selector isFieldVisible_ = "isFieldVisible:";
			public static readonly Selector isMainInputController = "isMainInputController";
			public static readonly Selector issueChangePropertiesCommand = "issueChangePropertiesCommand";
			public static readonly Selector jobTitleFieldPresent = "jobTitleFieldPresent";
			public static readonly Selector keyNavigationView = "keyNavigationView";
			public static readonly Selector layoutChanged_ = "layoutChanged:";
			public static readonly Selector maidenNameFieldPresent = "maidenNameFieldPresent";
			public static readonly Selector makeSelectedPrimary_ = "makeSelectedPrimary:";
			public static readonly Selector markAsViewed_ = "markAsViewed:";
			public static readonly Selector masterTemplateHasChanged_ = "masterTemplateHasChanged:";
			public static readonly Selector matchableResultsForString_inSingleProperty_ = "matchableResultsForString:inSingleProperty:";
			public static readonly Selector membersChanged_ = "membersChanged:";
			public static readonly Selector membersSelectionChanged_ = "membersSelectionChanged:";
			public static readonly Selector middleNameFieldPresent = "middleNameFieldPresent";
			public static readonly Selector model = "model";
			public static readonly Selector multiValueForProperty_ = "multiValueForProperty:";
			public static readonly Selector nickNameFieldPresent = "nickNameFieldPresent";
			public static readonly Selector phoneticFieldsPresent = "phoneticFieldsPresent";
			public static readonly Selector popupForProperty_ = "popupForProperty:";
			public static readonly Selector reformatValueAtLocation_ = "reformatValueAtLocation:";
			public static readonly Selector reformatValueAtLocationInNumber_ = "reformatValueAtLocationInNumber:";
			public static readonly Selector refreshAfterUndo_ = "refreshAfterUndo:";
			public static readonly Selector refreshDisplayedCard = "refreshDisplayedCard";
			public static readonly Selector refreshDisplayedCardAndReloadImage_ = "refreshDisplayedCardAndReloadImage:";
			public static readonly Selector reload = "reload";
			public static readonly Selector respondsToProperty_ = "respondsToProperty:";
			public static readonly Selector rolloverMenuForCardProxy = "rolloverMenuForCardProxy";
			public static readonly Selector rolloverMenuForSelection_ = "rolloverMenuForSelection:";
			public static readonly Selector saveValueInUndo_forProperty_ = "saveValueInUndo:forProperty:";
			public static readonly Selector setAllowEditing_ = "setAllowEditing:";
			public static readonly Selector setAllowPictureEditing_ = "setAllowPictureEditing:";
			public static readonly Selector setChanged_ = "setChanged:";
			public static readonly Selector setChangedValues_ = "setChangedValues:";
			public static readonly Selector setDisplayedCard_ = "setDisplayedCard:";
			public static readonly Selector setDisplayedCard_withHistory_ = "setDisplayedCard:withHistory:";
			public static readonly Selector setEditButton_ = "setEditButton:";
			public static readonly Selector setEditMode_ = "setEditMode:";
			public static readonly Selector setFieldVisible_withBool_ = "setFieldVisible:withBool:";
			public static readonly Selector setModel_ = "setModel:";
			public static readonly Selector setMultiValue_forProperty_ = "setMultiValue:forProperty:";
			public static readonly Selector setTemplateChangedObserver_withSelector_ = "setTemplateChangedObserver:withSelector:";
			public static readonly Selector setUIController_ = "setUIController:";
			public static readonly Selector setUserImage_ = "setUserImage:";
			public static readonly Selector suffixFieldPresent = "suffixFieldPresent";
			public static readonly Selector templateChanged = "templateChanged";
			public static readonly Selector textDidChange_ = "textDidChange:";
			public static readonly Selector textView = "textView";
			public static readonly Selector textView_clickedOnLink_ = "textView:clickedOnLink:";
			public static readonly Selector titleFieldPresent = "titleFieldPresent";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector unassociatePopup_ = "unassociatePopup:";
			public static readonly Selector updateOnlineStatus = "updateOnlineStatus";
			public static readonly Selector updatePersonPicture = "updatePersonPicture";
			public static readonly Selector updateSearchHilight = "updateSearchHilight";
			public static readonly Selector updateSearchHilightWithSearchString_ = "updateSearchHilightWithSearchString:";
			public static readonly Selector updateWidth_ = "updateWidth:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
			public static readonly Selector valueForProperty_ = "valueForProperty:";
			public static readonly Selector valueForProperty_shouldTranslateToStrings_ = "valueForProperty:shouldTranslateToStrings:";
			public static readonly Selector writePaneGeometryToDefaults = "writePaneGeometryToDefaults";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABInputModel : IEquatable<ABInputModel> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABInputModel;
		public static implicit operator IntPtr( ABInputModel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABInputModel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABInputModel ) ) return false; 
			return Handle == ( ( ABInputModel )value ).Handle;
		}
		public bool Equals( ABInputModel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABInputModel value1, ABInputModel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABInputModel value1, ABInputModel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABInputModel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABInputModel alloc() {
			return new ABInputModel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject allKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allKeys( Handle, CachedSelectors.allKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject objectForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectForKey_( Handle, CachedSelectors.objectForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void pushChangeCommand_( NObjective.RuntimeObject command ) {
			RuntimeObject ___occuredException;
			NativeMethods.pushChangeCommand_( Handle, CachedSelectors.pushChangeCommand_, out ___occuredException, sizeof( NObjective.RuntimeObject ), command );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObject_forKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObject_forKey_( Handle, CachedSelectors.setObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject topChangeCommand() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.topChangeCommand( Handle, CachedSelectors.topChangeCommand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr objectForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void pushChangeCommand_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject command );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setObject_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr topChangeCommand( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allKeys = "allKeys";
			public static readonly Selector clear = "clear";
			public static readonly Selector objectForKey_ = "objectForKey:";
			public static readonly Selector pushChangeCommand_ = "pushChangeCommand:";
			public static readonly Selector setObject_forKey_ = "setObject:forKey:";
			public static readonly Selector topChangeCommand = "topChangeCommand";
		}
	}
	[ProxyBaseClass(typeof( ABPopUpButtonCell ))]
	public struct ABInstantPopUpButtonCell : IEquatable<ABInstantPopUpButtonCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABInstantPopUpButtonCell;
		public static implicit operator IntPtr( ABInstantPopUpButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABInstantPopUpButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABInstantPopUpButtonCell ) ) return false; 
			return Handle == ( ( ABInstantPopUpButtonCell )value ).Handle;
		}
		public bool Equals( ABInstantPopUpButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABInstantPopUpButtonCell value1, ABInstantPopUpButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABInstantPopUpButtonCell value1, ABInstantPopUpButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABInstantPopUpButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABInstantPopUpButtonCell alloc() {
			return new ABInstantPopUpButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithInputController_andField_( NObjective.RuntimeObject controller, NObjective.RuntimeObject andField ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInputController_andField_( Handle, CachedSelectors.initWithInputController_andField_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, andField );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithInputController_andField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject andField );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithInputController_andField_ = "initWithInputController:andField:";
		}
	}
	[ProxyBaseClass(typeof( NSTextFieldCell ))]
	public struct ABKeyValueCell : IEquatable<ABKeyValueCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABKeyValueCell;
		public static implicit operator IntPtr( ABKeyValueCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABKeyValueCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABKeyValueCell ) ) return false; 
			return Handle == ( ( ABKeyValueCell )value ).Handle;
		}
		public bool Equals( ABKeyValueCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABKeyValueCell value1, ABKeyValueCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABKeyValueCell value1, ABKeyValueCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABKeyValueCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABKeyValueCell alloc() {
			return new ABKeyValueCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setSubrowSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSubrowSelection_( Handle, CachedSelectors.setSubrowSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject tooltipText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tooltipText( Handle, CachedSelectors.tooltipText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr tooltipText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setSubrowSelection_ = "setSubrowSelection:";
			public static readonly Selector tooltipText = "tooltipText";
		}
	}
	[ProxyBaseClass(typeof( ABPopUpButtonCell ))]
	public struct ABLabelPopUpButtonCell : IEquatable<ABLabelPopUpButtonCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLabelPopUpButtonCell;
		public static implicit operator IntPtr( ABLabelPopUpButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLabelPopUpButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLabelPopUpButtonCell ) ) return false; 
			return Handle == ( ( ABLabelPopUpButtonCell )value ).Handle;
		}
		public bool Equals( ABLabelPopUpButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLabelPopUpButtonCell value1, ABLabelPopUpButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLabelPopUpButtonCell value1, ABLabelPopUpButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLabelPopUpButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLabelPopUpButtonCell alloc() {
			return new ABLabelPopUpButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibilityProperty() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityProperty( Handle, CachedSelectors.accessibilityProperty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithInputController_andField_( NObjective.RuntimeObject controller, NObjective.RuntimeObject andField ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInputController_andField_( Handle, CachedSelectors.initWithInputController_andField_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, andField );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void insertCustomLabel_( NObjective.RuntimeObject label ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertCustomLabel_( Handle, CachedSelectors.insertCustomLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), label );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject labels() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.labels( Handle, CachedSelectors.labels, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject property() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.property( Handle, CachedSelectors.property, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void replaceCustomLabel_( NObjective.RuntimeObject label ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceCustomLabel_( Handle, CachedSelectors.replaceCustomLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), label );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			NativeMethods.setProperty_( Handle, CachedSelectors.setProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitleWithRepresentedObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitleWithRepresentedObject_( Handle, CachedSelectors.setTitleWithRepresentedObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityProperty( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithInputController_andField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject andField );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void insertCustomLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr labels( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr property( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void replaceCustomLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setTitleWithRepresentedObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityProperty = "accessibilityProperty";
			public static readonly Selector initWithInputController_andField_ = "initWithInputController:andField:";
			public static readonly Selector insertCustomLabel_ = "insertCustomLabel:";
			public static readonly Selector labels = "labels";
			public static readonly Selector property = "property";
			public static readonly Selector replaceCustomLabel_ = "replaceCustomLabel:";
			public static readonly Selector setProperty_ = "setProperty:";
			public static readonly Selector setTitleWithRepresentedObject_ = "setTitleWithRepresentedObject:";
		}
	}
	[ProxyBaseClass(typeof( ABSpecialGroup ))]
	public struct ABLastImportGroup : IEquatable<ABLastImportGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLastImportGroup;
		public static implicit operator IntPtr( ABLastImportGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLastImportGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLastImportGroup ) ) return false; 
			return Handle == ( ( ABLastImportGroup )value ).Handle;
		}
		public bool Equals( ABLastImportGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLastImportGroup value1, ABLastImportGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLastImportGroup value1, ABLastImportGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLastImportGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLastImportGroup alloc() {
			return new ABLastImportGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject lastImportGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastImportGroup( ClassHandle, CachedSelectors.lastImportGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void __saveLastImportContent() {
			RuntimeObject ___occuredException;
			NativeMethods.__saveLastImportContent( ClassHandle, CachedSelectors.__saveLastImportContent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject specialGroupForAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.specialGroupForAddressBook_( ClassHandle, CachedSelectors.specialGroupForAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.addMembers_( Handle, CachedSelectors.addMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dataBaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.dataBaseChanged_( Handle, CachedSelectors.dataBaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char hasChanged() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasChanged( Handle, CachedSelectors.hasChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void loadContent() {
			RuntimeObject ___occuredException;
			NativeMethods.loadContent( Handle, CachedSelectors.loadContent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void saveLastImportContent() {
			RuntimeObject ___occuredException;
			NativeMethods.saveLastImportContent( Handle, CachedSelectors.saveLastImportContent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void __saveLastImportContent( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dataBaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr lastImportGroup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void loadContent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void saveLastImportContent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr specialGroupForAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
		}
		static internal class CachedSelectors {
			public static readonly Selector __saveLastImportContent = "__saveLastImportContent";
			public static readonly Selector addMembers_ = "addMembers:";
			public static readonly Selector clear = "clear";
			public static readonly Selector dataBaseChanged_ = "dataBaseChanged:";
			public static readonly Selector hasChanged = "hasChanged";
			public static readonly Selector lastImportGroup = "lastImportGroup";
			public static readonly Selector loadContent = "loadContent";
			public static readonly Selector saveLastImportContent = "saveLastImportContent";
			public static readonly Selector specialGroupForAddressBook_ = "specialGroupForAddressBook:";
		}
	}
	[ProxyBaseClass(typeof( NSLayoutManager ))]
	public struct ABLayoutManager : IEquatable<ABLayoutManager> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLayoutManager;
		public static implicit operator IntPtr( ABLayoutManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLayoutManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLayoutManager ) ) return false; 
			return Handle == ( ( ABLayoutManager )value ).Handle;
		}
		public bool Equals( ABLayoutManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLayoutManager value1, ABLayoutManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLayoutManager value1, ABLayoutManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLayoutManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLayoutManager alloc() {
			return new ABLayoutManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABLDAP_ConfigController : IEquatable<ABLDAP_ConfigController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_ConfigController;
		public static implicit operator IntPtr( ABLDAP_ConfigController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_ConfigController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLDAP_ConfigController ) ) return false; 
			return Handle == ( ( ABLDAP_ConfigController )value ).Handle;
		}
		public bool Equals( ABLDAP_ConfigController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_ConfigController value1, ABLDAP_ConfigController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_ConfigController value1, ABLDAP_ConfigController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_ConfigController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_ConfigController alloc() {
			return new ABLDAP_ConfigController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void startWatchingLDAPCards() {
			RuntimeObject ___occuredException;
			NativeMethods.startWatchingLDAPCards( ClassHandle, CachedSelectors.startWatchingLDAPCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void acceptChanges_( NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.acceptChanges_( Handle, CachedSelectors.acceptChanges_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.addAction_( Handle, CachedSelectors.addAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelChanges_( NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelChanges_( Handle, CachedSelectors.cancelChanges_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void controlTextDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.controlTextDidChange_( Handle, CachedSelectors.controlTextDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteAction_( Handle, CachedSelectors.deleteAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editorDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.editorDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.editorDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editServerAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.editServerAction_( Handle, CachedSelectors.editServerAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void help_( NObjective.RuntimeObject help ) {
			RuntimeObject ___occuredException;
			NativeMethods.help_( Handle, CachedSelectors.help_, out ___occuredException, sizeof( NObjective.RuntimeObject ), help );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject LDAPConfigView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.LDAPConfigView( Handle, CachedSelectors.LDAPConfigView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int numberOfRowsInTableView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfRowsInTableView_( Handle, CachedSelectors.numberOfRowsInTableView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject serverFieldValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serverFieldValue( Handle, CachedSelectors.serverFieldValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setupAuthType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setupAuthType_( Handle, CachedSelectors.setupAuthType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject tableView_objectValueForTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_objectValueForTableColumn_row_( Handle, CachedSelectors.tableView_objectValueForTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, objectValueForTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void tableView_setObjectValue_forTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject setObjectValue, NObjective.RuntimeObject forTableColumn, int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableView_setObjectValue_forTableColumn_row_( Handle, CachedSelectors.tableView_setObjectValue_forTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, setObjectValue, forTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void tableViewSelectionDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableViewSelectionDidChange_( Handle, CachedSelectors.tableViewSelectionDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void toggleAutoUpdate_( NObjective.RuntimeObject update ) {
			RuntimeObject ___occuredException;
			NativeMethods.toggleAutoUpdate_( Handle, CachedSelectors.toggleAutoUpdate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), update );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void useSSL_( NObjective.RuntimeObject ssl ) {
			RuntimeObject ___occuredException;
			NativeMethods.useSSL_( Handle, CachedSelectors.useSSL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ssl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void acceptChanges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelChanges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void controlTextDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deleteAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editorDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editServerAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void help_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject help );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr LDAPConfigView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int numberOfRowsInTableView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr serverFieldValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setupAuthType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void startWatchingLDAPCards( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr tableView_objectValueForTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void tableView_setObjectValue_forTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject setObjectValue, NObjective.RuntimeObject forTableColumn, int row );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void tableViewSelectionDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void toggleAutoUpdate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject update );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void useSSL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ssl );
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptChanges_ = "acceptChanges:";
			public static readonly Selector addAction_ = "addAction:";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector cancelChanges_ = "cancelChanges:";
			public static readonly Selector controlTextDidChange_ = "controlTextDidChange:";
			public static readonly Selector deleteAction_ = "deleteAction:";
			public static readonly Selector editorDidEnd_returnCode_contextInfo_ = "editorDidEnd:returnCode:contextInfo:";
			public static readonly Selector editServerAction_ = "editServerAction:";
			public static readonly Selector help_ = "help:";
			public static readonly Selector LDAPConfigView = "LDAPConfigView";
			public static readonly Selector numberOfRowsInTableView_ = "numberOfRowsInTableView:";
			public static readonly Selector serverFieldValue = "serverFieldValue";
			public static readonly Selector setupAuthType_ = "setupAuthType:";
			public static readonly Selector startWatchingLDAPCards = "startWatchingLDAPCards";
			public static readonly Selector tableView_objectValueForTableColumn_row_ = "tableView:objectValueForTableColumn:row:";
			public static readonly Selector tableView_setObjectValue_forTableColumn_row_ = "tableView:setObjectValue:forTableColumn:row:";
			public static readonly Selector tableViewSelectionDidChange_ = "tableViewSelectionDidChange:";
			public static readonly Selector toggleAutoUpdate_ = "toggleAutoUpdate:";
			public static readonly Selector useSSL_ = "useSSL:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABLDAP_Manager : IEquatable<ABLDAP_Manager> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_Manager;
		public static implicit operator IntPtr( ABLDAP_Manager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_Manager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLDAP_Manager ) ) return false; 
			return Handle == ( ( ABLDAP_Manager )value ).Handle;
		}
		public bool Equals( ABLDAP_Manager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_Manager value1, ABLDAP_Manager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_Manager value1, ABLDAP_Manager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_Manager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_Manager alloc() {
			return new ABLDAP_Manager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void cancelAllQueries() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelAllQueries( ClassHandle, CachedSelectors.cancelAllQueries, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject sharedLDAPManagerInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedLDAPManagerInstance( ClassHandle, CachedSelectors.sharedLDAPManagerInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addEntries_fromSession_( NObjective.RuntimeObject entries, NObjective.RuntimeObject fromSession ) {
			RuntimeObject ___occuredException;
			NativeMethods.addEntries_fromSession_( Handle, CachedSelectors.addEntries_fromSession_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), entries, fromSession );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.addServer_( Handle, CachedSelectors.addServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allowedFields() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowedFields( Handle, CachedSelectors.allowedFields, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject availableUserServers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.availableUserServers( Handle, CachedSelectors.availableUserServers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char backgrounQueriesRunning() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backgrounQueriesRunning( Handle, CachedSelectors.backgrounQueriesRunning, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject binaryAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.binaryAttributes( Handle, CachedSelectors.binaryAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void cancelQueries_( char queries ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelQueries_( Handle, CachedSelectors.cancelQueries_, out ___occuredException, sizeof( char ), queries );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject capitalizedAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.capitalizedAttributes( Handle, CachedSelectors.capitalizedAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void decrementNumberOfThreadsAlive_withSessionUID_( NObjective.RuntimeObject alive, NObjective.RuntimeObject withSessionUID ) {
			RuntimeObject ___occuredException;
			NativeMethods.decrementNumberOfThreadsAlive_withSessionUID_( Handle, CachedSelectors.decrementNumberOfThreadsAlive_withSessionUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), alive, withSessionUID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject defaultAddressBookPreferencesFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultAddressBookPreferencesFile( Handle, CachedSelectors.defaultAddressBookPreferencesFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deserializeServers_( NObjective.RuntimeObject servers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deserializeServers_( Handle, CachedSelectors.deserializeServers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), servers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryServicesNodes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryServicesNodes( Handle, CachedSelectors.directoryServicesNodes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryServicesServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryServicesServer( Handle, CachedSelectors.directoryServicesServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject DSQueryComponents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.DSQueryComponents( Handle, CachedSelectors.DSQueryComponents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject DSQueryString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.DSQueryString( Handle, CachedSelectors.DSQueryString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void freeAttributes() {
			RuntimeObject ___occuredException;
			NativeMethods.freeAttributes( Handle, CachedSelectors.freeAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject LDAPQueryString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.LDAPQueryString( Handle, CachedSelectors.LDAPQueryString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject loadServersFromDefaultsFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.loadServersFromDefaultsFile( Handle, CachedSelectors.loadServersFromDefaultsFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lowercasedAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lowercasedAttributes( Handle, CachedSelectors.lowercasedAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void makeQueries_( NObjective.RuntimeObject queries ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeQueries_( Handle, CachedSelectors.makeQueries_, out ___occuredException, sizeof( NObjective.RuntimeObject ), queries );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject makeUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.makeUID( Handle, CachedSelectors.makeUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int maxResults() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maxResults( Handle, CachedSelectors.maxResults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void notifyDataIsReady() {
			RuntimeObject ___occuredException;
			NativeMethods.notifyDataIsReady( Handle, CachedSelectors.notifyDataIsReady, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int numberOfThreadsAlive() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfThreadsAlive( Handle, CachedSelectors.numberOfThreadsAlive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void postQueryHasBeenCanceledNotification() {
			RuntimeObject ___occuredException;
			NativeMethods.postQueryHasBeenCanceledNotification( Handle, CachedSelectors.postQueryHasBeenCanceledNotification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void postQueryHasFinishedNotification() {
			RuntimeObject ___occuredException;
			NativeMethods.postQueryHasFinishedNotification( Handle, CachedSelectors.postQueryHasFinishedNotification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void postResultsAreInNotificationNotification_( NObjective.RuntimeObject notification ) {
			RuntimeObject ___occuredException;
			NativeMethods.postResultsAreInNotificationNotification_( Handle, CachedSelectors.postResultsAreInNotificationNotification_, out ___occuredException, sizeof( NObjective.RuntimeObject ), notification );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public System.IntPtr queryAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryAttributes( Handle, CachedSelectors.queryAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int queryOperator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryOperator( Handle, CachedSelectors.queryOperator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject recognizableAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recognizableAttributes( Handle, CachedSelectors.recognizableAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeServer_( Handle, CachedSelectors.removeServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetLDAPManager() {
			RuntimeObject ___occuredException;
			NativeMethods.resetLDAPManager( Handle, CachedSelectors.resetLDAPManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject serializeServers_( NObjective.RuntimeObject servers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serializeServers_( Handle, CachedSelectors.serializeServers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), servers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char serverExists_inServerList_( NObjective.RuntimeObject exists, NObjective.RuntimeObject inServerList ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serverExists_inServerList_( Handle, CachedSelectors.serverExists_inServerList_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), exists, inServerList );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject sessionUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sessionUID( Handle, CachedSelectors.sessionUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setBinaryAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBinaryAttributes_( Handle, CachedSelectors.setBinaryAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCapitalizedAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCapitalizedAttributes_( Handle, CachedSelectors.setCapitalizedAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLowercasedAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLowercasedAttributes_( Handle, CachedSelectors.setLowercasedAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMaxResults_( int results ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMaxResults_( Handle, CachedSelectors.setMaxResults_, out ___occuredException, sizeof( int ), results );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setQueryAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setQueryAttributes_( Handle, CachedSelectors.setQueryAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.setServer_( Handle, CachedSelectors.setServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setServersInDefaultsFile_( NObjective.RuntimeObject file ) {
			RuntimeObject ___occuredException;
			NativeMethods.setServersInDefaultsFile_( Handle, CachedSelectors.setServersInDefaultsFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ), file );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSessionUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSessionUID_( Handle, CachedSelectors.setSessionUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setThread_withObject_withSessionUID_( NObjective.RuntimeObject thread, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withSessionUID ) {
			RuntimeObject ___occuredException;
			NativeMethods.setThread_withObject_withSessionUID_( Handle, CachedSelectors.setThread_withObject_withSessionUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), thread, withObject, withSessionUID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTimeLimit_( int limit ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTimeLimit_( Handle, CachedSelectors.setTimeLimit_, out ___occuredException, sizeof( int ), limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char startQueryForString_withServers_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withServers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startQueryForString_withServers_( Handle, CachedSelectors.startQueryForString_withServers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, withServers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char startQueryForString_withServers_userInfo_exactString_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withServers, NObjective.RuntimeObject userInfo, char exactString ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startQueryForString_withServers_userInfo_exactString_( Handle, CachedSelectors.startQueryForString_withServers_userInfo_exactString_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), @string, withServers, userInfo, exactString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int timeLimit() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeLimit( Handle, CachedSelectors.timeLimit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addEntries_fromSession_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entries, NObjective.RuntimeObject fromSession );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allowedFields( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr availableUserServers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char backgrounQueriesRunning( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr binaryAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelAllQueries( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelQueries_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char queries );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr capitalizedAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void decrementNumberOfThreadsAlive_withSessionUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject alive, NObjective.RuntimeObject withSessionUID );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr defaultAddressBookPreferencesFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr deserializeServers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject servers );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryServicesNodes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryServicesServer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr DSQueryComponents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr DSQueryString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void freeAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr LDAPQueryString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr loadServersFromDefaultsFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr lowercasedAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void makeQueries_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject queries );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr makeUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int maxResults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void notifyDataIsReady( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int numberOfThreadsAlive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void postQueryHasBeenCanceledNotification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void postQueryHasFinishedNotification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void postResultsAreInNotificationNotification_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject notification );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern System.IntPtr queryAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int queryOperator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recognizableAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetLDAPManager( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr serializeServers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject servers );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char serverExists_inServerList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exists, NObjective.RuntimeObject inServerList );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sessionUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setBinaryAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCapitalizedAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setLowercasedAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMaxResults_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int results );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setQueryAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setServersInDefaultsFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject file );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSessionUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setThread_withObject_withSessionUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject thread, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withSessionUID );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setTimeLimit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int limit );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedLDAPManagerInstance( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char startQueryForString_withServers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withServers );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char startQueryForString_withServers_userInfo_exactString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withServers, NObjective.RuntimeObject userInfo, char exactString );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int timeLimit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addEntries_fromSession_ = "addEntries:fromSession:";
			public static readonly Selector addServer_ = "addServer:";
			public static readonly Selector allowedFields = "allowedFields";
			public static readonly Selector availableUserServers = "availableUserServers";
			public static readonly Selector backgrounQueriesRunning = "backgrounQueriesRunning";
			public static readonly Selector binaryAttributes = "binaryAttributes";
			public static readonly Selector cancelAllQueries = "cancelAllQueries";
			public static readonly Selector cancelQueries_ = "cancelQueries:";
			public static readonly Selector capitalizedAttributes = "capitalizedAttributes";
			public static readonly Selector decrementNumberOfThreadsAlive_withSessionUID_ = "decrementNumberOfThreadsAlive:withSessionUID:";
			public static readonly Selector defaultAddressBookPreferencesFile = "defaultAddressBookPreferencesFile";
			public static readonly Selector deserializeServers_ = "deserializeServers:";
			public static readonly Selector directoryServicesNodes = "directoryServicesNodes";
			public static readonly Selector directoryServicesServer = "directoryServicesServer";
			public static readonly Selector DSQueryComponents = "DSQueryComponents";
			public static readonly Selector DSQueryString = "DSQueryString";
			public static readonly Selector freeAttributes = "freeAttributes";
			public static readonly Selector LDAPQueryString = "LDAPQueryString";
			public static readonly Selector loadServersFromDefaultsFile = "loadServersFromDefaultsFile";
			public static readonly Selector lowercasedAttributes = "lowercasedAttributes";
			public static readonly Selector makeQueries_ = "makeQueries:";
			public static readonly Selector makeUID = "makeUID";
			public static readonly Selector maxResults = "maxResults";
			public static readonly Selector notifyDataIsReady = "notifyDataIsReady";
			public static readonly Selector numberOfThreadsAlive = "numberOfThreadsAlive";
			public static readonly Selector postQueryHasBeenCanceledNotification = "postQueryHasBeenCanceledNotification";
			public static readonly Selector postQueryHasFinishedNotification = "postQueryHasFinishedNotification";
			public static readonly Selector postResultsAreInNotificationNotification_ = "postResultsAreInNotificationNotification:";
			public static readonly Selector queryAttributes = "queryAttributes";
			public static readonly Selector queryOperator = "queryOperator";
			public static readonly Selector recognizableAttributes = "recognizableAttributes";
			public static readonly Selector removeServer_ = "removeServer:";
			public static readonly Selector resetLDAPManager = "resetLDAPManager";
			public static readonly Selector serializeServers_ = "serializeServers:";
			public static readonly Selector serverExists_inServerList_ = "serverExists:inServerList:";
			public static readonly Selector sessionUID = "sessionUID";
			public static readonly Selector setBinaryAttributes_ = "setBinaryAttributes:";
			public static readonly Selector setCapitalizedAttributes_ = "setCapitalizedAttributes:";
			public static readonly Selector setLowercasedAttributes_ = "setLowercasedAttributes:";
			public static readonly Selector setMaxResults_ = "setMaxResults:";
			public static readonly Selector setQueryAttributes_ = "setQueryAttributes:";
			public static readonly Selector setServer_ = "setServer:";
			public static readonly Selector setServersInDefaultsFile_ = "setServersInDefaultsFile:";
			public static readonly Selector setSessionUID_ = "setSessionUID:";
			public static readonly Selector setThread_withObject_withSessionUID_ = "setThread:withObject:withSessionUID:";
			public static readonly Selector setTimeLimit_ = "setTimeLimit:";
			public static readonly Selector sharedLDAPManagerInstance = "sharedLDAPManagerInstance";
			public static readonly Selector startQueryForString_withServers_ = "startQueryForString:withServers:";
			public static readonly Selector startQueryForString_withServers_userInfo_exactString_ = "startQueryForString:withServers:userInfo:exactString:";
			public static readonly Selector timeLimit = "timeLimit";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABLDAP_Query : IEquatable<ABLDAP_Query> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_Query;
		public static implicit operator IntPtr( ABLDAP_Query value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_Query value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLDAP_Query ) ) return false; 
			return Handle == ( ( ABLDAP_Query )value ).Handle;
		}
		public bool Equals( ABLDAP_Query value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_Query value1, ABLDAP_Query value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_Query value1, ABLDAP_Query value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_Query( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_Query alloc() {
			return new ABLDAP_Query( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static System.IntPtr createAttributesListForApple_( char apple ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createAttributesListForApple_( ClassHandle, CachedSelectors.createAttributesListForApple_, out ___occuredException, sizeof( char ), apple );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char attemptToBind() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attemptToBind( Handle, CachedSelectors.attemptToBind, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelQuery() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelQuery( Handle, CachedSelectors.cancelQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connectToLDAPServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectToLDAPServer_( Handle, CachedSelectors.connectToLDAPServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithLDAPManager_forServer_queryString_sessionUID_( NObjective.RuntimeObject manager, NObjective.RuntimeObject forServer, NObjective.RuntimeObject queryString, NObjective.RuntimeObject sessionUID ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLDAPManager_forServer_queryString_sessionUID_( Handle, CachedSelectors.initWithLDAPManager_forServer_queryString_sessionUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), manager, forServer, queryString, sessionUID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char queryLDAPServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryLDAPServer( Handle, CachedSelectors.queryLDAPServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject server() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.server( Handle, CachedSelectors.server, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject sessionUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sessionUID( Handle, CachedSelectors.sessionUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setUserInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUserInfo_( Handle, CachedSelectors.setUserInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char attemptToBind( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelQuery( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void connectToLDAPServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern System.IntPtr createAttributesListForApple_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char apple );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithLDAPManager_forServer_queryString_sessionUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject forServer, NObjective.RuntimeObject queryString, NObjective.RuntimeObject sessionUID );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char queryLDAPServer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr server( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sessionUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUserInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
		}
		static internal class CachedSelectors {
			public static readonly Selector attemptToBind = "attemptToBind";
			public static readonly Selector cancelQuery = "cancelQuery";
			public static readonly Selector connectToLDAPServer_ = "connectToLDAPServer:";
			public static readonly Selector createAttributesListForApple_ = "createAttributesListForApple:";
			public static readonly Selector initWithLDAPManager_forServer_queryString_sessionUID_ = "initWithLDAPManager:forServer:queryString:sessionUID:";
			public static readonly Selector queryLDAPServer = "queryLDAPServer";
			public static readonly Selector server = "server";
			public static readonly Selector sessionUID = "sessionUID";
			public static readonly Selector setUserInfo_ = "setUserInfo:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABLDAP_Query_DS : IEquatable<ABLDAP_Query_DS> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_Query_DS;
		public static implicit operator IntPtr( ABLDAP_Query_DS value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_Query_DS value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLDAP_Query_DS ) ) return false; 
			return Handle == ( ( ABLDAP_Query_DS )value ).Handle;
		}
		public bool Equals( ABLDAP_Query_DS value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_Query_DS value1, ABLDAP_Query_DS value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_Query_DS value1, ABLDAP_Query_DS value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_Query_DS( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_Query_DS alloc() {
			return new ABLDAP_Query_DS( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void cancelQuery() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelQuery( Handle, CachedSelectors.cancelQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connectToLDAPServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectToLDAPServer_( Handle, CachedSelectors.connectToLDAPServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject findRecordsInServer_withNode_withServer_withCounter_( uint server, NObjective.RuntimeObject withNode, NObjective.RuntimeObject withServer, int withCounter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findRecordsInServer_withNode_withServer_withCounter_( Handle, CachedSelectors.findRecordsInServer_withNode_withServer_withCounter_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), server, withNode, withServer, withCounter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithLDAPManager_forServer_sessionUID_( NObjective.RuntimeObject manager, NObjective.RuntimeObject forServer, NObjective.RuntimeObject sessionUID ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLDAPManager_forServer_sessionUID_( Handle, CachedSelectors.initWithLDAPManager_forServer_sessionUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), manager, forServer, sessionUID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject server() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.server( Handle, CachedSelectors.server, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject sessionUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sessionUID( Handle, CachedSelectors.sessionUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelQuery( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void connectToLDAPServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr findRecordsInServer_withNode_withServer_withCounter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint server, NObjective.RuntimeObject withNode, NObjective.RuntimeObject withServer, int withCounter );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithLDAPManager_forServer_sessionUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject forServer, NObjective.RuntimeObject sessionUID );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr server( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sessionUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancelQuery = "cancelQuery";
			public static readonly Selector connectToLDAPServer_ = "connectToLDAPServer:";
			public static readonly Selector findRecordsInServer_withNode_withServer_withCounter_ = "findRecordsInServer:withNode:withServer:withCounter:";
			public static readonly Selector initWithLDAPManager_forServer_sessionUID_ = "initWithLDAPManager:forServer:sessionUID:";
			public static readonly Selector server = "server";
			public static readonly Selector sessionUID = "sessionUID";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABLDAP_ResultElement : IEquatable<ABLDAP_ResultElement> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_ResultElement;
		public static implicit operator IntPtr( ABLDAP_ResultElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_ResultElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLDAP_ResultElement ) ) return false; 
			return Handle == ( ( ABLDAP_ResultElement )value ).Handle;
		}
		public bool Equals( ABLDAP_ResultElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_ResultElement value1, ABLDAP_ResultElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_ResultElement value1, ABLDAP_ResultElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_ResultElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_ResultElement alloc() {
			return new ABLDAP_ResultElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addIMValue_toPerson_( NObjective.RuntimeObject value, NObjective.RuntimeObject toPerson ) {
			RuntimeObject ___occuredException;
			NativeMethods.addIMValue_toPerson_( Handle, CachedSelectors.addIMValue_toPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, toPerson );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allLabelsForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allLabelsForProperty_( Handle, CachedSelectors.allLabelsForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayName( Handle, CachedSelectors.displayName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject email() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.email( Handle, CachedSelectors.email, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject firstName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstName( Handle, CachedSelectors.firstName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject info() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.info( Handle, CachedSelectors.info, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lastName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastName( Handle, CachedSelectors.lastName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void markRemoteLocationWithServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.markRemoteLocationWithServer_( Handle, CachedSelectors.markRemoteLocationWithServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject personValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.personValue( Handle, CachedSelectors.personValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject server() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.server( Handle, CachedSelectors.server, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setObject_forKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObject_forKey_( Handle, CachedSelectors.setObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject valuesForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valuesForKey_( Handle, CachedSelectors.valuesForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addIMValue_toPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject toPerson );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allLabelsForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr email( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr firstName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr info( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr lastName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markRemoteLocationWithServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr personValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr server( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setObject_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valuesForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
		}
		static internal class CachedSelectors {
			public static readonly Selector addIMValue_toPerson_ = "addIMValue:toPerson:";
			public static readonly Selector allLabelsForProperty_ = "allLabelsForProperty:";
			public static readonly Selector displayName = "displayName";
			public static readonly Selector email = "email";
			public static readonly Selector firstName = "firstName";
			public static readonly Selector info = "info";
			public static readonly Selector lastName = "lastName";
			public static readonly Selector markRemoteLocationWithServer_ = "markRemoteLocationWithServer:";
			public static readonly Selector personValue = "personValue";
			public static readonly Selector server = "server";
			public static readonly Selector setObject_forKey_ = "setObject:forKey:";
			public static readonly Selector valuesForKey_ = "valuesForKey:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABLDAP_Server : IEquatable<ABLDAP_Server> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_Server;
		public static implicit operator IntPtr( ABLDAP_Server value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_Server value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLDAP_Server ) ) return false; 
			return Handle == ( ( ABLDAP_Server )value ).Handle;
		}
		public bool Equals( ABLDAP_Server value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_Server value1, ABLDAP_Server value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_Server value1, ABLDAP_Server value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_Server( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_Server alloc() {
			return new ABLDAP_Server( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject directoryServicesServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryServicesServer( ClassHandle, CachedSelectors.directoryServicesServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject directoryServicesServer_( char server ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryServicesServer_( ClassHandle, CachedSelectors.directoryServicesServer_, out ___occuredException, sizeof( char ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject userServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userServer( ClassHandle, CachedSelectors.userServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject userServer_( char server ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userServer_( ClassHandle, CachedSelectors.userServer_, out ___occuredException, sizeof( char ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int authenticationType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.authenticationType( Handle, CachedSelectors.authenticationType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void delete() {
			RuntimeObject ___occuredException;
			NativeMethods.delete( Handle, CachedSelectors.delete, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deserialize() {
			RuntimeObject ___occuredException;
			NativeMethods.deserialize( Handle, CachedSelectors.deserialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject hostname() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hostname( Handle, CachedSelectors.hostname, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject hostName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hostName( Handle, CachedSelectors.hostName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char ignoresSSLCertificateErrors() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ignoresSSLCertificateErrors( Handle, CachedSelectors.ignoresSSLCertificateErrors, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject info() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.info( Handle, CachedSelectors.info, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithType_( int type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithType_( Handle, CachedSelectors.initWithType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithUID_( int uid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUID_( Handle, CachedSelectors.initWithUID_, out ___occuredException, sizeof( int ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject isEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEnabled( Handle, CachedSelectors.isEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isReachable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isReachable( Handle, CachedSelectors.isReachable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject normalURLString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.normalURLString( Handle, CachedSelectors.normalURLString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject password() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.password( Handle, CachedSelectors.password, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int port() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.port( Handle, CachedSelectors.port, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int scope() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scope( Handle, CachedSelectors.scope, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject searchBase() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchBase( Handle, CachedSelectors.searchBase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject secureURLString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.secureURLString( Handle, CachedSelectors.secureURLString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject serialize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serialize( Handle, CachedSelectors.serialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int serverType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serverType( Handle, CachedSelectors.serverType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAuthenticationType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAuthenticationType_( Handle, CachedSelectors.setAuthenticationType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHostName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHostName_( Handle, CachedSelectors.setHostName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIgnoresSSLCertificateErrors_( char errors ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIgnoresSSLCertificateErrors_( Handle, CachedSelectors.setIgnoresSSLCertificateErrors_, out ___occuredException, sizeof( char ), errors );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			NativeMethods.setInfo_( Handle, CachedSelectors.setInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsEnabled_( Handle, CachedSelectors.setIsEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPassword_( NObjective.RuntimeObject password ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPassword_( Handle, CachedSelectors.setPassword_, out ___occuredException, sizeof( NObjective.RuntimeObject ), password );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPort_( int port ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPort_( Handle, CachedSelectors.setPort_, out ___occuredException, sizeof( int ), port );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScope_( int scope ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScope_( Handle, CachedSelectors.setScope_, out ___occuredException, sizeof( int ), scope );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchBase_( NObjective.RuntimeObject @base ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchBase_( Handle, CachedSelectors.setSearchBase_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @base );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitle_( Handle, CachedSelectors.setTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUID_( Handle, CachedSelectors.setUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUsername_( NObjective.RuntimeObject username ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUsername_( Handle, CachedSelectors.setUsername_, out ___occuredException, sizeof( NObjective.RuntimeObject ), username );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUseSSL_( char ssl ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUseSSL_( Handle, CachedSelectors.setUseSSL_, out ___occuredException, sizeof( char ), ssl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject UID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.UID( Handle, CachedSelectors.UID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject username() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.username( Handle, CachedSelectors.username, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char useSSL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useSSL( Handle, CachedSelectors.useSSL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int authenticationType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void delete( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deserialize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryServicesServer( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryServicesServer_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char server );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr hostname( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr hostName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char ignoresSSLCertificateErrors( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr info( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int uid );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr isEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isReachable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr normalURLString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr password( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int port( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int scope( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchBase( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr secureURLString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr serialize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int serverType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAuthenticationType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setHostName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIgnoresSSLCertificateErrors_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char errors );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIsEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPassword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject password );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int port );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setScope_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int scope );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSearchBase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @base );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUsername_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject username );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUseSSL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char ssl );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr UID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr username( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr userServer( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr userServer_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char server );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char useSSL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector authenticationType = "authenticationType";
			public static readonly Selector delete = "delete";
			public static readonly Selector deserialize = "deserialize";
			public static readonly Selector directoryServicesServer = "directoryServicesServer";
			public static readonly Selector directoryServicesServer_ = "directoryServicesServer:";
			public static readonly Selector hostname = "hostname";
			public static readonly Selector hostName = "hostName";
			public static readonly Selector ignoresSSLCertificateErrors = "ignoresSSLCertificateErrors";
			public static readonly Selector info = "info";
			public static readonly Selector initWithType_ = "initWithType:";
			public static readonly Selector initWithUID_ = "initWithUID:";
			public static readonly Selector isEnabled = "isEnabled";
			public static readonly Selector isReachable = "isReachable";
			public static readonly Selector normalURLString = "normalURLString";
			public static readonly Selector password = "password";
			public static readonly Selector port = "port";
			public static readonly Selector scope = "scope";
			public static readonly Selector searchBase = "searchBase";
			public static readonly Selector secureURLString = "secureURLString";
			public static readonly Selector serialize = "serialize";
			public static readonly Selector serverType = "serverType";
			public static readonly Selector setAuthenticationType_ = "setAuthenticationType:";
			public static readonly Selector setHostName_ = "setHostName:";
			public static readonly Selector setIgnoresSSLCertificateErrors_ = "setIgnoresSSLCertificateErrors:";
			public static readonly Selector setInfo_ = "setInfo:";
			public static readonly Selector setIsEnabled_ = "setIsEnabled:";
			public static readonly Selector setPassword_ = "setPassword:";
			public static readonly Selector setPort_ = "setPort:";
			public static readonly Selector setScope_ = "setScope:";
			public static readonly Selector setSearchBase_ = "setSearchBase:";
			public static readonly Selector setTitle_ = "setTitle:";
			public static readonly Selector setUID_ = "setUID:";
			public static readonly Selector setUsername_ = "setUsername:";
			public static readonly Selector setUseSSL_ = "setUseSSL:";
			public static readonly Selector title = "title";
			public static readonly Selector UID = "UID";
			public static readonly Selector username = "username";
			public static readonly Selector userServer = "userServer";
			public static readonly Selector userServer_ = "userServer:";
			public static readonly Selector useSSL = "useSSL";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABLocalImageDataCache : IEquatable<ABLocalImageDataCache> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLocalImageDataCache;
		public static implicit operator IntPtr( ABLocalImageDataCache value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLocalImageDataCache value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLocalImageDataCache ) ) return false; 
			return Handle == ( ( ABLocalImageDataCache )value ).Handle;
		}
		public bool Equals( ABLocalImageDataCache value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLocalImageDataCache value1, ABLocalImageDataCache value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLocalImageDataCache value1, ABLocalImageDataCache value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLocalImageDataCache( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLocalImageDataCache alloc() {
			return new ABLocalImageDataCache( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject imageDataForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageDataForPerson_( Handle, CachedSelectors.imageDataForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr imageDataForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
		}
		static internal class CachedSelectors {
			public static readonly Selector imageDataForPerson_ = "imageDataForPerson:";
		}
	}
	[ProxyBaseClass(typeof( ABRecord ))]
	public struct ABLog : IEquatable<ABLog> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLog;
		public static implicit operator IntPtr( ABLog value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLog value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABLog ) ) return false; 
			return Handle == ( ( ABLog )value ).Handle;
		}
		public bool Equals( ABLog value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLog value1, ABLog value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLog value1, ABLog value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLog( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLog alloc() {
			return new ABLog( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject nts_DeletedUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_DeletedUID( Handle, CachedSelectors.nts_DeletedUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_InitWithDeletedUID_addressBook_( NObjective.RuntimeObject uid, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitWithDeletedUID_addressBook_( Handle, CachedSelectors.nts_InitWithDeletedUID_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), uid, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_DeletedUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_InitWithDeletedUID_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector nts_DeletedUID = "nts_DeletedUID";
			public static readonly Selector nts_InitWithDeletedUID_addressBook_ = "nts_InitWithDeletedUID:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABRecord ))]
	public struct ABMailRecent : IEquatable<ABMailRecent> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMailRecent;
		public static implicit operator IntPtr( ABMailRecent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMailRecent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMailRecent ) ) return false; 
			return Handle == ( ( ABMailRecent )value ).Handle;
		}
		public bool Equals( ABMailRecent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMailRecent value1, ABMailRecent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMailRecent value1, ABMailRecent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMailRecent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMailRecent alloc() {
			return new ABMailRecent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSMatrix ))]
	public struct ABMatrix : IEquatable<ABMatrix> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMatrix;
		public static implicit operator IntPtr( ABMatrix value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMatrix value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMatrix ) ) return false; 
			return Handle == ( ( ABMatrix )value ).Handle;
		}
		public bool Equals( ABMatrix value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMatrix value1, ABMatrix value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMatrix value1, ABMatrix value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMatrix( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMatrix alloc() {
			return new ABMatrix( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABMeCommand : IEquatable<ABMeCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMeCommand;
		public static implicit operator IntPtr( ABMeCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMeCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMeCommand ) ) return false; 
			return Handle == ( ( ABMeCommand )value ).Handle;
		}
		public bool Equals( ABMeCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMeCommand value1, ABMeCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMeCommand value1, ABMeCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMeCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMeCommand alloc() {
			return new ABMeCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_newMe_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject newMe, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_newMe_addressBook_( Handle, CachedSelectors.initWithGroup_newMe_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, newMe, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_newMe_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject newMe, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_newMe_addressBook_ = "initWithGroup:newMe:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABPeopleController ))]
	public struct ABMembersController : IEquatable<ABMembersController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMembersController;
		public static implicit operator IntPtr( ABMembersController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMembersController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMembersController ) ) return false; 
			return Handle == ( ( ABMembersController )value ).Handle;
		}
		public bool Equals( ABMembersController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMembersController value1, ABMembersController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMembersController value1, ABMembersController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMembersController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMembersController alloc() {
			return new ABMembersController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void copy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			NativeMethods.copy_( Handle, CachedSelectors.copy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cut_( NObjective.RuntimeObject cut ) {
			RuntimeObject ___occuredException;
			NativeMethods.cut_( Handle, CachedSelectors.cut_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cut );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteConfirmSheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteConfirmSheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.deleteConfirmSheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteKey_( Handle, CachedSelectors.deleteKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doubleAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.doubleAction_( Handle, CachedSelectors.doubleAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void escapeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.escapeKey_( Handle, CachedSelectors.escapeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exportVCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportVCard_( Handle, CachedSelectors.exportVCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void membersSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersSelectionChanged_( Handle, CachedSelectors.membersSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void newGroupFromSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.newGroupFromSelection_( Handle, CachedSelectors.newGroupFromSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void paste_( NObjective.RuntimeObject paste ) {
			RuntimeObject ___occuredException;
			NativeMethods.paste_( Handle, CachedSelectors.paste_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paste );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void personChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.personChanged_( Handle, CachedSelectors.personChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void refreshRow_( int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.refreshRow_( Handle, CachedSelectors.refreshRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeConfirmSheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeConfirmSheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.removeConfirmSheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int selectedRow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedRow( Handle, CachedSelectors.selectedRow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void tableContentChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableContentChanged_( Handle, CachedSelectors.tableContentChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char tableView_acceptDrop_row_dropOperation_( NObjective.RuntimeObject view, NObjective.RuntimeObject acceptDrop, int row, uint dropOperation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_acceptDrop_row_dropOperation_( Handle, CachedSelectors.tableView_acceptDrop_row_dropOperation_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( uint ), view, acceptDrop, row, dropOperation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint tableView_validateDrop_proposedRow_proposedDropOperation_( NObjective.RuntimeObject view, NObjective.RuntimeObject validateDrop, int proposedRow, uint proposedDropOperation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_validateDrop_proposedRow_proposedDropOperation_( Handle, CachedSelectors.tableView_validateDrop_proposedRow_proposedDropOperation_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( uint ), view, validateDrop, proposedRow, proposedDropOperation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public void typeAhead_( NObjective.RuntimeObject ahead ) {
			RuntimeObject ___occuredException;
			NativeMethods.typeAhead_( Handle, CachedSelectors.typeAhead_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ahead );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void copy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cut_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cut );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deleteConfirmSheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deleteKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doubleAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void escapeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void exportVCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void membersSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void newGroupFromSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void paste_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paste );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void personChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void refreshRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeConfirmSheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int selectedRow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void tableContentChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char tableView_acceptDrop_row_dropOperation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject acceptDrop, int row, uint dropOperation );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint tableView_validateDrop_proposedRow_proposedDropOperation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject validateDrop, int proposedRow, uint proposedDropOperation );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void typeAhead_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ahead );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
		}
		static internal class CachedSelectors {
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector copy_ = "copy:";
			public static readonly Selector cut_ = "cut:";
			public static readonly Selector deleteConfirmSheetDidEnd_returnCode_contextInfo_ = "deleteConfirmSheetDidEnd:returnCode:contextInfo:";
			public static readonly Selector deleteKey_ = "deleteKey:";
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector doubleAction_ = "doubleAction:";
			public static readonly Selector escapeKey_ = "escapeKey:";
			public static readonly Selector exportVCard_ = "exportVCard:";
			public static readonly Selector membersSelectionChanged_ = "membersSelectionChanged:";
			public static readonly Selector newGroupFromSelection_ = "newGroupFromSelection:";
			public static readonly Selector paste_ = "paste:";
			public static readonly Selector personChanged_ = "personChanged:";
			public static readonly Selector refreshRow_ = "refreshRow:";
			public static readonly Selector removeConfirmSheetDidEnd_returnCode_contextInfo_ = "removeConfirmSheetDidEnd:returnCode:contextInfo:";
			public static readonly Selector selectedRow = "selectedRow";
			public static readonly Selector tableContentChanged_ = "tableContentChanged:";
			public static readonly Selector tableView_acceptDrop_row_dropOperation_ = "tableView:acceptDrop:row:dropOperation:";
			public static readonly Selector tableView_validateDrop_proposedRow_proposedDropOperation_ = "tableView:validateDrop:proposedRow:proposedDropOperation:";
			public static readonly Selector typeAhead_ = "typeAhead:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABMergePeopleCommand : IEquatable<ABMergePeopleCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMergePeopleCommand;
		public static implicit operator IntPtr( ABMergePeopleCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMergePeopleCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMergePeopleCommand ) ) return false; 
			return Handle == ( ( ABMergePeopleCommand )value ).Handle;
		}
		public bool Equals( ABMergePeopleCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMergePeopleCommand value1, ABMergePeopleCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMergePeopleCommand value1, ABMergePeopleCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMergePeopleCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMergePeopleCommand alloc() {
			return new ABMergePeopleCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_originalPeople_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject originalPeople, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_originalPeople_addressBook_( Handle, CachedSelectors.initWithGroup_originalPeople_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, originalPeople, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_originalPeople_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject originalPeople, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_originalPeople_addressBook_ = "initWithGroup:originalPeople:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABMerger : IEquatable<ABMerger> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMerger;
		public static implicit operator IntPtr( ABMerger value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMerger value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMerger ) ) return false; 
			return Handle == ( ( ABMerger )value ).Handle;
		}
		public bool Equals( ABMerger value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMerger value1, ABMerger value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMerger value1, ABMerger value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMerger( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMerger alloc() {
			return new ABMerger( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject addedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addedPeople( Handle, CachedSelectors.addedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addedToGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addedToGroup( Handle, CachedSelectors.addedToGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addMember_toGroup_( NObjective.RuntimeObject member, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addMember_toGroup_( Handle, CachedSelectors.addMember_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), member, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.addPerson_( Handle, CachedSelectors.addPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPeople( Handle, CachedSelectors.allPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allPersonProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPersonProperties( Handle, CachedSelectors.allPersonProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deletedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deletedPeople( Handle, CachedSelectors.deletedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deletePerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletePerson_( Handle, CachedSelectors.deletePerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject duplicatesForPeople_( NObjective.RuntimeObject people ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.duplicatesForPeople_( Handle, CachedSelectors.duplicatesForPeople_, out ___occuredException, sizeof( NObjective.RuntimeObject ), people );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject emulateUpdateCard_withImportedCard_changes_( NObjective.RuntimeObject card, NObjective.RuntimeObject withImportedCard, NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.emulateUpdateCard_withImportedCard_changes_( Handle, CachedSelectors.emulateUpdateCard_withImportedCard_changes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), card, withImportedCard, changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char findSimilarMultiValuesForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findSimilarMultiValuesForPerson_( Handle, CachedSelectors.findSimilarMultiValuesForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithUIController_group_( NObjective.RuntimeObject controller, NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUIController_group_( Handle, CachedSelectors.initWithUIController_group_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char issueCommand() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.issueCommand( Handle, CachedSelectors.issueCommand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char issueCommandWithActionName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.issueCommandWithActionName_( Handle, CachedSelectors.issueCommandWithActionName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void mergeSimilarMultiValuesForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeSimilarMultiValuesForPerson_( Handle, CachedSelectors.mergeSimilarMultiValuesForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMeCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMeCard_( Handle, CachedSelectors.setMeCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject updateCard_withImportedCard_( NObjective.RuntimeObject card, NObjective.RuntimeObject withImportedCard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.updateCard_withImportedCard_( Handle, CachedSelectors.updateCard_withImportedCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), card, withImportedCard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject updatedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.updatedPeople( Handle, CachedSelectors.updatedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addedToGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addMember_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, NObjective.RuntimeObject toGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allPersonProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr deletedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deletePerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr duplicatesForPeople_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject people );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr emulateUpdateCard_withImportedCard_changes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card, NObjective.RuntimeObject withImportedCard, NObjective.RuntimeObject changes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char findSimilarMultiValuesForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUIController_group_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char issueCommand( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char issueCommandWithActionName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void mergeSimilarMultiValuesForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMeCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr updateCard_withImportedCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card, NObjective.RuntimeObject withImportedCard );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr updatedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addedPeople = "addedPeople";
			public static readonly Selector addedToGroup = "addedToGroup";
			public static readonly Selector addMember_toGroup_ = "addMember:toGroup:";
			public static readonly Selector addPerson_ = "addPerson:";
			public static readonly Selector allPeople = "allPeople";
			public static readonly Selector allPersonProperties = "allPersonProperties";
			public static readonly Selector deletedPeople = "deletedPeople";
			public static readonly Selector deletePerson_ = "deletePerson:";
			public static readonly Selector duplicatesForPeople_ = "duplicatesForPeople:";
			public static readonly Selector emulateUpdateCard_withImportedCard_changes_ = "emulateUpdateCard:withImportedCard:changes:";
			public static readonly Selector findSimilarMultiValuesForPerson_ = "findSimilarMultiValuesForPerson:";
			public static readonly Selector initWithUIController_group_ = "initWithUIController:group:";
			public static readonly Selector issueCommand = "issueCommand";
			public static readonly Selector issueCommandWithActionName_ = "issueCommandWithActionName:";
			public static readonly Selector mergeSimilarMultiValuesForPerson_ = "mergeSimilarMultiValuesForPerson:";
			public static readonly Selector setMeCard_ = "setMeCard:";
			public static readonly Selector updateCard_withImportedCard_ = "updateCard:withImportedCard:";
			public static readonly Selector updatedPeople = "updatedPeople";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABMessage : IEquatable<ABMessage> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMessage;
		public static implicit operator IntPtr( ABMessage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMessage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMessage ) ) return false; 
			return Handle == ( ( ABMessage )value ).Handle;
		}
		public bool Equals( ABMessage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMessage value1, ABMessage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMessage value1, ABMessage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMessage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMessage alloc() {
			return new ABMessage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int messageType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.messageType( Handle, CachedSelectors.messageType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setMessageType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMessageType_( Handle, CachedSelectors.setMessageType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int messageType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMessageType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
		}
		static internal class CachedSelectors {
			public static readonly Selector messageType = "messageType";
			public static readonly Selector setMessageType_ = "setMessageType:";
		}
	}
	[ProxyBaseClass(typeof( NSView ))]
	public struct ABMessageView : IEquatable<ABMessageView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMessageView;
		public static implicit operator IntPtr( ABMessageView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMessageView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMessageView ) ) return false; 
			return Handle == ( ( ABMessageView )value ).Handle;
		}
		public bool Equals( ABMessageView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMessageView value1, ABMessageView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMessageView value1, ABMessageView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMessageView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMessageView alloc() {
			return new ABMessageView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int messageType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.messageType( Handle, CachedSelectors.messageType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setMessageType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMessageType_( Handle, CachedSelectors.setMessageType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int messageType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMessageType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
		}
		static internal class CachedSelectors {
			public static readonly Selector messageType = "messageType";
			public static readonly Selector setMessageType_ = "setMessageType:";
		}
	}
	[ProxyBaseClass(typeof( ABMetadataOperation ))]
	public struct ABMetadataAddOperation : IEquatable<ABMetadataAddOperation> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMetadataAddOperation;
		public static implicit operator IntPtr( ABMetadataAddOperation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMetadataAddOperation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMetadataAddOperation ) ) return false; 
			return Handle == ( ( ABMetadataAddOperation )value ).Handle;
		}
		public bool Equals( ABMetadataAddOperation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMetadataAddOperation value1, ABMetadataAddOperation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMetadataAddOperation value1, ABMetadataAddOperation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMetadataAddOperation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMetadataAddOperation alloc() {
			return new ABMetadataAddOperation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithMetadataManager_recordUniqueIds_( NObjective.RuntimeObject manager, NObjective.RuntimeObject recordUniqueIds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMetadataManager_recordUniqueIds_( Handle, CachedSelectors.initWithMetadataManager_recordUniqueIds_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), manager, recordUniqueIds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithMetadataManager_recordUniqueIds_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject recordUniqueIds );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithMetadataManager_recordUniqueIds_ = "initWithMetadataManager:recordUniqueIds:";
		}
	}
	[ProxyBaseClass(typeof( ABMetadataOperation ))]
	public struct ABMetadataDeleteOperation : IEquatable<ABMetadataDeleteOperation> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMetadataDeleteOperation;
		public static implicit operator IntPtr( ABMetadataDeleteOperation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMetadataDeleteOperation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMetadataDeleteOperation ) ) return false; 
			return Handle == ( ( ABMetadataDeleteOperation )value ).Handle;
		}
		public bool Equals( ABMetadataDeleteOperation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMetadataDeleteOperation value1, ABMetadataDeleteOperation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMetadataDeleteOperation value1, ABMetadataDeleteOperation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMetadataDeleteOperation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMetadataDeleteOperation alloc() {
			return new ABMetadataDeleteOperation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithMetadataManager_recordUniqueIds_( NObjective.RuntimeObject manager, NObjective.RuntimeObject recordUniqueIds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMetadataManager_recordUniqueIds_( Handle, CachedSelectors.initWithMetadataManager_recordUniqueIds_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), manager, recordUniqueIds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithMetadataManager_recordUniqueIds_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject recordUniqueIds );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithMetadataManager_recordUniqueIds_ = "initWithMetadataManager:recordUniqueIds:";
		}
	}
	[ProxyBaseClass(typeof( ABMetadataOperation ))]
	public struct ABMetadataMarkViewedOperation : IEquatable<ABMetadataMarkViewedOperation> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMetadataMarkViewedOperation;
		public static implicit operator IntPtr( ABMetadataMarkViewedOperation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMetadataMarkViewedOperation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMetadataMarkViewedOperation ) ) return false; 
			return Handle == ( ( ABMetadataMarkViewedOperation )value ).Handle;
		}
		public bool Equals( ABMetadataMarkViewedOperation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMetadataMarkViewedOperation value1, ABMetadataMarkViewedOperation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMetadataMarkViewedOperation value1, ABMetadataMarkViewedOperation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMetadataMarkViewedOperation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMetadataMarkViewedOperation alloc() {
			return new ABMetadataMarkViewedOperation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithMetadataManager_recordUniqueIds_( NObjective.RuntimeObject manager, NObjective.RuntimeObject recordUniqueIds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMetadataManager_recordUniqueIds_( Handle, CachedSelectors.initWithMetadataManager_recordUniqueIds_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), manager, recordUniqueIds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void markOneShot() {
			RuntimeObject ___occuredException;
			NativeMethods.markOneShot( Handle, CachedSelectors.markOneShot, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithMetadataManager_recordUniqueIds_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject recordUniqueIds );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markOneShot( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithMetadataManager_recordUniqueIds_ = "initWithMetadataManager:recordUniqueIds:";
			public static readonly Selector markOneShot = "markOneShot";
		}
	}
	[ProxyBaseClass(typeof( NSOperation ))]
	public struct ABMetadataOperation : IEquatable<ABMetadataOperation> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMetadataOperation;
		public static implicit operator IntPtr( ABMetadataOperation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMetadataOperation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMetadataOperation ) ) return false; 
			return Handle == ( ( ABMetadataOperation )value ).Handle;
		}
		public bool Equals( ABMetadataOperation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMetadataOperation value1, ABMetadataOperation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMetadataOperation value1, ABMetadataOperation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMetadataOperation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMetadataOperation alloc() {
			return new ABMetadataOperation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithMetadataManager_( NObjective.RuntimeObject manager ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMetadataManager_( Handle, CachedSelectors.initWithMetadataManager_, out ___occuredException, sizeof( NObjective.RuntimeObject ), manager );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char lockInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockInfo( Handle, CachedSelectors.lockInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void markUniqueIdsAsCompleted_( NObjective.RuntimeObject completed ) {
			RuntimeObject ___occuredException;
			NativeMethods.markUniqueIdsAsCompleted_( Handle, CachedSelectors.markUniqueIdsAsCompleted_, out ___occuredException, sizeof( NObjective.RuntimeObject ), completed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void markUniqueIdsAsPlanned_( NObjective.RuntimeObject planned ) {
			RuntimeObject ___occuredException;
			NativeMethods.markUniqueIdsAsPlanned_( Handle, CachedSelectors.markUniqueIdsAsPlanned_, out ___occuredException, sizeof( NObjective.RuntimeObject ), planned );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void markViewedForRecordWithUniqueId_tryAgain_( NObjective.RuntimeObject id, char tryAgain ) {
			RuntimeObject ___occuredException;
			NativeMethods.markViewedForRecordWithUniqueId_tryAgain_( Handle, CachedSelectors.markViewedForRecordWithUniqueId_tryAgain_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), id, tryAgain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int metadataJobType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.metadataJobType( Handle, CachedSelectors.metadataJobType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void removeMetadataForRecordWithUniqueId_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeMetadataForRecordWithUniqueId_( Handle, CachedSelectors.removeMetadataForRecordWithUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stamp() {
			RuntimeObject ___occuredException;
			NativeMethods.stamp( Handle, CachedSelectors.stamp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unlockInfo() {
			RuntimeObject ___occuredException;
			NativeMethods.unlockInfo( Handle, CachedSelectors.unlockInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void validateAllMetaDataForceRebuild_( char rebuild ) {
			RuntimeObject ___occuredException;
			NativeMethods.validateAllMetaDataForceRebuild_( Handle, CachedSelectors.validateAllMetaDataForceRebuild_, out ___occuredException, sizeof( char ), rebuild );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeMetadata_forRecordWithUniqueId_( NObjective.RuntimeObject metadata, NObjective.RuntimeObject forRecordWithUniqueId ) {
			RuntimeObject ___occuredException;
			NativeMethods.writeMetadata_forRecordWithUniqueId_( Handle, CachedSelectors.writeMetadata_forRecordWithUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), metadata, forRecordWithUniqueId );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithMetadataManager_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char lockInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markUniqueIdsAsCompleted_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject completed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markUniqueIdsAsPlanned_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject planned );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markViewedForRecordWithUniqueId_tryAgain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, char tryAgain );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int metadataJobType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeMetadataForRecordWithUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void stamp( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void unlockInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void validateAllMetaDataForceRebuild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char rebuild );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void writeMetadata_forRecordWithUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject metadata, NObjective.RuntimeObject forRecordWithUniqueId );
		}
		static internal class CachedSelectors {
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector initWithMetadataManager_ = "initWithMetadataManager:";
			public static readonly Selector lockInfo = "lockInfo";
			public static readonly Selector markUniqueIdsAsCompleted_ = "markUniqueIdsAsCompleted:";
			public static readonly Selector markUniqueIdsAsPlanned_ = "markUniqueIdsAsPlanned:";
			public static readonly Selector markViewedForRecordWithUniqueId_tryAgain_ = "markViewedForRecordWithUniqueId:tryAgain:";
			public static readonly Selector metadataJobType = "metadataJobType";
			public static readonly Selector removeMetadataForRecordWithUniqueId_ = "removeMetadataForRecordWithUniqueId:";
			public static readonly Selector stamp = "stamp";
			public static readonly Selector unlockInfo = "unlockInfo";
			public static readonly Selector validateAllMetaDataForceRebuild_ = "validateAllMetaDataForceRebuild:";
			public static readonly Selector writeMetadata_forRecordWithUniqueId_ = "writeMetadata:forRecordWithUniqueId:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABMetadataOperationController : IEquatable<ABMetadataOperationController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMetadataOperationController;
		public static implicit operator IntPtr( ABMetadataOperationController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMetadataOperationController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMetadataOperationController ) ) return false; 
			return Handle == ( ( ABMetadataOperationController )value ).Handle;
		}
		public bool Equals( ABMetadataOperationController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMetadataOperationController value1, ABMetadataOperationController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMetadataOperationController value1, ABMetadataOperationController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMetadataOperationController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMetadataOperationController alloc() {
			return new ABMetadataOperationController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void addressBookWillDealloc_( NObjective.RuntimeObject dealloc ) {
			RuntimeObject ___occuredException;
			NativeMethods.addressBookWillDealloc_( ClassHandle, CachedSelectors.addressBookWillDealloc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dealloc );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject operationQueue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.operationQueue( ClassHandle, CachedSelectors.operationQueue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sharedInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedInstance( ClassHandle, CachedSelectors.sharedInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sharedInstanceForAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedInstanceForAddressBook_( ClassHandle, CachedSelectors.sharedInstanceForAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addOperation_( NObjective.RuntimeObject operation ) {
			RuntimeObject ___occuredException;
			NativeMethods.addOperation_( Handle, CachedSelectors.addOperation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), operation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addUniqueIdsMissingFromSet_toArray_forClass_prefetch_inAddressBook_( NObjective.RuntimeObject @set, NObjective.RuntimeObject toArray, NObjective.RuntimeClass forClass, char prefetch, NObjective.RuntimeObject inAddressBook ) {
			RuntimeObject ___occuredException;
			NativeMethods.addUniqueIdsMissingFromSet_toArray_forClass_prefetch_inAddressBook_( Handle, CachedSelectors.addUniqueIdsMissingFromSet_toArray_forClass_prefetch_inAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), @set, toArray, forClass, prefetch, inAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void completed_forType_( NObjective.RuntimeObject completed, int forType ) {
			RuntimeObject ___occuredException;
			NativeMethods.completed_forType_( Handle, CachedSelectors.completed_forType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), completed, forType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject currentChecksumForDirectory_( NObjective.RuntimeObject directory ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentChecksumForDirectory_( Handle, CachedSelectors.currentChecksumForDirectory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasRecordsInMetaDataCache() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasRecordsInMetaDataCache( Handle, CachedSelectors.hasRecordsInMetaDataCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject infoForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoForKey_( Handle, CachedSelectors.infoForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAddressBook_( Handle, CachedSelectors.initWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isRunning() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isRunning( Handle, CachedSelectors.isRunning, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSuspended() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSuspended( Handle, CachedSelectors.isSuspended, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject keyForType_( int type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyForType_( Handle, CachedSelectors.keyForType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int lastChangeCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastChangeCount( Handle, CachedSelectors.lastChangeCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char lockInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockInfo( Handle, CachedSelectors.lockInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void manageMetadataForRecords_action_( NObjective.RuntimeObject records, int action ) {
			RuntimeObject ___occuredException;
			NativeMethods.manageMetadataForRecords_action_( Handle, CachedSelectors.manageMetadataForRecords_action_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), records, action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void markPersonAsViewed_( NObjective.RuntimeObject viewed ) {
			RuntimeObject ___occuredException;
			NativeMethods.markPersonAsViewed_( Handle, CachedSelectors.markPersonAsViewed_, out ___occuredException, sizeof( NObjective.RuntimeObject ), viewed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void markPersonAsViewed_secondTry_( NObjective.RuntimeObject viewed, char secondTry ) {
			RuntimeObject ___occuredException;
			NativeMethods.markPersonAsViewed_secondTry_( Handle, CachedSelectors.markPersonAsViewed_secondTry_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), viewed, secondTry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void markViewedForRecordWithUniqueId_tryAgain_( NObjective.RuntimeObject id, char tryAgain ) {
			RuntimeObject ___occuredException;
			NativeMethods.markViewedForRecordWithUniqueId_tryAgain_( Handle, CachedSelectors.markViewedForRecordWithUniqueId_tryAgain_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), id, tryAgain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void mdlog_action_( NObjective.RuntimeObject mdlog, NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.mdlog_action_( Handle, CachedSelectors.mdlog_action_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), mdlog, action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject metaDataCacheDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.metaDataCacheDirectory( Handle, CachedSelectors.metaDataCacheDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject metaDataCachePathForUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.metaDataCachePathForUID_( Handle, CachedSelectors.metaDataCachePathForUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject metaDataLockFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.metaDataLockFile( Handle, CachedSelectors.metaDataLockFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_RestoreFromMetaData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RestoreFromMetaData( Handle, CachedSelectors.nts_RestoreFromMetaData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void planToComplete_forType_( NObjective.RuntimeObject complete, int forType ) {
			RuntimeObject ___occuredException;
			NativeMethods.planToComplete_forType_( Handle, CachedSelectors.planToComplete_forType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), complete, forType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void postpone() {
			RuntimeObject ___occuredException;
			NativeMethods.postpone( Handle, CachedSelectors.postpone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void processRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			NativeMethods.processRecords_( Handle, CachedSelectors.processRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeInfoForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeInfoForKey_( Handle, CachedSelectors.removeInfoForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeMetadataForRecordWithUniqueId_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeMetadataForRecordWithUniqueId_( Handle, CachedSelectors.removeMetadataForRecordWithUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reportDelinquentUIDs_forJobType_( NObjective.RuntimeObject ds, int forJobType ) {
			RuntimeObject ___occuredException;
			NativeMethods.reportDelinquentUIDs_forJobType_( Handle, CachedSelectors.reportDelinquentUIDs_forJobType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), ds, forJobType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetMetaData() {
			RuntimeObject ___occuredException;
			NativeMethods.resetMetaData( Handle, CachedSelectors.resetMetaData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char restoreFromMetaData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.restoreFromMetaData( Handle, CachedSelectors.restoreFromMetaData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAddressBook_( Handle, CachedSelectors.setAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setInfo_forKey_( NObjective.RuntimeObject info, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setInfo_forKey_( Handle, CachedSelectors.setInfo_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), info, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLastChangeCount_( int count ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLastChangeCount_( Handle, CachedSelectors.setLastChangeCount_, out ___occuredException, sizeof( int ), count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSuspended_( char suspended ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSuspended_( Handle, CachedSelectors.setSuspended_, out ___occuredException, sizeof( char ), suspended );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stamp() {
			RuntimeObject ___occuredException;
			NativeMethods.stamp( Handle, CachedSelectors.stamp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stateOfTheMetadata() {
			RuntimeObject ___occuredException;
			NativeMethods.stateOfTheMetadata( Handle, CachedSelectors.stateOfTheMetadata, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopImmediately() {
			RuntimeObject ___occuredException;
			NativeMethods.stopImmediately( Handle, CachedSelectors.stopImmediately, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unlockInfo() {
			RuntimeObject ___occuredException;
			NativeMethods.unlockInfo( Handle, CachedSelectors.unlockInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void validateAllMetaDataForceRebuild_( char rebuild ) {
			RuntimeObject ___occuredException;
			NativeMethods.validateAllMetaDataForceRebuild_( Handle, CachedSelectors.validateAllMetaDataForceRebuild_, out ___occuredException, sizeof( char ), rebuild );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void validateMetaDataIfNeeded() {
			RuntimeObject ___occuredException;
			NativeMethods.validateMetaDataIfNeeded( Handle, CachedSelectors.validateMetaDataIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject viewedDateForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewedDateForPerson_( Handle, CachedSelectors.viewedDateForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void waitForThreadsToFinish() {
			RuntimeObject ___occuredException;
			NativeMethods.waitForThreadsToFinish( Handle, CachedSelectors.waitForThreadsToFinish, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void wipeMetaDataDirectory() {
			RuntimeObject ___occuredException;
			NativeMethods.wipeMetaDataDirectory( Handle, CachedSelectors.wipeMetaDataDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeMetadata_forRecordWithUniqueId_( NObjective.RuntimeObject metadata, NObjective.RuntimeObject forRecordWithUniqueId ) {
			RuntimeObject ___occuredException;
			NativeMethods.writeMetadata_forRecordWithUniqueId_( Handle, CachedSelectors.writeMetadata_forRecordWithUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), metadata, forRecordWithUniqueId );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeOutInfo() {
			RuntimeObject ___occuredException;
			NativeMethods.writeOutInfo( Handle, CachedSelectors.writeOutInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addOperation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject operation );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addressBookWillDealloc_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dealloc );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addUniqueIdsMissingFromSet_toArray_forClass_prefetch_inAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @set, NObjective.RuntimeObject toArray, NObjective.RuntimeClass forClass, char prefetch, NObjective.RuntimeObject inAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void completed_forType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject completed, int forType );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr currentChecksumForDirectory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directory );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasRecordsInMetaDataCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr infoForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isRunning( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isSuspended( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr keyForType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int lastChangeCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char lockInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void manageMetadataForRecords_action_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records, int action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markPersonAsViewed_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject viewed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markPersonAsViewed_secondTry_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject viewed, char secondTry );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markViewedForRecordWithUniqueId_tryAgain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, char tryAgain );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void mdlog_action_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mdlog, NObjective.RuntimeObject action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr metaDataCacheDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr metaDataCachePathForUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr metaDataLockFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_RestoreFromMetaData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr operationQueue( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void planToComplete_forType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject complete, int forType );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void postpone( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void processRecords_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeInfoForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeMetadataForRecordWithUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reportDelinquentUIDs_forJobType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ds, int forJobType );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetMetaData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char restoreFromMetaData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setInfo_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setLastChangeCount_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int count );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSuspended_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char suspended );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedInstance( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedInstanceForAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void stamp( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void stateOfTheMetadata( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void stopImmediately( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void unlockInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void validateAllMetaDataForceRebuild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char rebuild );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void validateMetaDataIfNeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr viewedDateForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void waitForThreadsToFinish( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void wipeMetaDataDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void writeMetadata_forRecordWithUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject metadata, NObjective.RuntimeObject forRecordWithUniqueId );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void writeOutInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addOperation_ = "addOperation:";
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector addressBookWillDealloc_ = "addressBookWillDealloc:";
			public static readonly Selector addUniqueIdsMissingFromSet_toArray_forClass_prefetch_inAddressBook_ = "addUniqueIdsMissingFromSet:toArray:forClass:prefetch:inAddressBook:";
			public static readonly Selector completed_forType_ = "completed:forType:";
			public static readonly Selector currentChecksumForDirectory_ = "currentChecksumForDirectory:";
			public static readonly Selector hasRecordsInMetaDataCache = "hasRecordsInMetaDataCache";
			public static readonly Selector infoForKey_ = "infoForKey:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector initWithAddressBook_ = "initWithAddressBook:";
			public static readonly Selector isRunning = "isRunning";
			public static readonly Selector isSuspended = "isSuspended";
			public static readonly Selector keyForType_ = "keyForType:";
			public static readonly Selector lastChangeCount = "lastChangeCount";
			public static readonly Selector lockInfo = "lockInfo";
			public static readonly Selector manageMetadataForRecords_action_ = "manageMetadataForRecords:action:";
			public static readonly Selector markPersonAsViewed_ = "markPersonAsViewed:";
			public static readonly Selector markPersonAsViewed_secondTry_ = "markPersonAsViewed:secondTry:";
			public static readonly Selector markViewedForRecordWithUniqueId_tryAgain_ = "markViewedForRecordWithUniqueId:tryAgain:";
			public static readonly Selector mdlog_action_ = "mdlog:action:";
			public static readonly Selector metaDataCacheDirectory = "metaDataCacheDirectory";
			public static readonly Selector metaDataCachePathForUID_ = "metaDataCachePathForUID:";
			public static readonly Selector metaDataLockFile = "metaDataLockFile";
			public static readonly Selector nts_RestoreFromMetaData = "nts_RestoreFromMetaData";
			public static readonly Selector operationQueue = "operationQueue";
			public static readonly Selector planToComplete_forType_ = "planToComplete:forType:";
			public static readonly Selector postpone = "postpone";
			public static readonly Selector processRecords_ = "processRecords:";
			public static readonly Selector removeInfoForKey_ = "removeInfoForKey:";
			public static readonly Selector removeMetadataForRecordWithUniqueId_ = "removeMetadataForRecordWithUniqueId:";
			public static readonly Selector reportDelinquentUIDs_forJobType_ = "reportDelinquentUIDs:forJobType:";
			public static readonly Selector resetMetaData = "resetMetaData";
			public static readonly Selector restoreFromMetaData = "restoreFromMetaData";
			public static readonly Selector setAddressBook_ = "setAddressBook:";
			public static readonly Selector setInfo_forKey_ = "setInfo:forKey:";
			public static readonly Selector setLastChangeCount_ = "setLastChangeCount:";
			public static readonly Selector setSuspended_ = "setSuspended:";
			public static readonly Selector sharedInstance = "sharedInstance";
			public static readonly Selector sharedInstanceForAddressBook_ = "sharedInstanceForAddressBook:";
			public static readonly Selector stamp = "stamp";
			public static readonly Selector stateOfTheMetadata = "stateOfTheMetadata";
			public static readonly Selector stopImmediately = "stopImmediately";
			public static readonly Selector unlockInfo = "unlockInfo";
			public static readonly Selector validateAllMetaDataForceRebuild_ = "validateAllMetaDataForceRebuild:";
			public static readonly Selector validateMetaDataIfNeeded = "validateMetaDataIfNeeded";
			public static readonly Selector viewedDateForPerson_ = "viewedDateForPerson:";
			public static readonly Selector waitForThreadsToFinish = "waitForThreadsToFinish";
			public static readonly Selector wipeMetaDataDirectory = "wipeMetaDataDirectory";
			public static readonly Selector writeMetadata_forRecordWithUniqueId_ = "writeMetadata:forRecordWithUniqueId:";
			public static readonly Selector writeOutInfo = "writeOutInfo";
		}
	}
	[ProxyBaseClass(typeof( ABMetadataOperation ))]
	public struct ABMetadataValidateOperation : IEquatable<ABMetadataValidateOperation> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMetadataValidateOperation;
		public static implicit operator IntPtr( ABMetadataValidateOperation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMetadataValidateOperation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMetadataValidateOperation ) ) return false; 
			return Handle == ( ( ABMetadataValidateOperation )value ).Handle;
		}
		public bool Equals( ABMetadataValidateOperation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMetadataValidateOperation value1, ABMetadataValidateOperation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMetadataValidateOperation value1, ABMetadataValidateOperation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMetadataValidateOperation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMetadataValidateOperation alloc() {
			return new ABMetadataValidateOperation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithMetadataManager_andForceRebuild_( NObjective.RuntimeObject manager, char andForceRebuild ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMetadataManager_andForceRebuild_( Handle, CachedSelectors.initWithMetadataManager_andForceRebuild_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), manager, andForceRebuild );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithMetadataManager_andForceRebuild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, char andForceRebuild );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithMetadataManager_andForceRebuild_ = "initWithMetadataManager:andForceRebuild:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABMetaKitDatabaseConverter : IEquatable<ABMetaKitDatabaseConverter> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMetaKitDatabaseConverter;
		public static implicit operator IntPtr( ABMetaKitDatabaseConverter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMetaKitDatabaseConverter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMetaKitDatabaseConverter ) ) return false; 
			return Handle == ( ( ABMetaKitDatabaseConverter )value ).Handle;
		}
		public bool Equals( ABMetaKitDatabaseConverter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMetaKitDatabaseConverter value1, ABMetaKitDatabaseConverter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMetaKitDatabaseConverter value1, ABMetaKitDatabaseConverter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMetaKitDatabaseConverter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMetaKitDatabaseConverter alloc() {
			return new ABMetaKitDatabaseConverter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject converterForDatabaseAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.converterForDatabaseAtPath_( ClassHandle, CachedSelectors.converterForDatabaseAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addDistributionListEntryToGroup_forMember_distributionListProperty_multiValue_( NObjective.RuntimeObject @group, NObjective.RuntimeObject forMember, NObjective.RuntimeObject distributionListProperty, NObjective.RuntimeObject multiValue ) {
			RuntimeObject ___occuredException;
			NativeMethods.addDistributionListEntryToGroup_forMember_distributionListProperty_multiValue_( Handle, CachedSelectors.addDistributionListEntryToGroup_forMember_distributionListProperty_multiValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, forMember, distributionListProperty, multiValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cacheSchema() {
			RuntimeObject ___occuredException;
			NativeMethods.cacheSchema( Handle, CachedSelectors.cacheSchema, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char connect() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connect( Handle, CachedSelectors.connect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject createCleanCopyOfPropertiesDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createCleanCopyOfPropertiesDictionary_( Handle, CachedSelectors.createCleanCopyOfPropertiesDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char disconnect() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disconnect( Handle, CachedSelectors.disconnect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject groupPropertyTypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupPropertyTypes( Handle, CachedSelectors.groupPropertyTypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject groups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groups( Handle, CachedSelectors.groups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject info() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.info( Handle, CachedSelectors.info, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithDatabaseAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDatabaseAtPath_( Handle, CachedSelectors.initWithDatabaseAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject logs() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.logs( Handle, CachedSelectors.logs, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mailRecents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mailRecents( Handle, CachedSelectors.mailRecents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void mergeGroupContentsTableIntoGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeGroupContentsTableIntoGroups_( Handle, CachedSelectors.mergeGroupContentsTableIntoGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_Connect() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Connect( Handle, CachedSelectors.nts_Connect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_Disconnect() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Disconnect( Handle, CachedSelectors.nts_Disconnect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject people() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.people( Handle, CachedSelectors.people, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject peoplePropertyTypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peoplePropertyTypes( Handle, CachedSelectors.peoplePropertyTypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject smartGroupPropertyTypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smartGroupPropertyTypes( Handle, CachedSelectors.smartGroupPropertyTypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject smartGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smartGroups( Handle, CachedSelectors.smartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int typeOfProperty_forTable_( NObjective.RuntimeObject property, NObjective.RuntimeObject forTable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeOfProperty_forTable_( Handle, CachedSelectors.typeOfProperty_forTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, forTable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject valueForProperty_atRow_tableName_recordUniqueId_( NObjective.RuntimeObject property, uint atRow, NObjective.RuntimeObject tableName, NObjective.RuntimeObject recordUniqueId ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForProperty_atRow_tableName_recordUniqueId_( Handle, CachedSelectors.valueForProperty_atRow_tableName_recordUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, atRow, tableName, recordUniqueId );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addDistributionListEntryToGroup_forMember_distributionListProperty_multiValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject forMember, NObjective.RuntimeObject distributionListProperty, NObjective.RuntimeObject multiValue );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cacheSchema( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char connect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr converterForDatabaseAtPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr createCleanCopyOfPropertiesDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char disconnect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groupPropertyTypes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr info( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithDatabaseAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr logs( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr mailRecents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void mergeGroupContentsTableIntoGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_Connect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_Disconnect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr people( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr peoplePropertyTypes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr smartGroupPropertyTypes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr smartGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int typeOfProperty_forTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject forTable );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueForProperty_atRow_tableName_recordUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, uint atRow, NObjective.RuntimeObject tableName, NObjective.RuntimeObject recordUniqueId );
		}
		static internal class CachedSelectors {
			public static readonly Selector addDistributionListEntryToGroup_forMember_distributionListProperty_multiValue_ = "addDistributionListEntryToGroup:forMember:distributionListProperty:multiValue:";
			public static readonly Selector cacheSchema = "cacheSchema";
			public static readonly Selector connect = "connect";
			public static readonly Selector converterForDatabaseAtPath_ = "converterForDatabaseAtPath:";
			public static readonly Selector createCleanCopyOfPropertiesDictionary_ = "createCleanCopyOfPropertiesDictionary:";
			public static readonly Selector disconnect = "disconnect";
			public static readonly Selector groupPropertyTypes = "groupPropertyTypes";
			public static readonly Selector groups = "groups";
			public static readonly Selector info = "info";
			public static readonly Selector initWithDatabaseAtPath_ = "initWithDatabaseAtPath:";
			public static readonly Selector logs = "logs";
			public static readonly Selector mailRecents = "mailRecents";
			public static readonly Selector mergeGroupContentsTableIntoGroups_ = "mergeGroupContentsTableIntoGroups:";
			public static readonly Selector nts_Connect = "nts_Connect";
			public static readonly Selector nts_Disconnect = "nts_Disconnect";
			public static readonly Selector people = "people";
			public static readonly Selector peoplePropertyTypes = "peoplePropertyTypes";
			public static readonly Selector smartGroupPropertyTypes = "smartGroupPropertyTypes";
			public static readonly Selector smartGroups = "smartGroups";
			public static readonly Selector typeOfProperty_forTable_ = "typeOfProperty:forTable:";
			public static readonly Selector valueForProperty_atRow_tableName_recordUniqueId_ = "valueForProperty:atRow:tableName:recordUniqueId:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABModel : IEquatable<ABModel> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABModel;
		public static implicit operator IntPtr( ABModel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABModel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABModel ) ) return false; 
			return Handle == ( ( ABModel )value ).Handle;
		}
		public bool Equals( ABModel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABModel value1, ABModel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABModel value1, ABModel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABModel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABModel alloc() {
			return new ABModel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedGroups_( Handle, CachedSelectors.addedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedMembers_( Handle, CachedSelectors.addedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addedMembers_toGroup_( NObjective.RuntimeObject members, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedMembers_toGroup_( Handle, CachedSelectors.addedMembers_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addToDirectoryResults_( NObjective.RuntimeObject results ) {
			RuntimeObject ___occuredException;
			NativeMethods.addToDirectoryResults_( Handle, CachedSelectors.addToDirectoryResults_, out ___occuredException, sizeof( NObjective.RuntimeObject ), results );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allUniqueRecordsIn_( NObjective.RuntimeObject @in ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allUniqueRecordsIn_( Handle, CachedSelectors.allUniqueRecordsIn_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @in );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void changedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.changedGroups_( Handle, CachedSelectors.changedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.changedMembers_( Handle, CachedSelectors.changedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearDirectoriesSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.clearDirectoriesSelection( Handle, CachedSelectors.clearDirectoriesSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearDirectoryResults() {
			RuntimeObject ___occuredException;
			NativeMethods.clearDirectoryResults( Handle, CachedSelectors.clearDirectoryResults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearDirectoryResultsSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.clearDirectoryResultsSelection( Handle, CachedSelectors.clearDirectoryResultsSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearGroupsSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.clearGroupsSelection( Handle, CachedSelectors.clearGroupsSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearMembersSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.clearMembersSelection( Handle, CachedSelectors.clearMembersSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deletedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletedGroups_( Handle, CachedSelectors.deletedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deletedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletedMembers_( Handle, CachedSelectors.deletedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectDirectoryResultRow_subrow_( int row, int subrow ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectDirectoryResultRow_subrow_( Handle, CachedSelectors.deselectDirectoryResultRow_subrow_, out ___occuredException, sizeof( int ) + sizeof( int ), row, subrow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectMemberRow_subrow_( int row, int subrow ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectMemberRow_subrow_( Handle, CachedSelectors.deselectMemberRow_subrow_, out ___occuredException, sizeof( int ) + sizeof( int ), row, subrow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject directories() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directories( Handle, CachedSelectors.directories, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryAtIndex_( Handle, CachedSelectors.directoryAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryResultAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryResultAtIndex_( Handle, CachedSelectors.directoryResultAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryResults() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryResults( Handle, CachedSelectors.directoryResults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryResultsSubrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryResultsSubrows( Handle, CachedSelectors.directoryResultsSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedGroups( Handle, CachedSelectors.displayedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedMembers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedMembers( Handle, CachedSelectors.displayedMembers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedMembersSubrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedMembersSubrows( Handle, CachedSelectors.displayedMembersSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void fillSubrowList_forDisplayedRecords_withDelegate_( NObjective.RuntimeObject list, NObjective.RuntimeObject forDisplayedRecords, NObjective.RuntimeObject withDelegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.fillSubrowList_forDisplayedRecords_withDelegate_( Handle, CachedSelectors.fillSubrowList_forDisplayedRecords_withDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), list, forDisplayedRecords, withDelegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject groupList_includeSpecial_all_subscriptions_readOnly_smart_( NObjective.RuntimeObject list, char includeSpecial, char all, char subscriptions, char readOnly, char smart ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupList_includeSpecial_all_subscriptions_readOnly_smart_( Handle, CachedSelectors.groupList_includeSpecial_all_subscriptions_readOnly_smart_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), list, includeSpecial, all, subscriptions, readOnly, smart
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject groupListIncludeSpecial_all_subscriptions_readOnly_smart_( char special, char all, char subscriptions, char readOnly, char smart ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupListIncludeSpecial_all_subscriptions_readOnly_smart_( Handle, CachedSelectors.groupListIncludeSpecial_all_subscriptions_readOnly_smart_, out ___occuredException, sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), special, all, subscriptions, readOnly, smart );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void groupSelectionChangedInPeabody_( NObjective.RuntimeObject peabody ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupSelectionChangedInPeabody_( Handle, CachedSelectors.groupSelectionChangedInPeabody_, out ___occuredException, sizeof( NObjective.RuntimeObject ), peabody );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void hideShowLastImportGroup_( char @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.hideShowLastImportGroup_( Handle, CachedSelectors.hideShowLastImportGroup_, out ___occuredException, sizeof( char ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint indexOfAllGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfAllGroup( Handle, CachedSelectors.indexOfAllGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint indexOfDirectoriesGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfDirectoriesGroup( Handle, CachedSelectors.indexOfDirectoriesGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint indexOfDirectory_( NObjective.RuntimeObject directory ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfDirectory_( Handle, CachedSelectors.indexOfDirectory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint indexOfDirectoryResult_( NObjective.RuntimeObject result ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfDirectoryResult_( Handle, CachedSelectors.indexOfDirectoryResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ), result );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint indexOfGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfGroup_( Handle, CachedSelectors.indexOfGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint indexOfIdentityGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfIdentityGroups( Handle, CachedSelectors.indexOfIdentityGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint indexOfLastImportGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfLastImportGroup( Handle, CachedSelectors.indexOfLastImportGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint indexOfLastSpecialGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfLastSpecialGroup( Handle, CachedSelectors.indexOfLastSpecialGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint indexOfMember_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfMember_( Handle, CachedSelectors.indexOfMember_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public uint indexOfMember_withSortingOrder_( NObjective.RuntimeObject member, uint withSortingOrder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfMember_withSortingOrder_( Handle, CachedSelectors.indexOfMember_withSortingOrder_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), member, withSortingOrder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public NObjective.RuntimeObject initWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUIController_( Handle, CachedSelectors.initWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void insertIdentityGroupsInDisplayedGroups() {
			RuntimeObject ___occuredException;
			NativeMethods.insertIdentityGroupsInDisplayedGroups( Handle, CachedSelectors.insertIdentityGroupsInDisplayedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint insertionIndexForGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertionIndexForGroup_( Handle, CachedSelectors.insertionIndexForGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public NObjective.RuntimeObject intersectGroupMembers_withSearchResult_( NObjective.RuntimeObject members, NObjective.RuntimeObject withSearchResult ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.intersectGroupMembers_withSearchResult_( Handle, CachedSelectors.intersectGroupMembers_withSearchResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, withSearchResult );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void invalidateDisplayedMembersList() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateDisplayedMembersList( Handle, CachedSelectors.invalidateDisplayedMembersList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void invalidateDisplayedMembersListAndNotify_( char notify ) {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateDisplayedMembersListAndNotify_( Handle, CachedSelectors.invalidateDisplayedMembersListAndNotify_, out ___occuredException, sizeof( char ), notify );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isDirectoryGroupSelected() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDirectoryGroupSelected( Handle, CachedSelectors.isDirectoryGroupSelected, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isInFrontWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isInFrontWindow( Handle, CachedSelectors.isInFrontWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isLastImportGroupVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLastImportGroupVisible( Handle, CachedSelectors.isLastImportGroupVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSpecialGroupSelected() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSpecialGroupSelected( Handle, CachedSelectors.isSpecialGroupSelected, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject lastDirectoriesSearchString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastDirectoriesSearchString( Handle, CachedSelectors.lastDirectoriesSearchString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void LDAPConfigChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.LDAPConfigChanged_( Handle, CachedSelectors.LDAPConfigChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject memberAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.memberAtIndex_( Handle, CachedSelectors.memberAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void memberSelectionChangedInPeabody_( NObjective.RuntimeObject peabody ) {
			RuntimeObject ___occuredException;
			NativeMethods.memberSelectionChangedInPeabody_( Handle, CachedSelectors.memberSelectionChangedInPeabody_, out ___occuredException, sizeof( NObjective.RuntimeObject ), peabody );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteDirectoriesListChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteDirectoriesListChanged( Handle, CachedSelectors.noteDirectoriesListChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteDirectoriesSelectionChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteDirectoriesSelectionChanged( Handle, CachedSelectors.noteDirectoriesSelectionChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteDirectoryResultsChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteDirectoryResultsChanged( Handle, CachedSelectors.noteDirectoryResultsChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteDirectoryResultsSelectionChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteDirectoryResultsSelectionChanged( Handle, CachedSelectors.noteDirectoryResultsSelectionChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteGroupsListChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteGroupsListChanged( Handle, CachedSelectors.noteGroupsListChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteGroupsSelectionChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteGroupsSelectionChanged( Handle, CachedSelectors.noteGroupsSelectionChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteMembersListChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteMembersListChanged( Handle, CachedSelectors.noteMembersListChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteMembersSelectionChanged_( char changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.noteMembersSelectionChanged_( Handle, CachedSelectors.noteMembersSelectionChanged_, out ___occuredException, sizeof( char ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int peopleOrCompaniesSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peopleOrCompaniesSelection( Handle, CachedSelectors.peopleOrCompaniesSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void reloadAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.reloadAll_( Handle, CachedSelectors.reloadAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reloadGroups() {
			RuntimeObject ___occuredException;
			NativeMethods.reloadGroups( Handle, CachedSelectors.reloadGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reloadGroupsMaintainingSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.reloadGroupsMaintainingSelection_( Handle, CachedSelectors.reloadGroupsMaintainingSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reloadMembers() {
			RuntimeObject ___occuredException;
			NativeMethods.reloadMembers( Handle, CachedSelectors.reloadMembers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removedMembers_fromGroup_( NObjective.RuntimeObject members, NObjective.RuntimeObject fromGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.removedMembers_fromGroup_( Handle, CachedSelectors.removedMembers_fromGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, fromGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetDirectoryResultsSubrows() {
			RuntimeObject ___occuredException;
			NativeMethods.resetDirectoryResultsSubrows( Handle, CachedSelectors.resetDirectoryResultsSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetDisplayedMemberSubrows() {
			RuntimeObject ___occuredException;
			NativeMethods.resetDisplayedMemberSubrows( Handle, CachedSelectors.resetDisplayedMemberSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void searchIndexRebuilt_( NObjective.RuntimeObject rebuilt ) {
			RuntimeObject ___occuredException;
			NativeMethods.searchIndexRebuilt_( Handle, CachedSelectors.searchIndexRebuilt_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rebuilt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectDirectoryResultRow_subrow_byExtendingSelection_( int row, int subrow, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectDirectoryResultRow_subrow_byExtendingSelection_( Handle, CachedSelectors.selectDirectoryResultRow_subrow_byExtendingSelection_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( char ), row, subrow, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject selectedDirectories() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedDirectories( Handle, CachedSelectors.selectedDirectories, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedDirectoryResult() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedDirectoryResult( Handle, CachedSelectors.selectedDirectoryResult, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedDirectoryResults() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedDirectoryResults( Handle, CachedSelectors.selectedDirectoryResults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedDirectoryResultsSubrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedDirectoryResultsSubrows( Handle, CachedSelectors.selectedDirectoryResultsSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroup( Handle, CachedSelectors.selectedGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedGroupIds() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroupIds( Handle, CachedSelectors.selectedGroupIds, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroups( Handle, CachedSelectors.selectedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedMember() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedMember( Handle, CachedSelectors.selectedMember, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedMemberIds() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedMemberIds( Handle, CachedSelectors.selectedMemberIds, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedMembers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedMembers( Handle, CachedSelectors.selectedMembers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedMembersSubrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedMembersSubrows( Handle, CachedSelectors.selectedMembersSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int selectionContainsSwappedNameEntries() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionContainsSwappedNameEntries( Handle, CachedSelectors.selectionContainsSwappedNameEntries, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectMemberRow_subrow_byExtendingSelection_( int row, int subrow, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectMemberRow_subrow_byExtendingSelection_( Handle, CachedSelectors.selectMemberRow_subrow_byExtendingSelection_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( char ), row, subrow, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAddressBook_( Handle, CachedSelectors.setAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDirectoriesSubrowDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDirectoriesSubrowDelegate_( Handle, CachedSelectors.setDirectoriesSubrowDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIdentityGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIdentityGroups_( Handle, CachedSelectors.setIdentityGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMembersDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMembersDelegate_( Handle, CachedSelectors.setMembersDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMembersSubrowDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMembersSubrowDelegate_( Handle, CachedSelectors.setMembersSubrowDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedDirectories_( NObjective.RuntimeObject directories ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedDirectories_( Handle, CachedSelectors.setSelectedDirectories_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directories );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedDirectoryResult_( NObjective.RuntimeObject result ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedDirectoryResult_( Handle, CachedSelectors.setSelectedDirectoryResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ), result );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedDirectoryResults_( NObjective.RuntimeObject results ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedDirectoryResults_( Handle, CachedSelectors.setSelectedDirectoryResults_, out ___occuredException, sizeof( NObjective.RuntimeObject ), results );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedGroup_( Handle, CachedSelectors.setSelectedGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedGroups_( Handle, CachedSelectors.setSelectedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedGroups2_( NObjective.RuntimeObject groups2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedGroups2_( Handle, CachedSelectors.setSelectedGroups2_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedGroupsFromModel_( NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedGroupsFromModel_( Handle, CachedSelectors.setSelectedGroupsFromModel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedMember_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedMember_( Handle, CachedSelectors.setSelectedMember_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedMembers_( Handle, CachedSelectors.setSelectedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedMembersFromModel_( NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedMembersFromModel_( Handle, CachedSelectors.setSelectedMembersFromModel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject uniqueMembersInGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueMembersInGroups_( Handle, CachedSelectors.uniqueMembersInGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject uniqueMembersInSelectedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueMembersInSelectedGroups( Handle, CachedSelectors.uniqueMembersInSelectedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void updateEditButton() {
			RuntimeObject ___occuredException;
			NativeMethods.updateEditButton( Handle, CachedSelectors.updateEditButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addedMembers_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject toGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addToDirectoryResults_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject results );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allUniqueRecordsIn_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @in );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void changedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearDirectoriesSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearDirectoryResults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearDirectoryResultsSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearGroupsSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearMembersSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deletedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deletedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deselectDirectoryResultRow_subrow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deselectMemberRow_subrow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directories( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryResultAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryResults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryResultsSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayedMembers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayedMembersSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void fillSubrowList_forDisplayedRecords_withDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list, NObjective.RuntimeObject forDisplayedRecords, NObjective.RuntimeObject withDelegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groupList_includeSpecial_all_subscriptions_readOnly_smart_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list, char includeSpecial, char all, char subscriptions, char readOnly, char smart
			 );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groupListIncludeSpecial_all_subscriptions_readOnly_smart_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char special, char all, char subscriptions, char readOnly, char smart );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void groupSelectionChangedInPeabody_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject peabody );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void hideShowLastImportGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfAllGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfDirectoriesGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfDirectory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directory );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfDirectoryResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject result );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfIdentityGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfLastImportGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfLastSpecialGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfMember_withSortingOrder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, uint withSortingOrder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void insertIdentityGroupsInDisplayedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint insertionIndexForGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr intersectGroupMembers_withSearchResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject withSearchResult );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void invalidateDisplayedMembersList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void invalidateDisplayedMembersListAndNotify_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char notify );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isDirectoryGroupSelected( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isInFrontWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isLastImportGroupVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isSpecialGroupSelected( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr lastDirectoriesSearchString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void LDAPConfigChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr memberAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void memberSelectionChangedInPeabody_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject peabody );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void noteDirectoriesListChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void noteDirectoriesSelectionChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void noteDirectoryResultsChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void noteDirectoryResultsSelectionChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void noteGroupsListChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void noteGroupsSelectionChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void noteMembersListChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void noteMembersSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int peopleOrCompaniesSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reloadAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reloadGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reloadGroupsMaintainingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reloadMembers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removedMembers_fromGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject fromGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetDirectoryResultsSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetDisplayedMemberSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void searchIndexRebuilt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rebuilt );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectDirectoryResultRow_subrow_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow, char byExtendingSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedDirectories( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedDirectoryResult( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedDirectoryResults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedDirectoryResultsSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedGroupIds( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedMember( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedMemberIds( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedMembers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedMembersSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int selectionContainsSwappedNameEntries( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectMemberRow_subrow_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow, char byExtendingSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDirectoriesSubrowDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIdentityGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMembersDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMembersSubrowDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedDirectories_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directories );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedDirectoryResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject result );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedDirectoryResults_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject results );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedGroups2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups2 );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedGroupsFromModel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedMembersFromModel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uniqueMembersInGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uniqueMembersInSelectedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateEditButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addedGroups_ = "addedGroups:";
			public static readonly Selector addedMembers_ = "addedMembers:";
			public static readonly Selector addedMembers_toGroup_ = "addedMembers:toGroup:";
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector addToDirectoryResults_ = "addToDirectoryResults:";
			public static readonly Selector allUniqueRecordsIn_ = "allUniqueRecordsIn:";
			public static readonly Selector changedGroups_ = "changedGroups:";
			public static readonly Selector changedMembers_ = "changedMembers:";
			public static readonly Selector clearDirectoriesSelection = "clearDirectoriesSelection";
			public static readonly Selector clearDirectoryResults = "clearDirectoryResults";
			public static readonly Selector clearDirectoryResultsSelection = "clearDirectoryResultsSelection";
			public static readonly Selector clearGroupsSelection = "clearGroupsSelection";
			public static readonly Selector clearMembersSelection = "clearMembersSelection";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector deletedGroups_ = "deletedGroups:";
			public static readonly Selector deletedMembers_ = "deletedMembers:";
			public static readonly Selector deselectDirectoryResultRow_subrow_ = "deselectDirectoryResultRow:subrow:";
			public static readonly Selector deselectMemberRow_subrow_ = "deselectMemberRow:subrow:";
			public static readonly Selector directories = "directories";
			public static readonly Selector directoryAtIndex_ = "directoryAtIndex:";
			public static readonly Selector directoryResultAtIndex_ = "directoryResultAtIndex:";
			public static readonly Selector directoryResults = "directoryResults";
			public static readonly Selector directoryResultsSubrows = "directoryResultsSubrows";
			public static readonly Selector displayedGroups = "displayedGroups";
			public static readonly Selector displayedMembers = "displayedMembers";
			public static readonly Selector displayedMembersSubrows = "displayedMembersSubrows";
			public static readonly Selector fillSubrowList_forDisplayedRecords_withDelegate_ = "fillSubrowList:forDisplayedRecords:withDelegate:";
			public static readonly Selector groupList_includeSpecial_all_subscriptions_readOnly_smart_ = "groupList:includeSpecial:all:subscriptions:readOnly:smart:";
			public static readonly Selector groupListIncludeSpecial_all_subscriptions_readOnly_smart_ = "groupListIncludeSpecial:all:subscriptions:readOnly:smart:";
			public static readonly Selector groupSelectionChangedInPeabody_ = "groupSelectionChangedInPeabody:";
			public static readonly Selector hideShowLastImportGroup_ = "hideShowLastImportGroup:";
			public static readonly Selector indexOfAllGroup = "indexOfAllGroup";
			public static readonly Selector indexOfDirectoriesGroup = "indexOfDirectoriesGroup";
			public static readonly Selector indexOfDirectory_ = "indexOfDirectory:";
			public static readonly Selector indexOfDirectoryResult_ = "indexOfDirectoryResult:";
			public static readonly Selector indexOfGroup_ = "indexOfGroup:";
			public static readonly Selector indexOfIdentityGroups = "indexOfIdentityGroups";
			public static readonly Selector indexOfLastImportGroup = "indexOfLastImportGroup";
			public static readonly Selector indexOfLastSpecialGroup = "indexOfLastSpecialGroup";
			public static readonly Selector indexOfMember_ = "indexOfMember:";
			public static readonly Selector indexOfMember_withSortingOrder_ = "indexOfMember:withSortingOrder:";
			public static readonly Selector initWithUIController_ = "initWithUIController:";
			public static readonly Selector insertIdentityGroupsInDisplayedGroups = "insertIdentityGroupsInDisplayedGroups";
			public static readonly Selector insertionIndexForGroup_ = "insertionIndexForGroup:";
			public static readonly Selector intersectGroupMembers_withSearchResult_ = "intersectGroupMembers:withSearchResult:";
			public static readonly Selector invalidateDisplayedMembersList = "invalidateDisplayedMembersList";
			public static readonly Selector invalidateDisplayedMembersListAndNotify_ = "invalidateDisplayedMembersListAndNotify:";
			public static readonly Selector isDirectoryGroupSelected = "isDirectoryGroupSelected";
			public static readonly Selector isInFrontWindow = "isInFrontWindow";
			public static readonly Selector isLastImportGroupVisible = "isLastImportGroupVisible";
			public static readonly Selector isSpecialGroupSelected = "isSpecialGroupSelected";
			public static readonly Selector lastDirectoriesSearchString = "lastDirectoriesSearchString";
			public static readonly Selector LDAPConfigChanged_ = "LDAPConfigChanged:";
			public static readonly Selector memberAtIndex_ = "memberAtIndex:";
			public static readonly Selector memberSelectionChangedInPeabody_ = "memberSelectionChangedInPeabody:";
			public static readonly Selector noteDirectoriesListChanged = "noteDirectoriesListChanged";
			public static readonly Selector noteDirectoriesSelectionChanged = "noteDirectoriesSelectionChanged";
			public static readonly Selector noteDirectoryResultsChanged = "noteDirectoryResultsChanged";
			public static readonly Selector noteDirectoryResultsSelectionChanged = "noteDirectoryResultsSelectionChanged";
			public static readonly Selector noteGroupsListChanged = "noteGroupsListChanged";
			public static readonly Selector noteGroupsSelectionChanged = "noteGroupsSelectionChanged";
			public static readonly Selector noteMembersListChanged = "noteMembersListChanged";
			public static readonly Selector noteMembersSelectionChanged_ = "noteMembersSelectionChanged:";
			public static readonly Selector peopleOrCompaniesSelection = "peopleOrCompaniesSelection";
			public static readonly Selector reloadAll_ = "reloadAll:";
			public static readonly Selector reloadGroups = "reloadGroups";
			public static readonly Selector reloadGroupsMaintainingSelection_ = "reloadGroupsMaintainingSelection:";
			public static readonly Selector reloadMembers = "reloadMembers";
			public static readonly Selector removedMembers_fromGroup_ = "removedMembers:fromGroup:";
			public static readonly Selector resetDirectoryResultsSubrows = "resetDirectoryResultsSubrows";
			public static readonly Selector resetDisplayedMemberSubrows = "resetDisplayedMemberSubrows";
			public static readonly Selector searchIndexRebuilt_ = "searchIndexRebuilt:";
			public static readonly Selector selectDirectoryResultRow_subrow_byExtendingSelection_ = "selectDirectoryResultRow:subrow:byExtendingSelection:";
			public static readonly Selector selectedDirectories = "selectedDirectories";
			public static readonly Selector selectedDirectoryResult = "selectedDirectoryResult";
			public static readonly Selector selectedDirectoryResults = "selectedDirectoryResults";
			public static readonly Selector selectedDirectoryResultsSubrows = "selectedDirectoryResultsSubrows";
			public static readonly Selector selectedGroup = "selectedGroup";
			public static readonly Selector selectedGroupIds = "selectedGroupIds";
			public static readonly Selector selectedGroups = "selectedGroups";
			public static readonly Selector selectedMember = "selectedMember";
			public static readonly Selector selectedMemberIds = "selectedMemberIds";
			public static readonly Selector selectedMembers = "selectedMembers";
			public static readonly Selector selectedMembersSubrows = "selectedMembersSubrows";
			public static readonly Selector selectionContainsSwappedNameEntries = "selectionContainsSwappedNameEntries";
			public static readonly Selector selectMemberRow_subrow_byExtendingSelection_ = "selectMemberRow:subrow:byExtendingSelection:";
			public static readonly Selector setAddressBook_ = "setAddressBook:";
			public static readonly Selector setDirectoriesSubrowDelegate_ = "setDirectoriesSubrowDelegate:";
			public static readonly Selector setIdentityGroups_ = "setIdentityGroups:";
			public static readonly Selector setMembersDelegate_ = "setMembersDelegate:";
			public static readonly Selector setMembersSubrowDelegate_ = "setMembersSubrowDelegate:";
			public static readonly Selector setSelectedDirectories_ = "setSelectedDirectories:";
			public static readonly Selector setSelectedDirectoryResult_ = "setSelectedDirectoryResult:";
			public static readonly Selector setSelectedDirectoryResults_ = "setSelectedDirectoryResults:";
			public static readonly Selector setSelectedGroup_ = "setSelectedGroup:";
			public static readonly Selector setSelectedGroups_ = "setSelectedGroups:";
			public static readonly Selector setSelectedGroups2_ = "setSelectedGroups2:";
			public static readonly Selector setSelectedGroupsFromModel_ = "setSelectedGroupsFromModel:";
			public static readonly Selector setSelectedMember_ = "setSelectedMember:";
			public static readonly Selector setSelectedMembers_ = "setSelectedMembers:";
			public static readonly Selector setSelectedMembersFromModel_ = "setSelectedMembersFromModel:";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector uniqueMembersInGroups_ = "uniqueMembersInGroups:";
			public static readonly Selector uniqueMembersInSelectedGroups = "uniqueMembersInSelectedGroups";
			public static readonly Selector updateEditButton = "updateEditButton";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABMultiValue : IEquatable<ABMultiValue> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMultiValue;
		public static implicit operator IntPtr( ABMultiValue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMultiValue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMultiValue ) ) return false; 
			return Handle == ( ( ABMultiValue )value ).Handle;
		}
		public bool Equals( ABMultiValue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMultiValue value1, ABMultiValue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMultiValue value1, ABMultiValue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMultiValue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMultiValue alloc() {
			return new ABMultiValue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public string identifierAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifierAtIndex_( Handle, CachedSelectors.identifierAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint indexForIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.indexForIdentifier_( Handle, CachedSelectors.indexForIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public bool isEqual_compareIdentifiers_( NObjective.RuntimeObject equal, char compareIdentifiers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqual_compareIdentifiers_( Handle, CachedSelectors.isEqual_compareIdentifiers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), equal, compareIdentifiers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string labelAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.labelAtIndex_( Handle, CachedSelectors.labelAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject labelForIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.labelForIdentifier_( Handle, CachedSelectors.labelForIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string primaryIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.primaryIdentifier( Handle, CachedSelectors.primaryIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int propertyType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyType( Handle, CachedSelectors.propertyType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject valueAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueAtIndex_( Handle, CachedSelectors.valueAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.valueForIdentifier_( Handle, CachedSelectors.valueForIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr identifierAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexForIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isEqual_compareIdentifiers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject equal, char compareIdentifiers );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr labelAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr labelForIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr primaryIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int propertyType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueForIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
		}
		static internal class CachedSelectors {
			public static readonly Selector count = "count";
			public static readonly Selector identifierAtIndex_ = "identifierAtIndex:";
			public static readonly Selector indexForIdentifier_ = "indexForIdentifier:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector isEqual_compareIdentifiers_ = "isEqual:compareIdentifiers:";
			public static readonly Selector labelAtIndex_ = "labelAtIndex:";
			public static readonly Selector labelForIdentifier_ = "labelForIdentifier:";
			public static readonly Selector primaryIdentifier = "primaryIdentifier";
			public static readonly Selector propertyType = "propertyType";
			public static readonly Selector valueAtIndex_ = "valueAtIndex:";
			public static readonly Selector valueForIdentifier_ = "valueForIdentifier:";
		}
	}
	[ProxyBaseClass(typeof( ABMultiValue ))]
	public struct ABMultiValueCoreDataWrapper : IEquatable<ABMultiValueCoreDataWrapper> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMultiValueCoreDataWrapper;
		public static implicit operator IntPtr( ABMultiValueCoreDataWrapper value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMultiValueCoreDataWrapper value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMultiValueCoreDataWrapper ) ) return false; 
			return Handle == ( ( ABMultiValueCoreDataWrapper )value ).Handle;
		}
		public bool Equals( ABMultiValueCoreDataWrapper value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMultiValueCoreDataWrapper value1, ABMultiValueCoreDataWrapper value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMultiValueCoreDataWrapper value1, ABMultiValueCoreDataWrapper value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMultiValueCoreDataWrapper( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMultiValueCoreDataWrapper alloc() {
			return new ABMultiValueCoreDataWrapper( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char applyMultiValue_withCustomProperty_toRecord_managedObject_( NObjective.RuntimeObject value, NObjective.RuntimeObject withCustomProperty, NObjective.RuntimeObject toRecord, NObjective.RuntimeObject managedObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.applyMultiValue_withCustomProperty_toRecord_managedObject_( ClassHandle, CachedSelectors.applyMultiValue_withCustomProperty_toRecord_managedObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, withCustomProperty, toRecord, managedObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char applyMultiValue_withProperty_toRecord_( NObjective.RuntimeObject value, NObjective.RuntimeObject withProperty, NObjective.RuntimeObject toRecord ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.applyMultiValue_withProperty_toRecord_( ClassHandle, CachedSelectors.applyMultiValue_withProperty_toRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, withProperty, toRecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char applyMultiValue_withProperty_toRecord_managedObject_( NObjective.RuntimeObject value, NObjective.RuntimeObject withProperty, NObjective.RuntimeObject toRecord, NObjective.RuntimeObject managedObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.applyMultiValue_withProperty_toRecord_managedObject_( ClassHandle, CachedSelectors.applyMultiValue_withProperty_toRecord_managedObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, withProperty, toRecord, managedObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void deletePropertyValues_withKey_andSaveDistributionListConfigs_inRecord_withContext_( NObjective.RuntimeObject values, NObjective.RuntimeObject withKey, NObjective.RuntimeObject andSaveDistributionListConfigs, NObjective.RuntimeObject inRecord, NObjective.RuntimeObject withContext ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletePropertyValues_withKey_andSaveDistributionListConfigs_inRecord_withContext_( ClassHandle, CachedSelectors.deletePropertyValues_withKey_andSaveDistributionListConfigs_inRecord_withContext_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), values, withKey, andSaveDistributionListConfigs, inRecord, withContext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject messagingAddressesWithService_owner_withAddressBook_( NObjective.RuntimeObject service, NObjective.RuntimeObject owner, NObjective.RuntimeObject withAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.messagingAddressesWithService_owner_withAddressBook_( ClassHandle, CachedSelectors.messagingAddressesWithService_owner_withAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, owner, withAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_customProperty_( NObjective.RuntimeObject identifiers, NObjective.RuntimeObject values, NObjective.RuntimeObject labels, System.IntPtr primaryIdentifier, NObjective.RuntimeObject withDataFromRecord, NObjective.RuntimeObject customProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_customProperty_( ClassHandle, CachedSelectors.populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_customProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), identifiers, values, labels, primaryIdentifier, withDataFromRecord, customProperty
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_managedObject_property_( NObjective.RuntimeObject identifiers, NObjective.RuntimeObject values, NObjective.RuntimeObject labels, System.IntPtr primaryIdentifier, NObjective.RuntimeObject withDataFromRecord, NObjective.RuntimeObject managedObject, NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_managedObject_property_( ClassHandle, CachedSelectors.populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_managedObject_property_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), identifiers, values, labels, primaryIdentifier, withDataFromRecord, managedObject, 
			property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_property_( NObjective.RuntimeObject identifiers, NObjective.RuntimeObject values, NObjective.RuntimeObject labels, System.IntPtr primaryIdentifier, NObjective.RuntimeObject withDataFromRecord, NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_property_( ClassHandle, CachedSelectors.populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_property_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), identifiers, values, labels, primaryIdentifier, withDataFromRecord, property
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject primaryIdentifierForEntities_( NObjective.RuntimeObject entities ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.primaryIdentifierForEntities_( ClassHandle, CachedSelectors.primaryIdentifierForEntities_, out ___occuredException, sizeof( NObjective.RuntimeObject ), entities );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void rewireDistributionListConfig_withPropertyValue_identifier_( NObjective.RuntimeObject config, NObjective.RuntimeObject withPropertyValue, NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.rewireDistributionListConfig_withPropertyValue_identifier_( ClassHandle, CachedSelectors.rewireDistributionListConfig_withPropertyValue_identifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), config, withPropertyValue, identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject serviceWithName_inManagedObjectContext_( NObjective.RuntimeObject name, NObjective.RuntimeObject inManagedObjectContext ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serviceWithName_inManagedObjectContext_( ClassHandle, CachedSelectors.serviceWithName_inManagedObjectContext_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, inManagedObjectContext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRecord_customProperty_( NObjective.RuntimeObject record, NObjective.RuntimeObject customProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRecord_customProperty_( Handle, CachedSelectors.initWithRecord_customProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, customProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRecord_managedObject_property_( NObjective.RuntimeObject record, NObjective.RuntimeObject managedObject, NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRecord_managedObject_property_( Handle, CachedSelectors.initWithRecord_managedObject_property_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, managedObject, property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char applyMultiValue_withCustomProperty_toRecord_managedObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject withCustomProperty, NObjective.RuntimeObject toRecord, NObjective.RuntimeObject managedObject );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char applyMultiValue_withProperty_toRecord_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject withProperty, NObjective.RuntimeObject toRecord );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char applyMultiValue_withProperty_toRecord_managedObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject withProperty, NObjective.RuntimeObject toRecord, NObjective.RuntimeObject managedObject );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deletePropertyValues_withKey_andSaveDistributionListConfigs_inRecord_withContext_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject values, NObjective.RuntimeObject withKey, NObjective.RuntimeObject andSaveDistributionListConfigs, NObjective.RuntimeObject inRecord, NObjective.RuntimeObject withContext );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithRecord_customProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject customProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithRecord_managedObject_property_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject managedObject, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr messagingAddressesWithService_owner_withAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject owner, NObjective.RuntimeObject withAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_customProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifiers, NObjective.RuntimeObject values, NObjective.RuntimeObject labels, System.IntPtr primaryIdentifier, NObjective.RuntimeObject withDataFromRecord, NObjective.RuntimeObject customProperty
			 );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_managedObject_property_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifiers, NObjective.RuntimeObject values, NObjective.RuntimeObject labels, System.IntPtr primaryIdentifier, NObjective.RuntimeObject withDataFromRecord, NObjective.RuntimeObject managedObject, 
			NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_property_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifiers, NObjective.RuntimeObject values, NObjective.RuntimeObject labels, System.IntPtr primaryIdentifier, NObjective.RuntimeObject withDataFromRecord, NObjective.RuntimeObject property
			 );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr primaryIdentifierForEntities_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entities );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void rewireDistributionListConfig_withPropertyValue_identifier_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject config, NObjective.RuntimeObject withPropertyValue, NObjective.RuntimeObject identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr serviceWithName_inManagedObjectContext_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject inManagedObjectContext );
		}
		static internal class CachedSelectors {
			public static readonly Selector applyMultiValue_withCustomProperty_toRecord_managedObject_ = "applyMultiValue:withCustomProperty:toRecord:managedObject:";
			public static readonly Selector applyMultiValue_withProperty_toRecord_ = "applyMultiValue:withProperty:toRecord:";
			public static readonly Selector applyMultiValue_withProperty_toRecord_managedObject_ = "applyMultiValue:withProperty:toRecord:managedObject:";
			public static readonly Selector deletePropertyValues_withKey_andSaveDistributionListConfigs_inRecord_withContext_ = "deletePropertyValues:withKey:andSaveDistributionListConfigs:inRecord:withContext:";
			public static readonly Selector initWithRecord_customProperty_ = "initWithRecord:customProperty:";
			public static readonly Selector initWithRecord_managedObject_property_ = "initWithRecord:managedObject:property:";
			public static readonly Selector messagingAddressesWithService_owner_withAddressBook_ = "messagingAddressesWithService:owner:withAddressBook:";
			public static readonly Selector populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_customProperty_ = "populateIdentifiers:values:labels:primaryIdentifier:withDataFromRecord:customProperty:";
			public static readonly Selector populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_managedObject_property_ = "populateIdentifiers:values:labels:primaryIdentifier:withDataFromRecord:managedObject:property:";
			public static readonly Selector populateIdentifiers_values_labels_primaryIdentifier_withDataFromRecord_property_ = "populateIdentifiers:values:labels:primaryIdentifier:withDataFromRecord:property:";
			public static readonly Selector primaryIdentifierForEntities_ = "primaryIdentifierForEntities:";
			public static readonly Selector rewireDistributionListConfig_withPropertyValue_identifier_ = "rewireDistributionListConfig:withPropertyValue:identifier:";
			public static readonly Selector serviceWithName_inManagedObjectContext_ = "serviceWithName:inManagedObjectContext:";
		}
	}
	[ProxyBaseClass(typeof( ABMultiValue ))]
	public struct ABMutableMultiValue : IEquatable<ABMutableMultiValue> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMutableMultiValue;
		public static implicit operator IntPtr( ABMutableMultiValue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMutableMultiValue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMutableMultiValue ) ) return false; 
			return Handle == ( ( ABMutableMultiValue )value ).Handle;
		}
		public bool Equals( ABMutableMultiValue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMutableMultiValue value1, ABMutableMultiValue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMutableMultiValue value1, ABMutableMultiValue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMutableMultiValue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMutableMultiValue alloc() {
			return new ABMutableMultiValue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public string addValue_withLabel_( NObjective.RuntimeObject value, string withLabel ) {
			RuntimeObject ___occuredException;
			var ___wrappedwithLabel = Runtime.CreateStringProxy( withLabel );
			var ___result = NativeMethods.addValue_withLabel_( Handle, CachedSelectors.addValue_withLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedwithLabel );
			Runtime.ReleaseNativeObject( ___wrappedwithLabel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string insertValue_withLabel_atIndex_( NObjective.RuntimeObject value, string withLabel, uint atIndex ) {
			RuntimeObject ___occuredException;
			var ___wrappedwithLabel = Runtime.CreateStringProxy( withLabel );
			var ___result = NativeMethods.insertValue_withLabel_atIndex_( Handle, CachedSelectors.insertValue_withLabel_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ) + sizeof( uint ), value, ___wrappedwithLabel, atIndex );
			Runtime.ReleaseNativeObject( ___wrappedwithLabel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool removeValueAndLabelAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeValueAndLabelAtIndex_( Handle, CachedSelectors.removeValueAndLabelAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool replaceLabelAtIndex_withLabel_( uint index, string withLabel ) {
			RuntimeObject ___occuredException;
			var ___wrappedwithLabel = Runtime.CreateStringProxy( withLabel );
			var ___result = NativeMethods.replaceLabelAtIndex_withLabel_( Handle, CachedSelectors.replaceLabelAtIndex_withLabel_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ), index, ___wrappedwithLabel );
			Runtime.ReleaseNativeObject( ___wrappedwithLabel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool replaceValueAtIndex_withValue_( uint index, NObjective.RuntimeObject withValue ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replaceValueAtIndex_withValue_( Handle, CachedSelectors.replaceValueAtIndex_withValue_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), index, withValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool setPrimaryIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.setPrimaryIdentifier_( Handle, CachedSelectors.setPrimaryIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addValue_withLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr withLabel );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr insertValue_withLabel_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr withLabel, uint atIndex );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool removeValueAndLabelAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool replaceLabelAtIndex_withLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, IntPtr withLabel );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool replaceValueAtIndex_withValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject withValue );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool setPrimaryIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
		}
		static internal class CachedSelectors {
			public static readonly Selector addValue_withLabel_ = "addValue:withLabel:";
			public static readonly Selector insertValue_withLabel_atIndex_ = "insertValue:withLabel:atIndex:";
			public static readonly Selector removeValueAndLabelAtIndex_ = "removeValueAndLabelAtIndex:";
			public static readonly Selector replaceLabelAtIndex_withLabel_ = "replaceLabelAtIndex:withLabel:";
			public static readonly Selector replaceValueAtIndex_withValue_ = "replaceValueAtIndex:withValue:";
			public static readonly Selector setPrimaryIdentifier_ = "setPrimaryIdentifier:";
		}
	}
	[ProxyBaseClass(typeof( ABPackedImage ))]
	public struct ABMutablePackedImage : IEquatable<ABMutablePackedImage> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMutablePackedImage;
		public static implicit operator IntPtr( ABMutablePackedImage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMutablePackedImage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABMutablePackedImage ) ) return false; 
			return Handle == ( ( ABMutablePackedImage )value ).Handle;
		}
		public bool Equals( ABMutablePackedImage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMutablePackedImage value1, ABMutablePackedImage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMutablePackedImage value1, ABMutablePackedImage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMutablePackedImage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMutablePackedImage alloc() {
			return new ABMutablePackedImage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addImage_withName_( NObjective.RuntimeObject image, NObjective.RuntimeObject withName ) {
			RuntimeObject ___occuredException;
			NativeMethods.addImage_withName_( Handle, CachedSelectors.addImage_withName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), image, withName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPath_( Handle, CachedSelectors.setPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addImage_withName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, NObjective.RuntimeObject withName );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
		}
		static internal class CachedSelectors {
			public static readonly Selector addImage_withName_ = "addImage:withName:";
			public static readonly Selector setPath_ = "setPath:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABNetworkController : IEquatable<ABNetworkController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABNetworkController;
		public static implicit operator IntPtr( ABNetworkController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABNetworkController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABNetworkController ) ) return false; 
			return Handle == ( ( ABNetworkController )value ).Handle;
		}
		public bool Equals( ABNetworkController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABNetworkController value1, ABNetworkController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABNetworkController value1, ABNetworkController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABNetworkController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABNetworkController alloc() {
			return new ABNetworkController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedNetworkController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedNetworkController( ClassHandle, CachedSelectors.sharedNetworkController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char canReachAddress_( NObjective.RuntimeObject address ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canReachAddress_( Handle, CachedSelectors.canReachAddress_, out ___occuredException, sizeof( NObjective.RuntimeObject ), address );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject domainName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.domainName( Handle, CachedSelectors.domainName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isNetworkUp() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isNetworkUp( Handle, CachedSelectors.isNetworkUp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char canReachAddress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject address );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr domainName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isNetworkUp( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedNetworkController( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector canReachAddress_ = "canReachAddress:";
			public static readonly Selector domainName = "domainName";
			public static readonly Selector isNetworkUp = "isNetworkUp";
			public static readonly Selector sharedNetworkController = "sharedNetworkController";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABNewGroupCommand : IEquatable<ABNewGroupCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABNewGroupCommand;
		public static implicit operator IntPtr( ABNewGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABNewGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABNewGroupCommand ) ) return false; 
			return Handle == ( ( ABNewGroupCommand )value ).Handle;
		}
		public bool Equals( ABNewGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABNewGroupCommand value1, ABNewGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABNewGroupCommand value1, ABNewGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABNewGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABNewGroupCommand alloc() {
			return new ABNewGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithPeople_parentGroup_addressBook_( NObjective.RuntimeObject people, NObjective.RuntimeObject parentGroup, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPeople_parentGroup_addressBook_( Handle, CachedSelectors.initWithPeople_parentGroup_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), people, parentGroup, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject newGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newGroup( Handle, CachedSelectors.newGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithPeople_parentGroup_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject people, NObjective.RuntimeObject parentGroup, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr newGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithPeople_parentGroup_addressBook_ = "initWithPeople:parentGroup:addressBook:";
			public static readonly Selector newGroup = "newGroup";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABNewPersonCommand : IEquatable<ABNewPersonCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABNewPersonCommand;
		public static implicit operator IntPtr( ABNewPersonCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABNewPersonCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABNewPersonCommand ) ) return false; 
			return Handle == ( ( ABNewPersonCommand )value ).Handle;
		}
		public bool Equals( ABNewPersonCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABNewPersonCommand value1, ABNewPersonCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABNewPersonCommand value1, ABNewPersonCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABNewPersonCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABNewPersonCommand alloc() {
			return new ABNewPersonCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithNewPerson_selectedGroup_addressBook_( NObjective.RuntimeObject person, NObjective.RuntimeObject selectedGroup, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithNewPerson_selectedGroup_addressBook_( Handle, CachedSelectors.initWithNewPerson_selectedGroup_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, selectedGroup, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithNewPerson_selectedGroup_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject selectedGroup, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithNewPerson_selectedGroup_addressBook_ = "initWithNewPerson:selectedGroup:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABNewSmartGroupCommand : IEquatable<ABNewSmartGroupCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABNewSmartGroupCommand;
		public static implicit operator IntPtr( ABNewSmartGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABNewSmartGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABNewSmartGroupCommand ) ) return false; 
			return Handle == ( ( ABNewSmartGroupCommand )value ).Handle;
		}
		public bool Equals( ABNewSmartGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABNewSmartGroupCommand value1, ABNewSmartGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABNewSmartGroupCommand value1, ABNewSmartGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABNewSmartGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABNewSmartGroupCommand alloc() {
			return new ABNewSmartGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithSearchElement_andName_hilight_addressBook_( NObjective.RuntimeObject element, NObjective.RuntimeObject andName, char hilight, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSearchElement_andName_hilight_addressBook_( Handle, CachedSelectors.initWithSearchElement_andName_hilight_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), element, andName, hilight, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject newGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newGroup( Handle, CachedSelectors.newGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithSearchElement_andName_hilight_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, NObjective.RuntimeObject andName, char hilight, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr newGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithSearchElement_andName_hilight_addressBook_ = "initWithSearchElement:andName:hilight:addressBook:";
			public static readonly Selector newGroup = "newGroup";
		}
	}
	[ProxyBaseClass(typeof( ABGroup ))]
	public struct ABOnMyMacGroup : IEquatable<ABOnMyMacGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABOnMyMacGroup;
		public static implicit operator IntPtr( ABOnMyMacGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABOnMyMacGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABOnMyMacGroup ) ) return false; 
			return Handle == ( ( ABOnMyMacGroup )value ).Handle;
		}
		public bool Equals( ABOnMyMacGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABOnMyMacGroup value1, ABOnMyMacGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABOnMyMacGroup value1, ABOnMyMacGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABOnMyMacGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABOnMyMacGroup alloc() {
			return new ABOnMyMacGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject onMyMacGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.onMyMacGroup( ClassHandle, CachedSelectors.onMyMacGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createUsersDictionaryFromNames_inNode_( NObjective.RuntimeObject names, NObjective.RuntimeObject inNode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createUsersDictionaryFromNames_inNode_( Handle, CachedSelectors.createUsersDictionaryFromNames_inNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), names, inNode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void resetLocalAccounts() {
			RuntimeObject ___occuredException;
			NativeMethods.resetLocalAccounts( Handle, CachedSelectors.resetLocalAccounts, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr createUsersDictionaryFromNames_inNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject names, NObjective.RuntimeObject inNode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr onMyMacGroup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetLocalAccounts( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector createUsersDictionaryFromNames_inNode_ = "createUsersDictionaryFromNames:inNode:";
			public static readonly Selector onMyMacGroup = "onMyMacGroup";
			public static readonly Selector resetLocalAccounts = "resetLocalAccounts";
		}
	}
	[ProxyBaseClass(typeof( NSOutlineView ))]
	public struct ABOutlineView : IEquatable<ABOutlineView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABOutlineView;
		public static implicit operator IntPtr( ABOutlineView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABOutlineView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABOutlineView ) ) return false; 
			return Handle == ( ( ABOutlineView )value ).Handle;
		}
		public bool Equals( ABOutlineView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABOutlineView value1, ABOutlineView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABOutlineView value1, ABOutlineView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABOutlineView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABOutlineView alloc() {
			return new ABOutlineView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int dividerRow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dividerRow( Handle, CachedSelectors.dividerRow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void drawDropHighlightOnRowFirst_( int first ) {
			RuntimeObject ___occuredException;
			NativeMethods.drawDropHighlightOnRowFirst_( Handle, CachedSelectors.drawDropHighlightOnRowFirst_, out ___occuredException, sizeof( int ), first );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int firstRowAfterDivider() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstRowAfterDivider( Handle, CachedSelectors.firstRowAfterDivider, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setIgnoreReloadData_( char data ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIgnoreReloadData_( Handle, CachedSelectors.setIgnoreReloadData_, out ___occuredException, sizeof( char ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldEditOnSingleClick_inRow_tableColumn_( NObjective.RuntimeObject click, int inRow, NObjective.RuntimeObject tableColumn ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldEditOnSingleClick_inRow_tableColumn_( Handle, CachedSelectors.shouldEditOnSingleClick_inRow_tableColumn_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), click, inRow, tableColumn );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void updateDragRectWithProgress_( float progress ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateDragRectWithProgress_( Handle, CachedSelectors.updateDragRectWithProgress_, out ___occuredException, sizeof( float ), progress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int dividerRow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void drawDropHighlightOnRowFirst_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int first );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int firstRowAfterDivider( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIgnoreReloadData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char data );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool shouldEditOnSingleClick_inRow_tableColumn_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click, int inRow, NObjective.RuntimeObject tableColumn );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateDragRectWithProgress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float progress );
		}
		static internal class CachedSelectors {
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector dividerRow = "dividerRow";
			public static readonly Selector drawDropHighlightOnRowFirst_ = "drawDropHighlightOnRowFirst:";
			public static readonly Selector firstRowAfterDivider = "firstRowAfterDivider";
			public static readonly Selector setIgnoreReloadData_ = "setIgnoreReloadData:";
			public static readonly Selector shouldEditOnSingleClick_inRow_tableColumn_ = "shouldEditOnSingleClick:inRow:tableColumn:";
			public static readonly Selector updateDragRectWithProgress_ = "updateDragRectWithProgress:";
		}
	}
	[ProxyBaseClass(typeof( NSImage ))]
	public struct ABPackedImage : IEquatable<ABPackedImage> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPackedImage;
		public static implicit operator IntPtr( ABPackedImage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPackedImage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPackedImage ) ) return false; 
			return Handle == ( ( ABPackedImage )value ).Handle;
		}
		public bool Equals( ABPackedImage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPackedImage value1, ABPackedImage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPackedImage value1, ABPackedImage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPackedImage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPackedImage alloc() {
			return new ABPackedImage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject packedImageNamed_inBundle_( NObjective.RuntimeObject named, NObjective.RuntimeObject inBundle ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.packedImageNamed_inBundle_( ClassHandle, CachedSelectors.packedImageNamed_inBundle_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), named, inBundle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject startupImages() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startupImages( ClassHandle, CachedSelectors.startupImages, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject imageWithName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageWithName_( Handle, CachedSelectors.imageWithName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject packedDataRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.packedDataRepresentation( Handle, CachedSelectors.packedDataRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject path() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.path( Handle, CachedSelectors.path, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr imageWithName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr packedDataRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr packedImageNamed_inBundle_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject named, NObjective.RuntimeObject inBundle );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr path( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr startupImages( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector imageWithName_ = "imageWithName:";
			public static readonly Selector packedDataRepresentation = "packedDataRepresentation";
			public static readonly Selector packedImageNamed_inBundle_ = "packedImageNamed:inBundle:";
			public static readonly Selector path = "path";
			public static readonly Selector startupImages = "startupImages";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABPasteGroupsCommand : IEquatable<ABPasteGroupsCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPasteGroupsCommand;
		public static implicit operator IntPtr( ABPasteGroupsCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPasteGroupsCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPasteGroupsCommand ) ) return false; 
			return Handle == ( ( ABPasteGroupsCommand )value ).Handle;
		}
		public bool Equals( ABPasteGroupsCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPasteGroupsCommand value1, ABPasteGroupsCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPasteGroupsCommand value1, ABPasteGroupsCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPasteGroupsCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPasteGroupsCommand alloc() {
			return new ABPasteGroupsCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char containsGroupName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsGroupName_( Handle, CachedSelectors.containsGroupName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char containsGroupName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
		}
		static internal class CachedSelectors {
			public static readonly Selector containsGroupName_ = "containsGroupName:";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABPastePeopleCommand : IEquatable<ABPastePeopleCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPastePeopleCommand;
		public static implicit operator IntPtr( ABPastePeopleCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPastePeopleCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPastePeopleCommand ) ) return false; 
			return Handle == ( ( ABPastePeopleCommand )value ).Handle;
		}
		public bool Equals( ABPastePeopleCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPastePeopleCommand value1, ABPastePeopleCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPastePeopleCommand value1, ABPastePeopleCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPastePeopleCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPastePeopleCommand alloc() {
			return new ABPastePeopleCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_addressBook_( Handle, CachedSelectors.initWithGroup_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_addressBook_ = "initWithGroup:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABTableController ))]
	public struct ABPeopleController : IEquatable<ABPeopleController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPeopleController;
		public static implicit operator IntPtr( ABPeopleController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPeopleController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPeopleController ) ) return false; 
			return Handle == ( ( ABPeopleController )value ).Handle;
		}
		public bool Equals( ABPeopleController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPeopleController value1, ABPeopleController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPeopleController value1, ABPeopleController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPeopleController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPeopleController alloc() {
			return new ABPeopleController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject activeColumnFilter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeColumnFilter( Handle, CachedSelectors.activeColumnFilter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeColumnIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeColumnIdentifier( Handle, CachedSelectors.activeColumnIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addColumnFilter_forColumnTitle_andIdentifier_( NObjective.RuntimeObject filter, NObjective.RuntimeObject forColumnTitle, NObjective.RuntimeObject andIdentifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.addColumnFilter_forColumnTitle_andIdentifier_( Handle, CachedSelectors.addColumnFilter_forColumnTitle_andIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), filter, forColumnTitle, andIdentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject columnFilters() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.columnFilters( Handle, CachedSelectors.columnFilters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject columnTitleForIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.columnTitleForIdentifier_( Handle, CachedSelectors.columnTitleForIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedColumns() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedColumns( Handle, CachedSelectors.displayedColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedProperties( Handle, CachedSelectors.displayedProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void localEditInAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.localEditInAddressBook_( Handle, CachedSelectors.localEditInAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject menuForEvent_( NObjective.RuntimeObject @event ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.menuForEvent_( Handle, CachedSelectors.menuForEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int numberOfRowsInTableView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfRowsInTableView_( Handle, CachedSelectors.numberOfRowsInTableView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int numberOfSubrowsInTableView_forRow_( NObjective.RuntimeObject view, int forRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfSubrowsInTableView_forRow_( Handle, CachedSelectors.numberOfSubrowsInTableView_forRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, forRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void pasteboard_provideDataForType_( NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject provideDataForType ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteboard_provideDataForType_( Handle, CachedSelectors.pasteboard_provideDataForType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), pasteboard, provideDataForType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject recordsForUIDs_( NObjective.RuntimeObject ds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordsForUIDs_( Handle, CachedSelectors.recordsForUIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAllColumnFilters() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllColumnFilters( Handle, CachedSelectors.removeAllColumnFilters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeColumnFilter_( NObjective.RuntimeObject filter ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeColumnFilter_( Handle, CachedSelectors.removeColumnFilter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), filter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void restoreNameColumnWidth() {
			RuntimeObject ___occuredException;
			NativeMethods.restoreNameColumnWidth( Handle, CachedSelectors.restoreNameColumnWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void saveNameColumnWidth() {
			RuntimeObject ___occuredException;
			NativeMethods.saveNameColumnWidth( Handle, CachedSelectors.saveNameColumnWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectColumnIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectColumnIdentifier_( Handle, CachedSelectors.selectColumnIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowGroupSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowGroupSelection_( Handle, CachedSelectors.setAllowGroupSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsColumnResizing_( char resizing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsColumnResizing_( Handle, CachedSelectors.setAllowsColumnResizing_, out ___occuredException, sizeof( char ), resizing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowSubrowSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowSubrowSelection_( Handle, CachedSelectors.setAllowSubrowSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setColumnTitle_forIdentifier_( NObjective.RuntimeObject title, NObjective.RuntimeObject forIdentifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setColumnTitle_forIdentifier_( Handle, CachedSelectors.setColumnTitle_forIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, forIdentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectionFromGUIDs_( NObjective.RuntimeObject ds ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectionFromGUIDs_( Handle, CachedSelectors.setSelectionFromGUIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject stringsFromRows_expanding_( NObjective.RuntimeObject rows, char expanding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromRows_expanding_( Handle, CachedSelectors.stringsFromRows_expanding_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), rows, expanding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringsFromSelectionExpanding_( char expanding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromSelectionExpanding_( Handle, CachedSelectors.stringsFromSelectionExpanding_, out ___occuredException, sizeof( char ), expanding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subrowObjectsForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrowObjectsForPerson_( Handle, CachedSelectors.subrowObjectsForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int tableView_defaultSubRowForRow_( NObjective.RuntimeObject view, int defaultSubRowForRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_defaultSubRowForRow_( Handle, CachedSelectors.tableView_defaultSubRowForRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, defaultSubRowForRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float tableView_heightForRow_( NObjective.RuntimeObject view, int heightForRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_heightForRow_( Handle, CachedSelectors.tableView_heightForRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, heightForRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes_( NObjective.RuntimeObject view, NObjective.RuntimeObject namesOfPromisedFilesDroppedAtDestination, NObjective.RuntimeObject forDraggedRowsWithIndexes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes_( Handle, CachedSelectors.tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, namesOfPromisedFilesDroppedAtDestination, forDraggedRowsWithIndexes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tableView_objectValueForTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_objectValueForTableColumn_row_( Handle, CachedSelectors.tableView_objectValueForTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, objectValueForTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char tableView_shouldEditTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldEditTableColumn, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_shouldEditTableColumn_row_( Handle, CachedSelectors.tableView_shouldEditTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, shouldEditTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char tableView_shouldSelectRow_( NObjective.RuntimeObject view, int shouldSelectRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_shouldSelectRow_( Handle, CachedSelectors.tableView_shouldSelectRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, shouldSelectRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char tableView_writeRows_toPasteboard_( NObjective.RuntimeObject view, NObjective.RuntimeObject writeRows, NObjective.RuntimeObject toPasteboard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_writeRows_toPasteboard_( Handle, CachedSelectors.tableView_writeRows_toPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, writeRows, toPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void tableViewSelectionDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableViewSelectionDidChange_( Handle, CachedSelectors.tableViewSelectionDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateColumns() {
			RuntimeObject ___occuredException;
			NativeMethods.updateColumns( Handle, CachedSelectors.updateColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr activeColumnFilter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr activeColumnIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addColumnFilter_forColumnTitle_andIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filter, NObjective.RuntimeObject forColumnTitle, NObjective.RuntimeObject andIdentifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr columnFilters( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr columnTitleForIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayedColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayedProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void localEditInAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr menuForEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int numberOfRowsInTableView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int numberOfSubrowsInTableView_forRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int forRow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void pasteboard_provideDataForType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject provideDataForType );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordsForUIDs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ds );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeAllColumnFilters( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeColumnFilter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filter );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void restoreNameColumnWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void saveNameColumnWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectColumnIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsColumnResizing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char resizing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setColumnTitle_forIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.RuntimeObject forIdentifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectionFromGUIDs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ds );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringsFromRows_expanding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rows, char expanding );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringsFromSelectionExpanding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char expanding );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subrowObjectsForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int tableView_defaultSubRowForRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int defaultSubRowForRow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float tableView_heightForRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int heightForRow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject namesOfPromisedFilesDroppedAtDestination, NObjective.RuntimeObject forDraggedRowsWithIndexes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr tableView_objectValueForTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char tableView_shouldEditTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldEditTableColumn, int row );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char tableView_shouldSelectRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int shouldSelectRow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char tableView_writeRows_toPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject writeRows, NObjective.RuntimeObject toPasteboard );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void tableViewSelectionDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector activeColumnFilter = "activeColumnFilter";
			public static readonly Selector activeColumnIdentifier = "activeColumnIdentifier";
			public static readonly Selector addColumnFilter_forColumnTitle_andIdentifier_ = "addColumnFilter:forColumnTitle:andIdentifier:";
			public static readonly Selector columnFilters = "columnFilters";
			public static readonly Selector columnTitleForIdentifier_ = "columnTitleForIdentifier:";
			public static readonly Selector displayedColumns = "displayedColumns";
			public static readonly Selector displayedProperties = "displayedProperties";
			public static readonly Selector localEditInAddressBook_ = "localEditInAddressBook:";
			public static readonly Selector menuForEvent_ = "menuForEvent:";
			public static readonly Selector numberOfRowsInTableView_ = "numberOfRowsInTableView:";
			public static readonly Selector numberOfSubrowsInTableView_forRow_ = "numberOfSubrowsInTableView:forRow:";
			public static readonly Selector pasteboard_provideDataForType_ = "pasteboard:provideDataForType:";
			public static readonly Selector recordsForUIDs_ = "recordsForUIDs:";
			public static readonly Selector removeAllColumnFilters = "removeAllColumnFilters";
			public static readonly Selector removeColumnFilter_ = "removeColumnFilter:";
			public static readonly Selector restoreNameColumnWidth = "restoreNameColumnWidth";
			public static readonly Selector saveNameColumnWidth = "saveNameColumnWidth";
			public static readonly Selector selectColumnIdentifier_ = "selectColumnIdentifier:";
			public static readonly Selector setAllowGroupSelection_ = "setAllowGroupSelection:";
			public static readonly Selector setAllowsColumnResizing_ = "setAllowsColumnResizing:";
			public static readonly Selector setAllowSubrowSelection_ = "setAllowSubrowSelection:";
			public static readonly Selector setColumnTitle_forIdentifier_ = "setColumnTitle:forIdentifier:";
			public static readonly Selector setSelectionFromGUIDs_ = "setSelectionFromGUIDs:";
			public static readonly Selector stringsFromRows_expanding_ = "stringsFromRows:expanding:";
			public static readonly Selector stringsFromSelectionExpanding_ = "stringsFromSelectionExpanding:";
			public static readonly Selector subrowObjectsForPerson_ = "subrowObjectsForPerson:";
			public static readonly Selector tableView_defaultSubRowForRow_ = "tableView:defaultSubRowForRow:";
			public static readonly Selector tableView_heightForRow_ = "tableView:heightForRow:";
			public static readonly Selector tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes_ = "tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:";
			public static readonly Selector tableView_objectValueForTableColumn_row_ = "tableView:objectValueForTableColumn:row:";
			public static readonly Selector tableView_shouldEditTableColumn_row_ = "tableView:shouldEditTableColumn:row:";
			public static readonly Selector tableView_shouldSelectRow_ = "tableView:shouldSelectRow:";
			public static readonly Selector tableView_writeRows_toPasteboard_ = "tableView:writeRows:toPasteboard:";
			public static readonly Selector tableViewSelectionDidChange_ = "tableViewSelectionDidChange:";
			public static readonly Selector updateColumns = "updateColumns";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABPeoplePickerController : IEquatable<ABPeoplePickerController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPeoplePickerController;
		public static implicit operator IntPtr( ABPeoplePickerController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPeoplePickerController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPeoplePickerController ) ) return false; 
			return Handle == ( ( ABPeoplePickerController )value ).Handle;
		}
		public bool Equals( ABPeoplePickerController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPeoplePickerController value1, ABPeoplePickerController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPeoplePickerController value1, ABPeoplePickerController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPeoplePickerController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPeoplePickerController alloc() {
			return new ABPeoplePickerController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addColumnFilter_forColumnTitle_( NObjective.RuntimeObject filter, NObjective.RuntimeObject forColumnTitle ) {
			RuntimeObject ___occuredException;
			NativeMethods.addColumnFilter_forColumnTitle_( Handle, CachedSelectors.addColumnFilter_forColumnTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), filter, forColumnTitle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char allowsDirectoriesSearches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsDirectoriesSearches( Handle, CachedSelectors.allowsDirectoriesSearches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsMultipleSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsMultipleSelection( Handle, CachedSelectors.allowsMultipleSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject displayedColumns() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedColumns( Handle, CachedSelectors.displayedColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void editInAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.editInAddressBook_( Handle, CachedSelectors.editInAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithWindow_( Handle, CachedSelectors.initWithWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject peoplePickerView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peoplePickerView( Handle, CachedSelectors.peoplePickerView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAllColumnFilters() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllColumnFilters( Handle, CachedSelectors.removeAllColumnFilters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeColumnFilter_( NObjective.RuntimeObject filter ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeColumnFilter_( Handle, CachedSelectors.removeColumnFilter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), filter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectColumnTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectColumnTitle_( Handle, CachedSelectors.selectColumnTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject selectedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroups( Handle, CachedSelectors.selectedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedRecords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedRecords( Handle, CachedSelectors.selectedRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAllowGroupSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowGroupSelection_( Handle, CachedSelectors.setAllowGroupSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsDirectoriesSearches_( char searches ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsDirectoriesSearches_( Handle, CachedSelectors.setAllowsDirectoriesSearches_, out ___occuredException, sizeof( char ), searches );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsMultipleSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsMultipleSelection_( Handle, CachedSelectors.setAllowsMultipleSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowSubrowSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowSubrowSelection_( Handle, CachedSelectors.setAllowSubrowSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupDoubleClickTarget_andAction_( NObjective.RuntimeObject target, NObjective.Selector andAction ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroupDoubleClickTarget_andAction_( Handle, CachedSelectors.setGroupDoubleClickTarget_andAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), target, andAction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPeopleDoubleClickTarget_andAction_( NObjective.RuntimeObject target, NObjective.Selector andAction ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPeopleDoubleClickTarget_andAction_( Handle, CachedSelectors.setPeopleDoubleClickTarget_andAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), target, andAction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldHideMeCard_( char card ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldHideMeCard_( Handle, CachedSelectors.setShouldHideMeCard_, out ___occuredException, sizeof( char ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject stringsFromSelectionExpanding_( char expanding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromSelectionExpanding_( Handle, CachedSelectors.stringsFromSelectionExpanding_, out ___occuredException, sizeof( char ), expanding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addColumnFilter_forColumnTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filter, NObjective.RuntimeObject forColumnTitle );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsDirectoriesSearches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsMultipleSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayedColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editInAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr peoplePickerView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeAllColumnFilters( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeColumnFilter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filter );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectColumnTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsDirectoriesSearches_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char searches );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsMultipleSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setGroupDoubleClickTarget_andAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector andAction );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPeopleDoubleClickTarget_andAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector andAction );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShouldHideMeCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringsFromSelectionExpanding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char expanding );
		}
		static internal class CachedSelectors {
			public static readonly Selector addColumnFilter_forColumnTitle_ = "addColumnFilter:forColumnTitle:";
			public static readonly Selector allowsDirectoriesSearches = "allowsDirectoriesSearches";
			public static readonly Selector allowsMultipleSelection = "allowsMultipleSelection";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector displayedColumns = "displayedColumns";
			public static readonly Selector editInAddressBook_ = "editInAddressBook:";
			public static readonly Selector initWithWindow_ = "initWithWindow:";
			public static readonly Selector peoplePickerView = "peoplePickerView";
			public static readonly Selector removeAllColumnFilters = "removeAllColumnFilters";
			public static readonly Selector removeColumnFilter_ = "removeColumnFilter:";
			public static readonly Selector selectColumnTitle_ = "selectColumnTitle:";
			public static readonly Selector selectedGroups = "selectedGroups";
			public static readonly Selector selectedRecords = "selectedRecords";
			public static readonly Selector setAllowGroupSelection_ = "setAllowGroupSelection:";
			public static readonly Selector setAllowsDirectoriesSearches_ = "setAllowsDirectoriesSearches:";
			public static readonly Selector setAllowsMultipleSelection_ = "setAllowsMultipleSelection:";
			public static readonly Selector setAllowSubrowSelection_ = "setAllowSubrowSelection:";
			public static readonly Selector setGroupDoubleClickTarget_andAction_ = "setGroupDoubleClickTarget:andAction:";
			public static readonly Selector setPeopleDoubleClickTarget_andAction_ = "setPeopleDoubleClickTarget:andAction:";
			public static readonly Selector setShouldHideMeCard_ = "setShouldHideMeCard:";
			public static readonly Selector stringsFromSelectionExpanding_ = "stringsFromSelectionExpanding:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABPeoplePickerNibLoader : IEquatable<ABPeoplePickerNibLoader> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPeoplePickerNibLoader;
		public static implicit operator IntPtr( ABPeoplePickerNibLoader value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPeoplePickerNibLoader value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPeoplePickerNibLoader ) ) return false; 
			return Handle == ( ( ABPeoplePickerNibLoader )value ).Handle;
		}
		public bool Equals( ABPeoplePickerNibLoader value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPeoplePickerNibLoader value1, ABPeoplePickerNibLoader value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPeoplePickerNibLoader value1, ABPeoplePickerNibLoader value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPeoplePickerNibLoader( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPeoplePickerNibLoader alloc() {
			return new ABPeoplePickerNibLoader( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject addGroupView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addGroupView( Handle, CachedSelectors.addGroupView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject carbonPickerWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.carbonPickerWindow( Handle, CachedSelectors.carbonPickerWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mainSplit() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainSplit( Handle, CachedSelectors.mainSplit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pickerView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pickerView( Handle, CachedSelectors.pickerView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject populatePicker_( NObjective.RuntimeObject picker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.populatePicker_( Handle, CachedSelectors.populatePicker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), picker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchLabel( Handle, CachedSelectors.searchLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addGroupView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr carbonPickerWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr mainSplit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pickerView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr populatePicker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject picker );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addGroupView = "addGroupView";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector carbonPickerWindow = "carbonPickerWindow";
			public static readonly Selector mainSplit = "mainSplit";
			public static readonly Selector pickerView = "pickerView";
			public static readonly Selector populatePicker_ = "populatePicker:";
			public static readonly Selector searchLabel = "searchLabel";
		}
	}
	[ProxyBaseClass(typeof( NSView ))]
	public struct ABPeoplePickerView : IEquatable<ABPeoplePickerView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPeoplePickerView;
		public static implicit operator IntPtr( ABPeoplePickerView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPeoplePickerView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPeoplePickerView ) ) return false; 
			return Handle == ( ( ABPeoplePickerView )value ).Handle;
		}
		public bool Equals( ABPeoplePickerView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPeoplePickerView value1, ABPeoplePickerView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPeoplePickerView value1, ABPeoplePickerView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPeoplePickerView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPeoplePickerView alloc() {
			return new ABPeoplePickerView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessoryView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessoryView( Handle, CachedSelectors.accessoryView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addFilter_title_identifier_( NObjective.RuntimeObject filter, NObjective.RuntimeObject title, NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.addFilter_title_identifier_( Handle, CachedSelectors.addFilter_title_identifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), filter, title, identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			NativeMethods.addProperty_( Handle, CachedSelectors.addProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char allowsDirectoriesSearches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsDirectoriesSearches( Handle, CachedSelectors.allowsDirectoriesSearches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsGroupEditing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsGroupEditing( Handle, CachedSelectors.allowsGroupEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsGroupSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsGroupSelection( Handle, CachedSelectors.allowsGroupSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsIndividualValueSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsIndividualValueSelection( Handle, CachedSelectors.allowsIndividualValueSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsMultipleSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsMultipleSelection( Handle, CachedSelectors.allowsMultipleSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject autosaveName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autosaveName( Handle, CachedSelectors.autosaveName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearSearchField_( NObjective.RuntimeObject field ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearSearchField_( Handle, CachedSelectors.clearSearchField_, out ___occuredException, sizeof( NObjective.RuntimeObject ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject columnTitleForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.columnTitleForProperty_( Handle, CachedSelectors.columnTitleForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void decodeColumns_( NObjective.RuntimeObject columns ) {
			RuntimeObject ___occuredException;
			NativeMethods.decodeColumns_( Handle, CachedSelectors.decodeColumns_, out ___occuredException, sizeof( NObjective.RuntimeObject ), columns );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectAll_( Handle, CachedSelectors.deselectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectGroup_( Handle, CachedSelectors.deselectGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectIdentifier_forPerson_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject forPerson ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectIdentifier_forPerson_( Handle, CachedSelectors.deselectIdentifier_forPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), identifier, forPerson );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectRecord_( Handle, CachedSelectors.deselectRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchGroupDoubleClick_( NObjective.RuntimeObject click ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchGroupDoubleClick_( Handle, CachedSelectors.dispatchGroupDoubleClick_, out ___occuredException, sizeof( NObjective.RuntimeObject ), click );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchGroupSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchGroupSelection_( Handle, CachedSelectors.dispatchGroupSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchNameDoubleClick_( NObjective.RuntimeObject click ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchNameDoubleClick_( Handle, CachedSelectors.dispatchNameDoubleClick_, out ___occuredException, sizeof( NObjective.RuntimeObject ), click );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchNameSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchNameSelection_( Handle, CachedSelectors.dispatchNameSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchPropertyChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchPropertyChanged_( Handle, CachedSelectors.dispatchPropertyChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchValueSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchValueSelection_( Handle, CachedSelectors.dispatchValueSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject displayedProperty() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedProperty( Handle, CachedSelectors.displayedProperty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedRecords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedRecords( Handle, CachedSelectors.displayedRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void editInAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.editInAddressBook_( Handle, CachedSelectors.editInAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject encodeColumns() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.encodeColumns( Handle, CachedSelectors.encodeColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.Selector groupDoubleAction() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupDoubleAction( Handle, CachedSelectors.groupDoubleAction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.Selector nameDoubleAction() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameDoubleAction( Handle, CachedSelectors.nameDoubleAction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void newGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.newGroup_( Handle, CachedSelectors.newGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject properties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.properties( Handle, CachedSelectors.properties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAllProperties() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllProperties( Handle, CachedSelectors.removeAllProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeProperty_( Handle, CachedSelectors.removeProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject selectedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroups( Handle, CachedSelectors.selectedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedIdentifiersForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedIdentifiersForPerson_( Handle, CachedSelectors.selectedIdentifiersForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedRecords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedRecords( Handle, CachedSelectors.selectedRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedValues() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedValues( Handle, CachedSelectors.selectedValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void selectGroup_byExtendingSelection_( NObjective.RuntimeObject @group, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectGroup_byExtendingSelection_( Handle, CachedSelectors.selectGroup_byExtendingSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), @group, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectIdentifier_forPerson_byExtendingSelection_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject forPerson, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectIdentifier_forPerson_byExtendingSelection_( Handle, CachedSelectors.selectIdentifier_forPerson_byExtendingSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), identifier, forPerson, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectInAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectInAddressBook_( Handle, CachedSelectors.selectInAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectRecord_byExtendingSelection_( NObjective.RuntimeObject record, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectRecord_byExtendingSelection_( Handle, CachedSelectors.selectRecord_byExtendingSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), record, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAccessoryView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccessoryView_( Handle, CachedSelectors.setAccessoryView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsDirectoriesSearches_( char searches ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsDirectoriesSearches_( Handle, CachedSelectors.setAllowsDirectoriesSearches_, out ___occuredException, sizeof( char ), searches );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsGroupEditing_( char editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsGroupEditing_( Handle, CachedSelectors.setAllowsGroupEditing_, out ___occuredException, sizeof( char ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsGroupSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsGroupSelection_( Handle, CachedSelectors.setAllowsGroupSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsIndividualValueSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsIndividualValueSelection_( Handle, CachedSelectors.setAllowsIndividualValueSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsMultipleSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsMultipleSelection_( Handle, CachedSelectors.setAllowsMultipleSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAutosaveName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAutosaveName_( Handle, CachedSelectors.setAutosaveName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setColumnTitle_forProperty_( NObjective.RuntimeObject title, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setColumnTitle_forProperty_( Handle, CachedSelectors.setColumnTitle_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisplayedProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisplayedProperty_( Handle, CachedSelectors.setDisplayedProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupDoubleAction_( NObjective.Selector action ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroupDoubleAction_( Handle, CachedSelectors.setGroupDoubleAction_, out ___occuredException, sizeof( NObjective.Selector ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNameDoubleAction_( NObjective.Selector action ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNameDoubleAction_( Handle, CachedSelectors.setNameDoubleAction_, out ___occuredException, sizeof( NObjective.Selector ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowIdentityBadges_( char badges ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowIdentityBadges_( Handle, CachedSelectors.setShowIdentityBadges_, out ___occuredException, sizeof( char ), badges );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowIdentityGroups_( char groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowIdentityGroups_( Handle, CachedSelectors.setShowIdentityGroups_, out ___occuredException, sizeof( char ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTarget_( Handle, CachedSelectors.setTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValueSelectionBehavior_( int behavior ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueSelectionBehavior_( Handle, CachedSelectors.setValueSelectionBehavior_, out ___occuredException, sizeof( int ), behavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sharedInit() {
			RuntimeObject ___occuredException;
			NativeMethods.sharedInit( Handle, CachedSelectors.sharedInit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int valueSelectionBehavior() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueSelectionBehavior( Handle, CachedSelectors.valueSelectionBehavior, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char worksWhenModal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.worksWhenModal( Handle, CachedSelectors.worksWhenModal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessoryView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addFilter_title_identifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filter, NObjective.RuntimeObject title, NObjective.RuntimeObject identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsDirectoriesSearches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsGroupEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsGroupSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsIndividualValueSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsMultipleSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr autosaveName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearSearchField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr columnTitleForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void decodeColumns_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject columns );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deselectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deselectGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deselectIdentifier_forPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject forPerson );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deselectRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dispatchGroupDoubleClick_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dispatchGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dispatchNameDoubleClick_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dispatchNameSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dispatchPropertyChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dispatchValueSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayedProperty( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayedRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editInAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr encodeColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern NObjective.Selector groupDoubleAction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern NObjective.Selector nameDoubleAction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void newGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr properties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeAllProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedIdentifiersForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectGroup_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, char byExtendingSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectIdentifier_forPerson_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject forPerson, char byExtendingSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectInAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectRecord_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, char byExtendingSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAccessoryView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsDirectoriesSearches_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char searches );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsGroupEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char editing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsIndividualValueSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsMultipleSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAutosaveName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setColumnTitle_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDisplayedProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setGroupDoubleAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setNameDoubleAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShowIdentityBadges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char badges );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShowIdentityGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setValueSelectionBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int behavior );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void sharedInit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int valueSelectionBehavior( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char worksWhenModal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessoryView = "accessoryView";
			public static readonly Selector addFilter_title_identifier_ = "addFilter:title:identifier:";
			public static readonly Selector addProperty_ = "addProperty:";
			public static readonly Selector allowsDirectoriesSearches = "allowsDirectoriesSearches";
			public static readonly Selector allowsGroupEditing = "allowsGroupEditing";
			public static readonly Selector allowsGroupSelection = "allowsGroupSelection";
			public static readonly Selector allowsIndividualValueSelection = "allowsIndividualValueSelection";
			public static readonly Selector allowsMultipleSelection = "allowsMultipleSelection";
			public static readonly Selector autosaveName = "autosaveName";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector clearSearchField_ = "clearSearchField:";
			public static readonly Selector columnTitleForProperty_ = "columnTitleForProperty:";
			public static readonly Selector decodeColumns_ = "decodeColumns:";
			public static readonly Selector deselectAll_ = "deselectAll:";
			public static readonly Selector deselectGroup_ = "deselectGroup:";
			public static readonly Selector deselectIdentifier_forPerson_ = "deselectIdentifier:forPerson:";
			public static readonly Selector deselectRecord_ = "deselectRecord:";
			public static readonly Selector dispatchGroupDoubleClick_ = "dispatchGroupDoubleClick:";
			public static readonly Selector dispatchGroupSelection_ = "dispatchGroupSelection:";
			public static readonly Selector dispatchNameDoubleClick_ = "dispatchNameDoubleClick:";
			public static readonly Selector dispatchNameSelection_ = "dispatchNameSelection:";
			public static readonly Selector dispatchPropertyChanged_ = "dispatchPropertyChanged:";
			public static readonly Selector dispatchValueSelection_ = "dispatchValueSelection:";
			public static readonly Selector displayedProperty = "displayedProperty";
			public static readonly Selector displayedRecords = "displayedRecords";
			public static readonly Selector editInAddressBook_ = "editInAddressBook:";
			public static readonly Selector encodeColumns = "encodeColumns";
			public static readonly Selector groupDoubleAction = "groupDoubleAction";
			public static readonly Selector nameDoubleAction = "nameDoubleAction";
			public static readonly Selector newGroup_ = "newGroup:";
			public static readonly Selector properties = "properties";
			public static readonly Selector removeAllProperties = "removeAllProperties";
			public static readonly Selector removeProperty_ = "removeProperty:";
			public static readonly Selector selectedGroups = "selectedGroups";
			public static readonly Selector selectedIdentifiersForPerson_ = "selectedIdentifiersForPerson:";
			public static readonly Selector selectedRecords = "selectedRecords";
			public static readonly Selector selectedValues = "selectedValues";
			public static readonly Selector selectGroup_byExtendingSelection_ = "selectGroup:byExtendingSelection:";
			public static readonly Selector selectIdentifier_forPerson_byExtendingSelection_ = "selectIdentifier:forPerson:byExtendingSelection:";
			public static readonly Selector selectInAddressBook_ = "selectInAddressBook:";
			public static readonly Selector selectRecord_byExtendingSelection_ = "selectRecord:byExtendingSelection:";
			public static readonly Selector setAccessoryView_ = "setAccessoryView:";
			public static readonly Selector setAllowsDirectoriesSearches_ = "setAllowsDirectoriesSearches:";
			public static readonly Selector setAllowsGroupEditing_ = "setAllowsGroupEditing:";
			public static readonly Selector setAllowsGroupSelection_ = "setAllowsGroupSelection:";
			public static readonly Selector setAllowsIndividualValueSelection_ = "setAllowsIndividualValueSelection:";
			public static readonly Selector setAllowsMultipleSelection_ = "setAllowsMultipleSelection:";
			public static readonly Selector setAutosaveName_ = "setAutosaveName:";
			public static readonly Selector setColumnTitle_forProperty_ = "setColumnTitle:forProperty:";
			public static readonly Selector setDisplayedProperty_ = "setDisplayedProperty:";
			public static readonly Selector setGroupDoubleAction_ = "setGroupDoubleAction:";
			public static readonly Selector setNameDoubleAction_ = "setNameDoubleAction:";
			public static readonly Selector setShowIdentityBadges_ = "setShowIdentityBadges:";
			public static readonly Selector setShowIdentityGroups_ = "setShowIdentityGroups:";
			public static readonly Selector setTarget_ = "setTarget:";
			public static readonly Selector setValueSelectionBehavior_ = "setValueSelectionBehavior:";
			public static readonly Selector sharedInit = "sharedInit";
			public static readonly Selector target = "target";
			public static readonly Selector valueSelectionBehavior = "valueSelectionBehavior";
			public static readonly Selector worksWhenModal = "worksWhenModal";
		}
	}
	[ProxyBaseClass(typeof( ABTextFieldCell ))]
	public struct ABPeopleTableTextFieldCell : IEquatable<ABPeopleTableTextFieldCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPeopleTableTextFieldCell;
		public static implicit operator IntPtr( ABPeopleTableTextFieldCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPeopleTableTextFieldCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPeopleTableTextFieldCell ) ) return false; 
			return Handle == ( ( ABPeopleTableTextFieldCell )value ).Handle;
		}
		public bool Equals( ABPeopleTableTextFieldCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPeopleTableTextFieldCell value1, ABPeopleTableTextFieldCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPeopleTableTextFieldCell value1, ABPeopleTableTextFieldCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPeopleTableTextFieldCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPeopleTableTextFieldCell alloc() {
			return new ABPeopleTableTextFieldCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void createIdentityImages() {
			RuntimeObject ___occuredException;
			NativeMethods.createIdentityImages( ClassHandle, CachedSelectors.createIdentityImages, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject createImageByCompositingBadge_onTopOf_( NObjective.RuntimeObject badge, NObjective.RuntimeObject onTopOf ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createImageByCompositingBadge_onTopOf_( ClassHandle, CachedSelectors.createImageByCompositingBadge_onTopOf_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), badge, onTopOf );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDisableHighlight_( char highlight ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisableHighlight_( Handle, CachedSelectors.setDisableHighlight_, out ___occuredException, sizeof( char ), highlight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setModifiedSmartGroup_( char @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.setModifiedSmartGroup_( Handle, CachedSelectors.setModifiedSmartGroup_, out ___occuredException, sizeof( char ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRoundedEdges_( int edges ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRoundedEdges_( Handle, CachedSelectors.setRoundedEdges_, out ___occuredException, sizeof( int ), edges );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowIdentityBadge_( char badge ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowIdentityBadge_( Handle, CachedSelectors.setShowIdentityBadge_, out ___occuredException, sizeof( char ), badge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUIController_( Handle, CachedSelectors.setUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void createIdentityImages( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr createImageByCompositingBadge_onTopOf_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject badge, NObjective.RuntimeObject onTopOf );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDisableHighlight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char highlight );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setModifiedSmartGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setRoundedEdges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int edges );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShowIdentityBadge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char badge );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
		}
		static internal class CachedSelectors {
			public static readonly Selector createIdentityImages = "createIdentityImages";
			public static readonly Selector createImageByCompositingBadge_onTopOf_ = "createImageByCompositingBadge:onTopOf:";
			public static readonly Selector setDisableHighlight_ = "setDisableHighlight:";
			public static readonly Selector setModifiedSmartGroup_ = "setModifiedSmartGroup:";
			public static readonly Selector setRoundedEdges_ = "setRoundedEdges:";
			public static readonly Selector setShowIdentityBadge_ = "setShowIdentityBadge:";
			public static readonly Selector setUIController_ = "setUIController:";
		}
	}
	[ProxyBaseClass(typeof( ABRecord ))]
	public struct ABPerson : IEquatable<ABPerson> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPerson;
		public static implicit operator IntPtr( ABPerson value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPerson value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPerson ) ) return false; 
			return Handle == ( ( ABPerson )value ).Handle;
		}
		public bool Equals( ABPerson value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPerson value1, ABPerson value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPerson value1, ABPerson value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPerson( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPerson alloc() {
			return new ABPerson( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int addPropertiesAndTypes_( NSDictionary types ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_( ClassHandle, CachedSelectors.addPropertiesAndTypes_, out ___occuredException, sizeof( NSDictionary ), types );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int addPropertiesAndTypes_withAddressBook_( NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_withAddressBook_( ClassHandle, CachedSelectors.addPropertiesAndTypes_withAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), types, withAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int addPropertiesAndTypes_withAddressBook_acquireLock_( NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook, char acquireLock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_withAddressBook_acquireLock_( ClassHandle, CachedSelectors.addPropertiesAndTypes_withAddressBook_acquireLock_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), types, withAddressBook, acquireLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int addPropertiesAndTypes_withAddressBook_acquireLock_save_( NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook, char acquireLock, char save ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_withAddressBook_acquireLock_save_( ClassHandle, CachedSelectors.addPropertiesAndTypes_withAddressBook_acquireLock_save_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), types, withAddressBook, acquireLock, save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject builtInLabels() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.builtInLabels( ClassHandle, CachedSelectors.builtInLabels, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject builtInLabelsForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.builtInLabelsForProperty_( ClassHandle, CachedSelectors.builtInLabelsForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void cancelLoadingImageDataForTag_( int tag ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelLoadingImageDataForTag_( ClassHandle, CachedSelectors.cancelLoadingImageDataForTag_, out ___occuredException, sizeof( int ), tag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void clearPrivateFields() {
			RuntimeObject ___occuredException;
			NativeMethods.clearPrivateFields( ClassHandle, CachedSelectors.clearPrivateFields, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static char includeNotesInVCards() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.includeNotesInVCards( ClassHandle, CachedSelectors.includeNotesInVCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char includePhotosInVCards() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.includePhotosInVCards( ClassHandle, CachedSelectors.includePhotosInVCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject initialFieldsForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initialFieldsForProperty_( ClassHandle, CachedSelectors.initialFieldsForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject peopleFromVCardData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peopleFromVCardData_( ClassHandle, CachedSelectors.peopleFromVCardData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject personFromDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.personFromDictionary_( ClassHandle, CachedSelectors.personFromDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject personFromDictionary_addressBook_skipUnknownProperties_generateMultiValueIDs_( NObjective.RuntimeObject dictionary, NObjective.RuntimeObject addressBook, char skipUnknownProperties, char generateMultiValueIDs ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.personFromDictionary_addressBook_skipUnknownProperties_generateMultiValueIDs_( ClassHandle, CachedSelectors.personFromDictionary_addressBook_skipUnknownProperties_generateMultiValueIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), dictionary, addressBook, skipUnknownProperties, generateMultiValueIDs );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char privateVCardEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.privateVCardEnabled( ClassHandle, CachedSelectors.privateVCardEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject relatedMatchesForName_label_givenLastName_( NObjective.RuntimeObject name, NObjective.RuntimeObject label, NObjective.RuntimeObject givenLastName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.relatedMatchesForName_label_givenLastName_( ClassHandle, CachedSelectors.relatedMatchesForName_label_givenLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, label, givenLastName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static int removeProperties_( NSArray properties ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeProperties_( ClassHandle, CachedSelectors.removeProperties_, out ___occuredException, sizeof( NSArray ), properties );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static ABSearchElement searchElementForProperty_label_key_value_comparison_( string property, string label, string key, NObjective.RuntimeObject value, int comparison ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___wrappedlabel = Runtime.CreateStringProxy( label );
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.searchElementForProperty_label_key_value_comparison_( ClassHandle, CachedSelectors.searchElementForProperty_label_key_value_comparison_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), ___wrappedproperty, ___wrappedlabel, ___wrappedkey, value, comparison );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedlabel );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABSearchElement( ___result );
		}
		unsafe public static void setIncludeNotesInVCards_( char cards ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIncludeNotesInVCards_( ClassHandle, CachedSelectors.setIncludeNotesInVCards_, out ___occuredException, sizeof( char ), cards );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setIncludePhotosInVCards_( char cards ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIncludePhotosInVCards_( ClassHandle, CachedSelectors.setIncludePhotosInVCards_, out ___occuredException, sizeof( char ), cards );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setPrivateVCardEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrivateVCardEnabled_( ClassHandle, CachedSelectors.setPrivateVCardEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setVCardField_isPrivate_( NObjective.RuntimeObject field, char isPrivate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVCardField_isPrivate_( ClassHandle, CachedSelectors.setVCardField_isPrivate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), field, isPrivate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static char vcardFieldisPrivate_( NObjective.RuntimeObject @private ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vcardFieldisPrivate_( ClassHandle, CachedSelectors.vcardFieldisPrivate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @private );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char abHasSimilarAddress_( NObjective.RuntimeObject address ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abHasSimilarAddress_( Handle, CachedSelectors.abHasSimilarAddress_, out ___occuredException, sizeof( NObjective.RuntimeObject ), address );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject abUsedProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abUsedProperties( Handle, CachedSelectors.abUsedProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allPropertiesIncludingImage_( char image ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPropertiesIncludingImage_( Handle, CachedSelectors.allPropertiesIncludingImage_, out ___occuredException, sizeof( char ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject alternateName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alternateName( Handle, CachedSelectors.alternateName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void appendLabel_toVCardRep_inGroup_( NObjective.RuntimeObject label, NObjective.RuntimeObject toVCardRep, NObjective.RuntimeObject inGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendLabel_toVCardRep_inGroup_( Handle, CachedSelectors.appendLabel_toVCardRep_inGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), label, toVCardRep, inGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int beginLoadingImageDataForClient_( NObjective.RuntimeObject client ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.beginLoadingImageDataForClient_( Handle, CachedSelectors.beginLoadingImageDataForClient_, out ___occuredException, sizeof( NObjective.RuntimeObject ), client );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject categories() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.categories( Handle, CachedSelectors.categories, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject compositeName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compositeName( Handle, CachedSelectors.compositeName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dotMacNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dotMacNames( Handle, CachedSelectors.dotMacNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject encodedDataForValue_charsetName_( NObjective.RuntimeObject value, System.IntPtr charsetName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.encodedDataForValue_charsetName_( Handle, CachedSelectors.encodedDataForValue_charsetName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), value, charsetName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject encodedLineForValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.encodedLineForValue_( Handle, CachedSelectors.encodedLineForValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasCustomImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasCustomImage( Handle, CachedSelectors.hasCustomImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char hasCustomImageOfKind_( NObjective.RuntimeObject kind ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasCustomImageOfKind_( Handle, CachedSelectors.hasCustomImageOfKind_, out ___occuredException, sizeof( NObjective.RuntimeObject ), kind );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSData imageData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageData( Handle, CachedSelectors.imageData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NObjective.RuntimeObject imageDataOfKind_( NObjective.RuntimeObject kind ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageDataOfKind_( Handle, CachedSelectors.imageDataOfKind_, out ___occuredException, sizeof( NObjective.RuntimeObject ), kind );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithVCardRepresentation_( NSData representation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithVCardRepresentation_( Handle, CachedSelectors.initWithVCardRepresentation_, out ___occuredException, sizeof( NSData ), representation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isEmptyPerson() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEmptyPerson( Handle, CachedSelectors.isEmptyPerson, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject ISO8061StringFromDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ISO8061StringFromDate_( Handle, CachedSelectors.ISO8061StringFromDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject largeImageClippingRectIDOfType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.largeImageClippingRectIDOfType_( Handle, CachedSelectors.largeImageClippingRectIDOfType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject largeImageClippingRectTypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.largeImageClippingRectTypes( Handle, CachedSelectors.largeImageClippingRectTypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject largeImageData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.largeImageData( Handle, CachedSelectors.largeImageData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject largeImagePath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.largeImagePath( Handle, CachedSelectors.largeImagePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mergedSimilarMultiValuesIn_forProperty_changes_( NObjective.RuntimeObject @in, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mergedSimilarMultiValuesIn_forProperty_changes_( Handle, CachedSelectors.mergedSimilarMultiValuesIn_forProperty_changes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @in, forProperty, changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void mergeMultiValue_forProperty_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeMultiValue_forProperty_( Handle, CachedSelectors.mergeMultiValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void mergeNote_( NObjective.RuntimeObject note ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeNote_( Handle, CachedSelectors.mergeNote_, out ___occuredException, sizeof( NObjective.RuntimeObject ), note );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void mergeSingleValue_forProperty_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeSingleValue_forProperty_( Handle, CachedSelectors.mergeSingleValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts__fullName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts__fullName( Handle, CachedSelectors.nts__fullName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts__fullNameIncludingAuxiliaryElements_( char elements ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts__fullNameIncludingAuxiliaryElements_( Handle, CachedSelectors.nts__fullNameIncludingAuxiliaryElements_, out ___occuredException, sizeof( char ), elements );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts__fullPhoneticName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts__fullPhoneticName( Handle, CachedSelectors.nts__fullPhoneticName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts__isCompany() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts__isCompany( Handle, CachedSelectors.nts__isCompany, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts__isLastNameFirst() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts__isLastNameFirst( Handle, CachedSelectors.nts__isLastNameFirst, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts__RealCompositeName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts__RealCompositeName( Handle, CachedSelectors.nts__RealCompositeName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_AlternateName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AlternateName( Handle, CachedSelectors.nts_AlternateName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_CustomImageData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_CustomImageData( Handle, CachedSelectors.nts_CustomImageData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_imageNameForPerson() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_imageNameForPerson( Handle, CachedSelectors.nts_imageNameForPerson, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_PathForUIDTaggedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_PathForUIDTaggedImage( Handle, CachedSelectors.nts_PathForUIDTaggedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_PathForUIDTaggedImageOfKind_( NObjective.RuntimeObject kind ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_PathForUIDTaggedImageOfKind_( Handle, CachedSelectors.nts_PathForUIDTaggedImageOfKind_, out ___occuredException, sizeof( NObjective.RuntimeObject ), kind );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_SetImageData_kind_( NObjective.RuntimeObject data, NObjective.RuntimeObject kind ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetImageData_kind_( Handle, CachedSelectors.nts_SetImageData_kind_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), data, kind );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject pathForUIDTaggedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathForUIDTaggedImage( Handle, CachedSelectors.pathForUIDTaggedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void populateWithDictionary_skipUnknownProperties_generateMultiValueIDs_recordIsNew_( NObjective.RuntimeObject dictionary, char skipUnknownProperties, char generateMultiValueIDs, char recordIsNew ) {
			RuntimeObject ___occuredException;
			NativeMethods.populateWithDictionary_skipUnknownProperties_generateMultiValueIDs_recordIsNew_( Handle, CachedSelectors.populateWithDictionary_skipUnknownProperties_generateMultiValueIDs_recordIsNew_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ), dictionary, skipUnknownProperties, generateMultiValueIDs, recordIsNew );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject propertyLineForGenericABProperty_vCardProperty_is21_groupCount_( NObjective.RuntimeObject property, NObjective.RuntimeObject vCardProperty, char is21, System.IntPtr groupCount ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyLineForGenericABProperty_vCardProperty_is21_groupCount_( Handle, CachedSelectors.propertyLineForGenericABProperty_vCardProperty_is21_groupCount_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), property, vCardProperty, is21, groupCount );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyLineForGenericABProperty21_vCardProperty_( NObjective.RuntimeObject property21, NObjective.RuntimeObject vCardProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyLineForGenericABProperty21_vCardProperty_( Handle, CachedSelectors.propertyLineForGenericABProperty21_vCardProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property21, vCardProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject relatedMatchesForIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.relatedMatchesForIdentifier_( Handle, CachedSelectors.relatedMatchesForIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void resetWithDictionary_skipUnknownProperties_generateMultiValueIDs_( NObjective.RuntimeObject dictionary, char skipUnknownProperties, char generateMultiValueIDs ) {
			RuntimeObject ___occuredException;
			NativeMethods.resetWithDictionary_skipUnknownProperties_generateMultiValueIDs_( Handle, CachedSelectors.resetWithDictionary_skipUnknownProperties_generateMultiValueIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), dictionary, skipUnknownProperties, generateMultiValueIDs );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCategories_( NObjective.RuntimeObject categories ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCategories_( Handle, CachedSelectors.setCategories_, out ___occuredException, sizeof( NObjective.RuntimeObject ), categories );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool setImageData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setImageData_( Handle, CachedSelectors.setImageData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setImageData_kind_( NObjective.RuntimeObject data, NObjective.RuntimeObject kind ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setImageData_kind_( Handle, CachedSelectors.setImageData_kind_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), data, kind );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setLargeImageClippingRect_( NObjective.RuntimeObject rect ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setLargeImageClippingRect_( Handle, CachedSelectors.setLargeImageClippingRect_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setLargeImageData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setLargeImageData_( Handle, CachedSelectors.setLargeImageData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject similarNameForHashing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.similarNameForHashing( Handle, CachedSelectors.similarNameForHashing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void updateMultiValue_forProperty_changes_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateMultiValue_forProperty_changes_( Handle, CachedSelectors.updateMultiValue_forProperty_changes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty, changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateNote_changes_( NObjective.RuntimeObject note, NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateNote_changes_( Handle, CachedSelectors.updateNote_changes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), note, changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateSingleValue_forProperty_changes_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateSingleValue_forProperty_changes_( Handle, CachedSelectors.updateSingleValue_forProperty_changes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty, changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSData vCardRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vCardRepresentation( Handle, CachedSelectors.vCardRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abHasSimilarAddress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject address );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abUsedProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary types );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_withAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_withAddressBook_acquireLock_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook, char acquireLock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_withAddressBook_acquireLock_save_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeObject withAddressBook, char acquireLock, char save );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allPropertiesIncludingImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char image );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr alternateName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void appendLabel_toVCardRep_inGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label, NObjective.RuntimeObject toVCardRep, NObjective.RuntimeObject inGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int beginLoadingImageDataForClient_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject client );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr builtInLabels( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr builtInLabelsForProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelLoadingImageDataForTag_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tag );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr categories( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearPrivateFields( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr compositeName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dotMacNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr encodedDataForValue_charsetName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, System.IntPtr charsetName );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr encodedLineForValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasCustomImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasCustomImageOfKind_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject kind );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr imageData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr imageDataOfKind_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject kind );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char includeNotesInVCards( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char includePhotosInVCards( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initialFieldsForProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithVCardRepresentation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData representation );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isEmptyPerson( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr ISO8061StringFromDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr largeImageClippingRectIDOfType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr largeImageClippingRectTypes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr largeImageData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr largeImagePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr mergedSimilarMultiValuesIn_forProperty_changes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @in, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void mergeMultiValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void mergeNote_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject note );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void mergeSingleValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts__fullName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts__fullNameIncludingAuxiliaryElements_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char elements );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts__fullPhoneticName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts__isCompany( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts__isLastNameFirst( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts__RealCompositeName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_AlternateName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_CustomImageData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_imageNameForPerson( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_PathForUIDTaggedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_PathForUIDTaggedImageOfKind_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject kind );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_SetImageData_kind_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, NObjective.RuntimeObject kind );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pathForUIDTaggedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr peopleFromVCardData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr personFromDictionary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr personFromDictionary_addressBook_skipUnknownProperties_generateMultiValueIDs_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, NObjective.RuntimeObject addressBook, char skipUnknownProperties, char generateMultiValueIDs );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void populateWithDictionary_skipUnknownProperties_generateMultiValueIDs_recordIsNew_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, char skipUnknownProperties, char generateMultiValueIDs, char recordIsNew );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char privateVCardEnabled( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyLineForGenericABProperty_vCardProperty_is21_groupCount_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject vCardProperty, char is21, System.IntPtr groupCount );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyLineForGenericABProperty21_vCardProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property21, NObjective.RuntimeObject vCardProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr relatedMatchesForIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr relatedMatchesForName_label_givenLastName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject label, NObjective.RuntimeObject givenLastName );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int removeProperties_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray properties );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetWithDictionary_skipUnknownProperties_generateMultiValueIDs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, char skipUnknownProperties, char generateMultiValueIDs );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchElementForProperty_label_key_value_comparison_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property, IntPtr label, IntPtr key, NObjective.RuntimeObject value, int comparison );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCategories_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject categories );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool setImageData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char setImageData_kind_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, NObjective.RuntimeObject kind );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIncludeNotesInVCards_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char cards );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIncludePhotosInVCards_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char cards );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char setLargeImageClippingRect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rect );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char setLargeImageData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPrivateVCardEnabled_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setVCardField_isPrivate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field, char isPrivate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr similarNameForHashing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateMultiValue_forProperty_changes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateNote_changes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject note, NObjective.RuntimeObject changes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateSingleValue_forProperty_changes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char vcardFieldisPrivate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @private );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr vCardRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector abHasSimilarAddress_ = "abHasSimilarAddress:";
			public static readonly Selector abUsedProperties = "abUsedProperties";
			public static readonly Selector addPropertiesAndTypes_ = "addPropertiesAndTypes:";
			public static readonly Selector addPropertiesAndTypes_withAddressBook_ = "addPropertiesAndTypes:withAddressBook:";
			public static readonly Selector addPropertiesAndTypes_withAddressBook_acquireLock_ = "addPropertiesAndTypes:withAddressBook:acquireLock:";
			public static readonly Selector addPropertiesAndTypes_withAddressBook_acquireLock_save_ = "addPropertiesAndTypes:withAddressBook:acquireLock:save:";
			public static readonly Selector allPropertiesIncludingImage_ = "allPropertiesIncludingImage:";
			public static readonly Selector alternateName = "alternateName";
			public static readonly Selector appendLabel_toVCardRep_inGroup_ = "appendLabel:toVCardRep:inGroup:";
			public static readonly Selector beginLoadingImageDataForClient_ = "beginLoadingImageDataForClient:";
			public static readonly Selector builtInLabels = "builtInLabels";
			public static readonly Selector builtInLabelsForProperty_ = "builtInLabelsForProperty:";
			public static readonly Selector cancelLoadingImageDataForTag_ = "cancelLoadingImageDataForTag:";
			public static readonly Selector categories = "categories";
			public static readonly Selector clearPrivateFields = "clearPrivateFields";
			public static readonly Selector compositeName = "compositeName";
			public static readonly Selector dotMacNames = "dotMacNames";
			public static readonly Selector encodedDataForValue_charsetName_ = "encodedDataForValue:charsetName:";
			public static readonly Selector encodedLineForValue_ = "encodedLineForValue:";
			public static readonly Selector hasCustomImage = "hasCustomImage";
			public static readonly Selector hasCustomImageOfKind_ = "hasCustomImageOfKind:";
			public static readonly Selector imageData = "imageData";
			public static readonly Selector imageDataOfKind_ = "imageDataOfKind:";
			public static readonly Selector includeNotesInVCards = "includeNotesInVCards";
			public static readonly Selector includePhotosInVCards = "includePhotosInVCards";
			public static readonly Selector initialFieldsForProperty_ = "initialFieldsForProperty:";
			public static readonly Selector initWithVCardRepresentation_ = "initWithVCardRepresentation:";
			public static readonly Selector isEmptyPerson = "isEmptyPerson";
			public static readonly Selector ISO8061StringFromDate_ = "ISO8061StringFromDate:";
			public static readonly Selector largeImageClippingRectIDOfType_ = "largeImageClippingRectIDOfType:";
			public static readonly Selector largeImageClippingRectTypes = "largeImageClippingRectTypes";
			public static readonly Selector largeImageData = "largeImageData";
			public static readonly Selector largeImagePath = "largeImagePath";
			public static readonly Selector mergedSimilarMultiValuesIn_forProperty_changes_ = "mergedSimilarMultiValuesIn:forProperty:changes:";
			public static readonly Selector mergeMultiValue_forProperty_ = "mergeMultiValue:forProperty:";
			public static readonly Selector mergeNote_ = "mergeNote:";
			public static readonly Selector mergeSingleValue_forProperty_ = "mergeSingleValue:forProperty:";
			public static readonly Selector nts__fullName = "nts__fullName";
			public static readonly Selector nts__fullNameIncludingAuxiliaryElements_ = "nts__fullNameIncludingAuxiliaryElements:";
			public static readonly Selector nts__fullPhoneticName = "nts__fullPhoneticName";
			public static readonly Selector nts__isCompany = "nts__isCompany";
			public static readonly Selector nts__isLastNameFirst = "nts__isLastNameFirst";
			public static readonly Selector nts__RealCompositeName = "nts__RealCompositeName";
			public static readonly Selector nts_AlternateName = "nts_AlternateName";
			public static readonly Selector nts_CustomImageData = "nts_CustomImageData";
			public static readonly Selector nts_imageNameForPerson = "nts_imageNameForPerson";
			public static readonly Selector nts_PathForUIDTaggedImage = "nts_PathForUIDTaggedImage";
			public static readonly Selector nts_PathForUIDTaggedImageOfKind_ = "nts_PathForUIDTaggedImageOfKind:";
			public static readonly Selector nts_SetImageData_kind_ = "nts_SetImageData:kind:";
			public static readonly Selector pathForUIDTaggedImage = "pathForUIDTaggedImage";
			public static readonly Selector peopleFromVCardData_ = "peopleFromVCardData:";
			public static readonly Selector personFromDictionary_ = "personFromDictionary:";
			public static readonly Selector personFromDictionary_addressBook_skipUnknownProperties_generateMultiValueIDs_ = "personFromDictionary:addressBook:skipUnknownProperties:generateMultiValueIDs:";
			public static readonly Selector populateWithDictionary_skipUnknownProperties_generateMultiValueIDs_recordIsNew_ = "populateWithDictionary:skipUnknownProperties:generateMultiValueIDs:recordIsNew:";
			public static readonly Selector privateVCardEnabled = "privateVCardEnabled";
			public static readonly Selector propertyLineForGenericABProperty_vCardProperty_is21_groupCount_ = "propertyLineForGenericABProperty:vCardProperty:is21:groupCount:";
			public static readonly Selector propertyLineForGenericABProperty21_vCardProperty_ = "propertyLineForGenericABProperty21:vCardProperty:";
			public static readonly Selector relatedMatchesForIdentifier_ = "relatedMatchesForIdentifier:";
			public static readonly Selector relatedMatchesForName_label_givenLastName_ = "relatedMatchesForName:label:givenLastName:";
			public static readonly Selector removeProperties_ = "removeProperties:";
			public static readonly Selector resetWithDictionary_skipUnknownProperties_generateMultiValueIDs_ = "resetWithDictionary:skipUnknownProperties:generateMultiValueIDs:";
			public static readonly Selector searchElementForProperty_label_key_value_comparison_ = "searchElementForProperty:label:key:value:comparison:";
			public static readonly Selector setCategories_ = "setCategories:";
			public static readonly Selector setImageData_ = "setImageData:";
			public static readonly Selector setImageData_kind_ = "setImageData:kind:";
			public static readonly Selector setIncludeNotesInVCards_ = "setIncludeNotesInVCards:";
			public static readonly Selector setIncludePhotosInVCards_ = "setIncludePhotosInVCards:";
			public static readonly Selector setLargeImageClippingRect_ = "setLargeImageClippingRect:";
			public static readonly Selector setLargeImageData_ = "setLargeImageData:";
			public static readonly Selector setPrivateVCardEnabled_ = "setPrivateVCardEnabled:";
			public static readonly Selector setVCardField_isPrivate_ = "setVCardField:isPrivate:";
			public static readonly Selector similarNameForHashing = "similarNameForHashing";
			public static readonly Selector updateMultiValue_forProperty_changes_ = "updateMultiValue:forProperty:changes:";
			public static readonly Selector updateNote_changes_ = "updateNote:changes:";
			public static readonly Selector updateSingleValue_forProperty_changes_ = "updateSingleValue:forProperty:changes:";
			public static readonly Selector vcardFieldisPrivate_ = "vcardFieldisPrivate:";
			public static readonly Selector vCardRepresentation = "vCardRepresentation";
		}
	}
	[ProxyBaseClass(typeof( NSImageView ))]
	public struct ABPersonImageView : IEquatable<ABPersonImageView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPersonImageView;
		public static implicit operator IntPtr( ABPersonImageView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPersonImageView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPersonImageView ) ) return false; 
			return Handle == ( ( ABPersonImageView )value ).Handle;
		}
		public bool Equals( ABPersonImageView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPersonImageView value1, ABPersonImageView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPersonImageView value1, ABPersonImageView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPersonImageView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPersonImageView alloc() {
			return new ABPersonImageView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibleChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibleChildren( Handle, CachedSelectors.accessibleChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject card() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.card( Handle, CachedSelectors.card, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char empty() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.empty( Handle, CachedSelectors.empty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void errorInSetImageFromPath() {
			RuntimeObject ___occuredException;
			NativeMethods.errorInSetImageFromPath( Handle, CachedSelectors.errorInSetImageFromPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void imagePickerValidated_code_contextInfo_( NObjective.RuntimeObject validated, int code, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.imagePickerValidated_code_contextInfo_( Handle, CachedSelectors.imagePickerValidated_code_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), validated, code, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject inputController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inputController( Handle, CachedSelectors.inputController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void issueSetImageCommandWithData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.issueSetImageCommandWithData_( Handle, CachedSelectors.issueSetImageCommandWithData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject pathNameForImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathNameForImage( Handle, CachedSelectors.pathNameForImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void savePanelDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.savePanelDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.savePanelDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEmpty_( char empty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEmpty_( Handle, CachedSelectors.setEmpty_, out ___occuredException, sizeof( char ), empty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setImageFromPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			NativeMethods.setImageFromPath_( Handle, CachedSelectors.setImageFromPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsMe_( char me ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsMe_( Handle, CachedSelectors.setIsMe_, out ___occuredException, sizeof( char ), me );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNoImage_( char image ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNoImage_( Handle, CachedSelectors.setNoImage_, out ___occuredException, sizeof( char ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showPicker() {
			RuntimeObject ___occuredException;
			NativeMethods.showPicker( Handle, CachedSelectors.showPicker, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibleChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr card( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char empty( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void errorInSetImageFromPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void imagePickerValidated_code_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject validated, int code, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr inputController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void issueSetImageCommandWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pathNameForImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void savePanelDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEmpty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char empty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setImageFromPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIsMe_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char me );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setNoImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char image );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showPicker( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibleChildren = "accessibleChildren";
			public static readonly Selector card = "card";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector empty = "empty";
			public static readonly Selector errorInSetImageFromPath = "errorInSetImageFromPath";
			public static readonly Selector imagePickerValidated_code_contextInfo_ = "imagePickerValidated:code:contextInfo:";
			public static readonly Selector inputController = "inputController";
			public static readonly Selector issueSetImageCommandWithData_ = "issueSetImageCommandWithData:";
			public static readonly Selector pathNameForImage = "pathNameForImage";
			public static readonly Selector savePanelDidEnd_returnCode_contextInfo_ = "savePanelDidEnd:returnCode:contextInfo:";
			public static readonly Selector setEmpty_ = "setEmpty:";
			public static readonly Selector setImageFromPath_ = "setImageFromPath:";
			public static readonly Selector setIsMe_ = "setIsMe:";
			public static readonly Selector setNoImage_ = "setNoImage:";
			public static readonly Selector showPicker = "showPicker";
		}
	}
	[ProxyBaseClass(typeof( NSFormatter ))]
	public struct ABPhoneFormatter : IEquatable<ABPhoneFormatter> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPhoneFormatter;
		public static implicit operator IntPtr( ABPhoneFormatter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPhoneFormatter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPhoneFormatter ) ) return false; 
			return Handle == ( ( ABPhoneFormatter )value ).Handle;
		}
		public bool Equals( ABPhoneFormatter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPhoneFormatter value1, ABPhoneFormatter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPhoneFormatter value1, ABPhoneFormatter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPhoneFormatter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPhoneFormatter alloc() {
			return new ABPhoneFormatter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject allowableCharacters() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowableCharacters( ClassHandle, CachedSelectors.allowableCharacters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nonAllowableCharacters() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nonAllowableCharacters( ClassHandle, CachedSelectors.nonAllowableCharacters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject phoneFormatsDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.phoneFormatsDictionary( ClassHandle, CachedSelectors.phoneFormatsDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addFormat_( NObjective.RuntimeObject format ) {
			RuntimeObject ___occuredException;
			NativeMethods.addFormat_( Handle, CachedSelectors.addFormat_, out ___occuredException, sizeof( NObjective.RuntimeObject ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char edited() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.edited( Handle, CachedSelectors.edited, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char enabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enabled( Handle, CachedSelectors.enabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject formatAutosaveName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formatAutosaveName( Handle, CachedSelectors.formatAutosaveName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject formats() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formats( Handle, CachedSelectors.formats, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void insertFormat_atIndex_( NObjective.RuntimeObject format, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertFormat_atIndex_( Handle, CachedSelectors.insertFormat_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), format, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveFormatAtIndex_toIndex_( uint index, uint toIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveFormatAtIndex_toIndex_( Handle, CachedSelectors.moveFormatAtIndex_toIndex_, out ___occuredException, sizeof( uint ) + sizeof( uint ), index, toIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllFormats() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllFormats( Handle, CachedSelectors.removeAllFormats, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeFormatAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeFormatAtIndex_( Handle, CachedSelectors.removeFormatAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceFormatAtIndex_withFormat_( uint index, NObjective.RuntimeObject withFormat ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceFormatAtIndex_withFormat_( Handle, CachedSelectors.replaceFormatAtIndex_withFormat_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), index, withFormat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEdited_( char edited ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEdited_( Handle, CachedSelectors.setEdited_, out ___occuredException, sizeof( char ), edited );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEnabled_( Handle, CachedSelectors.setEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFormatAutosaveName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFormatAutosaveName_( Handle, CachedSelectors.setFormatAutosaveName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allowableCharacters( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char edited( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char enabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr formatAutosaveName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr formats( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void insertFormat_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format, uint atIndex );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void moveFormatAtIndex_toIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, uint toIndex );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nonAllowableCharacters( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr phoneFormatsDictionary( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeAllFormats( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeFormatAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void replaceFormatAtIndex_withFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject withFormat );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEdited_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char edited );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setFormatAutosaveName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
		}
		static internal class CachedSelectors {
			public static readonly Selector addFormat_ = "addFormat:";
			public static readonly Selector allowableCharacters = "allowableCharacters";
			public static readonly Selector edited = "edited";
			public static readonly Selector enabled = "enabled";
			public static readonly Selector formatAutosaveName = "formatAutosaveName";
			public static readonly Selector formats = "formats";
			public static readonly Selector insertFormat_atIndex_ = "insertFormat:atIndex:";
			public static readonly Selector moveFormatAtIndex_toIndex_ = "moveFormatAtIndex:toIndex:";
			public static readonly Selector nonAllowableCharacters = "nonAllowableCharacters";
			public static readonly Selector phoneFormatsDictionary = "phoneFormatsDictionary";
			public static readonly Selector removeAllFormats = "removeAllFormats";
			public static readonly Selector removeFormatAtIndex_ = "removeFormatAtIndex:";
			public static readonly Selector replaceFormatAtIndex_withFormat_ = "replaceFormatAtIndex:withFormat:";
			public static readonly Selector setEdited_ = "setEdited:";
			public static readonly Selector setEnabled_ = "setEnabled:";
			public static readonly Selector setFormatAutosaveName_ = "setFormatAutosaveName:";
		}
	}
	[ProxyBaseClass(typeof( NSPopUpButtonCell ))]
	public struct ABPopUpButtonCell : IEquatable<ABPopUpButtonCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPopUpButtonCell;
		public static implicit operator IntPtr( ABPopUpButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPopUpButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPopUpButtonCell ) ) return false; 
			return Handle == ( ( ABPopUpButtonCell )value ).Handle;
		}
		public bool Equals( ABPopUpButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPopUpButtonCell value1, ABPopUpButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPopUpButtonCell value1, ABPopUpButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPopUpButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPopUpButtonCell alloc() {
			return new ABPopUpButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject attachment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attachment( Handle, CachedSelectors.attachment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithTitle_inputController_( NObjective.RuntimeObject title, NObjective.RuntimeObject inputController ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTitle_inputController_( Handle, CachedSelectors.initWithTitle_inputController_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, inputController );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject inputController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inputController( Handle, CachedSelectors.inputController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void redisplayPopup() {
			RuntimeObject ___occuredException;
			NativeMethods.redisplayPopup( Handle, CachedSelectors.redisplayPopup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAttachment_( NObjective.RuntimeObject attachment ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttachment_( Handle, CachedSelectors.setAttachment_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attachment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateWidth() {
			RuntimeObject ___occuredException;
			NativeMethods.updateWidth( Handle, CachedSelectors.updateWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char wantsToTrackMouse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wantsToTrackMouse( Handle, CachedSelectors.wantsToTrackMouse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr attachment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithTitle_inputController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.RuntimeObject inputController );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr inputController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void redisplayPopup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAttachment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attachment );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char wantsToTrackMouse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attachment = "attachment";
			public static readonly Selector initWithTitle_inputController_ = "initWithTitle:inputController:";
			public static readonly Selector inputController = "inputController";
			public static readonly Selector redisplayPopup = "redisplayPopup";
			public static readonly Selector setAttachment_ = "setAttachment:";
			public static readonly Selector updateWidth = "updateWidth";
			public static readonly Selector wantsToTrackMouse = "wantsToTrackMouse";
		}
	}
	[ProxyBaseClass(typeof( NSCell ))]
	public struct ABProgressWedgeCell : IEquatable<ABProgressWedgeCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABProgressWedgeCell;
		public static implicit operator IntPtr( ABProgressWedgeCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABProgressWedgeCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABProgressWedgeCell ) ) return false; 
			return Handle == ( ( ABProgressWedgeCell )value ).Handle;
		}
		public bool Equals( ABProgressWedgeCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABProgressWedgeCell value1, ABProgressWedgeCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABProgressWedgeCell value1, ABProgressWedgeCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABProgressWedgeCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABProgressWedgeCell alloc() {
			return new ABProgressWedgeCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void animateIndeterminateProgressToStop() {
			RuntimeObject ___occuredException;
			NativeMethods.animateIndeterminateProgressToStop( ClassHandle, CachedSelectors.animateIndeterminateProgressToStop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static char indeterminateAnimationIsParked() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indeterminateAnimationIsParked( ClassHandle, CachedSelectors.indeterminateAnimationIsParked, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void restartIndeterminateCycle() {
			RuntimeObject ___occuredException;
			NativeMethods.restartIndeterminateCycle( ClassHandle, CachedSelectors.restartIndeterminateCycle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject alternateColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alternateColor( Handle, CachedSelectors.alternateColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject color() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.color( Handle, CachedSelectors.color, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isAButtonWhenNotProgressing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAButtonWhenNotProgressing( Handle, CachedSelectors.isAButtonWhenNotProgressing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isIndeterminate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isIndeterminate( Handle, CachedSelectors.isIndeterminate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float progress() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.progress( Handle, CachedSelectors.progress, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAlternateColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlternateColor_( Handle, CachedSelectors.setAlternateColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setColor_( Handle, CachedSelectors.setColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIndeterminate_( char indeterminate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIndeterminate_( Handle, CachedSelectors.setIndeterminate_, out ___occuredException, sizeof( char ), indeterminate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsAButtonWhenNotProgressing_( char progressing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsAButtonWhenNotProgressing_( Handle, CachedSelectors.setIsAButtonWhenNotProgressing_, out ___occuredException, sizeof( char ), progressing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProgress_( float progress ) {
			RuntimeObject ___occuredException;
			NativeMethods.setProgress_( Handle, CachedSelectors.setProgress_, out ___occuredException, sizeof( float ), progress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUsesArrowStyle_( char style ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUsesArrowStyle_( Handle, CachedSelectors.setUsesArrowStyle_, out ___occuredException, sizeof( char ), style );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char usesArrowStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.usesArrowStyle( Handle, CachedSelectors.usesArrowStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr alternateColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void animateIndeterminateProgressToStop( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr color( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char indeterminateAnimationIsParked( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isAButtonWhenNotProgressing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isIndeterminate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float progress( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void restartIndeterminateCycle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAlternateColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIndeterminate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char indeterminate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIsAButtonWhenNotProgressing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char progressing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setProgress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float progress );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUsesArrowStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char style );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char usesArrowStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector alternateColor = "alternateColor";
			public static readonly Selector animateIndeterminateProgressToStop = "animateIndeterminateProgressToStop";
			public static readonly Selector color = "color";
			public static readonly Selector indeterminateAnimationIsParked = "indeterminateAnimationIsParked";
			public static readonly Selector isAButtonWhenNotProgressing = "isAButtonWhenNotProgressing";
			public static readonly Selector isIndeterminate = "isIndeterminate";
			public static readonly Selector progress = "progress";
			public static readonly Selector restartIndeterminateCycle = "restartIndeterminateCycle";
			public static readonly Selector setAlternateColor_ = "setAlternateColor:";
			public static readonly Selector setColor_ = "setColor:";
			public static readonly Selector setIndeterminate_ = "setIndeterminate:";
			public static readonly Selector setIsAButtonWhenNotProgressing_ = "setIsAButtonWhenNotProgressing:";
			public static readonly Selector setProgress_ = "setProgress:";
			public static readonly Selector setUsesArrowStyle_ = "setUsesArrowStyle:";
			public static readonly Selector usesArrowStyle = "usesArrowStyle";
		}
	}
	[ProxyBaseClass(typeof( NSTableHeaderCell ))]
	public struct ABPropertyHeaderCell : IEquatable<ABPropertyHeaderCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPropertyHeaderCell;
		public static implicit operator IntPtr( ABPropertyHeaderCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPropertyHeaderCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPropertyHeaderCell ) ) return false; 
			return Handle == ( ( ABPropertyHeaderCell )value ).Handle;
		}
		public bool Equals( ABPropertyHeaderCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPropertyHeaderCell value1, ABPropertyHeaderCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPropertyHeaderCell value1, ABPropertyHeaderCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPropertyHeaderCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPropertyHeaderCell alloc() {
			return new ABPropertyHeaderCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addItemWithTitle_andIdentifier_( NObjective.RuntimeObject title, NObjective.RuntimeObject andIdentifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemWithTitle_andIdentifier_( Handle, CachedSelectors.addItemWithTitle_andIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, andIdentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int indexOfIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfIdentifier_( Handle, CachedSelectors.indexOfIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject popup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.popup( Handle, CachedSelectors.popup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAllItems() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllItems( Handle, CachedSelectors.removeAllItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeItemWithIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeItemWithIdentifier_( Handle, CachedSelectors.removeItemWithIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectItemWithIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectItemWithIdentifier_( Handle, CachedSelectors.selectItemWithIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitle_ofItemWithIdentifier_( NObjective.RuntimeObject title, NObjective.RuntimeObject ofItemWithIdentifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitle_ofItemWithIdentifier_( Handle, CachedSelectors.setTitle_ofItemWithIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, ofItemWithIdentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addItemWithTitle_andIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.RuntimeObject andIdentifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int indexOfIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr popup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeAllItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeItemWithIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectItemWithIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setTitle_ofItemWithIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.RuntimeObject ofItemWithIdentifier );
		}
		static internal class CachedSelectors {
			public static readonly Selector addItemWithTitle_andIdentifier_ = "addItemWithTitle:andIdentifier:";
			public static readonly Selector indexOfIdentifier_ = "indexOfIdentifier:";
			public static readonly Selector popup = "popup";
			public static readonly Selector removeAllItems = "removeAllItems";
			public static readonly Selector removeItemWithIdentifier_ = "removeItemWithIdentifier:";
			public static readonly Selector selectItemWithIdentifier_ = "selectItemWithIdentifier:";
			public static readonly Selector setTitle_ofItemWithIdentifier_ = "setTitle:ofItemWithIdentifier:";
		}
	}
	[ProxyBaseClass(typeof( NSTableColumn ))]
	public struct ABPropertyTableColumn : IEquatable<ABPropertyTableColumn> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPropertyTableColumn;
		public static implicit operator IntPtr( ABPropertyTableColumn value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPropertyTableColumn value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABPropertyTableColumn ) ) return false; 
			return Handle == ( ( ABPropertyTableColumn )value ).Handle;
		}
		public bool Equals( ABPropertyTableColumn value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPropertyTableColumn value1, ABPropertyTableColumn value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPropertyTableColumn value1, ABPropertyTableColumn value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPropertyTableColumn( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPropertyTableColumn alloc() {
			return new ABPropertyTableColumn( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSButtonCell ))]
	public struct ABRadioButtonCell : IEquatable<ABRadioButtonCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRadioButtonCell;
		public static implicit operator IntPtr( ABRadioButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRadioButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABRadioButtonCell ) ) return false; 
			return Handle == ( ( ABRadioButtonCell )value ).Handle;
		}
		public bool Equals( ABRadioButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRadioButtonCell value1, ABRadioButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRadioButtonCell value1, ABRadioButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRadioButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRadioButtonCell alloc() {
			return new ABRadioButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject disabledSelectedImageForControlTint_( uint tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabledSelectedImageForControlTint_( Handle, CachedSelectors.disabledSelectedImageForControlTint_, out ___occuredException, sizeof( uint ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject disabledUnselectedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabledUnselectedImage( Handle, CachedSelectors.disabledUnselectedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pressedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pressedImage( Handle, CachedSelectors.pressedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedImageForControlTint_( uint tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedImageForControlTint_( Handle, CachedSelectors.selectedImageForControlTint_, out ___occuredException, sizeof( uint ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDisabledSelectedImage_forControlTint_( NObjective.RuntimeObject image, uint forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabledSelectedImage_forControlTint_( Handle, CachedSelectors.setDisabledSelectedImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisabledUnselectedImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabledUnselectedImage_( Handle, CachedSelectors.setDisabledUnselectedImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPressedImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPressedImage_( Handle, CachedSelectors.setPressedImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedImage_forControlTint_( NObjective.RuntimeObject image, uint forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedImage_forControlTint_( Handle, CachedSelectors.setSelectedImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUnselectedImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUnselectedImage_( Handle, CachedSelectors.setUnselectedImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject unselectedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unselectedImage( Handle, CachedSelectors.unselectedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr disabledSelectedImageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint tint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr disabledUnselectedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pressedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedImageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint tint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDisabledSelectedImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, uint forControlTint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDisabledUnselectedImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPressedImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, uint forControlTint );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUnselectedImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr unselectedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector disabledSelectedImageForControlTint_ = "disabledSelectedImageForControlTint:";
			public static readonly Selector disabledUnselectedImage = "disabledUnselectedImage";
			public static readonly Selector pressedImage = "pressedImage";
			public static readonly Selector selectedImageForControlTint_ = "selectedImageForControlTint:";
			public static readonly Selector setDisabledSelectedImage_forControlTint_ = "setDisabledSelectedImage:forControlTint:";
			public static readonly Selector setDisabledUnselectedImage_ = "setDisabledUnselectedImage:";
			public static readonly Selector setPressedImage_ = "setPressedImage:";
			public static readonly Selector setSelectedImage_forControlTint_ = "setSelectedImage:forControlTint:";
			public static readonly Selector setUnselectedImage_ = "setUnselectedImage:";
			public static readonly Selector unselectedImage = "unselectedImage";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABRecord : IEquatable<ABRecord> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRecord;
		public static implicit operator IntPtr( ABRecord value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRecord value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABRecord ) ) return false; 
			return Handle == ( ( ABRecord )value ).Handle;
		}
		public bool Equals( ABRecord value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRecord value1, ABRecord value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRecord value1, ABRecord value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRecord( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRecord alloc() {
			return new ABRecord( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char accessInstanceVariablesDirectly() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessInstanceVariablesDirectly( ClassHandle, CachedSelectors.accessInstanceVariablesDirectly, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject builtInProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.builtInProperties( ClassHandle, CachedSelectors.builtInProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_RecordFromDictionaryRepresentation_withRecordMapping_addressBook_generateIds_( NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping, NObjective.RuntimeObject addressBook, char generateIds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RecordFromDictionaryRepresentation_withRecordMapping_addressBook_generateIds_( ClassHandle, CachedSelectors.nts_RecordFromDictionaryRepresentation_withRecordMapping_addressBook_generateIds_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), representation, withRecordMapping, addressBook, generateIds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static int nts_TypeOfProperty_withAddressBook_( NObjective.RuntimeObject property, NObjective.RuntimeObject withAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_TypeOfProperty_withAddressBook_( ClassHandle, CachedSelectors.nts_TypeOfProperty_withAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, withAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject properties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.properties( ClassHandle, CachedSelectors.properties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject propertiesWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertiesWithAddressBook_( ClassHandle, CachedSelectors.propertiesWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject propertyTypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyTypes( ClassHandle, CachedSelectors.propertyTypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject propertyTypesWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyTypesWithAddressBook_( ClassHandle, CachedSelectors.propertyTypesWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject propertyTypesWithAddressBook_acquireLock_( NObjective.RuntimeObject book, char acquireLock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyTypesWithAddressBook_acquireLock_( ClassHandle, CachedSelectors.propertyTypesWithAddressBook_acquireLock_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), book, acquireLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject recordFromDictionaryRepresentation_withRecordMapping_addressBook_generateIds_( NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping, NObjective.RuntimeObject addressBook, char generateIds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordFromDictionaryRepresentation_withRecordMapping_addressBook_generateIds_( ClassHandle, CachedSelectors.recordFromDictionaryRepresentation_withRecordMapping_addressBook_generateIds_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), representation, withRecordMapping, addressBook, generateIds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static int typeOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeOfProperty_( ClassHandle, CachedSelectors.typeOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int typeOfProperty_withAddressBook_( NObjective.RuntimeObject property, NObjective.RuntimeObject withAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeOfProperty_withAddressBook_( ClassHandle, CachedSelectors.typeOfProperty_withAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, withAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject abAssimilatedRecordFor_( NObjective.RuntimeObject @for ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abAssimilatedRecordFor_( Handle, CachedSelectors.abAssimilatedRecordFor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @for );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject abcdMutableSetValueForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abcdMutableSetValueForKey_( Handle, CachedSelectors.abcdMutableSetValueForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void abcdSetValue_forKey_( NObjective.RuntimeObject value, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.abcdSetValue_forKey_( Handle, CachedSelectors.abcdSetValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject abcdValueForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abcdValueForKey_( Handle, CachedSelectors.abcdValueForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject abDatabaseImpl() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abDatabaseImpl( Handle, CachedSelectors.abDatabaseImpl, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char abIsCompatibleWithRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abIsCompatibleWithRecord_( Handle, CachedSelectors.abIsCompatibleWithRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allProperties( Handle, CachedSelectors.allProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clearTemporaryCache() {
			RuntimeObject ___occuredException;
			NativeMethods.clearTemporaryCache( Handle, CachedSelectors.clearTemporaryCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject createAlternateName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createAlternateName( Handle, CachedSelectors.createAlternateName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createFirstLastSorting_part1_( char sorting, char part1 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createFirstLastSorting_part1_( Handle, CachedSelectors.createFirstLastSorting_part1_, out ___occuredException, sizeof( char ) + sizeof( char ), sorting, part1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dateByNormalizingToGMT_( NObjective.RuntimeObject gmt ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateByNormalizingToGMT_( Handle, CachedSelectors.dateByNormalizingToGMT_, out ___occuredException, sizeof( NObjective.RuntimeObject ), gmt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dictionaryRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryRepresentation( Handle, CachedSelectors.dictionaryRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char doesPropertyExist_( NObjective.RuntimeObject exist ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doesPropertyExist_( Handle, CachedSelectors.doesPropertyExist_, out ___occuredException, sizeof( NObjective.RuntimeObject ), exist );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject duplicate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.duplicate( Handle, CachedSelectors.duplicate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject duplicateWithClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.duplicateWithClass_( Handle, CachedSelectors.duplicateWithClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initSpecialRecordWithUniqueId_addressBook_( NObjective.RuntimeObject id, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initSpecialRecordWithUniqueId_addressBook_( Handle, CachedSelectors.initSpecialRecordWithUniqueId_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), id, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithAddressBook_( ABAddressBook book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAddressBook_( Handle, CachedSelectors.initWithAddressBook_, out ___occuredException, sizeof( ABAddressBook ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithDictionaryRepresentation_addressBook_( NObjective.RuntimeObject representation, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDictionaryRepresentation_addressBook_( Handle, CachedSelectors.initWithDictionaryRepresentation_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), representation, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithUniqueId_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUniqueId_( Handle, CachedSelectors.initWithUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithUniqueId_addressBook_( NObjective.RuntimeObject id, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUniqueId_addressBook_( Handle, CachedSelectors.initWithUniqueId_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), id, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isPublished() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPublished( Handle, CachedSelectors.isPublished, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isReadOnly() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isReadOnly( Handle, CachedSelectors.isReadOnly, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSubscribed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSubscribed( Handle, CachedSelectors.isSubscribed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject localDateOccurringOnSameCalendarDayAsDateInGMT_( NObjective.RuntimeObject gmt ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localDateOccurringOnSameCalendarDayAsDateInGMT_( Handle, CachedSelectors.localDateOccurringOnSameCalendarDayAsDateInGMT_, out ___occuredException, sizeof( NObjective.RuntimeObject ), gmt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_AddressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddressBook( Handle, CachedSelectors.nts_AddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_AffectsSmartGroupsIsNew_( char @new ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AffectsSmartGroupsIsNew_( Handle, CachedSelectors.nts_AffectsSmartGroupsIsNew_, out ___occuredException, sizeof( char ), @new );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_CascadeRemove() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_CascadeRemove( Handle, CachedSelectors.nts_CascadeRemove, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_ChangedProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ChangedProperties( Handle, CachedSelectors.nts_ChangedProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_ClearTemporaryCache() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ClearTemporaryCache( Handle, CachedSelectors.nts_ClearTemporaryCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_Description() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Description( Handle, CachedSelectors.nts_Description, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_DescriptionDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_DescriptionDictionary( Handle, CachedSelectors.nts_DescriptionDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_HasChangedProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_HasChangedProperties( Handle, CachedSelectors.nts_HasChangedProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_initWithDatabaseImpl_addressBook_( NObjective.RuntimeObject impl, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_initWithDatabaseImpl_addressBook_( Handle, CachedSelectors.nts_initWithDatabaseImpl_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), impl, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_InitWithDictionaryRepresentation_addressBook_( NObjective.RuntimeObject representation, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitWithDictionaryRepresentation_addressBook_( Handle, CachedSelectors.nts_InitWithDictionaryRepresentation_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), representation, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_initWithUniqueId_addressBook_( NObjective.RuntimeObject id, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_initWithUniqueId_addressBook_( Handle, CachedSelectors.nts_initWithUniqueId_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), id, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_IsPublished() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsPublished( Handle, CachedSelectors.nts_IsPublished, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_IsSubscribed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsSubscribed( Handle, CachedSelectors.nts_IsSubscribed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_MoveIntoAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_MoveIntoAddressBook_( Handle, CachedSelectors.nts_MoveIntoAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_ParentGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ParentGroups( Handle, CachedSelectors.nts_ParentGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_PopulateWithDictionary_includeCoreProperties_addressBook_( NObjective.RuntimeObject dictionary, char includeCoreProperties, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_PopulateWithDictionary_includeCoreProperties_addressBook_( Handle, CachedSelectors.nts_PopulateWithDictionary_includeCoreProperties_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), dictionary, includeCoreProperties, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_PopulateWithDictionary_withRecordMapping_generateIds_addressBook_( NObjective.RuntimeObject dictionary, NObjective.RuntimeObject withRecordMapping, char generateIds, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_PopulateWithDictionary_withRecordMapping_generateIds_addressBook_( Handle, CachedSelectors.nts_PopulateWithDictionary_withRecordMapping_generateIds_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), dictionary, withRecordMapping, generateIds, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_PopulateWithDictionary_withRecordMapping_generateIds_includeCoreProperties_addressBook_( NObjective.RuntimeObject dictionary, NObjective.RuntimeObject withRecordMapping, char generateIds, char includeCoreProperties, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_PopulateWithDictionary_withRecordMapping_generateIds_includeCoreProperties_addressBook_( Handle, CachedSelectors.nts_PopulateWithDictionary_withRecordMapping_generateIds_includeCoreProperties_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), dictionary, withRecordMapping, generateIds, includeCoreProperties, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_RemoteLocation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoteLocation( Handle, CachedSelectors.nts_RemoteLocation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_RemoveFromAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveFromAddressBook_( Handle, CachedSelectors.nts_RemoveFromAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_RemoveValueForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveValueForProperty_( Handle, CachedSelectors.nts_RemoveValueForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_RemoveValueInTemporaryCacheForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_RemoveValueInTemporaryCacheForProperty_( Handle, CachedSelectors.nts_RemoveValueInTemporaryCacheForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_SetValue_forProperty_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetValue_forProperty_( Handle, CachedSelectors.nts_SetValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SetValue_forProperty_recordCouldBeInDatabase_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, char recordCouldBeInDatabase ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetValue_forProperty_recordCouldBeInDatabase_( Handle, CachedSelectors.nts_SetValue_forProperty_recordCouldBeInDatabase_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), value, forProperty, recordCouldBeInDatabase );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_SetValueInTemporaryCache_forProperty_( NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetValueInTemporaryCache_forProperty_( Handle, CachedSelectors.nts_SetValueInTemporaryCache_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), cache, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_StringForIndexing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_StringForIndexing( Handle, CachedSelectors.nts_StringForIndexing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_Touch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Touch( Handle, CachedSelectors.nts_Touch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_UniqueId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_UniqueId( Handle, CachedSelectors.nts_UniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_ValueForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ValueForProperty_( Handle, CachedSelectors.nts_ValueForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_ValueForProperty_row_( NObjective.RuntimeObject property, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ValueForProperty_row_( Handle, CachedSelectors.nts_ValueForProperty_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_ValueInTemporaryCacheForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ValueInTemporaryCacheForProperty_( Handle, CachedSelectors.nts_ValueInTemporaryCacheForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentGroups( Handle, CachedSelectors.parentGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentGroupsIncludingSubscriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentGroupsIncludingSubscriptions( Handle, CachedSelectors.parentGroupsIncludingSubscriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject remoteLocation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.remoteLocation( Handle, CachedSelectors.remoteLocation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool removeValueForProperty_( string property ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___result = NativeMethods.removeValueForProperty_( Handle, CachedSelectors.removeValueForProperty_, out ___occuredException, sizeof( IntPtr ), ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAddressBook_( Handle, CachedSelectors.setAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllProperties_( NObjective.RuntimeObject properties ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllProperties_( Handle, CachedSelectors.setAllProperties_, out ___occuredException, sizeof( NObjective.RuntimeObject ), properties );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDatabaseImpl_andAddressBook_( NObjective.RuntimeObject impl, NObjective.RuntimeObject andAddressBook ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDatabaseImpl_andAddressBook_( Handle, CachedSelectors.setDatabaseImpl_andAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), impl, andAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNilValueForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNilValueForKey_( Handle, CachedSelectors.setNilValueForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_forKey_( NObjective.RuntimeObject value, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_forKey_( Handle, CachedSelectors.setValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_forKeyPath_( NObjective.RuntimeObject value, NObjective.RuntimeObject forKeyPath ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_forKeyPath_( Handle, CachedSelectors.setValue_forKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool setValue_forProperty_( NObjective.RuntimeObject value, string forProperty ) {
			RuntimeObject ___occuredException;
			var ___wrappedforProperty = Runtime.CreateStringProxy( forProperty );
			var ___result = NativeMethods.setValue_forProperty_( Handle, CachedSelectors.setValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedforProperty );
			Runtime.ReleaseNativeObject( ___wrappedforProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setValue_forProperty_recordCouldBeInDatabase_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, char recordCouldBeInDatabase ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setValue_forProperty_recordCouldBeInDatabase_( Handle, CachedSelectors.setValue_forProperty_recordCouldBeInDatabase_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), value, forProperty, recordCouldBeInDatabase );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setValueInTemporaryCache_forProperty_( NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueInTemporaryCache_forProperty_( Handle, CachedSelectors.setValueInTemporaryCache_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), cache, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject sharingUniqueId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharingUniqueId( Handle, CachedSelectors.sharingUniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringForIndexing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringForIndexing( Handle, CachedSelectors.stringForIndexing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringForXcode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringForXcode( Handle, CachedSelectors.stringForXcode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void takeValue_forKey_( NObjective.RuntimeObject value, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeValue_forKey_( Handle, CachedSelectors.takeValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string uniqueId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueId( Handle, CachedSelectors.uniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForKey_( Handle, CachedSelectors.valueForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForKeyPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForKeyPath_( Handle, CachedSelectors.valueForKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForProperty_( string property ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___result = NativeMethods.valueForProperty_( Handle, CachedSelectors.valueForProperty_, out ___occuredException, sizeof( IntPtr ), ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueInTemporaryCacheForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueInTemporaryCacheForProperty_( Handle, CachedSelectors.valueInTemporaryCacheForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abAssimilatedRecordFor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abcdMutableSetValueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abcdSetValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abcdValueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abDatabaseImpl( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abIsCompatibleWithRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessInstanceVariablesDirectly( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr builtInProperties( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearTemporaryCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr createAlternateName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr createFirstLastSorting_part1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char sorting, char part1 );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dateByNormalizingToGMT_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject gmt );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dictionaryRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char doesPropertyExist_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exist );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr duplicate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr duplicateWithClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initSpecialRecordWithUniqueId_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABAddressBook book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithDictionaryRepresentation_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUniqueId_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isPublished( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isReadOnly( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isSubscribed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr localDateOccurringOnSameCalendarDayAsDateInGMT_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject gmt );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_AddressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_AffectsSmartGroupsIsNew_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @new );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_CascadeRemove( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_ChangedProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_ClearTemporaryCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_Description( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_DescriptionDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_HasChangedProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_initWithDatabaseImpl_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject impl, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_InitWithDictionaryRepresentation_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_initWithUniqueId_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_IsPublished( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_IsSubscribed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_MoveIntoAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_ParentGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_PopulateWithDictionary_includeCoreProperties_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, char includeCoreProperties, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_PopulateWithDictionary_withRecordMapping_generateIds_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, NObjective.RuntimeObject withRecordMapping, char generateIds, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_PopulateWithDictionary_withRecordMapping_generateIds_includeCoreProperties_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, NObjective.RuntimeObject withRecordMapping, char generateIds, char includeCoreProperties, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_RecordFromDictionaryRepresentation_withRecordMapping_addressBook_generateIds_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping, NObjective.RuntimeObject addressBook, char generateIds );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_RemoteLocation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_RemoveFromAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_RemoveValueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_RemoveValueInTemporaryCacheForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_SetValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_SetValue_forProperty_recordCouldBeInDatabase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, char recordCouldBeInDatabase );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_SetValueInTemporaryCache_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_StringForIndexing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_Touch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int nts_TypeOfProperty_withAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject withAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_UniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_ValueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_ValueForProperty_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int row );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_ValueInTemporaryCacheForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr parentGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr parentGroupsIncludingSubscriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr properties( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertiesWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyTypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyTypesWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyTypesWithAddressBook_acquireLock_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book, char acquireLock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordFromDictionaryRepresentation_withRecordMapping_addressBook_generateIds_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping, NObjective.RuntimeObject addressBook, char generateIds );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr remoteLocation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool removeValueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllProperties_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject properties );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDatabaseImpl_andAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject impl, NObjective.RuntimeObject andAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setNilValueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setValue_forKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forKeyPath );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool setValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char setValue_forProperty_recordCouldBeInDatabase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, char recordCouldBeInDatabase );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setValueInTemporaryCache_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharingUniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringForIndexing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringForXcode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void takeValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int typeOfProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int typeOfProperty_withAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject withAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueForKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueInTemporaryCacheForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
		}
		static internal class CachedSelectors {
			public static readonly Selector abAssimilatedRecordFor_ = "abAssimilatedRecordFor:";
			public static readonly Selector abcdMutableSetValueForKey_ = "abcdMutableSetValueForKey:";
			public static readonly Selector abcdSetValue_forKey_ = "abcdSetValue:forKey:";
			public static readonly Selector abcdValueForKey_ = "abcdValueForKey:";
			public static readonly Selector abDatabaseImpl = "abDatabaseImpl";
			public static readonly Selector abIsCompatibleWithRecord_ = "abIsCompatibleWithRecord:";
			public static readonly Selector accessInstanceVariablesDirectly = "accessInstanceVariablesDirectly";
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector allProperties = "allProperties";
			public static readonly Selector builtInProperties = "builtInProperties";
			public static readonly Selector clearTemporaryCache = "clearTemporaryCache";
			public static readonly Selector createAlternateName = "createAlternateName";
			public static readonly Selector createFirstLastSorting_part1_ = "createFirstLastSorting:part1:";
			public static readonly Selector dateByNormalizingToGMT_ = "dateByNormalizingToGMT:";
			public static readonly Selector dictionaryRepresentation = "dictionaryRepresentation";
			public static readonly Selector doesPropertyExist_ = "doesPropertyExist:";
			public static readonly Selector duplicate = "duplicate";
			public static readonly Selector duplicateWithClass_ = "duplicateWithClass:";
			public static readonly Selector initSpecialRecordWithUniqueId_addressBook_ = "initSpecialRecordWithUniqueId:addressBook:";
			public static readonly Selector initWithAddressBook_ = "initWithAddressBook:";
			public static readonly Selector initWithDictionaryRepresentation_addressBook_ = "initWithDictionaryRepresentation:addressBook:";
			public static readonly Selector initWithUniqueId_ = "initWithUniqueId:";
			public static readonly Selector initWithUniqueId_addressBook_ = "initWithUniqueId:addressBook:";
			public static readonly Selector isPublished = "isPublished";
			public static readonly Selector isReadOnly = "isReadOnly";
			public static readonly Selector isSubscribed = "isSubscribed";
			public static readonly Selector localDateOccurringOnSameCalendarDayAsDateInGMT_ = "localDateOccurringOnSameCalendarDayAsDateInGMT:";
			public static readonly Selector nts_AddressBook = "nts_AddressBook";
			public static readonly Selector nts_AffectsSmartGroupsIsNew_ = "nts_AffectsSmartGroupsIsNew:";
			public static readonly Selector nts_CascadeRemove = "nts_CascadeRemove";
			public static readonly Selector nts_ChangedProperties = "nts_ChangedProperties";
			public static readonly Selector nts_ClearTemporaryCache = "nts_ClearTemporaryCache";
			public static readonly Selector nts_Description = "nts_Description";
			public static readonly Selector nts_DescriptionDictionary = "nts_DescriptionDictionary";
			public static readonly Selector nts_HasChangedProperties = "nts_HasChangedProperties";
			public static readonly Selector nts_initWithDatabaseImpl_addressBook_ = "nts_initWithDatabaseImpl:addressBook:";
			public static readonly Selector nts_InitWithDictionaryRepresentation_addressBook_ = "nts_InitWithDictionaryRepresentation:addressBook:";
			public static readonly Selector nts_initWithUniqueId_addressBook_ = "nts_initWithUniqueId:addressBook:";
			public static readonly Selector nts_IsPublished = "nts_IsPublished";
			public static readonly Selector nts_IsSubscribed = "nts_IsSubscribed";
			public static readonly Selector nts_MoveIntoAddressBook_ = "nts_MoveIntoAddressBook:";
			public static readonly Selector nts_ParentGroups = "nts_ParentGroups";
			public static readonly Selector nts_PopulateWithDictionary_includeCoreProperties_addressBook_ = "nts_PopulateWithDictionary:includeCoreProperties:addressBook:";
			public static readonly Selector nts_PopulateWithDictionary_withRecordMapping_generateIds_addressBook_ = "nts_PopulateWithDictionary:withRecordMapping:generateIds:addressBook:";
			public static readonly Selector nts_PopulateWithDictionary_withRecordMapping_generateIds_includeCoreProperties_addressBook_ = "nts_PopulateWithDictionary:withRecordMapping:generateIds:includeCoreProperties:addressBook:";
			public static readonly Selector nts_RecordFromDictionaryRepresentation_withRecordMapping_addressBook_generateIds_ = "nts_RecordFromDictionaryRepresentation:withRecordMapping:addressBook:generateIds:";
			public static readonly Selector nts_RemoteLocation = "nts_RemoteLocation";
			public static readonly Selector nts_RemoveFromAddressBook_ = "nts_RemoveFromAddressBook:";
			public static readonly Selector nts_RemoveValueForProperty_ = "nts_RemoveValueForProperty:";
			public static readonly Selector nts_RemoveValueInTemporaryCacheForProperty_ = "nts_RemoveValueInTemporaryCacheForProperty:";
			public static readonly Selector nts_SetValue_forProperty_ = "nts_SetValue:forProperty:";
			public static readonly Selector nts_SetValue_forProperty_recordCouldBeInDatabase_ = "nts_SetValue:forProperty:recordCouldBeInDatabase:";
			public static readonly Selector nts_SetValueInTemporaryCache_forProperty_ = "nts_SetValueInTemporaryCache:forProperty:";
			public static readonly Selector nts_StringForIndexing = "nts_StringForIndexing";
			public static readonly Selector nts_Touch = "nts_Touch";
			public static readonly Selector nts_TypeOfProperty_withAddressBook_ = "nts_TypeOfProperty:withAddressBook:";
			public static readonly Selector nts_UniqueId = "nts_UniqueId";
			public static readonly Selector nts_ValueForProperty_ = "nts_ValueForProperty:";
			public static readonly Selector nts_ValueForProperty_row_ = "nts_ValueForProperty:row:";
			public static readonly Selector nts_ValueInTemporaryCacheForProperty_ = "nts_ValueInTemporaryCacheForProperty:";
			public static readonly Selector parentGroups = "parentGroups";
			public static readonly Selector parentGroupsIncludingSubscriptions = "parentGroupsIncludingSubscriptions";
			public static readonly Selector properties = "properties";
			public static readonly Selector propertiesWithAddressBook_ = "propertiesWithAddressBook:";
			public static readonly Selector propertyTypes = "propertyTypes";
			public static readonly Selector propertyTypesWithAddressBook_ = "propertyTypesWithAddressBook:";
			public static readonly Selector propertyTypesWithAddressBook_acquireLock_ = "propertyTypesWithAddressBook:acquireLock:";
			public static readonly Selector recordFromDictionaryRepresentation_withRecordMapping_addressBook_generateIds_ = "recordFromDictionaryRepresentation:withRecordMapping:addressBook:generateIds:";
			public static readonly Selector release = "release";
			public static readonly Selector remoteLocation = "remoteLocation";
			public static readonly Selector removeValueForProperty_ = "removeValueForProperty:";
			public static readonly Selector setAddressBook_ = "setAddressBook:";
			public static readonly Selector setAllProperties_ = "setAllProperties:";
			public static readonly Selector setDatabaseImpl_andAddressBook_ = "setDatabaseImpl:andAddressBook:";
			public static readonly Selector setNilValueForKey_ = "setNilValueForKey:";
			public static readonly Selector setValue_forKey_ = "setValue:forKey:";
			public static readonly Selector setValue_forKeyPath_ = "setValue:forKeyPath:";
			public static readonly Selector setValue_forProperty_ = "setValue:forProperty:";
			public static readonly Selector setValue_forProperty_recordCouldBeInDatabase_ = "setValue:forProperty:recordCouldBeInDatabase:";
			public static readonly Selector setValueInTemporaryCache_forProperty_ = "setValueInTemporaryCache:forProperty:";
			public static readonly Selector sharingUniqueId = "sharingUniqueId";
			public static readonly Selector stringForIndexing = "stringForIndexing";
			public static readonly Selector stringForXcode = "stringForXcode";
			public static readonly Selector takeValue_forKey_ = "takeValue:forKey:";
			public static readonly Selector typeOfProperty_ = "typeOfProperty:";
			public static readonly Selector typeOfProperty_withAddressBook_ = "typeOfProperty:withAddressBook:";
			public static readonly Selector uniqueId = "uniqueId";
			public static readonly Selector valueForKey_ = "valueForKey:";
			public static readonly Selector valueForKeyPath_ = "valueForKeyPath:";
			public static readonly Selector valueForProperty_ = "valueForProperty:";
			public static readonly Selector valueInTemporaryCacheForProperty_ = "valueInTemporaryCacheForProperty:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABRecordCoreDataFactoryImpl : IEquatable<ABRecordCoreDataFactoryImpl> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRecordCoreDataFactoryImpl;
		public static implicit operator IntPtr( ABRecordCoreDataFactoryImpl value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRecordCoreDataFactoryImpl value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABRecordCoreDataFactoryImpl ) ) return false; 
			return Handle == ( ( ABRecordCoreDataFactoryImpl )value ).Handle;
		}
		public bool Equals( ABRecordCoreDataFactoryImpl value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRecordCoreDataFactoryImpl value1, ABRecordCoreDataFactoryImpl value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRecordCoreDataFactoryImpl value1, ABRecordCoreDataFactoryImpl value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRecordCoreDataFactoryImpl( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRecordCoreDataFactoryImpl alloc() {
			return new ABRecordCoreDataFactoryImpl( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int addPropertiesAndTypes_forClass_withAddressBook_( NObjective.RuntimeObject types, NObjective.RuntimeClass forClass, NObjective.RuntimeObject withAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_forClass_withAddressBook_( ClassHandle, CachedSelectors.addPropertiesAndTypes_forClass_withAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ), types, forClass, withAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int addPropertiesAndTypes_forClass_withAddressBook_acquireLock_save_( NObjective.RuntimeObject types, NObjective.RuntimeClass forClass, NObjective.RuntimeObject withAddressBook, char acquireLock, char save ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_forClass_withAddressBook_acquireLock_save_( ClassHandle, CachedSelectors.addPropertiesAndTypes_forClass_withAddressBook_acquireLock_save_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), types, forClass, withAddressBook, acquireLock, save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static uint countOfObjectsForClass_withPredicate_managedObjectContext_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withPredicate, NObjective.RuntimeObject managedObjectContext ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countOfObjectsForClass_withPredicate_managedObjectContext_( ClassHandle, CachedSelectors.countOfObjectsForClass_withPredicate_managedObjectContext_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, withPredicate, managedObjectContext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public static uint countOfPublicRecordsForClass_withPredicate_addressBook_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withPredicate, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countOfPublicRecordsForClass_withPredicate_addressBook_( ClassHandle, CachedSelectors.countOfPublicRecordsForClass_withPredicate_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, withPredicate, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public static NObjective.RuntimeObject createNewDatabaseImplForInstance_withUniqueId_addressBook_( NObjective.RuntimeObject instance, NObjective.RuntimeObject withUniqueId, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createNewDatabaseImplForInstance_withUniqueId_addressBook_( ClassHandle, CachedSelectors.createNewDatabaseImplForInstance_withUniqueId_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), instance, withUniqueId, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void doRemoveRecordsAndCreateLogsWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.doRemoveRecordsAndCreateLogsWithAddressBook_( ClassHandle, CachedSelectors.doRemoveRecordsAndCreateLogsWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject fetchObjectForClass_withUniqueId_managedObjectContext_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withUniqueId, NObjective.RuntimeObject managedObjectContext ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fetchObjectForClass_withUniqueId_managedObjectContext_( ClassHandle, CachedSelectors.fetchObjectForClass_withUniqueId_managedObjectContext_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, withUniqueId, managedObjectContext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject fetchObjectsForClass_withPredicate_prefetchingKeyPaths_managedObjectContext_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withPredicate, NObjective.RuntimeObject prefetchingKeyPaths, NObjective.RuntimeObject managedObjectContext ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fetchObjectsForClass_withPredicate_prefetchingKeyPaths_managedObjectContext_( ClassHandle, CachedSelectors.fetchObjectsForClass_withPredicate_prefetchingKeyPaths_managedObjectContext_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, withPredicate, prefetchingKeyPaths, managedObjectContext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject fetchPublicRecordForClass_withUniqueId_addressBook_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withUniqueId, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fetchPublicRecordForClass_withUniqueId_addressBook_( ClassHandle, CachedSelectors.fetchPublicRecordForClass_withUniqueId_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, withUniqueId, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject fetchPublicRecordsForClass_withPredicate_addressBook_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withPredicate, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fetchPublicRecordsForClass_withPredicate_addressBook_( ClassHandle, CachedSelectors.fetchPublicRecordsForClass_withPredicate_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, withPredicate, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject fetchPublicRecordsForClass_withPredicate_prefetchingKeyPaths_addressBook_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withPredicate, NObjective.RuntimeObject prefetchingKeyPaths, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fetchPublicRecordsForClass_withPredicate_prefetchingKeyPaths_addressBook_( ClassHandle, CachedSelectors.fetchPublicRecordsForClass_withPredicate_prefetchingKeyPaths_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, withPredicate, prefetchingKeyPaths, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeClass implClassForPublicRecordClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.implClassForPublicRecordClass_( ClassHandle, CachedSelectors.implClassForPublicRecordClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject propertyTypesForClass_withAddressBook_acquireLock_( NObjective.RuntimeClass @class, NObjective.RuntimeObject withAddressBook, char acquireLock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyTypesForClass_withAddressBook_acquireLock_( ClassHandle, CachedSelectors.propertyTypesForClass_withAddressBook_acquireLock_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), @class, withAddressBook, acquireLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeClass publicRecordClassForImplClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicRecordClassForImplClass_( ClassHandle, CachedSelectors.publicRecordClassForImplClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeClass publicRecordClassFromUniqueId_inAddressBook_( NObjective.RuntimeObject id, NObjective.RuntimeObject inAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicRecordClassFromUniqueId_inAddressBook_( ClassHandle, CachedSelectors.publicRecordClassFromUniqueId_inAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), id, inAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject publicRecordWithUniqueId_inAddressBook_( NObjective.RuntimeObject id, NObjective.RuntimeObject inAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicRecordWithUniqueId_inAddressBook_( ClassHandle, CachedSelectors.publicRecordWithUniqueId_inAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), id, inAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_forClass_withAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeClass forClass, NObjective.RuntimeObject withAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int addPropertiesAndTypes_forClass_withAddressBook_acquireLock_save_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeClass forClass, NObjective.RuntimeObject withAddressBook, char acquireLock, char save );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint countOfObjectsForClass_withPredicate_managedObjectContext_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withPredicate, NObjective.RuntimeObject managedObjectContext );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint countOfPublicRecordsForClass_withPredicate_addressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withPredicate, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr createNewDatabaseImplForInstance_withUniqueId_addressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject instance, NObjective.RuntimeObject withUniqueId, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doRemoveRecordsAndCreateLogsWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fetchObjectForClass_withUniqueId_managedObjectContext_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withUniqueId, NObjective.RuntimeObject managedObjectContext );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fetchObjectsForClass_withPredicate_prefetchingKeyPaths_managedObjectContext_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withPredicate, NObjective.RuntimeObject prefetchingKeyPaths, NObjective.RuntimeObject managedObjectContext );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fetchPublicRecordForClass_withUniqueId_addressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withUniqueId, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fetchPublicRecordsForClass_withPredicate_addressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withPredicate, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fetchPublicRecordsForClass_withPredicate_prefetchingKeyPaths_addressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withPredicate, NObjective.RuntimeObject prefetchingKeyPaths, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern NObjective.RuntimeClass implClassForPublicRecordClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyTypesForClass_withAddressBook_acquireLock_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject withAddressBook, char acquireLock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern NObjective.RuntimeClass publicRecordClassForImplClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern NObjective.RuntimeClass publicRecordClassFromUniqueId_inAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject inAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr publicRecordWithUniqueId_inAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject inAddressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector addPropertiesAndTypes_forClass_withAddressBook_ = "addPropertiesAndTypes:forClass:withAddressBook:";
			public static readonly Selector addPropertiesAndTypes_forClass_withAddressBook_acquireLock_save_ = "addPropertiesAndTypes:forClass:withAddressBook:acquireLock:save:";
			public static readonly Selector countOfObjectsForClass_withPredicate_managedObjectContext_ = "countOfObjectsForClass:withPredicate:managedObjectContext:";
			public static readonly Selector countOfPublicRecordsForClass_withPredicate_addressBook_ = "countOfPublicRecordsForClass:withPredicate:addressBook:";
			public static readonly Selector createNewDatabaseImplForInstance_withUniqueId_addressBook_ = "createNewDatabaseImplForInstance:withUniqueId:addressBook:";
			public static readonly Selector doRemoveRecordsAndCreateLogsWithAddressBook_ = "doRemoveRecordsAndCreateLogsWithAddressBook:";
			public static readonly Selector fetchObjectForClass_withUniqueId_managedObjectContext_ = "fetchObjectForClass:withUniqueId:managedObjectContext:";
			public static readonly Selector fetchObjectsForClass_withPredicate_prefetchingKeyPaths_managedObjectContext_ = "fetchObjectsForClass:withPredicate:prefetchingKeyPaths:managedObjectContext:";
			public static readonly Selector fetchPublicRecordForClass_withUniqueId_addressBook_ = "fetchPublicRecordForClass:withUniqueId:addressBook:";
			public static readonly Selector fetchPublicRecordsForClass_withPredicate_addressBook_ = "fetchPublicRecordsForClass:withPredicate:addressBook:";
			public static readonly Selector fetchPublicRecordsForClass_withPredicate_prefetchingKeyPaths_addressBook_ = "fetchPublicRecordsForClass:withPredicate:prefetchingKeyPaths:addressBook:";
			public static readonly Selector implClassForPublicRecordClass_ = "implClassForPublicRecordClass:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector propertyTypesForClass_withAddressBook_acquireLock_ = "propertyTypesForClass:withAddressBook:acquireLock:";
			public static readonly Selector publicRecordClassForImplClass_ = "publicRecordClassForImplClass:";
			public static readonly Selector publicRecordClassFromUniqueId_inAddressBook_ = "publicRecordClassFromUniqueId:inAddressBook:";
			public static readonly Selector publicRecordWithUniqueId_inAddressBook_ = "publicRecordWithUniqueId:inAddressBook:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABRectObject : IEquatable<ABRectObject> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRectObject;
		public static implicit operator IntPtr( ABRectObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRectObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABRectObject ) ) return false; 
			return Handle == ( ( ABRectObject )value ).Handle;
		}
		public bool Equals( ABRectObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRectObject value1, ABRectObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRectObject value1, ABRectObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRectObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRectObject alloc() {
			return new ABRectObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
		}
		static internal class CachedSelectors {
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABRemoteImageLoader : IEquatable<ABRemoteImageLoader> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRemoteImageLoader;
		public static implicit operator IntPtr( ABRemoteImageLoader value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRemoteImageLoader value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABRemoteImageLoader ) ) return false; 
			return Handle == ( ( ABRemoteImageLoader )value ).Handle;
		}
		public bool Equals( ABRemoteImageLoader value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRemoteImageLoader value1, ABRemoteImageLoader value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRemoteImageLoader value1, ABRemoteImageLoader value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRemoteImageLoader( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRemoteImageLoader alloc() {
			return new ABRemoteImageLoader( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject cachedDateForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedDateForEmail_( ClassHandle, CachedSelectors.cachedDateForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject cachedImageForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedImageForEmail_( ClassHandle, CachedSelectors.cachedImageForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject cachedImagePathForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedImagePathForEmail_( ClassHandle, CachedSelectors.cachedImagePathForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject photoCacheDirectoryPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.photoCacheDirectoryPath( ClassHandle, CachedSelectors.photoCacheDirectoryPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char saveImageInCache_forEmail_( NObjective.RuntimeObject cache, NObjective.RuntimeObject forEmail ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.saveImageInCache_forEmail_( ClassHandle, CachedSelectors.saveImageInCache_forEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), cache, forEmail );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject sharedRemoteImageLoader() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedRemoteImageLoader( ClassHandle, CachedSelectors.sharedRemoteImageLoader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void touchCachedImageForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			NativeMethods.touchCachedImageForEmail_( ClassHandle, CachedSelectors.touchCachedImageForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject urlForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.urlForEmail_( ClassHandle, CachedSelectors.urlForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int beginLoadingImageForEmails_forClient_( NObjective.RuntimeObject emails, NObjective.RuntimeObject forClient ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.beginLoadingImageForEmails_forClient_( Handle, CachedSelectors.beginLoadingImageForEmails_forClient_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), emails, forClient );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelLoadingImageDataForTag_( int tag ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelLoadingImageDataForTag_( Handle, CachedSelectors.cancelLoadingImageDataForTag_, out ___occuredException, sizeof( int ), tag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void consumeJobEntry_( NObjective.RuntimeObject entry ) {
			RuntimeObject ___occuredException;
			NativeMethods.consumeJobEntry_( Handle, CachedSelectors.consumeJobEntry_, out ___occuredException, sizeof( NObjective.RuntimeObject ), entry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldFetchImageForEmail_withCacheDate_( NObjective.RuntimeObject email, NObjective.RuntimeObject withCacheDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldFetchImageForEmail_withCacheDate_( Handle, CachedSelectors.shouldFetchImageForEmail_withCacheDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), email, withCacheDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject upToDateImageForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.upToDateImageForEmail_( Handle, CachedSelectors.upToDateImageForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void workLoop() {
			RuntimeObject ___occuredException;
			NativeMethods.workLoop( Handle, CachedSelectors.workLoop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int beginLoadingImageForEmails_forClient_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject emails, NObjective.RuntimeObject forClient );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cachedDateForEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cachedImageForEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cachedImagePathForEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancelLoadingImageDataForTag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tag );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void consumeJobEntry_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entry );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr photoCacheDirectoryPath( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char saveImageInCache_forEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cache, NObjective.RuntimeObject forEmail );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedRemoteImageLoader( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool shouldFetchImageForEmail_withCacheDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email, NObjective.RuntimeObject withCacheDate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void touchCachedImageForEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr upToDateImageForEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr urlForEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void workLoop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector beginLoadingImageForEmails_forClient_ = "beginLoadingImageForEmails:forClient:";
			public static readonly Selector cachedDateForEmail_ = "cachedDateForEmail:";
			public static readonly Selector cachedImageForEmail_ = "cachedImageForEmail:";
			public static readonly Selector cachedImagePathForEmail_ = "cachedImagePathForEmail:";
			public static readonly Selector cancelLoadingImageDataForTag_ = "cancelLoadingImageDataForTag:";
			public static readonly Selector consumeJobEntry_ = "consumeJobEntry:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector photoCacheDirectoryPath = "photoCacheDirectoryPath";
			public static readonly Selector saveImageInCache_forEmail_ = "saveImageInCache:forEmail:";
			public static readonly Selector sharedRemoteImageLoader = "sharedRemoteImageLoader";
			public static readonly Selector shouldFetchImageForEmail_withCacheDate_ = "shouldFetchImageForEmail:withCacheDate:";
			public static readonly Selector touchCachedImageForEmail_ = "touchCachedImageForEmail:";
			public static readonly Selector upToDateImageForEmail_ = "upToDateImageForEmail:";
			public static readonly Selector urlForEmail_ = "urlForEmail:";
			public static readonly Selector workLoop = "workLoop";
		}
	}
	[ProxyBaseClass(typeof( ABGroupCommand ))]
	public struct ABRemoveFromGroupCommand : IEquatable<ABRemoveFromGroupCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRemoveFromGroupCommand;
		public static implicit operator IntPtr( ABRemoveFromGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRemoveFromGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABRemoveFromGroupCommand ) ) return false; 
			return Handle == ( ( ABRemoveFromGroupCommand )value ).Handle;
		}
		public bool Equals( ABRemoveFromGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRemoveFromGroupCommand value1, ABRemoveFromGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRemoveFromGroupCommand value1, ABRemoveFromGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRemoveFromGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRemoveFromGroupCommand alloc() {
			return new ABRemoveFromGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABRenameGroupCommand : IEquatable<ABRenameGroupCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRenameGroupCommand;
		public static implicit operator IntPtr( ABRenameGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRenameGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABRenameGroupCommand ) ) return false; 
			return Handle == ( ( ABRenameGroupCommand )value ).Handle;
		}
		public bool Equals( ABRenameGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRenameGroupCommand value1, ABRenameGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRenameGroupCommand value1, ABRenameGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRenameGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRenameGroupCommand alloc() {
			return new ABRenameGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_newName_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject newName, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_newName_addressBook_( Handle, CachedSelectors.initWithGroup_newName_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, newName, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_newName_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject newName, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_newName_addressBook_ = "initWithGroup:newName:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABRollOver : IEquatable<ABRollOver> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRollOver;
		public static implicit operator IntPtr( ABRollOver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRollOver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABRollOver ) ) return false; 
			return Handle == ( ( ABRollOver )value ).Handle;
		}
		public bool Equals( ABRollOver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRollOver value1, ABRollOver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRollOver value1, ABRollOver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRollOver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRollOver alloc() {
			return new ABRollOver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char callbackBased() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.callbackBased( Handle, CachedSelectors.callbackBased, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char delegateBased() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.delegateBased( Handle, CachedSelectors.delegateBased, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject identifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifier( Handle, CachedSelectors.identifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDelegate_( Handle, CachedSelectors.initWithDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isEnabledWithSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEnabledWithSelection_( Handle, CachedSelectors.isEnabledWithSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject property() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.property( Handle, CachedSelectors.property, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject representedObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.representedObject( Handle, CachedSelectors.representedObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionDictionary( Handle, CachedSelectors.selectionDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIdentifier_( Handle, CachedSelectors.setIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRepresentedObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRepresentedObject_( Handle, CachedSelectors.setRepresentedObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectionDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectionDictionary_( Handle, CachedSelectors.setSelectionDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject titleWithSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.titleWithSelection_( Handle, CachedSelectors.titleWithSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char callbackBased( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char delegateBased( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr identifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isEnabledWithSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr property( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr representedObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectionDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setRepresentedObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectionDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr titleWithSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
		}
		static internal class CachedSelectors {
			public static readonly Selector callbackBased = "callbackBased";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector delegateBased = "delegateBased";
			public static readonly Selector identifier = "identifier";
			public static readonly Selector initWithDelegate_ = "initWithDelegate:";
			public static readonly Selector isEnabledWithSelection_ = "isEnabledWithSelection:";
			public static readonly Selector property = "property";
			public static readonly Selector representedObject = "representedObject";
			public static readonly Selector selectionDictionary = "selectionDictionary";
			public static readonly Selector setIdentifier_ = "setIdentifier:";
			public static readonly Selector setRepresentedObject_ = "setRepresentedObject:";
			public static readonly Selector setSelectionDictionary_ = "setSelectionDictionary:";
			public static readonly Selector titleWithSelection_ = "titleWithSelection:";
		}
	}
	[ProxyBaseClass(typeof( NSScrollView ))]
	public struct ABScrollView : IEquatable<ABScrollView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABScrollView;
		public static implicit operator IntPtr( ABScrollView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABScrollView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABScrollView ) ) return false; 
			return Handle == ( ( ABScrollView )value ).Handle;
		}
		public bool Equals( ABScrollView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABScrollView value1, ABScrollView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABScrollView value1, ABScrollView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABScrollView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABScrollView alloc() {
			return new ABScrollView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char dynamicVerticalScroller() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dynamicVerticalScroller( Handle, CachedSelectors.dynamicVerticalScroller, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scrollBarVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrollBarVisible( Handle, CachedSelectors.scrollBarVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDynamicVerticalScroller_( char scroller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDynamicVerticalScroller_( Handle, CachedSelectors.setDynamicVerticalScroller_, out ___occuredException, sizeof( char ), scroller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char dynamicVerticalScroller( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char scrollBarVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDynamicVerticalScroller_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char scroller );
		}
		static internal class CachedSelectors {
			public static readonly Selector dynamicVerticalScroller = "dynamicVerticalScroller";
			public static readonly Selector scrollBarVisible = "scrollBarVisible";
			public static readonly Selector setDynamicVerticalScroller_ = "setDynamicVerticalScroller:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABSearchController : IEquatable<ABSearchController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchController;
		public static implicit operator IntPtr( ABSearchController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchController ) ) return false; 
			return Handle == ( ( ABSearchController )value ).Handle;
		}
		public bool Equals( ABSearchController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchController value1, ABSearchController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchController value1, ABSearchController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchController alloc() {
			return new ABSearchController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject bestRecordMatching_inPeople_( NObjective.RuntimeObject matching, NObjective.RuntimeObject inPeople ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bestRecordMatching_inPeople_( ClassHandle, CachedSelectors.bestRecordMatching_inPeople_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), matching, inPeople );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint matchIndexForPerson_withPieces_( NObjective.RuntimeObject person, NObjective.RuntimeObject withPieces ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchIndexForPerson_withPieces_( ClassHandle, CachedSelectors.matchIndexForPerson_withPieces_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, withPieces );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public static char property_matchesPieces_forPerson_( NObjective.RuntimeObject property, NObjective.RuntimeObject matchesPieces, NObjective.RuntimeObject forPerson ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.property_matchesPieces_forPerson_( ClassHandle, CachedSelectors.property_matchesPieces_forPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, matchesPieces, forPerson );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clearSearchField() {
			RuntimeObject ___occuredException;
			NativeMethods.clearSearchField( Handle, CachedSelectors.clearSearchField, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char control_textView_doCommandBySelector_( NObjective.RuntimeObject control, NObjective.RuntimeObject textView, NObjective.Selector doCommandBySelector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.control_textView_doCommandBySelector_( Handle, CachedSelectors.control_textView_doCommandBySelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), control, textView, doCommandBySelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void directoryDataHasArrived_( NObjective.RuntimeObject arrived ) {
			RuntimeObject ___occuredException;
			NativeMethods.directoryDataHasArrived_( Handle, CachedSelectors.directoryDataHasArrived_, out ___occuredException, sizeof( NObjective.RuntimeObject ), arrived );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void directoryQueryStatusChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.directoryQueryStatusChanged_( Handle, CachedSelectors.directoryQueryStatusChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject displayedMemberMatching_inPeople_( NObjective.RuntimeObject matching, NObjective.RuntimeObject inPeople ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedMemberMatching_inPeople_( Handle, CachedSelectors.displayedMemberMatching_inPeople_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), matching, inPeople );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void indexFoundMatches_done_( NObjective.RuntimeObject matches, char done ) {
			RuntimeObject ___occuredException;
			NativeMethods.indexFoundMatches_done_( Handle, CachedSelectors.indexFoundMatches_done_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), matches, done );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUIController_( Handle, CachedSelectors.initWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void membersChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersChanged_( Handle, CachedSelectors.membersChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void saveSearch_( NObjective.RuntimeObject search ) {
			RuntimeObject ___occuredException;
			NativeMethods.saveSearch_( Handle, CachedSelectors.saveSearch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), search );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleSearch_( NObjective.RuntimeObject search ) {
			RuntimeObject ___occuredException;
			NativeMethods.scheduleSearch_( Handle, CachedSelectors.scheduleSearch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), search );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void searchControllerDidScheduleSearch_( NObjective.RuntimeObject search ) {
			RuntimeObject ___occuredException;
			NativeMethods.searchControllerDidScheduleSearch_( Handle, CachedSelectors.searchControllerDidScheduleSearch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), search );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject searchResult() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchResult( Handle, CachedSelectors.searchResult, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int searchState() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchState( Handle, CachedSelectors.searchState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectSearchFieldContentIfFocused() {
			RuntimeObject ___occuredException;
			NativeMethods.selectSearchFieldContentIfFocused( Handle, CachedSelectors.selectSearchFieldContentIfFocused, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchState_( int state ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchState_( Handle, CachedSelectors.setSearchState_, out ___occuredException, sizeof( int ), state );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldSynchronizeWithOtherSearchControllers_( char controllers ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldSynchronizeWithOtherSearchControllers_( Handle, CachedSelectors.setShouldSynchronizeWithOtherSearchControllers_, out ___occuredException, sizeof( char ), controllers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUIController_( Handle, CachedSelectors.setUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldSaveCurrentSearch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldSaveCurrentSearch( Handle, CachedSelectors.shouldSaveCurrentSearch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void startDirectorySearch() {
			RuntimeObject ___occuredException;
			NativeMethods.startDirectorySearch( Handle, CachedSelectors.startDirectorySearch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startSpinning() {
			RuntimeObject ___occuredException;
			NativeMethods.startSpinning( Handle, CachedSelectors.startSpinning, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopSearching() {
			RuntimeObject ___occuredException;
			NativeMethods.stopSearching( Handle, CachedSelectors.stopSearching, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopSpinning() {
			RuntimeObject ___occuredException;
			NativeMethods.stopSpinning( Handle, CachedSelectors.stopSpinning, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char textView_doCommandBySelector_( NObjective.RuntimeObject view, NObjective.Selector doCommandBySelector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textView_doCommandBySelector_( Handle, CachedSelectors.textView_doCommandBySelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), view, doCommandBySelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void triggerSearch() {
			RuntimeObject ___occuredException;
			NativeMethods.triggerSearch( Handle, CachedSelectors.triggerSearch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void triggerSearchAndSelectBestMatch_( char match ) {
			RuntimeObject ___occuredException;
			NativeMethods.triggerSearchAndSelectBestMatch_( Handle, CachedSelectors.triggerSearchAndSelectBestMatch_, out ___occuredException, sizeof( char ), match );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr bestRecordMatching_inPeople_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching, NObjective.RuntimeObject inPeople );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearSearchField( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char control_textView_doCommandBySelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject control, NObjective.RuntimeObject textView, NObjective.Selector doCommandBySelector );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void directoryDataHasArrived_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject arrived );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void directoryQueryStatusChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr displayedMemberMatching_inPeople_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching, NObjective.RuntimeObject inPeople );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void indexFoundMatches_done_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matches, char done );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint matchIndexForPerson_withPieces_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject withPieces );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void membersChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char property_matchesPieces_forPerson_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject matchesPieces, NObjective.RuntimeObject forPerson );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void saveSearch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject search );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void scheduleSearch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject search );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void searchControllerDidScheduleSearch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject search );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchResult( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int searchState( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectSearchFieldContentIfFocused( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSearchState_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int state );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShouldSynchronizeWithOtherSearchControllers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char controllers );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool shouldSaveCurrentSearch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void startDirectorySearch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void startSpinning( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void stopSearching( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void stopSpinning( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char textView_doCommandBySelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.Selector doCommandBySelector );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void triggerSearch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void triggerSearchAndSelectBestMatch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char match );
		}
		static internal class CachedSelectors {
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector bestRecordMatching_inPeople_ = "bestRecordMatching:inPeople:";
			public static readonly Selector clearSearchField = "clearSearchField";
			public static readonly Selector control_textView_doCommandBySelector_ = "control:textView:doCommandBySelector:";
			public static readonly Selector directoryDataHasArrived_ = "directoryDataHasArrived:";
			public static readonly Selector directoryQueryStatusChanged_ = "directoryQueryStatusChanged:";
			public static readonly Selector displayedMemberMatching_inPeople_ = "displayedMemberMatching:inPeople:";
			public static readonly Selector indexFoundMatches_done_ = "indexFoundMatches:done:";
			public static readonly Selector initWithUIController_ = "initWithUIController:";
			public static readonly Selector matchIndexForPerson_withPieces_ = "matchIndexForPerson:withPieces:";
			public static readonly Selector membersChanged_ = "membersChanged:";
			public static readonly Selector property_matchesPieces_forPerson_ = "property:matchesPieces:forPerson:";
			public static readonly Selector saveSearch_ = "saveSearch:";
			public static readonly Selector scheduleSearch_ = "scheduleSearch:";
			public static readonly Selector searchControllerDidScheduleSearch_ = "searchControllerDidScheduleSearch:";
			public static readonly Selector searchResult = "searchResult";
			public static readonly Selector searchState = "searchState";
			public static readonly Selector selectSearchFieldContentIfFocused = "selectSearchFieldContentIfFocused";
			public static readonly Selector setSearchState_ = "setSearchState:";
			public static readonly Selector setShouldSynchronizeWithOtherSearchControllers_ = "setShouldSynchronizeWithOtherSearchControllers:";
			public static readonly Selector setUIController_ = "setUIController:";
			public static readonly Selector shouldSaveCurrentSearch = "shouldSaveCurrentSearch";
			public static readonly Selector startDirectorySearch = "startDirectorySearch";
			public static readonly Selector startSpinning = "startSpinning";
			public static readonly Selector stopSearching = "stopSearching";
			public static readonly Selector stopSpinning = "stopSpinning";
			public static readonly Selector textView_doCommandBySelector_ = "textView:doCommandBySelector:";
			public static readonly Selector triggerSearch = "triggerSearch";
			public static readonly Selector triggerSearchAndSelectBestMatch_ = "triggerSearchAndSelectBestMatch:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABSearchElement : IEquatable<ABSearchElement> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElement;
		public static implicit operator IntPtr( ABSearchElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchElement ) ) return false; 
			return Handle == ( ( ABSearchElement )value ).Handle;
		}
		public bool Equals( ABSearchElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElement value1, ABSearchElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElement value1, ABSearchElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElement alloc() {
			return new ABSearchElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int baseEncodingVersion() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseEncodingVersion( ClassHandle, CachedSelectors.baseEncodingVersion, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void checkCurrentVersionCompatibleWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.checkCurrentVersionCompatibleWithCoder_( ClassHandle, CachedSelectors.checkCurrentVersionCompatibleWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static ABSearchElement searchElementForConjunction_children_( int conjunction, NSArray children ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchElementForConjunction_children_( ClassHandle, CachedSelectors.searchElementForConjunction_children_, out ___occuredException, sizeof( int ) + sizeof( NSArray ), conjunction, children );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABSearchElement( ___result );
		}
		unsafe public static void setEncodingVersion_( int version ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEncodingVersion_( ClassHandle, CachedSelectors.setEncodingVersion_, out ___occuredException, sizeof( int ), version );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char diacriticInsensitiveOption() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.diacriticInsensitiveOption( Handle, CachedSelectors.diacriticInsensitiveOption, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int encodingVersion() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.encodingVersion( Handle, CachedSelectors.encodingVersion, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject groupsUsedInDefinition() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsUsedInDefinition( Handle, CachedSelectors.groupsUsedInDefinition, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isSimpleSearch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSimpleSearch( Handle, CachedSelectors.isSimpleSearch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool matchesRecord_( ABRecord record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchesRecord_( Handle, CachedSelectors.matchesRecord_, out ___occuredException, sizeof( ABRecord ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_MatchesRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_MatchesRecord_( Handle, CachedSelectors.nts_MatchesRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_PredicateMatchesRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_PredicateMatchesRecord_( Handle, CachedSelectors.nts_PredicateMatchesRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char predicateMatchesRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateMatchesRecord_( Handle, CachedSelectors.predicateMatchesRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject prefetchingRelationshipKeyPathsForImplClass_inAddressBook_( NObjective.RuntimeClass @class, NObjective.RuntimeObject inAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.prefetchingRelationshipKeyPathsForImplClass_inAddressBook_( Handle, CachedSelectors.prefetchingRelationshipKeyPathsForImplClass_inAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeObject ), @class, inAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char searchGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchGroups( Handle, CachedSelectors.searchGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char searchPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchPeople( Handle, CachedSelectors.searchPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject searchRecordClasses() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchRecordClasses( Handle, CachedSelectors.searchRecordClasses, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char searchSubscribed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchSubscribed( Handle, CachedSelectors.searchSubscribed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDiacriticInsensitiveOption_( char option ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDiacriticInsensitiveOption_( Handle, CachedSelectors.setDiacriticInsensitiveOption_, out ___occuredException, sizeof( char ), option );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchValue_( Handle, CachedSelectors.setSearchValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char usesGroupInDefinition_( NObjective.RuntimeObject definition ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.usesGroupInDefinition_( Handle, CachedSelectors.usesGroupInDefinition_, out ___occuredException, sizeof( NObjective.RuntimeObject ), definition );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int baseEncodingVersion( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void checkCurrentVersionCompatibleWithCoder_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char diacriticInsensitiveOption( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int encodingVersion( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groupsUsedInDefinition( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isSimpleSearch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool matchesRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABRecord record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_MatchesRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_PredicateMatchesRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char predicateMatchesRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr prefetchingRelationshipKeyPathsForImplClass_inAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeObject inAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchElementForConjunction_children_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int conjunction, NSArray children );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char searchGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char searchPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchRecordClasses( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char searchSubscribed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDiacriticInsensitiveOption_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char option );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEncodingVersion_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int version );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSearchValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char usesGroupInDefinition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject definition );
		}
		static internal class CachedSelectors {
			public static readonly Selector baseEncodingVersion = "baseEncodingVersion";
			public static readonly Selector checkCurrentVersionCompatibleWithCoder_ = "checkCurrentVersionCompatibleWithCoder:";
			public static readonly Selector diacriticInsensitiveOption = "diacriticInsensitiveOption";
			public static readonly Selector encodingVersion = "encodingVersion";
			public static readonly Selector groupsUsedInDefinition = "groupsUsedInDefinition";
			public static readonly Selector isSimpleSearch = "isSimpleSearch";
			public static readonly Selector matchesRecord_ = "matchesRecord:";
			public static readonly Selector nts_MatchesRecord_ = "nts_MatchesRecord:";
			public static readonly Selector nts_PredicateMatchesRecord_ = "nts_PredicateMatchesRecord:";
			public static readonly Selector predicateMatchesRecord_ = "predicateMatchesRecord:";
			public static readonly Selector prefetchingRelationshipKeyPathsForImplClass_inAddressBook_ = "prefetchingRelationshipKeyPathsForImplClass:inAddressBook:";
			public static readonly Selector searchElementForConjunction_children_ = "searchElementForConjunction:children:";
			public static readonly Selector searchGroups = "searchGroups";
			public static readonly Selector searchPeople = "searchPeople";
			public static readonly Selector searchRecordClasses = "searchRecordClasses";
			public static readonly Selector searchSubscribed = "searchSubscribed";
			public static readonly Selector setDiacriticInsensitiveOption_ = "setDiacriticInsensitiveOption:";
			public static readonly Selector setEncodingVersion_ = "setEncodingVersion:";
			public static readonly Selector setSearchValue_ = "setSearchValue:";
			public static readonly Selector usesGroupInDefinition_ = "usesGroupInDefinition:";
		}
	}
	[ProxyBaseClass(typeof( ABSearchElement ))]
	public struct ABSearchElementConjunction : IEquatable<ABSearchElementConjunction> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementConjunction;
		public static implicit operator IntPtr( ABSearchElementConjunction value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementConjunction value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchElementConjunction ) ) return false; 
			return Handle == ( ( ABSearchElementConjunction )value ).Handle;
		}
		public bool Equals( ABSearchElementConjunction value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementConjunction value1, ABSearchElementConjunction value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementConjunction value1, ABSearchElementConjunction value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementConjunction( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementConjunction alloc() {
			return new ABSearchElementConjunction( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int conjunction() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conjunction( Handle, CachedSelectors.conjunction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithConjunctionOperator_children_( int @operator, NObjective.RuntimeObject children ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithConjunctionOperator_children_( Handle, CachedSelectors.initWithConjunctionOperator_children_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), @operator, children );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isRuleGrouping() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isRuleGrouping( Handle, CachedSelectors.isRuleGrouping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setIsRuleGrouping_( char grouping ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsRuleGrouping_( Handle, CachedSelectors.setIsRuleGrouping_, out ___occuredException, sizeof( char ), grouping );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int conjunction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithConjunctionOperator_children_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @operator, NObjective.RuntimeObject children );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isRuleGrouping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIsRuleGrouping_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char grouping );
		}
		static internal class CachedSelectors {
			public static readonly Selector conjunction = "conjunction";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithConjunctionOperator_children_ = "initWithConjunctionOperator:children:";
			public static readonly Selector isRuleGrouping = "isRuleGrouping";
			public static readonly Selector setIsRuleGrouping_ = "setIsRuleGrouping:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABSearchElementHelper : IEquatable<ABSearchElementHelper> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementHelper;
		public static implicit operator IntPtr( ABSearchElementHelper value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementHelper value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchElementHelper ) ) return false; 
			return Handle == ( ( ABSearchElementHelper )value ).Handle;
		}
		public bool Equals( ABSearchElementHelper value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementHelper value1, ABSearchElementHelper value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementHelper value1, ABSearchElementHelper value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementHelper( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementHelper alloc() {
			return new ABSearchElementHelper( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject AddressKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.AddressKeys( ClassHandle, CachedSelectors.AddressKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void buildRepresentationFromSearchElement_builder_order_( NObjective.RuntimeObject element, NObjective.RuntimeObject builder, NObjective.RuntimeObject order ) {
			RuntimeObject ___occuredException;
			NativeMethods.buildRepresentationFromSearchElement_builder_order_( ClassHandle, CachedSelectors.buildRepresentationFromSearchElement_builder_order_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), element, builder, order );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void buildRepresentationFromSearchElement_builder_order_level_( NObjective.RuntimeObject element, NObjective.RuntimeObject builder, NObjective.RuntimeObject order, int level ) {
			RuntimeObject ___occuredException;
			NativeMethods.buildRepresentationFromSearchElement_builder_order_level_( ClassHandle, CachedSelectors.buildRepresentationFromSearchElement_builder_order_level_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), element, builder, order, level );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void calculateBestDateType_andBestValue_forTimeInterval_( System.IntPtr type, System.IntPtr andBestValue, double forTimeInterval ) {
			RuntimeObject ___occuredException;
			NativeMethods.calculateBestDateType_andBestValue_forTimeInterval_( ClassHandle, CachedSelectors.calculateBestDateType_andBestValue_forTimeInterval_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( double ), type, andBestValue, forTimeInterval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject IMProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.IMProperties( ClassHandle, CachedSelectors.IMProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static bool isSingleSearchElement_property_value_comparison_level_( NObjective.RuntimeObject element, System.IntPtr property, System.IntPtr value, System.IntPtr comparison, int level ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSingleSearchElement_property_value_comparison_level_( ClassHandle, CachedSelectors.isSingleSearchElement_property_value_comparison_level_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( int ), element, property, value, comparison, level );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject nameProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameProperties( ClassHandle, CachedSelectors.nameProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nameValueForConjoinedSearchElement_comparison_( NObjective.RuntimeObject element, System.IntPtr comparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameValueForConjoinedSearchElement_comparison_( ClassHandle, CachedSelectors.nameValueForConjoinedSearchElement_comparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), element, comparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject propertiesOfSearchElements_( NObjective.RuntimeObject elements ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertiesOfSearchElements_( ClassHandle, CachedSelectors.propertiesOfSearchElements_, out ___occuredException, sizeof( NObjective.RuntimeObject ), elements );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr AddressKeys( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void buildRepresentationFromSearchElement_builder_order_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, NObjective.RuntimeObject builder, NObjective.RuntimeObject order );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void buildRepresentationFromSearchElement_builder_order_level_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, NObjective.RuntimeObject builder, NObjective.RuntimeObject order, int level );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void calculateBestDateType_andBestValue_forTimeInterval_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr type, System.IntPtr andBestValue, double forTimeInterval );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr IMProperties( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isSingleSearchElement_property_value_comparison_level_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, System.IntPtr property, System.IntPtr value, System.IntPtr comparison, int level );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nameProperties( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nameValueForConjoinedSearchElement_comparison_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, System.IntPtr comparison );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertiesOfSearchElements_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject elements );
		}
		static internal class CachedSelectors {
			public static readonly Selector AddressKeys = "AddressKeys";
			public static readonly Selector buildRepresentationFromSearchElement_builder_order_ = "buildRepresentationFromSearchElement:builder:order:";
			public static readonly Selector buildRepresentationFromSearchElement_builder_order_level_ = "buildRepresentationFromSearchElement:builder:order:level:";
			public static readonly Selector calculateBestDateType_andBestValue_forTimeInterval_ = "calculateBestDateType:andBestValue:forTimeInterval:";
			public static readonly Selector IMProperties = "IMProperties";
			public static readonly Selector isSingleSearchElement_property_value_comparison_level_ = "isSingleSearchElement:property:value:comparison:level:";
			public static readonly Selector nameProperties = "nameProperties";
			public static readonly Selector nameValueForConjoinedSearchElement_comparison_ = "nameValueForConjoinedSearchElement:comparison:";
			public static readonly Selector propertiesOfSearchElements_ = "propertiesOfSearchElements:";
		}
	}
	[ProxyBaseClass(typeof( ABSearchElement ))]
	public struct ABSearchElementMatch : IEquatable<ABSearchElementMatch> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementMatch;
		public static implicit operator IntPtr( ABSearchElementMatch value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementMatch value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchElementMatch ) ) return false; 
			return Handle == ( ( ABSearchElementMatch )value ).Handle;
		}
		public bool Equals( ABSearchElementMatch value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementMatch value1, ABSearchElementMatch value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementMatch value1, ABSearchElementMatch value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementMatch( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementMatch alloc() {
			return new ABSearchElementMatch( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char compareWithRecordValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithRecordValue_( Handle, CachedSelectors.compareWithRecordValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithProperty_label_key_value_searchPeople_comparison_( NObjective.RuntimeObject property, NObjective.RuntimeObject label, NObjective.RuntimeObject key, NObjective.RuntimeObject value, char searchPeople, int comparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProperty_label_key_value_searchPeople_comparison_( Handle, CachedSelectors.initWithProperty_label_key_value_searchPeople_comparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( int ), property, label, key, value, searchPeople, comparison
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithProperty_label_key_value_searchPeople_searchSubscribed_comparison_( NObjective.RuntimeObject property, NObjective.RuntimeObject label, NObjective.RuntimeObject key, NObjective.RuntimeObject value, char searchPeople, char searchSubscribed, int comparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProperty_label_key_value_searchPeople_searchSubscribed_comparison_( Handle, CachedSelectors.initWithProperty_label_key_value_searchPeople_searchSubscribed_comparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( int ), property, label, key, value, searchPeople, searchSubscribed, 
			comparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char compareWithRecordValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithProperty_label_key_value_searchPeople_comparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject label, NObjective.RuntimeObject key, NObjective.RuntimeObject value, char searchPeople, int comparison
			 );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithProperty_label_key_value_searchPeople_searchSubscribed_comparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject label, NObjective.RuntimeObject key, NObjective.RuntimeObject value, char searchPeople, char searchSubscribed, 
			int comparison );
		}
		static internal class CachedSelectors {
			public static readonly Selector compareWithRecordValue_ = "compareWithRecordValue:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithProperty_label_key_value_searchPeople_comparison_ = "initWithProperty:label:key:value:searchPeople:comparison:";
			public static readonly Selector initWithProperty_label_key_value_searchPeople_searchSubscribed_comparison_ = "initWithProperty:label:key:value:searchPeople:searchSubscribed:comparison:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABSearchElementOrderManager : IEquatable<ABSearchElementOrderManager> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementOrderManager;
		public static implicit operator IntPtr( ABSearchElementOrderManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementOrderManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchElementOrderManager ) ) return false; 
			return Handle == ( ( ABSearchElementOrderManager )value ).Handle;
		}
		public bool Equals( ABSearchElementOrderManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementOrderManager value1, ABSearchElementOrderManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementOrderManager value1, ABSearchElementOrderManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementOrderManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementOrderManager alloc() {
			return new ABSearchElementOrderManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject orderManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orderManager( ClassHandle, CachedSelectors.orderManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject comparisonsForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparisonsForProperty_( Handle, CachedSelectors.comparisonsForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject definitionForComparison_withPropertyDefinition_( int comparison, NObjective.RuntimeObject withPropertyDefinition ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.definitionForComparison_withPropertyDefinition_( Handle, CachedSelectors.definitionForComparison_withPropertyDefinition_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, withPropertyDefinition );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject definitionForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.definitionForProperty_( Handle, CachedSelectors.definitionForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject entryForProperty_withComparison_( NObjective.RuntimeObject property, int withComparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.entryForProperty_withComparison_( Handle, CachedSelectors.entryForProperty_withComparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, withComparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isDateComparison_forProperty_( int comparison, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDateComparison_forProperty_( Handle, CachedSelectors.isDateComparison_forProperty_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isWithinTimePeriodComparison_forProperty_( int comparison, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isWithinTimePeriodComparison_forProperty_( Handle, CachedSelectors.isWithinTimePeriodComparison_forProperty_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isYearLessComparison_forProperty_( int comparison, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isYearLessComparison_forProperty_( Handle, CachedSelectors.isYearLessComparison_forProperty_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject localizedStringForComparison_withProperty_( int comparison, NObjective.RuntimeObject withProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedStringForComparison_withProperty_( Handle, CachedSelectors.localizedStringForComparison_withProperty_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, withProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject localizedStringForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedStringForProperty_( Handle, CachedSelectors.localizedStringForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject orderForProperty_comparison_( NObjective.RuntimeObject property, int comparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orderForProperty_comparison_( Handle, CachedSelectors.orderForProperty_comparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, comparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject properties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.properties( Handle, CachedSelectors.properties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyDefinitions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyDefinitions( Handle, CachedSelectors.propertyDefinitions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char propertyIsComposite_( NObjective.RuntimeObject composite ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyIsComposite_( Handle, CachedSelectors.propertyIsComposite_, out ___occuredException, sizeof( NObjective.RuntimeObject ), composite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char putPropertyInOtherMenu_( NObjective.RuntimeObject menu ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.putPropertyInOtherMenu_( Handle, CachedSelectors.putPropertyInOtherMenu_, out ___occuredException, sizeof( NObjective.RuntimeObject ), menu );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject typeForProperty_withComparison_( NObjective.RuntimeObject property, int withComparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeForProperty_withComparison_( Handle, CachedSelectors.typeForProperty_withComparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, withComparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void updatePropertyWidth_andComparisonWidth_( System.IntPtr width, System.IntPtr andComparisonWidth ) {
			RuntimeObject ___occuredException;
			NativeMethods.updatePropertyWidth_andComparisonWidth_( Handle, CachedSelectors.updatePropertyWidth_andComparisonWidth_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ), width, andComparisonWidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr comparisonsForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr definitionForComparison_withPropertyDefinition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject withPropertyDefinition );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr definitionForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr entryForProperty_withComparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int withComparison );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isDateComparison_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isWithinTimePeriodComparison_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isYearLessComparison_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr localizedStringForComparison_withProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject withProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr localizedStringForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr orderForProperty_comparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int comparison );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr orderManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr properties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyDefinitions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char propertyIsComposite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject composite );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char putPropertyInOtherMenu_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject menu );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr typeForProperty_withComparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int withComparison );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updatePropertyWidth_andComparisonWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr width, System.IntPtr andComparisonWidth );
		}
		static internal class CachedSelectors {
			public static readonly Selector comparisonsForProperty_ = "comparisonsForProperty:";
			public static readonly Selector definitionForComparison_withPropertyDefinition_ = "definitionForComparison:withPropertyDefinition:";
			public static readonly Selector definitionForProperty_ = "definitionForProperty:";
			public static readonly Selector entryForProperty_withComparison_ = "entryForProperty:withComparison:";
			public static readonly Selector isDateComparison_forProperty_ = "isDateComparison:forProperty:";
			public static readonly Selector isWithinTimePeriodComparison_forProperty_ = "isWithinTimePeriodComparison:forProperty:";
			public static readonly Selector isYearLessComparison_forProperty_ = "isYearLessComparison:forProperty:";
			public static readonly Selector localizedStringForComparison_withProperty_ = "localizedStringForComparison:withProperty:";
			public static readonly Selector localizedStringForProperty_ = "localizedStringForProperty:";
			public static readonly Selector orderForProperty_comparison_ = "orderForProperty:comparison:";
			public static readonly Selector orderManager = "orderManager";
			public static readonly Selector properties = "properties";
			public static readonly Selector propertyDefinitions = "propertyDefinitions";
			public static readonly Selector propertyIsComposite_ = "propertyIsComposite:";
			public static readonly Selector putPropertyInOtherMenu_ = "putPropertyInOtherMenu:";
			public static readonly Selector typeForProperty_withComparison_ = "typeForProperty:withComparison:";
			public static readonly Selector updatePropertyWidth_andComparisonWidth_ = "updatePropertyWidth:andComparisonWidth:";
		}
	}
	[ProxyBaseClass(typeof( NSView ))]
	public struct ABSearchElementSetView : IEquatable<ABSearchElementSetView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementSetView;
		public static implicit operator IntPtr( ABSearchElementSetView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementSetView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchElementSetView ) ) return false; 
			return Handle == ( ( ABSearchElementSetView )value ).Handle;
		}
		public bool Equals( ABSearchElementSetView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementSetView value1, ABSearchElementSetView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementSetView value1, ABSearchElementSetView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementSetView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementSetView alloc() {
			return new ABSearchElementSetView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABSearchElementUIController : IEquatable<ABSearchElementUIController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementUIController;
		public static implicit operator IntPtr( ABSearchElementUIController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementUIController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchElementUIController ) ) return false; 
			return Handle == ( ( ABSearchElementUIController )value ).Handle;
		}
		public bool Equals( ABSearchElementUIController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementUIController value1, ABSearchElementUIController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementUIController value1, ABSearchElementUIController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementUIController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementUIController alloc() {
			return new ABSearchElementUIController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addElementView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.addElementView_( Handle, CachedSelectors.addElementView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addRepresentationForElementWithProperty_value_comparison_order_( NObjective.RuntimeObject property, NObjective.RuntimeObject value, int comparison, NObjective.RuntimeObject order ) {
			RuntimeObject ___occuredException;
			NativeMethods.addRepresentationForElementWithProperty_value_comparison_order_( Handle, CachedSelectors.addRepresentationForElementWithProperty_value_comparison_order_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), property, value, comparison, order );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void animateToEncloseElements() {
			RuntimeObject ___occuredException;
			NativeMethods.animateToEncloseElements( Handle, CachedSelectors.animateToEncloseElements, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void beginSheetWithName_modalForWindow_modalDelegate_didEndSelector_contextInfo_( NObjective.RuntimeObject name, NObjective.RuntimeObject modalForWindow, NObjective.RuntimeObject modalDelegate, NObjective.Selector didEndSelector, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.beginSheetWithName_modalForWindow_modalDelegate_didEndSelector_contextInfo_( Handle, CachedSelectors.beginSheetWithName_modalForWindow_modalDelegate_didEndSelector_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( System.IntPtr ), name, modalForWindow, modalDelegate, didEndSelector, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void beginSheetWithSmartGroup_modalForWindow_modalDelegate_didEndSelector_contextInfo_( NObjective.RuntimeObject @group, NObjective.RuntimeObject modalForWindow, NObjective.RuntimeObject modalDelegate, NObjective.Selector didEndSelector, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.beginSheetWithSmartGroup_modalForWindow_modalDelegate_didEndSelector_contextInfo_( Handle, CachedSelectors.beginSheetWithSmartGroup_modalForWindow_modalDelegate_didEndSelector_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( System.IntPtr ), @group, modalForWindow, modalDelegate, didEndSelector, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void buildElementsFromSmartGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.buildElementsFromSmartGroup_( Handle, CachedSelectors.buildElementsFromSmartGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void fixKeyViews() {
			RuntimeObject ___occuredException;
			NativeMethods.fixKeyViews( Handle, CachedSelectors.fixKeyViews, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleCancel_( NObjective.RuntimeObject cancel ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleCancel_( Handle, CachedSelectors.handleCancel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cancel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleOK_( NObjective.RuntimeObject ok ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleOK_( Handle, CachedSelectors.handleOK_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ok );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void help_( NObjective.RuntimeObject help ) {
			RuntimeObject ___occuredException;
			NativeMethods.help_( Handle, CachedSelectors.help_, out ___occuredException, sizeof( NObjective.RuntimeObject ), help );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nameValueForConjoinedSearchElement_comparison_( NObjective.RuntimeObject element, System.IntPtr comparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameValueForConjoinedSearchElement_comparison_( Handle, CachedSelectors.nameValueForConjoinedSearchElement_comparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), element, comparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject newButtonAsPlus_atIndex_( char plus, int atIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newButtonAsPlus_atIndex_( Handle, CachedSelectors.newButtonAsPlus_atIndex_, out ___occuredException, sizeof( char ) + sizeof( int ), plus, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextKeyViewForElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextKeyViewForElement_( Handle, CachedSelectors.nextKeyViewForElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertiesOfSearchElements_( NObjective.RuntimeObject elements ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertiesOfSearchElements_( Handle, CachedSelectors.propertiesOfSearchElements_, out ___occuredException, sizeof( NObjective.RuntimeObject ), elements );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeElementView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeElementView_( Handle, CachedSelectors.removeElementView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject searchElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchElement( Handle, CachedSelectors.searchElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setConjunction_( int conjunction ) {
			RuntimeObject ___occuredException;
			NativeMethods.setConjunction_( Handle, CachedSelectors.setConjunction_, out ___occuredException, sizeof( int ), conjunction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDocWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDocWindow_( Handle, CachedSelectors.setDocWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject smartGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smartGroup( Handle, CachedSelectors.smartGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void textDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.textDidChange_( Handle, CachedSelectors.textDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char tracksModification() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tracksModification( Handle, CachedSelectors.tracksModification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void updateAndOrUI() {
			RuntimeObject ___occuredException;
			NativeMethods.updateAndOrUI( Handle, CachedSelectors.updateAndOrUI, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateOKButton() {
			RuntimeObject ___occuredException;
			NativeMethods.updateOKButton( Handle, CachedSelectors.updateOKButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addElementView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addRepresentationForElementWithProperty_value_comparison_order_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject value, int comparison, NObjective.RuntimeObject order );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void animateToEncloseElements( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void beginSheetWithName_modalForWindow_modalDelegate_didEndSelector_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject modalForWindow, NObjective.RuntimeObject modalDelegate, NObjective.Selector didEndSelector, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void beginSheetWithSmartGroup_modalForWindow_modalDelegate_didEndSelector_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject modalForWindow, NObjective.RuntimeObject modalDelegate, NObjective.Selector didEndSelector, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void buildElementsFromSmartGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void fixKeyViews( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void handleCancel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cancel );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void handleOK_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ok );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void help_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject help );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nameValueForConjoinedSearchElement_comparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, System.IntPtr comparison );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr newButtonAsPlus_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char plus, int atIndex );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextKeyViewForElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertiesOfSearchElements_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject elements );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeElementView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setConjunction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int conjunction );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDocWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr smartGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void textDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char tracksModification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateAndOrUI( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateOKButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addElementView_ = "addElementView:";
			public static readonly Selector addRepresentationForElementWithProperty_value_comparison_order_ = "addRepresentationForElementWithProperty:value:comparison:order:";
			public static readonly Selector animateToEncloseElements = "animateToEncloseElements";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector beginSheetWithName_modalForWindow_modalDelegate_didEndSelector_contextInfo_ = "beginSheetWithName:modalForWindow:modalDelegate:didEndSelector:contextInfo:";
			public static readonly Selector beginSheetWithSmartGroup_modalForWindow_modalDelegate_didEndSelector_contextInfo_ = "beginSheetWithSmartGroup:modalForWindow:modalDelegate:didEndSelector:contextInfo:";
			public static readonly Selector buildElementsFromSmartGroup_ = "buildElementsFromSmartGroup:";
			public static readonly Selector fixKeyViews = "fixKeyViews";
			public static readonly Selector handleCancel_ = "handleCancel:";
			public static readonly Selector handleOK_ = "handleOK:";
			public static readonly Selector help_ = "help:";
			public static readonly Selector name = "name";
			public static readonly Selector nameValueForConjoinedSearchElement_comparison_ = "nameValueForConjoinedSearchElement:comparison:";
			public static readonly Selector newButtonAsPlus_atIndex_ = "newButtonAsPlus:atIndex:";
			public static readonly Selector nextKeyViewForElement_ = "nextKeyViewForElement:";
			public static readonly Selector propertiesOfSearchElements_ = "propertiesOfSearchElements:";
			public static readonly Selector removeElementView_ = "removeElementView:";
			public static readonly Selector searchElement = "searchElement";
			public static readonly Selector setConjunction_ = "setConjunction:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setDocWindow_ = "setDocWindow:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector smartGroup = "smartGroup";
			public static readonly Selector textDidChange_ = "textDidChange:";
			public static readonly Selector tracksModification = "tracksModification";
			public static readonly Selector updateAndOrUI = "updateAndOrUI";
			public static readonly Selector updateOKButton = "updateOKButton";
		}
	}
	[ProxyBaseClass(typeof( NSView ))]
	public struct ABSearchElementView : IEquatable<ABSearchElementView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementView;
		public static implicit operator IntPtr( ABSearchElementView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchElementView ) ) return false; 
			return Handle == ( ( ABSearchElementView )value ).Handle;
		}
		public bool Equals( ABSearchElementView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementView value1, ABSearchElementView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementView value1, ABSearchElementView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementView alloc() {
			return new ABSearchElementView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int defaultComparisonForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultComparisonForProperty_( ClassHandle, CachedSelectors.defaultComparisonForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject orderManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orderManager( ClassHandle, CachedSelectors.orderManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addProperty_withLocalization_toMenu_( NObjective.RuntimeObject property, NObjective.RuntimeObject withLocalization, NObjective.RuntimeObject toMenu ) {
			RuntimeObject ___occuredException;
			NativeMethods.addProperty_withLocalization_toMenu_( Handle, CachedSelectors.addProperty_withLocalization_toMenu_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, withLocalization, toMenu );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int comparison() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparison( Handle, CachedSelectors.comparison, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void comparisonChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.comparisonChanged_( Handle, CachedSelectors.comparisonChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int comparisonForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparisonForProperty_( Handle, CachedSelectors.comparisonForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject comparisonPopUpForProperty_withSelection_( NObjective.RuntimeObject property, int withSelection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparisonPopUpForProperty_withSelection_( Handle, CachedSelectors.comparisonPopUpForProperty_withSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, withSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject conjoinedElementForProperties_value_withComparison_( NObjective.RuntimeObject properties, NObjective.RuntimeObject value, int withComparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conjoinedElementForProperties_value_withComparison_( Handle, CachedSelectors.conjoinedElementForProperties_value_withComparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), properties, value, withComparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject conjoinedElementForProperty_keys_value_withComparison_( NObjective.RuntimeObject property, NObjective.RuntimeObject keys, NObjective.RuntimeObject value, int withComparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conjoinedElementForProperty_keys_value_withComparison_( Handle, CachedSelectors.conjoinedElementForProperty_keys_value_withComparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, keys, value, withComparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void dateMatchingTypeChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.dateMatchingTypeChanged_( Handle, CachedSelectors.dateMatchingTypeChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject entryViewForEntry_( NObjective.RuntimeObject entry ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.entryViewForEntry_( Handle, CachedSelectors.entryViewForEntry_, out ___occuredException, sizeof( NObjective.RuntimeObject ), entry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int junctionForComparison_value_( int comparison, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.junctionForComparison_value_( Handle, CachedSelectors.junctionForComparison_value_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject property() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.property( Handle, CachedSelectors.property, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void propertyChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.propertyChanged_( Handle, CachedSelectors.propertyChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char requiresValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiresValue( Handle, CachedSelectors.requiresValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject searchElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchElement( Handle, CachedSelectors.searchElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setComparison_( int comparison ) {
			RuntimeObject ___occuredException;
			NativeMethods.setComparison_( Handle, CachedSelectors.setComparison_, out ___occuredException, sizeof( int ), comparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProperty_comparison_value_( NObjective.RuntimeObject property, int comparison, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setProperty_comparison_value_( Handle, CachedSelectors.setProperty_comparison_value_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), property, comparison, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_withProperty_comparison_entryView_( NObjective.RuntimeObject value, NObjective.RuntimeObject withProperty, int comparison, NObjective.RuntimeObject entryView ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_withProperty_comparison_entryView_( Handle, CachedSelectors.setValue_withProperty_comparison_entryView_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), value, withProperty, comparison, entryView );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidgets_( NObjective.RuntimeObject widgets ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidgets_( Handle, CachedSelectors.setWidgets_, out ___occuredException, sizeof( NObjective.RuntimeObject ), widgets );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject subvalue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subvalue( Handle, CachedSelectors.subvalue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void textFieldChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.textFieldChanged_( Handle, CachedSelectors.textFieldChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void textMatchingChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.textMatchingChanged_( Handle, CachedSelectors.textMatchingChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateWithinDateTense() {
			RuntimeObject ___occuredException;
			NativeMethods.updateWithinDateTense( Handle, CachedSelectors.updateWithinDateTense, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateWithinDateWidgetsWithInterval_( double interval ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateWithinDateWidgetsWithInterval_( Handle, CachedSelectors.updateWithinDateWidgetsWithInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addProperty_withLocalization_toMenu_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject withLocalization, NObjective.RuntimeObject toMenu );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int comparison( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void comparisonChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int comparisonForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr comparisonPopUpForProperty_withSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int withSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr conjoinedElementForProperties_value_withComparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject properties, NObjective.RuntimeObject value, int withComparison );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr conjoinedElementForProperty_keys_value_withComparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject keys, NObjective.RuntimeObject value, int withComparison );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dateMatchingTypeChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int defaultComparisonForProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr entryViewForEntry_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entry );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int junctionForComparison_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr orderManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr property( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void propertyChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char requiresValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setComparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setProperty_comparison_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int comparison, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setValue_withProperty_comparison_entryView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject withProperty, int comparison, NObjective.RuntimeObject entryView );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setWidgets_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject widgets );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subvalue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void textFieldChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void textMatchingChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateWithinDateTense( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateWithinDateWidgetsWithInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addProperty_withLocalization_toMenu_ = "addProperty:withLocalization:toMenu:";
			public static readonly Selector comparison = "comparison";
			public static readonly Selector comparisonChanged_ = "comparisonChanged:";
			public static readonly Selector comparisonForProperty_ = "comparisonForProperty:";
			public static readonly Selector comparisonPopUpForProperty_withSelection_ = "comparisonPopUpForProperty:withSelection:";
			public static readonly Selector conjoinedElementForProperties_value_withComparison_ = "conjoinedElementForProperties:value:withComparison:";
			public static readonly Selector conjoinedElementForProperty_keys_value_withComparison_ = "conjoinedElementForProperty:keys:value:withComparison:";
			public static readonly Selector dateMatchingTypeChanged_ = "dateMatchingTypeChanged:";
			public static readonly Selector defaultComparisonForProperty_ = "defaultComparisonForProperty:";
			public static readonly Selector entryViewForEntry_ = "entryViewForEntry:";
			public static readonly Selector junctionForComparison_value_ = "junctionForComparison:value:";
			public static readonly Selector orderManager = "orderManager";
			public static readonly Selector property = "property";
			public static readonly Selector propertyChanged_ = "propertyChanged:";
			public static readonly Selector requiresValue = "requiresValue";
			public static readonly Selector searchElement = "searchElement";
			public static readonly Selector setComparison_ = "setComparison:";
			public static readonly Selector setProperty_comparison_value_ = "setProperty:comparison:value:";
			public static readonly Selector setValue_withProperty_comparison_entryView_ = "setValue:withProperty:comparison:entryView:";
			public static readonly Selector setWidgets_ = "setWidgets:";
			public static readonly Selector subvalue = "subvalue";
			public static readonly Selector textFieldChanged_ = "textFieldChanged:";
			public static readonly Selector textMatchingChanged_ = "textMatchingChanged:";
			public static readonly Selector updateWithinDateTense = "updateWithinDateTense";
			public static readonly Selector updateWithinDateWidgetsWithInterval_ = "updateWithinDateWidgetsWithInterval:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
			public static readonly Selector value = "value";
		}
	}
	[ProxyBaseClass(typeof( NSSearchField ))]
	public struct ABSearchField : IEquatable<ABSearchField> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchField;
		public static implicit operator IntPtr( ABSearchField value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchField value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchField ) ) return false; 
			return Handle == ( ( ABSearchField )value ).Handle;
		}
		public bool Equals( ABSearchField value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchField value1, ABSearchField value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchField value1, ABSearchField value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchField( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchField alloc() {
			return new ABSearchField( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUIController_( Handle, CachedSelectors.setUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
		}
		static internal class CachedSelectors {
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector setUIController_ = "setUIController:";
		}
	}
	[ProxyBaseClass(typeof( NSSearchFieldCell ))]
	public struct ABSearchFieldCell : IEquatable<ABSearchFieldCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchFieldCell;
		public static implicit operator IntPtr( ABSearchFieldCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchFieldCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSearchFieldCell ) ) return false; 
			return Handle == ( ( ABSearchFieldCell )value ).Handle;
		}
		public bool Equals( ABSearchFieldCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchFieldCell value1, ABSearchFieldCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchFieldCell value1, ABSearchFieldCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchFieldCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchFieldCell alloc() {
			return new ABSearchFieldCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSButton ))]
	public struct ABSeparatedButtons : IEquatable<ABSeparatedButtons> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSeparatedButtons;
		public static implicit operator IntPtr( ABSeparatedButtons value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSeparatedButtons value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSeparatedButtons ) ) return false; 
			return Handle == ( ( ABSeparatedButtons )value ).Handle;
		}
		public bool Equals( ABSeparatedButtons value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSeparatedButtons value1, ABSeparatedButtons value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSeparatedButtons value1, ABSeparatedButtons value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSeparatedButtons( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSeparatedButtons alloc() {
			return new ABSeparatedButtons( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibleChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibleChildren( Handle, CachedSelectors.accessibleChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char cellEnabled_( int enabled ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cellEnabled_( Handle, CachedSelectors.cellEnabled_, out ___occuredException, sizeof( int ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void performClickOnCell_( int cell ) {
			RuntimeObject ___occuredException;
			NativeMethods.performClickOnCell_( Handle, CachedSelectors.performClickOnCell_, out ___occuredException, sizeof( int ), cell );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int selectedCellIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedCellIndex( Handle, CachedSelectors.selectedCellIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCell_enabled_( int cell, char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCell_enabled_( Handle, CachedSelectors.setCell_enabled_, out ___occuredException, sizeof( int ) + sizeof( char ), cell, enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int trackedCell() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.trackedCell( Handle, CachedSelectors.trackedCell, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibleChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char cellEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int enabled );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void performClickOnCell_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cell );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int selectedCellIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCell_enabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cell, char enabled );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int trackedCell( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibleChildren = "accessibleChildren";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector cellEnabled_ = "cellEnabled:";
			public static readonly Selector performClickOnCell_ = "performClickOnCell:";
			public static readonly Selector selectedCellIndex = "selectedCellIndex";
			public static readonly Selector setCell_enabled_ = "setCell:enabled:";
			public static readonly Selector trackedCell = "trackedCell";
		}
	}
	[ProxyBaseClass(typeof( ABAccessibilityMockUIElement ))]
	public struct ABSeparatedButtonsAccessibilityElement : IEquatable<ABSeparatedButtonsAccessibilityElement> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSeparatedButtonsAccessibilityElement;
		public static implicit operator IntPtr( ABSeparatedButtonsAccessibilityElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSeparatedButtonsAccessibilityElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSeparatedButtonsAccessibilityElement ) ) return false; 
			return Handle == ( ( ABSeparatedButtonsAccessibilityElement )value ).Handle;
		}
		public bool Equals( ABSeparatedButtonsAccessibilityElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSeparatedButtonsAccessibilityElement value1, ABSeparatedButtonsAccessibilityElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSeparatedButtonsAccessibilityElement value1, ABSeparatedButtonsAccessibilityElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSeparatedButtonsAccessibilityElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSeparatedButtonsAccessibilityElement alloc() {
			return new ABSeparatedButtonsAccessibilityElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibilityEnabledAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityEnabledAttribute( Handle, CachedSelectors.accessibilityEnabledAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityTitleAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityTitleAttribute( Handle, CachedSelectors.accessibilityTitleAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char goesNext() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.goesNext( Handle, CachedSelectors.goesNext, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithRole_parent_goesNext_( NObjective.RuntimeObject role, NObjective.RuntimeObject parent, char goesNext ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRole_parent_goesNext_( Handle, CachedSelectors.initWithRole_parent_goesNext_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), role, parent, goesNext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityEnabledAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityTitleAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char goesNext( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithRole_parent_goesNext_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject role, NObjective.RuntimeObject parent, char goesNext );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityEnabledAttribute = "accessibilityEnabledAttribute";
			public static readonly Selector accessibilityTitleAttribute = "accessibilityTitleAttribute";
			public static readonly Selector goesNext = "goesNext";
			public static readonly Selector initWithRole_parent_goesNext_ = "initWithRole:parent:goesNext:";
		}
	}
	[ProxyBaseClass(typeof( NSButtonCell ))]
	public struct ABSeparatedButtonsCell : IEquatable<ABSeparatedButtonsCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSeparatedButtonsCell;
		public static implicit operator IntPtr( ABSeparatedButtonsCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSeparatedButtonsCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSeparatedButtonsCell ) ) return false; 
			return Handle == ( ( ABSeparatedButtonsCell )value ).Handle;
		}
		public bool Equals( ABSeparatedButtonsCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSeparatedButtonsCell value1, ABSeparatedButtonsCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSeparatedButtonsCell value1, ABSeparatedButtonsCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSeparatedButtonsCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSeparatedButtonsCell alloc() {
			return new ABSeparatedButtonsCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char acceptsFirstResponderForView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.acceptsFirstResponderForView_( Handle, CachedSelectors.acceptsFirstResponderForView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char cellEnabled_( int enabled ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cellEnabled_( Handle, CachedSelectors.cellEnabled_, out ___occuredException, sizeof( int ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void controlViewWillBecomeFirstResponder_( NObjective.RuntimeObject responder ) {
			RuntimeObject ___occuredException;
			NativeMethods.controlViewWillBecomeFirstResponder_( Handle, CachedSelectors.controlViewWillBecomeFirstResponder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), responder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void controlViewWillResignFirstResponder_( NObjective.RuntimeObject responder ) {
			RuntimeObject ___occuredException;
			NativeMethods.controlViewWillResignFirstResponder_( Handle, CachedSelectors.controlViewWillResignFirstResponder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), responder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithButton_( NObjective.RuntimeObject button ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithButton_( Handle, CachedSelectors.initWithButton_, out ___occuredException, sizeof( NObjective.RuntimeObject ), button );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char moveSelectionLeft() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.moveSelectionLeft( Handle, CachedSelectors.moveSelectionLeft, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char moveSelectionRight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.moveSelectionRight( Handle, CachedSelectors.moveSelectionRight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int selectedCellIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedCellIndex( Handle, CachedSelectors.selectedCellIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCell_enabled_( int cell, char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCell_enabled_( Handle, CachedSelectors.setCell_enabled_, out ___occuredException, sizeof( int ) + sizeof( char ), cell, enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCell_selected_( int cell, char selected ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCell_selected_( Handle, CachedSelectors.setCell_selected_, out ___occuredException, sizeof( int ) + sizeof( char ), cell, selected );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char acceptsFirstResponderForView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char cellEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int enabled );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void controlViewWillBecomeFirstResponder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject responder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void controlViewWillResignFirstResponder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject responder );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithButton_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject button );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char moveSelectionLeft( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char moveSelectionRight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int selectedCellIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCell_enabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cell, char enabled );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCell_selected_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cell, char selected );
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptsFirstResponderForView_ = "acceptsFirstResponderForView:";
			public static readonly Selector cellEnabled_ = "cellEnabled:";
			public static readonly Selector controlViewWillBecomeFirstResponder_ = "controlViewWillBecomeFirstResponder:";
			public static readonly Selector controlViewWillResignFirstResponder_ = "controlViewWillResignFirstResponder:";
			public static readonly Selector initWithButton_ = "initWithButton:";
			public static readonly Selector moveSelectionLeft = "moveSelectionLeft";
			public static readonly Selector moveSelectionRight = "moveSelectionRight";
			public static readonly Selector selectedCellIndex = "selectedCellIndex";
			public static readonly Selector setCell_enabled_ = "setCell:enabled:";
			public static readonly Selector setCell_selected_ = "setCell:selected:";
		}
	}
	[ProxyBaseClass(typeof( NSTextAttachmentCell ))]
	public struct ABSeparatorLineCell : IEquatable<ABSeparatorLineCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSeparatorLineCell;
		public static implicit operator IntPtr( ABSeparatorLineCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSeparatorLineCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSeparatorLineCell ) ) return false; 
			return Handle == ( ( ABSeparatorLineCell )value ).Handle;
		}
		public bool Equals( ABSeparatorLineCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSeparatorLineCell value1, ABSeparatorLineCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSeparatorLineCell value1, ABSeparatorLineCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSeparatorLineCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSeparatorLineCell alloc() {
			return new ABSeparatorLineCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABSetImageCommand : IEquatable<ABSetImageCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSetImageCommand;
		public static implicit operator IntPtr( ABSetImageCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSetImageCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSetImageCommand ) ) return false; 
			return Handle == ( ( ABSetImageCommand )value ).Handle;
		}
		public bool Equals( ABSetImageCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSetImageCommand value1, ABSetImageCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSetImageCommand value1, ABSetImageCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSetImageCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSetImageCommand alloc() {
			return new ABSetImageCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject alternatePath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alternatePath( Handle, CachedSelectors.alternatePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithPerson_imageData_addressBook_( NObjective.RuntimeObject person, NObjective.RuntimeObject imageData, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPerson_imageData_addressBook_( Handle, CachedSelectors.initWithPerson_imageData_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, imageData, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr alternatePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithPerson_imageData_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject imageData, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector alternatePath = "alternatePath";
			public static readonly Selector initWithPerson_imageData_addressBook_ = "initWithPerson:imageData:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABShowAsCommand : IEquatable<ABShowAsCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABShowAsCommand;
		public static implicit operator IntPtr( ABShowAsCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABShowAsCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABShowAsCommand ) ) return false; 
			return Handle == ( ( ABShowAsCommand )value ).Handle;
		}
		public bool Equals( ABShowAsCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABShowAsCommand value1, ABShowAsCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABShowAsCommand value1, ABShowAsCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABShowAsCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABShowAsCommand alloc() {
			return new ABShowAsCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_members_showAs_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject members, int showAs, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_members_showAs_addressBook_( Handle, CachedSelectors.initWithGroup_members_showAs_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), @group, members, showAs, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_members_showAs_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject members, int showAs, NObjective.RuntimeObject addressBook );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_members_showAs_addressBook_ = "initWithGroup:members:showAs:addressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABImportPanelController ))]
	public struct ABSimpleImportController : IEquatable<ABSimpleImportController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSimpleImportController;
		public static implicit operator IntPtr( ABSimpleImportController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSimpleImportController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSimpleImportController ) ) return false; 
			return Handle == ( ( ABSimpleImportController )value ).Handle;
		}
		public bool Equals( ABSimpleImportController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSimpleImportController value1, ABSimpleImportController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSimpleImportController value1, ABSimpleImportController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSimpleImportController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSimpleImportController alloc() {
			return new ABSimpleImportController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject simpleControllerWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.simpleControllerWithUIController_( ClassHandle, CachedSelectors.simpleControllerWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void importPeople_intoGroup_( NObjective.RuntimeObject people, NObjective.RuntimeObject intoGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.importPeople_intoGroup_( Handle, CachedSelectors.importPeople_intoGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), people, intoGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importPeople_intoGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject people, NObjective.RuntimeObject intoGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr simpleControllerWithUIController_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
		}
		static internal class CachedSelectors {
			public static readonly Selector importPeople_intoGroup_ = "importPeople:intoGroup:";
			public static readonly Selector simpleControllerWithUIController_ = "simpleControllerWithUIController:";
		}
	}
	[ProxyBaseClass(typeof( NSView ))]
	public struct ABSingleColorView : IEquatable<ABSingleColorView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSingleColorView;
		public static implicit operator IntPtr( ABSingleColorView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSingleColorView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSingleColorView ) ) return false; 
			return Handle == ( ( ABSingleColorView )value ).Handle;
		}
		public bool Equals( ABSingleColorView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSingleColorView value1, ABSingleColorView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSingleColorView value1, ABSingleColorView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSingleColorView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSingleColorView alloc() {
			return new ABSingleColorView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( ABGroup ))]
	public struct ABSmartGroup : IEquatable<ABSmartGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSmartGroup;
		public static implicit operator IntPtr( ABSmartGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSmartGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSmartGroup ) ) return false; 
			return Handle == ( ( ABSmartGroup )value ).Handle;
		}
		public bool Equals( ABSmartGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSmartGroup value1, ABSmartGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSmartGroup value1, ABSmartGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSmartGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSmartGroup alloc() {
			return new ABSmartGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject smartGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smartGroups( ClassHandle, CachedSelectors.smartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isModified() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isModified( Handle, CachedSelectors.isModified, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_IsModified() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsModified( Handle, CachedSelectors.nts_IsModified, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_SearchElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SearchElement( Handle, CachedSelectors.nts_SearchElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_SetIsModified_( char modified ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetIsModified_( Handle, CachedSelectors.nts_SetIsModified_, out ___occuredException, sizeof( char ), modified );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SetSearchElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetSearchElement_( Handle, CachedSelectors.nts_SetSearchElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SetTracksModification_( char modification ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetTracksModification_( Handle, CachedSelectors.nts_SetTracksModification_, out ___occuredException, sizeof( char ), modification );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_TracksModification() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_TracksModification( Handle, CachedSelectors.nts_TracksModification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject searchElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchElement( Handle, CachedSelectors.searchElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setIsModified_( char modified ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsModified_( Handle, CachedSelectors.setIsModified_, out ___occuredException, sizeof( char ), modified );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchElement_( Handle, CachedSelectors.setSearchElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTracksModification_( char modification ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTracksModification_( Handle, CachedSelectors.setTracksModification_, out ___occuredException, sizeof( char ), modification );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char tracksModification() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tracksModification( Handle, CachedSelectors.tracksModification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isModified( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_IsModified( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_SearchElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_SetIsModified_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char modified );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_SetSearchElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_SetTracksModification_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char modification );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_TracksModification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIsModified_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char modified );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSearchElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setTracksModification_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char modification );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr smartGroups( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char tracksModification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector isModified = "isModified";
			public static readonly Selector nts_IsModified = "nts_IsModified";
			public static readonly Selector nts_SearchElement = "nts_SearchElement";
			public static readonly Selector nts_SetIsModified_ = "nts_SetIsModified:";
			public static readonly Selector nts_SetSearchElement_ = "nts_SetSearchElement:";
			public static readonly Selector nts_SetTracksModification_ = "nts_SetTracksModification:";
			public static readonly Selector nts_TracksModification = "nts_TracksModification";
			public static readonly Selector searchElement = "searchElement";
			public static readonly Selector setIsModified_ = "setIsModified:";
			public static readonly Selector setSearchElement_ = "setSearchElement:";
			public static readonly Selector setTracksModification_ = "setTracksModification:";
			public static readonly Selector smartGroups = "smartGroups";
			public static readonly Selector tracksModification = "tracksModification";
		}
	}
	[ProxyBaseClass(typeof( NSFormatter ))]
	public struct ABSpaceFormatter : IEquatable<ABSpaceFormatter> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSpaceFormatter;
		public static implicit operator IntPtr( ABSpaceFormatter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSpaceFormatter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSpaceFormatter ) ) return false; 
			return Handle == ( ( ABSpaceFormatter )value ).Handle;
		}
		public bool Equals( ABSpaceFormatter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSpaceFormatter value1, ABSpaceFormatter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSpaceFormatter value1, ABSpaceFormatter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSpaceFormatter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSpaceFormatter alloc() {
			return new ABSpaceFormatter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( ABGroup ))]
	public struct ABSpecialGroup : IEquatable<ABSpecialGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSpecialGroup;
		public static implicit operator IntPtr( ABSpecialGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSpecialGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSpecialGroup ) ) return false; 
			return Handle == ( ( ABSpecialGroup )value ).Handle;
		}
		public bool Equals( ABSpecialGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSpecialGroup value1, ABSpecialGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSpecialGroup value1, ABSpecialGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSpecialGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSpecialGroup alloc() {
			return new ABSpecialGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSSplitView ))]
	public struct ABSplitView : IEquatable<ABSplitView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSplitView;
		public static implicit operator IntPtr( ABSplitView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSplitView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSplitView ) ) return false; 
			return Handle == ( ( ABSplitView )value ).Handle;
		}
		public bool Equals( ABSplitView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSplitView value1, ABSplitView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSplitView value1, ABSplitView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSplitView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSplitView alloc() {
			return new ABSplitView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void resizeColumnAtIndex_toWidth_( int index, float toWidth ) {
			RuntimeObject ___occuredException;
			NativeMethods.resizeColumnAtIndex_toWidth_( Handle, CachedSelectors.resizeColumnAtIndex_toWidth_, out ___occuredException, sizeof( int ) + sizeof( float ), index, toWidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void switchPanes_( NObjective.RuntimeObject panes ) {
			RuntimeObject ___occuredException;
			NativeMethods.switchPanes_( Handle, CachedSelectors.switchPanes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), panes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resizeColumnAtIndex_toWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index, float toWidth );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void switchPanes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject panes );
		}
		static internal class CachedSelectors {
			public static readonly Selector resizeColumnAtIndex_toWidth_ = "resizeColumnAtIndex:toWidth:";
			public static readonly Selector switchPanes_ = "switchPanes:";
		}
	}
	[ProxyBaseClass(typeof( ABAccessibilityMockUIElement ))]
	public struct ABSubrowGroupElement : IEquatable<ABSubrowGroupElement> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSubrowGroupElement;
		public static implicit operator IntPtr( ABSubrowGroupElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSubrowGroupElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSubrowGroupElement ) ) return false; 
			return Handle == ( ( ABSubrowGroupElement )value ).Handle;
		}
		public bool Equals( ABSubrowGroupElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSubrowGroupElement value1, ABSubrowGroupElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSubrowGroupElement value1, ABSubrowGroupElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSubrowGroupElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSubrowGroupElement alloc() {
			return new ABSubrowGroupElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibilityChildrenAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityChildrenAttribute( Handle, CachedSelectors.accessibilityChildrenAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityPositionOfChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityPositionOfChild_( Handle, CachedSelectors.accessibilityPositionOfChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilitySelectedAttributeOfChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilitySelectedAttributeOfChild_( Handle, CachedSelectors.accessibilitySelectedAttributeOfChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void accessibilitySetSelectedAttributeOfChild_toValue_( NObjective.RuntimeObject child, NObjective.RuntimeObject toValue ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilitySetSelectedAttributeOfChild_toValue_( Handle, CachedSelectors.accessibilitySetSelectedAttributeOfChild_toValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), child, toValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject accessibilitySizeOfChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilitySizeOfChild_( Handle, CachedSelectors.accessibilitySizeOfChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRole_parent_tableView_row_( NObjective.RuntimeObject role, NObjective.RuntimeObject parent, NObjective.RuntimeObject tableView, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRole_parent_tableView_row_( Handle, CachedSelectors.initWithRole_parent_tableView_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), role, parent, tableView, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityChildrenAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityPositionOfChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilitySelectedAttributeOfChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void accessibilitySetSelectedAttributeOfChild_toValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child, NObjective.RuntimeObject toValue );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilitySizeOfChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithRole_parent_tableView_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject role, NObjective.RuntimeObject parent, NObjective.RuntimeObject tableView, int row );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityChildrenAttribute = "accessibilityChildrenAttribute";
			public static readonly Selector accessibilityPositionOfChild_ = "accessibilityPositionOfChild:";
			public static readonly Selector accessibilitySelectedAttributeOfChild_ = "accessibilitySelectedAttributeOfChild:";
			public static readonly Selector accessibilitySetSelectedAttributeOfChild_toValue_ = "accessibilitySetSelectedAttributeOfChild:toValue:";
			public static readonly Selector accessibilitySizeOfChild_ = "accessibilitySizeOfChild:";
			public static readonly Selector initWithRole_parent_tableView_row_ = "initWithRole:parent:tableView:row:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABSubrowObject : IEquatable<ABSubrowObject> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSubrowObject;
		public static implicit operator IntPtr( ABSubrowObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSubrowObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSubrowObject ) ) return false; 
			return Handle == ( ( ABSubrowObject )value ).Handle;
		}
		public bool Equals( ABSubrowObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSubrowObject value1, ABSubrowObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSubrowObject value1, ABSubrowObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSubrowObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSubrowObject alloc() {
			return new ABSubrowObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibilityActionDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityActionDescription_( Handle, CachedSelectors.accessibilityActionDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityActionNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityActionNames( Handle, CachedSelectors.accessibilityActionNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeNames( Handle, CachedSelectors.accessibilityAttributeNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeValue_( Handle, CachedSelectors.accessibilityAttributeValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityFocusedUIElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityFocusedUIElement( Handle, CachedSelectors.accessibilityFocusedUIElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char accessibilityIsAttributeSettable_( NObjective.RuntimeObject settable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsAttributeSettable_( Handle, CachedSelectors.accessibilityIsAttributeSettable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), settable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsIgnored() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsIgnored( Handle, CachedSelectors.accessibilityIsIgnored, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void accessibilityPerformAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilityPerformAction_( Handle, CachedSelectors.accessibilityPerformAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void accessibilitySetValue_forAttribute_( NObjective.RuntimeObject value, NObjective.RuntimeObject forAttribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilitySetValue_forAttribute_( Handle, CachedSelectors.accessibilitySetValue_forAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forAttribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int column() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.column( Handle, CachedSelectors.column, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject dateFormatter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFormatter( Handle, CachedSelectors.dateFormatter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char drawsSpecialSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.drawsSpecialSelection( Handle, CachedSelectors.drawsSpecialSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char equalsContentsOf_( NObjective.RuntimeObject of ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.equalsContentsOf_( Handle, CachedSelectors.equalsContentsOf_, out ___occuredException, sizeof( NObjective.RuntimeObject ), of );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject identifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifier( Handle, CachedSelectors.identifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithValue_label_property_addressBook_( NObjective.RuntimeObject value, NObjective.RuntimeObject label, NObjective.RuntimeObject property, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithValue_label_property_addressBook_( Handle, CachedSelectors.initWithValue_label_property_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, label, property, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject label() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.label( Handle, CachedSelectors.label, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parent( Handle, CachedSelectors.parent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int rows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rows( Handle, CachedSelectors.rows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDrawsSpecialSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDrawsSpecialSelection_( Handle, CachedSelectors.setDrawsSpecialSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIdentifier_( Handle, CachedSelectors.setIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setParent_( NObjective.RuntimeObject parent ) {
			RuntimeObject ___occuredException;
			NativeMethods.setParent_( Handle, CachedSelectors.setParent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), parent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityActionDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityActionNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityAttributeNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityAttributeValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityFocusedUIElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsAttributeSettable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject settable );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char accessibilityIsIgnored( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void accessibilityPerformAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void accessibilitySetValue_forAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forAttribute );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int column( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dateFormatter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char drawsSpecialSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char equalsContentsOf_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject of );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr identifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithValue_label_property_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject label, NObjective.RuntimeObject property, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr label( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr parent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int rows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDrawsSpecialSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setParent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject parent );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityActionDescription_ = "accessibilityActionDescription:";
			public static readonly Selector accessibilityActionNames = "accessibilityActionNames";
			public static readonly Selector accessibilityAttributeNames = "accessibilityAttributeNames";
			public static readonly Selector accessibilityAttributeValue_ = "accessibilityAttributeValue:";
			public static readonly Selector accessibilityFocusedUIElement = "accessibilityFocusedUIElement";
			public static readonly Selector accessibilityIsAttributeSettable_ = "accessibilityIsAttributeSettable:";
			public static readonly Selector accessibilityIsIgnored = "accessibilityIsIgnored";
			public static readonly Selector accessibilityPerformAction_ = "accessibilityPerformAction:";
			public static readonly Selector accessibilitySetValue_forAttribute_ = "accessibilitySetValue:forAttribute:";
			public static readonly Selector column = "column";
			public static readonly Selector dateFormatter = "dateFormatter";
			public static readonly Selector drawsSpecialSelection = "drawsSpecialSelection";
			public static readonly Selector equalsContentsOf_ = "equalsContentsOf:";
			public static readonly Selector identifier = "identifier";
			public static readonly Selector initWithValue_label_property_addressBook_ = "initWithValue:label:property:addressBook:";
			public static readonly Selector label = "label";
			public static readonly Selector parent = "parent";
			public static readonly Selector rows = "rows";
			public static readonly Selector setDrawsSpecialSelection_ = "setDrawsSpecialSelection:";
			public static readonly Selector setIdentifier_ = "setIdentifier:";
			public static readonly Selector setParent_ = "setParent:";
			public static readonly Selector value = "value";
		}
	}
	[ProxyBaseClass(typeof( ABGroup ))]
	public struct ABSubscribedGroup : IEquatable<ABSubscribedGroup> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSubscribedGroup;
		public static implicit operator IntPtr( ABSubscribedGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSubscribedGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSubscribedGroup ) ) return false; 
			return Handle == ( ( ABSubscribedGroup )value ).Handle;
		}
		public bool Equals( ABSubscribedGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSubscribedGroup value1, ABSubscribedGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSubscribedGroup value1, ABSubscribedGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSubscribedGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSubscribedGroup alloc() {
			return new ABSubscribedGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject nts_Groups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Groups( ClassHandle, CachedSelectors.nts_Groups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_GroupsAtRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_GroupsAtRemoteLocation_( ClassHandle, CachedSelectors.nts_GroupsAtRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_GroupsAtRemoteLocation_withAddressBook_( NObjective.RuntimeObject location, NObjective.RuntimeObject withAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_GroupsAtRemoteLocation_withAddressBook_( ClassHandle, CachedSelectors.nts_GroupsAtRemoteLocation_withAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), location, withAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_GroupsWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_GroupsWithAddressBook_( ClassHandle, CachedSelectors.nts_GroupsWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void markRecordWithGroupSubscription_( NObjective.RuntimeObject subscription ) {
			RuntimeObject ___occuredException;
			NativeMethods.markRecordWithGroupSubscription_( Handle, CachedSelectors.markRecordWithGroupSubscription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markRecordWithGroupSubscription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscription );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_Groups( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_GroupsAtRemoteLocation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_GroupsAtRemoteLocation_withAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location, NObjective.RuntimeObject withAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_GroupsWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
		}
		static internal class CachedSelectors {
			public static readonly Selector markRecordWithGroupSubscription_ = "markRecordWithGroupSubscription:";
			public static readonly Selector nts_Groups = "nts_Groups";
			public static readonly Selector nts_GroupsAtRemoteLocation_ = "nts_GroupsAtRemoteLocation:";
			public static readonly Selector nts_GroupsAtRemoteLocation_withAddressBook_ = "nts_GroupsAtRemoteLocation:withAddressBook:";
			public static readonly Selector nts_GroupsWithAddressBook_ = "nts_GroupsWithAddressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABPerson ))]
	public struct ABSubscribedPerson : IEquatable<ABSubscribedPerson> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSubscribedPerson;
		public static implicit operator IntPtr( ABSubscribedPerson value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSubscribedPerson value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSubscribedPerson ) ) return false; 
			return Handle == ( ( ABSubscribedPerson )value ).Handle;
		}
		public bool Equals( ABSubscribedPerson value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSubscribedPerson value1, ABSubscribedPerson value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSubscribedPerson value1, ABSubscribedPerson value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSubscribedPerson( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSubscribedPerson alloc() {
			return new ABSubscribedPerson( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject nts_People() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_People( ClassHandle, CachedSelectors.nts_People, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_PeopleAtRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_PeopleAtRemoteLocation_( ClassHandle, CachedSelectors.nts_PeopleAtRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_PeopleAtRemoteLocation_withAddressBook_( NObjective.RuntimeObject location, NObjective.RuntimeObject withAddressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_PeopleAtRemoteLocation_withAddressBook_( ClassHandle, CachedSelectors.nts_PeopleAtRemoteLocation_withAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), location, withAddressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_PeopleWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_PeopleWithAddressBook_( ClassHandle, CachedSelectors.nts_PeopleWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_People( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_PeopleAtRemoteLocation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_PeopleAtRemoteLocation_withAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location, NObjective.RuntimeObject withAddressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_PeopleWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
		}
		static internal class CachedSelectors {
			public static readonly Selector nts_People = "nts_People";
			public static readonly Selector nts_PeopleAtRemoteLocation_ = "nts_PeopleAtRemoteLocation:";
			public static readonly Selector nts_PeopleAtRemoteLocation_withAddressBook_ = "nts_PeopleAtRemoteLocation:withAddressBook:";
			public static readonly Selector nts_PeopleWithAddressBook_ = "nts_PeopleWithAddressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABRecord ))]
	public struct ABSubscription : IEquatable<ABSubscription> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSubscription;
		public static implicit operator IntPtr( ABSubscription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSubscription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSubscription ) ) return false; 
			return Handle == ( ( ABSubscription )value ).Handle;
		}
		public bool Equals( ABSubscription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSubscription value1, ABSubscription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSubscription value1, ABSubscription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSubscription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSubscription alloc() {
			return new ABSubscription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject findSubscriptionWithRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findSubscriptionWithRemoteLocation_( ClassHandle, CachedSelectors.findSubscriptionWithRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject findSubscriptionWithRemoteLocation_addressBook_( NObjective.RuntimeObject location, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findSubscriptionWithRemoteLocation_addressBook_( ClassHandle, CachedSelectors.findSubscriptionWithRemoteLocation_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), location, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_Subscriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Subscriptions( ClassHandle, CachedSelectors.nts_Subscriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_SubscriptionsWithAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SubscriptionsWithAddressBook_( ClassHandle, CachedSelectors.nts_SubscriptionsWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRemoteLocation_displayName_readWriteACL_isAll_( NObjective.RuntimeObject location, NObjective.RuntimeObject displayName, NObjective.RuntimeObject readWriteACL, char isAll ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRemoteLocation_displayName_readWriteACL_isAll_( Handle, CachedSelectors.initWithRemoteLocation_displayName_readWriteACL_isAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), location, displayName, readWriteACL, isAll );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_ACL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ACL( Handle, CachedSelectors.nts_ACL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_DisplayName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_DisplayName( Handle, CachedSelectors.nts_DisplayName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_DoInitWithRemoteLocation_displayName_readWriteACL_isAll_( NObjective.RuntimeObject location, NObjective.RuntimeObject displayName, NObjective.RuntimeObject readWriteACL, char isAll ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_DoInitWithRemoteLocation_displayName_readWriteACL_isAll_( Handle, CachedSelectors.nts_DoInitWithRemoteLocation_displayName_readWriteACL_isAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), location, displayName, readWriteACL, isAll );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_InitWithRemoteLocation_displayName_readWriteACL_isAll_( NObjective.RuntimeObject location, NObjective.RuntimeObject displayName, NObjective.RuntimeObject readWriteACL, char isAll ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitWithRemoteLocation_displayName_readWriteACL_isAll_( Handle, CachedSelectors.nts_InitWithRemoteLocation_displayName_readWriteACL_isAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), location, displayName, readWriteACL, isAll );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_IsAll() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsAll( Handle, CachedSelectors.nts_IsAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr findSubscriptionWithRemoteLocation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr findSubscriptionWithRemoteLocation_addressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithRemoteLocation_displayName_readWriteACL_isAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location, NObjective.RuntimeObject displayName, NObjective.RuntimeObject readWriteACL, char isAll );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_ACL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_DisplayName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nts_DoInitWithRemoteLocation_displayName_readWriteACL_isAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location, NObjective.RuntimeObject displayName, NObjective.RuntimeObject readWriteACL, char isAll );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_InitWithRemoteLocation_displayName_readWriteACL_isAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location, NObjective.RuntimeObject displayName, NObjective.RuntimeObject readWriteACL, char isAll );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char nts_IsAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_Subscriptions( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nts_SubscriptionsWithAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
		}
		static internal class CachedSelectors {
			public static readonly Selector findSubscriptionWithRemoteLocation_ = "findSubscriptionWithRemoteLocation:";
			public static readonly Selector findSubscriptionWithRemoteLocation_addressBook_ = "findSubscriptionWithRemoteLocation:addressBook:";
			public static readonly Selector initWithRemoteLocation_displayName_readWriteACL_isAll_ = "initWithRemoteLocation:displayName:readWriteACL:isAll:";
			public static readonly Selector nts_ACL = "nts_ACL";
			public static readonly Selector nts_DisplayName = "nts_DisplayName";
			public static readonly Selector nts_DoInitWithRemoteLocation_displayName_readWriteACL_isAll_ = "nts_DoInitWithRemoteLocation:displayName:readWriteACL:isAll:";
			public static readonly Selector nts_InitWithRemoteLocation_displayName_readWriteACL_isAll_ = "nts_InitWithRemoteLocation:displayName:readWriteACL:isAll:";
			public static readonly Selector nts_IsAll = "nts_IsAll";
			public static readonly Selector nts_Subscriptions = "nts_Subscriptions";
			public static readonly Selector nts_SubscriptionsWithAddressBook_ = "nts_SubscriptionsWithAddressBook:";
		}
	}
	[ProxyBaseClass(typeof( ABCommand ))]
	public struct ABSwapLastFirstCommand : IEquatable<ABSwapLastFirstCommand> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSwapLastFirstCommand;
		public static implicit operator IntPtr( ABSwapLastFirstCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSwapLastFirstCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSwapLastFirstCommand ) ) return false; 
			return Handle == ( ( ABSwapLastFirstCommand )value ).Handle;
		}
		public bool Equals( ABSwapLastFirstCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSwapLastFirstCommand value1, ABSwapLastFirstCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSwapLastFirstCommand value1, ABSwapLastFirstCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSwapLastFirstCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSwapLastFirstCommand alloc() {
			return new ABSwapLastFirstCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_members_addressBook_( NObjective.RuntimeObject @group, NObjective.RuntimeObject members, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_members_addressBook_( Handle, CachedSelectors.initWithGroup_members_addressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, members, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_members_addressBook_direction_( NObjective.RuntimeObject @group, NObjective.RuntimeObject members, NObjective.RuntimeObject addressBook, int direction ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_members_addressBook_direction_( Handle, CachedSelectors.initWithGroup_members_addressBook_direction_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), @group, members, addressBook, direction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_members_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject members, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithGroup_members_addressBook_direction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject members, NObjective.RuntimeObject addressBook, int direction );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_members_addressBook_ = "initWithGroup:members:addressBook:";
			public static readonly Selector initWithGroup_members_addressBook_direction_ = "initWithGroup:members:addressBook:direction:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABSyncManager : IEquatable<ABSyncManager> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSyncManager;
		public static implicit operator IntPtr( ABSyncManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSyncManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABSyncManager ) ) return false; 
			return Handle == ( ( ABSyncManager )value ).Handle;
		}
		public bool Equals( ABSyncManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSyncManager value1, ABSyncManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSyncManager value1, ABSyncManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSyncManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSyncManager alloc() {
			return new ABSyncManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject clientID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clientID( ClassHandle, CachedSelectors.clientID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultClientID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultClientID( ClassHandle, CachedSelectors.defaultClientID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sharedSyncManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedSyncManager( ClassHandle, CachedSelectors.sharedSyncManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject toolPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.toolPath( ClassHandle, CachedSelectors.toolPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isSyncScheduled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSyncScheduled( Handle, CachedSelectors.isSyncScheduled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void removeExisitingSyncSchedule() {
			RuntimeObject ___occuredException;
			NativeMethods.removeExisitingSyncSchedule( Handle, CachedSelectors.removeExisitingSyncSchedule, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleTrickleSync() {
			RuntimeObject ___occuredException;
			NativeMethods.scheduleTrickleSync( Handle, CachedSelectors.scheduleTrickleSync, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleTrickleSyncAndAllowLocking_( char locking ) {
			RuntimeObject ___occuredException;
			NativeMethods.scheduleTrickleSyncAndAllowLocking_( Handle, CachedSelectors.scheduleTrickleSyncAndAllowLocking_, out ___occuredException, sizeof( char ), locking );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleTrickleSyncRetry_( uint retry ) {
			RuntimeObject ___occuredException;
			NativeMethods.scheduleTrickleSyncRetry_( Handle, CachedSelectors.scheduleTrickleSyncRetry_, out ___occuredException, sizeof( uint ), retry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleTrickleSyncRetry_allowingLock_( uint retry, char allowingLock ) {
			RuntimeObject ___occuredException;
			NativeMethods.scheduleTrickleSyncRetry_allowingLock_( Handle, CachedSelectors.scheduleTrickleSyncRetry_allowingLock_, out ___occuredException, sizeof( uint ) + sizeof( char ), retry, allowingLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr clientID( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr defaultClientID( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isSyncScheduled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeExisitingSyncSchedule( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void scheduleTrickleSync( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void scheduleTrickleSyncAndAllowLocking_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char locking );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void scheduleTrickleSyncRetry_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint retry );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void scheduleTrickleSyncRetry_allowingLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint retry, char allowingLock );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr sharedSyncManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr toolPath( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector clientID = "clientID";
			public static readonly Selector defaultClientID = "defaultClientID";
			public static readonly Selector isSyncScheduled = "isSyncScheduled";
			public static readonly Selector removeExisitingSyncSchedule = "removeExisitingSyncSchedule";
			public static readonly Selector scheduleTrickleSync = "scheduleTrickleSync";
			public static readonly Selector scheduleTrickleSyncAndAllowLocking_ = "scheduleTrickleSyncAndAllowLocking:";
			public static readonly Selector scheduleTrickleSyncRetry_ = "scheduleTrickleSyncRetry:";
			public static readonly Selector scheduleTrickleSyncRetry_allowingLock_ = "scheduleTrickleSyncRetry:allowingLock:";
			public static readonly Selector sharedSyncManager = "sharedSyncManager";
			public static readonly Selector toolPath = "toolPath";
		}
	}
	[ProxyBaseClass(typeof( NSResponder ))]
	public struct ABTableController : IEquatable<ABTableController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTableController;
		public static implicit operator IntPtr( ABTableController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTableController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTableController ) ) return false; 
			return Handle == ( ( ABTableController )value ).Handle;
		}
		public bool Equals( ABTableController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTableController value1, ABTableController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTableController value1, ABTableController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTableController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTableController alloc() {
			return new ABTableController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char allowsMultipleSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsMultipleSelection( Handle, CachedSelectors.allowsMultipleSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsMultipleSubrowSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsMultipleSubrowSelection( Handle, CachedSelectors.allowsMultipleSubrowSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void becameVisible() {
			RuntimeObject ___occuredException;
			NativeMethods.becameVisible( Handle, CachedSelectors.becameVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject bundle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bundle( Handle, CachedSelectors.bundle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float defaultRowHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultRowHeight( Handle, CachedSelectors.defaultRowHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void deselectAll() {
			RuntimeObject ___occuredException;
			NativeMethods.deselectAll( Handle, CachedSelectors.deselectAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectRow_( int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectRow_( Handle, CachedSelectors.deselectRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectRow_subrow_( int row, int subrow ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectRow_subrow_( Handle, CachedSelectors.deselectRow_subrow_, out ___occuredException, sizeof( int ) + sizeof( int ), row, subrow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchDoubleAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchDoubleAction_( Handle, CachedSelectors.dispatchDoubleAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doAwakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.doAwakeFromNib( Handle, CachedSelectors.doAwakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.Selector doubleClickAction() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doubleClickAction( Handle, CachedSelectors.doubleClickAction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint indexOfRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfRecord_( Handle, CachedSelectors.indexOfRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public NObjective.RuntimeObject initWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUIController_( Handle, CachedSelectors.initWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isPeoplePicker() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPeoplePicker( Handle, CachedSelectors.isPeoplePicker, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isVisible( Handle, CachedSelectors.isVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject keyNavigationView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyNavigationView( Handle, CachedSelectors.keyNavigationView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void layoutChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.layoutChanged_( Handle, CachedSelectors.layoutChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject model() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.model( Handle, CachedSelectors.model, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nibName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nibName( Handle, CachedSelectors.nibName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char notifyOnSelectionChanged() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notifyOnSelectionChanged( Handle, CachedSelectors.notifyOnSelectionChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject pane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pane( Handle, CachedSelectors.pane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject recordAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordAtIndex_( Handle, CachedSelectors.recordAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject records() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.records( Handle, CachedSelectors.records, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reloadData() {
			RuntimeObject ___occuredException;
			NativeMethods.reloadData( Handle, CachedSelectors.reloadData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetSubrows() {
			RuntimeObject ___occuredException;
			NativeMethods.resetSubrows( Handle, CachedSelectors.resetSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollSelectionToView() {
			RuntimeObject ___occuredException;
			NativeMethods.scrollSelectionToView( Handle, CachedSelectors.scrollSelectionToView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject scrollView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrollView( Handle, CachedSelectors.scrollView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedRecord() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedRecord( Handle, CachedSelectors.selectedRecord, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedRecords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedRecords( Handle, CachedSelectors.selectedRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedSubrowObjectsAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedSubrowObjectsAtIndex_( Handle, CachedSelectors.selectedSubrowObjectsAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedSubrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedSubrows( Handle, CachedSelectors.selectedSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void selectRow_byExtendingSelection_( int row, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectRow_byExtendingSelection_( Handle, CachedSelectors.selectRow_byExtendingSelection_, out ___occuredException, sizeof( int ) + sizeof( char ), row, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectRow_subrow_byExtendingSelection_( int row, int subrow, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectRow_subrow_byExtendingSelection_( Handle, CachedSelectors.selectRow_subrow_byExtendingSelection_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( char ), row, subrow, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectRowIndexes_byExtendingSelection_( NObjective.RuntimeObject indexes, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectRowIndexes_byExtendingSelection_( Handle, CachedSelectors.selectRowIndexes_byExtendingSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), indexes, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowMultipleSubrowSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowMultipleSubrowSelection_( Handle, CachedSelectors.setAllowMultipleSubrowSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsMultipleSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsMultipleSelection_( Handle, CachedSelectors.setAllowsMultipleSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultRowHeight_( float height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultRowHeight_( Handle, CachedSelectors.setDefaultRowHeight_, out ___occuredException, sizeof( float ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDoubleClickTarget_andAction_( NObjective.RuntimeObject target, NObjective.Selector andAction ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDoubleClickTarget_andAction_( Handle, CachedSelectors.setDoubleClickTarget_andAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), target, andAction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNotifyOnSelectionChanged_( char changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNotifyOnSelectionChanged_( Handle, CachedSelectors.setNotifyOnSelectionChanged_, out ___occuredException, sizeof( char ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedRecord_( Handle, CachedSelectors.setSelectedRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedRecords_( Handle, CachedSelectors.setSelectedRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject subrowObjectsAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrowObjectsAtIndex_( Handle, CachedSelectors.subrowObjectsAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrows( Handle, CachedSelectors.subrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void synchSelectedRows() {
			RuntimeObject ___occuredException;
			NativeMethods.synchSelectedRows( Handle, CachedSelectors.synchSelectedRows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject tableView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView( Handle, CachedSelectors.tableView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void tableView_willDisplayCell_forTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayCell, NObjective.RuntimeObject forTableColumn, int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableView_willDisplayCell_forTableColumn_row_( Handle, CachedSelectors.tableView_willDisplayCell_forTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, willDisplayCell, forTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject window() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.window( Handle, CachedSelectors.window, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char worksWhenModal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.worksWhenModal( Handle, CachedSelectors.worksWhenModal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void writePaneGeometryToDefaults() {
			RuntimeObject ___occuredException;
			NativeMethods.writePaneGeometryToDefaults( Handle, CachedSelectors.writePaneGeometryToDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsMultipleSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsMultipleSubrowSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void becameVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr bundle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float defaultRowHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deselectAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deselectRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deselectRow_subrow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dispatchDoubleAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doAwakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern NObjective.Selector doubleClickAction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint indexOfRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isPeoplePicker( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr keyNavigationView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void layoutChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr model( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nibName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char notifyOnSelectionChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr recordAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr records( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reloadData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void scrollSelectionToView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr scrollView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedRecord( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedSubrowObjectsAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectRow_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, char byExtendingSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectRow_subrow_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow, char byExtendingSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectRowIndexes_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject indexes, char byExtendingSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowMultipleSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsMultipleSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDefaultRowHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float height );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDoubleClickTarget_andAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector andAction );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setNotifyOnSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSelectedRecords_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subrowObjectsAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void synchSelectedRows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr tableView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void tableView_willDisplayCell_forTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayCell, NObjective.RuntimeObject forTableColumn, int row );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr window( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char worksWhenModal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void writePaneGeometryToDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsMultipleSelection = "allowsMultipleSelection";
			public static readonly Selector allowsMultipleSubrowSelection = "allowsMultipleSubrowSelection";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector becameVisible = "becameVisible";
			public static readonly Selector bundle = "bundle";
			public static readonly Selector defaultRowHeight = "defaultRowHeight";
			public static readonly Selector deselectAll = "deselectAll";
			public static readonly Selector deselectRow_ = "deselectRow:";
			public static readonly Selector deselectRow_subrow_ = "deselectRow:subrow:";
			public static readonly Selector dispatchDoubleAction_ = "dispatchDoubleAction:";
			public static readonly Selector doAwakeFromNib = "doAwakeFromNib";
			public static readonly Selector doubleClickAction = "doubleClickAction";
			public static readonly Selector indexOfRecord_ = "indexOfRecord:";
			public static readonly Selector initWithUIController_ = "initWithUIController:";
			public static readonly Selector isPeoplePicker = "isPeoplePicker";
			public static readonly Selector isVisible = "isVisible";
			public static readonly Selector keyNavigationView = "keyNavigationView";
			public static readonly Selector layoutChanged_ = "layoutChanged:";
			public static readonly Selector model = "model";
			public static readonly Selector nibName = "nibName";
			public static readonly Selector notifyOnSelectionChanged = "notifyOnSelectionChanged";
			public static readonly Selector pane = "pane";
			public static readonly Selector recordAtIndex_ = "recordAtIndex:";
			public static readonly Selector records = "records";
			public static readonly Selector reloadData = "reloadData";
			public static readonly Selector resetSubrows = "resetSubrows";
			public static readonly Selector scrollSelectionToView = "scrollSelectionToView";
			public static readonly Selector scrollView = "scrollView";
			public static readonly Selector selectedRecord = "selectedRecord";
			public static readonly Selector selectedRecords = "selectedRecords";
			public static readonly Selector selectedSubrowObjectsAtIndex_ = "selectedSubrowObjectsAtIndex:";
			public static readonly Selector selectedSubrows = "selectedSubrows";
			public static readonly Selector selectRow_byExtendingSelection_ = "selectRow:byExtendingSelection:";
			public static readonly Selector selectRow_subrow_byExtendingSelection_ = "selectRow:subrow:byExtendingSelection:";
			public static readonly Selector selectRowIndexes_byExtendingSelection_ = "selectRowIndexes:byExtendingSelection:";
			public static readonly Selector setAllowMultipleSubrowSelection_ = "setAllowMultipleSubrowSelection:";
			public static readonly Selector setAllowsMultipleSelection_ = "setAllowsMultipleSelection:";
			public static readonly Selector setDefaultRowHeight_ = "setDefaultRowHeight:";
			public static readonly Selector setDoubleClickTarget_andAction_ = "setDoubleClickTarget:andAction:";
			public static readonly Selector setNotifyOnSelectionChanged_ = "setNotifyOnSelectionChanged:";
			public static readonly Selector setSelectedRecord_ = "setSelectedRecord:";
			public static readonly Selector setSelectedRecords_ = "setSelectedRecords:";
			public static readonly Selector subrowObjectsAtIndex_ = "subrowObjectsAtIndex:";
			public static readonly Selector subrows = "subrows";
			public static readonly Selector synchSelectedRows = "synchSelectedRows";
			public static readonly Selector tableView = "tableView";
			public static readonly Selector tableView_willDisplayCell_forTableColumn_row_ = "tableView:willDisplayCell:forTableColumn:row:";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector window = "window";
			public static readonly Selector worksWhenModal = "worksWhenModal";
			public static readonly Selector writePaneGeometryToDefaults = "writePaneGeometryToDefaults";
		}
	}
	[ProxyBaseClass(typeof( NSTableHeaderView ))]
	public struct ABTableHeaderView : IEquatable<ABTableHeaderView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTableHeaderView;
		public static implicit operator IntPtr( ABTableHeaderView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTableHeaderView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTableHeaderView ) ) return false; 
			return Handle == ( ( ABTableHeaderView )value ).Handle;
		}
		public bool Equals( ABTableHeaderView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTableHeaderView value1, ABTableHeaderView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTableHeaderView value1, ABTableHeaderView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTableHeaderView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTableHeaderView alloc() {
			return new ABTableHeaderView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSTableRow ))]
	public struct ABTableRow : IEquatable<ABTableRow> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTableRow;
		public static implicit operator IntPtr( ABTableRow value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTableRow value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTableRow ) ) return false; 
			return Handle == ( ( ABTableRow )value ).Handle;
		}
		public bool Equals( ABTableRow value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTableRow value1, ABTableRow value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTableRow value1, ABTableRow value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTableRow( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTableRow alloc() {
			return new ABTableRow( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibilityHelpStringForChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityHelpStringForChild_( Handle, CachedSelectors.accessibilityHelpStringForChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityPositionOfChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityPositionOfChild_( Handle, CachedSelectors.accessibilityPositionOfChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilitySizeOfChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilitySizeOfChild_( Handle, CachedSelectors.accessibilitySizeOfChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subrowGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrowGroup( Handle, CachedSelectors.subrowGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityHelpStringForChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityPositionOfChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilitySizeOfChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr subrowGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityHelpStringForChild_ = "accessibilityHelpStringForChild:";
			public static readonly Selector accessibilityPositionOfChild_ = "accessibilityPositionOfChild:";
			public static readonly Selector accessibilitySizeOfChild_ = "accessibilitySizeOfChild:";
			public static readonly Selector subrowGroup = "subrowGroup";
		}
	}
	[ProxyBaseClass(typeof( NSTableView ))]
	public struct ABTableView : IEquatable<ABTableView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTableView;
		public static implicit operator IntPtr( ABTableView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTableView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTableView ) ) return false; 
			return Handle == ( ( ABTableView )value ).Handle;
		}
		public bool Equals( ABTableView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTableView value1, ABTableView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTableView value1, ABTableView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTableView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTableView alloc() {
			return new ABTableView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char allowsMultipleSubrowSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsMultipleSubrowSelection( Handle, CachedSelectors.allowsMultipleSubrowSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsSubrowSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsSubrowSelection( Handle, CachedSelectors.allowsSubrowSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectRow_subrow_( int row, int subrow ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectRow_subrow_( Handle, CachedSelectors.deselectRow_subrow_, out ___occuredException, sizeof( int ) + sizeof( int ), row, subrow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void disableDeselect_( char deselect ) {
			RuntimeObject ___occuredException;
			NativeMethods.disableDeselect_( Handle, CachedSelectors.disableDeselect_, out ___occuredException, sizeof( char ), deselect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSpecialSelectionStuffForRow_extendingSelection_( int row, char extendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSpecialSelectionStuffForRow_extendingSelection_( Handle, CachedSelectors.doSpecialSelectionStuffForRow_extendingSelection_, out ___occuredException, sizeof( int ) + sizeof( char ), row, extendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void frameChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.frameChanged_( Handle, CachedSelectors.frameChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isRowSelected_subRow_( int selected, int subRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isRowSelected_subRow_( Handle, CachedSelectors.isRowSelected_subRow_, out ___occuredException, sizeof( int ) + sizeof( int ), selected, subRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char mouseTracker_shouldContinueTrackingWithEvent_( NObjective.RuntimeObject tracker, NObjective.RuntimeObject shouldContinueTrackingWithEvent ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mouseTracker_shouldContinueTrackingWithEvent_( Handle, CachedSelectors.mouseTracker_shouldContinueTrackingWithEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), tracker, shouldContinueTrackingWithEvent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void performDoubleClick_( NObjective.RuntimeObject click ) {
			RuntimeObject ___occuredException;
			NativeMethods.performDoubleClick_( Handle, CachedSelectors.performDoubleClick_, out ___occuredException, sizeof( NObjective.RuntimeObject ), click );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeTrackingRects() {
			RuntimeObject ___occuredException;
			NativeMethods.removeTrackingRects( Handle, CachedSelectors.removeTrackingRects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char resizeableColumns() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resizeableColumns( Handle, CachedSelectors.resizeableColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float rowHeightForRow_( int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rowHeightForRow_( Handle, CachedSelectors.rowHeightForRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectRow_subrow_byExtendingSelection_( int row, int subrow, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectRow_subrow_byExtendingSelection_( Handle, CachedSelectors.selectRow_subrow_byExtendingSelection_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( char ), row, subrow, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowMultipleSubrowSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowMultipleSubrowSelection_( Handle, CachedSelectors.setAllowMultipleSubrowSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowSubrowSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowSubrowSelection_( Handle, CachedSelectors.setAllowSubrowSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setResizeableColumns_( char columns ) {
			RuntimeObject ___occuredException;
			NativeMethods.setResizeableColumns_( Handle, CachedSelectors.setResizeableColumns_, out ___occuredException, sizeof( char ), columns );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUpTrackingRects() {
			RuntimeObject ___occuredException;
			NativeMethods.setUpTrackingRects( Handle, CachedSelectors.setUpTrackingRects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVariableRows_( char rows ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVariableRows_( Handle, CachedSelectors.setVariableRows_, out ___occuredException, sizeof( char ), rows );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldEditOnSingleClick_inRow_tableColumn_( NObjective.RuntimeObject click, int inRow, NObjective.RuntimeObject tableColumn ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldEditOnSingleClick_inRow_tableColumn_( Handle, CachedSelectors.shouldEditOnSingleClick_inRow_tableColumn_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), click, inRow, tableColumn );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void updateDragRectWithProgress_( float progress ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateDragRectWithProgress_( Handle, CachedSelectors.updateDragRectWithProgress_, out ___occuredException, sizeof( float ), progress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char variableRows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.variableRows( Handle, CachedSelectors.variableRows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void windowDidBecomeVisible_( NObjective.RuntimeObject visible ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidBecomeVisible_( Handle, CachedSelectors.windowDidBecomeVisible_, out ___occuredException, sizeof( NObjective.RuntimeObject ), visible );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsMultipleSubrowSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsSubrowSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void deselectRow_subrow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void disableDeselect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char deselect );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doSpecialSelectionStuffForRow_extendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, char extendingSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void frameChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isRowSelected_subRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int selected, int subRow );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char mouseTracker_shouldContinueTrackingWithEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject tracker, NObjective.RuntimeObject shouldContinueTrackingWithEvent );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void performDoubleClick_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void removeTrackingRects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char resizeableColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float rowHeightForRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void selectRow_subrow_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow, char byExtendingSelection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowMultipleSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setResizeableColumns_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char columns );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUpTrackingRects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setVariableRows_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char rows );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool shouldEditOnSingleClick_inRow_tableColumn_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click, int inRow, NObjective.RuntimeObject tableColumn );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateDragRectWithProgress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float progress );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char variableRows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowDidBecomeVisible_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visible );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsMultipleSubrowSelection = "allowsMultipleSubrowSelection";
			public static readonly Selector allowsSubrowSelection = "allowsSubrowSelection";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector deselectRow_subrow_ = "deselectRow:subrow:";
			public static readonly Selector disableDeselect_ = "disableDeselect:";
			public static readonly Selector doSpecialSelectionStuffForRow_extendingSelection_ = "doSpecialSelectionStuffForRow:extendingSelection:";
			public static readonly Selector frameChanged_ = "frameChanged:";
			public static readonly Selector isRowSelected_subRow_ = "isRowSelected:subRow:";
			public static readonly Selector mouseTracker_shouldContinueTrackingWithEvent_ = "mouseTracker:shouldContinueTrackingWithEvent:";
			public static readonly Selector performDoubleClick_ = "performDoubleClick:";
			public static readonly Selector removeTrackingRects = "removeTrackingRects";
			public static readonly Selector resizeableColumns = "resizeableColumns";
			public static readonly Selector rowHeightForRow_ = "rowHeightForRow:";
			public static readonly Selector selectRow_subrow_byExtendingSelection_ = "selectRow:subrow:byExtendingSelection:";
			public static readonly Selector setAllowMultipleSubrowSelection_ = "setAllowMultipleSubrowSelection:";
			public static readonly Selector setAllowSubrowSelection_ = "setAllowSubrowSelection:";
			public static readonly Selector setResizeableColumns_ = "setResizeableColumns:";
			public static readonly Selector setUpTrackingRects = "setUpTrackingRects";
			public static readonly Selector setVariableRows_ = "setVariableRows:";
			public static readonly Selector shouldEditOnSingleClick_inRow_tableColumn_ = "shouldEditOnSingleClick:inRow:tableColumn:";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector updateDragRectWithProgress_ = "updateDragRectWithProgress:";
			public static readonly Selector variableRows = "variableRows";
			public static readonly Selector windowDidBecomeVisible_ = "windowDidBecomeVisible:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABTemporalAgent : IEquatable<ABTemporalAgent> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTemporalAgent;
		public static implicit operator IntPtr( ABTemporalAgent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTemporalAgent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTemporalAgent ) ) return false; 
			return Handle == ( ( ABTemporalAgent )value ).Handle;
		}
		public bool Equals( ABTemporalAgent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTemporalAgent value1, ABTemporalAgent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTemporalAgent value1, ABTemporalAgent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTemporalAgent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTemporalAgent alloc() {
			return new ABTemporalAgent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject agentForAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.agentForAddressBook_( ClassHandle, CachedSelectors.agentForAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addConflictingRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			NativeMethods.addConflictingRecord_( Handle, CachedSelectors.addConflictingRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addImportedRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			NativeMethods.addImportedRecord_( Handle, CachedSelectors.addImportedRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void applyDecisions() {
			RuntimeObject ___occuredException;
			NativeMethods.applyDecisions( Handle, CachedSelectors.applyDecisions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject conflictingRecords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conflictingRecords( Handle, CachedSelectors.conflictingRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deltas() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deltas( Handle, CachedSelectors.deltas, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char groupsRestoreMembers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsRestoreMembers( Handle, CachedSelectors.groupsRestoreMembers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int importCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importCount( Handle, CachedSelectors.importCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject importedRecords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importedRecords( Handle, CachedSelectors.importedRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void processConflictingRecords() {
			RuntimeObject ___occuredException;
			NativeMethods.processConflictingRecords( Handle, CachedSelectors.processConflictingRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool restoreRecord_intoGroup_( NObjective.RuntimeObject record, NObjective.RuntimeObject intoGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.restoreRecord_intoGroup_( Handle, CachedSelectors.restoreRecord_intoGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, intoGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool restoreRecord_intoGroup_options_( NObjective.RuntimeObject record, NObjective.RuntimeObject intoGroup, int options ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.restoreRecord_intoGroup_options_( Handle, CachedSelectors.restoreRecord_intoGroup_options_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), record, intoGroup, options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAddressBook_( Handle, CachedSelectors.setAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDecision_forRecord_( int decision, NObjective.RuntimeObject forRecord ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDecision_forRecord_( Handle, CachedSelectors.setDecision_forRecord_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), decision, forRecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDeltas_( NObjective.RuntimeObject deltas ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDeltas_( Handle, CachedSelectors.setDeltas_, out ___occuredException, sizeof( NObjective.RuntimeObject ), deltas );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupsRestoreMembers_( char members ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroupsRestoreMembers_( Handle, CachedSelectors.setGroupsRestoreMembers_, out ___occuredException, sizeof( char ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUIController_( Handle, CachedSelectors.setUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject verbForImportPanel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.verbForImportPanel( Handle, CachedSelectors.verbForImportPanel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addConflictingRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addImportedRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr agentForAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void applyDecisions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr conflictingRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr deltas( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char groupsRestoreMembers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int importCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr importedRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void processConflictingRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool restoreRecord_intoGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject intoGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool restoreRecord_intoGroup_options_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject intoGroup, int options );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDecision_forRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int decision, NObjective.RuntimeObject forRecord );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDeltas_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject deltas );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setGroupsRestoreMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char members );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr verbForImportPanel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addConflictingRecord_ = "addConflictingRecord:";
			public static readonly Selector addImportedRecord_ = "addImportedRecord:";
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector agentForAddressBook_ = "agentForAddressBook:";
			public static readonly Selector applyDecisions = "applyDecisions";
			public static readonly Selector conflictingRecords = "conflictingRecords";
			public static readonly Selector deltas = "deltas";
			public static readonly Selector groupsRestoreMembers = "groupsRestoreMembers";
			public static readonly Selector importCount = "importCount";
			public static readonly Selector importedRecords = "importedRecords";
			public static readonly Selector processConflictingRecords = "processConflictingRecords";
			public static readonly Selector restoreRecord_intoGroup_ = "restoreRecord:intoGroup:";
			public static readonly Selector restoreRecord_intoGroup_options_ = "restoreRecord:intoGroup:options:";
			public static readonly Selector setAddressBook_ = "setAddressBook:";
			public static readonly Selector setDecision_forRecord_ = "setDecision:forRecord:";
			public static readonly Selector setDeltas_ = "setDeltas:";
			public static readonly Selector setGroupsRestoreMembers_ = "setGroupsRestoreMembers:";
			public static readonly Selector setUIController_ = "setUIController:";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector verbForImportPanel = "verbForImportPanel";
		}
	}
	[ProxyBaseClass(typeof( NSTextContainer ))]
	public struct ABTextContainer : IEquatable<ABTextContainer> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextContainer;
		public static implicit operator IntPtr( ABTextContainer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextContainer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTextContainer ) ) return false; 
			return Handle == ( ( ABTextContainer )value ).Handle;
		}
		public bool Equals( ABTextContainer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextContainer value1, ABTextContainer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextContainer value1, ABTextContainer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextContainer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextContainer alloc() {
			return new ABTextContainer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public float offset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offset( Handle, CachedSelectors.offset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float offset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector offset = "offset";
		}
	}
	[ProxyBaseClass(typeof( NSTextFieldCell ))]
	public struct ABTextFieldCell : IEquatable<ABTextFieldCell> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextFieldCell;
		public static implicit operator IntPtr( ABTextFieldCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextFieldCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTextFieldCell ) ) return false; 
			return Handle == ( ( ABTextFieldCell )value ).Handle;
		}
		public bool Equals( ABTextFieldCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextFieldCell value1, ABTextFieldCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextFieldCell value1, ABTextFieldCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextFieldCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextFieldCell alloc() {
			return new ABTextFieldCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cellFont() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cellFont( Handle, CachedSelectors.cellFont, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cellLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cellLabel( Handle, CachedSelectors.cellLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char drawsContainmentIndicator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.drawsContainmentIndicator( Handle, CachedSelectors.drawsContainmentIndicator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDividerMode_( char mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDividerMode_( Handle, CachedSelectors.setDividerMode_, out ___occuredException, sizeof( char ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDrawsContainmentIndicator_( char indicator ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDrawsContainmentIndicator_( Handle, CachedSelectors.setDrawsContainmentIndicator_, out ___occuredException, sizeof( char ), indicator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIcon_( NObjective.RuntimeObject icon ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIcon_( Handle, CachedSelectors.setIcon_, out ___occuredException, sizeof( NObjective.RuntimeObject ), icon );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSidebarMode_( char mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSidebarMode_( Handle, CachedSelectors.setSidebarMode_, out ___occuredException, sizeof( char ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cellFont( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cellLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char drawsContainmentIndicator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDividerMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char mode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDrawsContainmentIndicator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char indicator );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIcon_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject icon );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSidebarMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char mode );
		}
		static internal class CachedSelectors {
			public static readonly Selector cellFont = "cellFont";
			public static readonly Selector cellLabel = "cellLabel";
			public static readonly Selector drawsContainmentIndicator = "drawsContainmentIndicator";
			public static readonly Selector setDividerMode_ = "setDividerMode:";
			public static readonly Selector setDrawsContainmentIndicator_ = "setDrawsContainmentIndicator:";
			public static readonly Selector setIcon_ = "setIcon:";
			public static readonly Selector setSidebarMode_ = "setSidebarMode:";
		}
	}
	[ProxyBaseClass(typeof( ABAccessibilityMockUIElement ))]
	public struct ABTextLabelAccessibilityElement : IEquatable<ABTextLabelAccessibilityElement> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextLabelAccessibilityElement;
		public static implicit operator IntPtr( ABTextLabelAccessibilityElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextLabelAccessibilityElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTextLabelAccessibilityElement ) ) return false; 
			return Handle == ( ( ABTextLabelAccessibilityElement )value ).Handle;
		}
		public bool Equals( ABTextLabelAccessibilityElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextLabelAccessibilityElement value1, ABTextLabelAccessibilityElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextLabelAccessibilityElement value1, ABTextLabelAccessibilityElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextLabelAccessibilityElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextLabelAccessibilityElement alloc() {
			return new ABTextLabelAccessibilityElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject identifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifier( Handle, CachedSelectors.identifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject kind() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.kind( Handle, CachedSelectors.kind, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject property() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.property( Handle, CachedSelectors.property, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char propertyHasActions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyHasActions( Handle, CachedSelectors.propertyHasActions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject propertyPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyPath( Handle, CachedSelectors.propertyPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr identifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr kind( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr property( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char propertyHasActions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr propertyPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector identifier = "identifier";
			public static readonly Selector kind = "kind";
			public static readonly Selector property = "property";
			public static readonly Selector propertyHasActions = "propertyHasActions";
			public static readonly Selector propertyPath = "propertyPath";
		}
	}
	[ProxyBaseClass(typeof( NSTextStorage ))]
	public struct ABTextStorage : IEquatable<ABTextStorage> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextStorage;
		public static implicit operator IntPtr( ABTextStorage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextStorage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTextStorage ) ) return false; 
			return Handle == ( ( ABTextStorage )value ).Handle;
		}
		public bool Equals( ABTextStorage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextStorage value1, ABTextStorage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextStorage value1, ABTextStorage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextStorage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextStorage alloc() {
			return new ABTextStorage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject firstLineParagraphStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstLineParagraphStyle( ClassHandle, CachedSelectors.firstLineParagraphStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void invalidateParagraphStyles() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateParagraphStyles( ClassHandle, CachedSelectors.invalidateParagraphStyles, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static uint maxLabelStringWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maxLabelStringWidth( ClassHandle, CachedSelectors.maxLabelStringWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public static NObjective.RuntimeObject noteFirstLineParagraphStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.noteFirstLineParagraphStyle( ClassHandle, CachedSelectors.noteFirstLineParagraphStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject noteSecondLineParagraphStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.noteSecondLineParagraphStyle( ClassHandle, CachedSelectors.noteSecondLineParagraphStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject secondLineParagraphStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.secondLineParagraphStyle( ClassHandle, CachedSelectors.secondLineParagraphStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char enableCustomAttributeFixing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enableCustomAttributeFixing( Handle, CachedSelectors.enableCustomAttributeFixing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setEnableCustomAttributeFixing_( char fixing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEnableCustomAttributeFixing_( Handle, CachedSelectors.setEnableCustomAttributeFixing_, out ___occuredException, sizeof( char ), fixing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char enableCustomAttributeFixing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr firstLineParagraphStyle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void invalidateParagraphStyles( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint maxLabelStringWidth( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr noteFirstLineParagraphStyle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr noteSecondLineParagraphStyle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr secondLineParagraphStyle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEnableCustomAttributeFixing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char fixing );
		}
		static internal class CachedSelectors {
			public static readonly Selector enableCustomAttributeFixing = "enableCustomAttributeFixing";
			public static readonly Selector firstLineParagraphStyle = "firstLineParagraphStyle";
			public static readonly Selector invalidateParagraphStyles = "invalidateParagraphStyles";
			public static readonly Selector maxLabelStringWidth = "maxLabelStringWidth";
			public static readonly Selector noteFirstLineParagraphStyle = "noteFirstLineParagraphStyle";
			public static readonly Selector noteSecondLineParagraphStyle = "noteSecondLineParagraphStyle";
			public static readonly Selector secondLineParagraphStyle = "secondLineParagraphStyle";
			public static readonly Selector setEnableCustomAttributeFixing_ = "setEnableCustomAttributeFixing:";
		}
	}
	[ProxyBaseClass(typeof( ABTextLabelAccessibilityElement ))]
	public struct ABTextValueAccessibilityElement : IEquatable<ABTextValueAccessibilityElement> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextValueAccessibilityElement;
		public static implicit operator IntPtr( ABTextValueAccessibilityElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextValueAccessibilityElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTextValueAccessibilityElement ) ) return false; 
			return Handle == ( ( ABTextValueAccessibilityElement )value ).Handle;
		}
		public bool Equals( ABTextValueAccessibilityElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextValueAccessibilityElement value1, ABTextValueAccessibilityElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextValueAccessibilityElement value1, ABTextValueAccessibilityElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextValueAccessibilityElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextValueAccessibilityElement alloc() {
			return new ABTextValueAccessibilityElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeValue_forParameter_( NObjective.RuntimeObject value, NObjective.RuntimeObject forParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeValue_forParameter_( Handle, CachedSelectors.accessibilityAttributeValue_forParameter_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityParameterizedAttributeNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityParameterizedAttributeNames( Handle, CachedSelectors.accessibilityParameterizedAttributeNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityAttributeValue_forParameter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forParameter );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibilityParameterizedAttributeNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityAttributeValue_forParameter_ = "accessibilityAttributeValue:forParameter:";
			public static readonly Selector accessibilityParameterizedAttributeNames = "accessibilityParameterizedAttributeNames";
			public static readonly Selector value = "value";
		}
	}
	[ProxyBaseClass(typeof( NSTextView ))]
	public struct ABTextView : IEquatable<ABTextView> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextView;
		public static implicit operator IntPtr( ABTextView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTextView ) ) return false; 
			return Handle == ( ( ABTextView )value ).Handle;
		}
		public bool Equals( ABTextView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextView value1, ABTextView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextView value1, ABTextView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextView alloc() {
			return new ABTextView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject updateDateAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.updateDateAttributes( ClassHandle, CachedSelectors.updateDateAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void abViewDoubleClicked_( NObjective.RuntimeObject clicked ) {
			RuntimeObject ___occuredException;
			NativeMethods.abViewDoubleClicked_( Handle, CachedSelectors.abViewDoubleClicked_, out ___occuredException, sizeof( NObjective.RuntimeObject ), clicked );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject accessibleAttachments() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibleAttachments( Handle, CachedSelectors.accessibleAttachments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibleLabelsAndValues() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibleLabelsAndValues( Handle, CachedSelectors.accessibleLabelsAndValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeAttributeEditorControl() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeAttributeEditorControl( Handle, CachedSelectors.activeAttributeEditorControl, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void appendAttributedString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendAttributedString_( Handle, CachedSelectors.appendAttributedString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendString_( Handle, CachedSelectors.appendString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendString_withFont_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendString_withFont_( Handle, CachedSelectors.appendString_withFont_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, withFont );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendString_withFont_andAttribute_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont, NObjective.RuntimeObject andAttribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendString_withFont_andAttribute_( Handle, CachedSelectors.appendString_withFont_andAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, withFont, andAttribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendTemporaryField_andLabel_font_( NObjective.RuntimeObject field, NObjective.RuntimeObject andLabel, NObjective.RuntimeObject font ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendTemporaryField_andLabel_font_( Handle, CachedSelectors.appendTemporaryField_andLabel_font_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), field, andLabel, font );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject attachmentStringForEmailCertificate_( NObjective.RuntimeObject certificate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attachmentStringForEmailCertificate_( Handle, CachedSelectors.attachmentStringForEmailCertificate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), certificate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancel_( NObjective.RuntimeObject cancel ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancel_( Handle, CachedSelectors.cancel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cancel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearShadow() {
			RuntimeObject ___occuredException;
			NativeMethods.clearShadow( Handle, CachedSelectors.clearShadow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void disableDelegateMessages() {
			RuntimeObject ___occuredException;
			NativeMethods.disableDelegateMessages( Handle, CachedSelectors.disableDelegateMessages, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void edit_( NObjective.RuntimeObject edit ) {
			RuntimeObject ___occuredException;
			NativeMethods.edit_( Handle, CachedSelectors.edit_, out ___occuredException, sizeof( NObjective.RuntimeObject ), edit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char editMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editMode( Handle, CachedSelectors.editMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void enableDelegateMessages() {
			RuntimeObject ___occuredException;
			NativeMethods.enableDelegateMessages( Handle, CachedSelectors.enableDelegateMessages, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exportVCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportVCard_( Handle, CachedSelectors.exportVCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void findSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.findSelection_( Handle, CachedSelectors.findSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject focusedPropertyPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.focusedPropertyPath( Handle, CachedSelectors.focusedPropertyPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void handleRollOverSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleRollOverSelection_( Handle, CachedSelectors.handleRollOverSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleShadowHilite() {
			RuntimeObject ___occuredException;
			NativeMethods.handleShadowHilite( Handle, CachedSelectors.handleShadowHilite, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char hasNameData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasNameData( Handle, CachedSelectors.hasNameData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void invalidateAccessibilityElements() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateAccessibilityElements( Handle, CachedSelectors.invalidateAccessibilityElements, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void itemRolledOut() {
			RuntimeObject ___occuredException;
			NativeMethods.itemRolledOut( Handle, CachedSelectors.itemRolledOut, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void itemRolledOver() {
			RuntimeObject ___occuredException;
			NativeMethods.itemRolledOver( Handle, CachedSelectors.itemRolledOver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void layoutChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.layoutChanged_( Handle, CachedSelectors.layoutChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void layoutManager_didCompleteLayoutForTextContainer_atEnd_( NObjective.RuntimeObject manager, NObjective.RuntimeObject didCompleteLayoutForTextContainer, char atEnd ) {
			RuntimeObject ___occuredException;
			NativeMethods.layoutManager_didCompleteLayoutForTextContainer_atEnd_( Handle, CachedSelectors.layoutManager_didCompleteLayoutForTextContainer_atEnd_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), manager, didCompleteLayoutForTextContainer, atEnd );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void markShadowDirtyRect() {
			RuntimeObject ___occuredException;
			NativeMethods.markShadowDirtyRect( Handle, CachedSelectors.markShadowDirtyRect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject noteRollOverPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.noteRollOverPath_( Handle, CachedSelectors.noteRollOverPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject onlineStatusButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.onlineStatusButton( Handle, CachedSelectors.onlineStatusButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject personImageView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.personImageView( Handle, CachedSelectors.personImageView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void postAccessibilityValueChangedNotification_( NObjective.RuntimeObject notification ) {
			RuntimeObject ___occuredException;
			NativeMethods.postAccessibilityValueChangedNotification_( Handle, CachedSelectors.postAccessibilityValueChangedNotification_, out ___occuredException, sizeof( NObjective.RuntimeObject ), notification );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void prepareForDifferentCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.prepareForDifferentCard_( Handle, CachedSelectors.prepareForDifferentCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void redisplayUpdateDate() {
			RuntimeObject ___occuredException;
			NativeMethods.redisplayUpdateDate( Handle, CachedSelectors.redisplayUpdateDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void redo_( NObjective.RuntimeObject redo ) {
			RuntimeObject ___occuredException;
			NativeMethods.redo_( Handle, CachedSelectors.redo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), redo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reSetAcceptsMouseMovedEvents() {
			RuntimeObject ___occuredException;
			NativeMethods.reSetAcceptsMouseMovedEvents( Handle, CachedSelectors.reSetAcceptsMouseMovedEvents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetRectCaches() {
			RuntimeObject ___occuredException;
			NativeMethods.resetRectCaches( Handle, CachedSelectors.resetRectCaches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void rulerView_userClickedOnMarker_( NObjective.RuntimeObject view, NObjective.RuntimeObject userClickedOnMarker ) {
			RuntimeObject ___occuredException;
			NativeMethods.rulerView_userClickedOnMarker_( Handle, CachedSelectors.rulerView_userClickedOnMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, userClickedOnMarker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAccessibilityFocusedUIElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccessibilityFocusedUIElement_( Handle, CachedSelectors.setAccessibilityFocusedUIElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEditMode_( char mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEditMode_( Handle, CachedSelectors.setEditMode_, out ___occuredException, sizeof( char ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMessageType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMessageType_( Handle, CachedSelectors.setMessageType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowFlare_( char flare ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowFlare_( Handle, CachedSelectors.setShowFlare_, out ___occuredException, sizeof( char ), flare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setup() {
			RuntimeObject ___occuredException;
			NativeMethods.setup( Handle, CachedSelectors.setup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject shadowImageAroundPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shadowImageAroundPath_( Handle, CachedSelectors.shadowImageAroundPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool shouldStartEditingOnDoubleClick_key_( NObjective.RuntimeObject click, System.IntPtr key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldStartEditingOnDoubleClick_key_( Handle, CachedSelectors.shouldStartEditingOnDoubleClick_key_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), click, key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void undo_( NObjective.RuntimeObject undo ) {
			RuntimeObject ___occuredException;
			NativeMethods.undo_( Handle, CachedSelectors.undo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), undo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidBecomeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidBecomeKey_( Handle, CachedSelectors.windowDidBecomeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidResignKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidResignKey_( Handle, CachedSelectors.windowDidResignKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abViewDoubleClicked_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject clicked );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibleAttachments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr accessibleLabelsAndValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr activeAttributeEditorControl( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void appendAttributedString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void appendString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void appendString_withFont_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void appendString_withFont_andAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont, NObjective.RuntimeObject andAttribute );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void appendTemporaryField_andLabel_font_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field, NObjective.RuntimeObject andLabel, NObjective.RuntimeObject font );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr attachmentStringForEmailCertificate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject certificate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cancel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cancel );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearShadow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void disableDelegateMessages( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void edit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject edit );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char editMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void enableDelegateMessages( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void exportVCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void findSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr focusedPropertyPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void handleRollOverSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void handleShadowHilite( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasNameData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void invalidateAccessibilityElements( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void itemRolledOut( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void itemRolledOver( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void layoutChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void layoutManager_didCompleteLayoutForTextContainer_atEnd_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject didCompleteLayoutForTextContainer, char atEnd );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void markShadowDirtyRect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr noteRollOverPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr onlineStatusButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr personImageView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void postAccessibilityValueChangedNotification_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject notification );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void prepareForDifferentCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void redisplayUpdateDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void redo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject redo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void reSetAcceptsMouseMovedEvents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetRectCaches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void rulerView_userClickedOnMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject userClickedOnMarker );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAccessibilityFocusedUIElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setEditMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char mode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setMessageType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShowFlare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char flare );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr shadowImageAroundPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool shouldStartEditingOnDoubleClick_key_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click, System.IntPtr key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void undo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject undo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr updateDateAttributes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowDidBecomeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowDidResignKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
		}
		static internal class CachedSelectors {
			public static readonly Selector abViewDoubleClicked_ = "abViewDoubleClicked:";
			public static readonly Selector accessibleAttachments = "accessibleAttachments";
			public static readonly Selector accessibleLabelsAndValues = "accessibleLabelsAndValues";
			public static readonly Selector activeAttributeEditorControl = "activeAttributeEditorControl";
			public static readonly Selector appendAttributedString_ = "appendAttributedString:";
			public static readonly Selector appendString_ = "appendString:";
			public static readonly Selector appendString_withFont_ = "appendString:withFont:";
			public static readonly Selector appendString_withFont_andAttribute_ = "appendString:withFont:andAttribute:";
			public static readonly Selector appendTemporaryField_andLabel_font_ = "appendTemporaryField:andLabel:font:";
			public static readonly Selector attachmentStringForEmailCertificate_ = "attachmentStringForEmailCertificate:";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector cancel_ = "cancel:";
			public static readonly Selector clearShadow = "clearShadow";
			public static readonly Selector disableDelegateMessages = "disableDelegateMessages";
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector edit_ = "edit:";
			public static readonly Selector editMode = "editMode";
			public static readonly Selector enableDelegateMessages = "enableDelegateMessages";
			public static readonly Selector exportVCard_ = "exportVCard:";
			public static readonly Selector findSelection_ = "findSelection:";
			public static readonly Selector focusedPropertyPath = "focusedPropertyPath";
			public static readonly Selector handleRollOverSelection_ = "handleRollOverSelection:";
			public static readonly Selector handleShadowHilite = "handleShadowHilite";
			public static readonly Selector hasNameData = "hasNameData";
			public static readonly Selector invalidateAccessibilityElements = "invalidateAccessibilityElements";
			public static readonly Selector itemRolledOut = "itemRolledOut";
			public static readonly Selector itemRolledOver = "itemRolledOver";
			public static readonly Selector layoutChanged_ = "layoutChanged:";
			public static readonly Selector layoutManager_didCompleteLayoutForTextContainer_atEnd_ = "layoutManager:didCompleteLayoutForTextContainer:atEnd:";
			public static readonly Selector markShadowDirtyRect = "markShadowDirtyRect";
			public static readonly Selector noteRollOverPath_ = "noteRollOverPath:";
			public static readonly Selector onlineStatusButton = "onlineStatusButton";
			public static readonly Selector personImageView = "personImageView";
			public static readonly Selector postAccessibilityValueChangedNotification_ = "postAccessibilityValueChangedNotification:";
			public static readonly Selector prepareForDifferentCard_ = "prepareForDifferentCard:";
			public static readonly Selector redisplayUpdateDate = "redisplayUpdateDate";
			public static readonly Selector redo_ = "redo:";
			public static readonly Selector reSetAcceptsMouseMovedEvents = "reSetAcceptsMouseMovedEvents";
			public static readonly Selector resetRectCaches = "resetRectCaches";
			public static readonly Selector rulerView_userClickedOnMarker_ = "rulerView:userClickedOnMarker:";
			public static readonly Selector setAccessibilityFocusedUIElement_ = "setAccessibilityFocusedUIElement:";
			public static readonly Selector setEditMode_ = "setEditMode:";
			public static readonly Selector setMessageType_ = "setMessageType:";
			public static readonly Selector setShowFlare_ = "setShowFlare:";
			public static readonly Selector setup = "setup";
			public static readonly Selector shadowImageAroundPath_ = "shadowImageAroundPath:";
			public static readonly Selector shouldStartEditingOnDoubleClick_key_ = "shouldStartEditingOnDoubleClick:key:";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector undo_ = "undo:";
			public static readonly Selector updateDateAttributes = "updateDateAttributes";
			public static readonly Selector windowDidBecomeKey_ = "windowDidBecomeKey:";
			public static readonly Selector windowDidResignKey_ = "windowDidResignKey:";
		}
	}
	[ProxyBaseClass(typeof( NSATSTypesetter ))]
	public struct ABTypesetter : IEquatable<ABTypesetter> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTypesetter;
		public static implicit operator IntPtr( ABTypesetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTypesetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABTypesetter ) ) return false; 
			return Handle == ( ( ABTypesetter )value ).Handle;
		}
		public bool Equals( ABTypesetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTypesetter value1, ABTypesetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTypesetter value1, ABTypesetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTypesetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTypesetter alloc() {
			return new ABTypesetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABUIController : IEquatable<ABUIController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABUIController;
		public static implicit operator IntPtr( ABUIController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABUIController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABUIController ) ) return false; 
			return Handle == ( ( ABUIController )value ).Handle;
		}
		public bool Equals( ABUIController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABUIController value1, ABUIController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABUIController value1, ABUIController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABUIController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABUIController alloc() {
			return new ABUIController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addFieldWithNoPopup_( NObjective.RuntimeObject popup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addFieldWithNoPopup_( Handle, CachedSelectors.addFieldWithNoPopup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), popup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject addGroupButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addGroupButton( Handle, CachedSelectors.addGroupButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addPersonButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPersonButton( Handle, CachedSelectors.addPersonButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBook( Handle, CachedSelectors.addressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char allowGroupSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowGroupSelection( Handle, CachedSelectors.allowGroupSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsDirectoriesSearches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsDirectoriesSearches( Handle, CachedSelectors.allowsDirectoriesSearches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsGroupEditing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsGroupEditing( Handle, CachedSelectors.allowsGroupEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject autosaveName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autosaveName( Handle, CachedSelectors.autosaveName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject bluetoothDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bluetoothDelegate( Handle, CachedSelectors.bluetoothDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char boolForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.boolForKey_( Handle, CachedSelectors.boolForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject cardPane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardPane( Handle, CachedSelectors.cardPane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cardScrollView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardScrollView( Handle, CachedSelectors.cardScrollView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clearCustomImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearCustomImage_( Handle, CachedSelectors.clearCustomImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void commitPendingChangesAndSave_( char save ) {
			RuntimeObject ___occuredException;
			NativeMethods.commitPendingChangesAndSave_( Handle, CachedSelectors.commitPendingChangesAndSave_, out ___occuredException, sizeof( char ), save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject deltas() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deltas( Handle, CachedSelectors.deltas, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deltaStateForUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deltaStateForUID_( Handle, CachedSelectors.deltaStateForUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void didEndShouldCloseSheet_returnCode_contextInfo_( NObjective.RuntimeObject sheet, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.didEndShouldCloseSheet_returnCode_contextInfo_( Handle, CachedSelectors.didEndShouldCloseSheet_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), sheet, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject directoriesController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoriesController( Handle, CachedSelectors.directoriesController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoriesPane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoriesPane( Handle, CachedSelectors.directoriesPane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryResultsController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryResultsController( Handle, CachedSelectors.directoryResultsController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryResultsPane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryResultsPane( Handle, CachedSelectors.directoryResultsPane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void doBluetooth_( NObjective.RuntimeObject bluetooth ) {
			RuntimeObject ___occuredException;
			NativeMethods.doBluetooth_( Handle, CachedSelectors.doBluetooth_, out ___occuredException, sizeof( NObjective.RuntimeObject ), bluetooth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doRemoveFromGroup() {
			RuntimeObject ___occuredException;
			NativeMethods.doRemoveFromGroup( Handle, CachedSelectors.doRemoveFromGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dummyAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.dummyAction_( Handle, CachedSelectors.dummyAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject editButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editButton( Handle, CachedSelectors.editButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void editInput_( NObjective.RuntimeObject input ) {
			RuntimeObject ___occuredException;
			NativeMethods.editInput_( Handle, CachedSelectors.editInput_, out ___occuredException, sizeof( NObjective.RuntimeObject ), input );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void enableSearchField_( char field ) {
			RuntimeObject ___occuredException;
			NativeMethods.enableSearchField_( Handle, CachedSelectors.enableSearchField_, out ___occuredException, sizeof( char ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void find_( NObjective.RuntimeObject find ) {
			RuntimeObject ___occuredException;
			NativeMethods.find_( Handle, CachedSelectors.find_, out ___occuredException, sizeof( NObjective.RuntimeObject ), find );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void findString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.findString_( Handle, CachedSelectors.findString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void finishWindowModal() {
			RuntimeObject ___occuredException;
			NativeMethods.finishWindowModal( Handle, CachedSelectors.finishWindowModal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float floatForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.floatForKey_( Handle, CachedSelectors.floatForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject groupsController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsController( Handle, CachedSelectors.groupsController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject groupsPane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsPane( Handle, CachedSelectors.groupsPane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char groupsPaneHasFocus() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsPaneHasFocus( Handle, CachedSelectors.groupsPaneHasFocus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void groupsSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupsSelectionChanged_( Handle, CachedSelectors.groupsSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleSwitchToCardAndColumnsFrom_animate_( int @from, char animate ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleSwitchToCardAndColumnsFrom_animate_( Handle, CachedSelectors.handleSwitchToCardAndColumnsFrom_animate_, out ___occuredException, sizeof( int ) + sizeof( char ), @from, animate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleSwitchToCardOnlyFrom_animate_( int @from, char animate ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleSwitchToCardOnlyFrom_animate_( Handle, CachedSelectors.handleSwitchToCardOnlyFrom_animate_, out ___occuredException, sizeof( int ) + sizeof( char ), @from, animate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleSwitchToColumnsOnlyFrom_animate_( int @from, char animate ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleSwitchToColumnsOnlyFrom_animate_( Handle, CachedSelectors.handleSwitchToColumnsOnlyFrom_animate_, out ___occuredException, sizeof( int ) + sizeof( char ), @from, animate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleSwitchToDirectoriesFrom_animate_( int @from, char animate ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleSwitchToDirectoriesFrom_animate_( Handle, CachedSelectors.handleSwitchToDirectoriesFrom_animate_, out ___occuredException, sizeof( int ) + sizeof( char ), @from, animate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void hideAddPeopleButton() {
			RuntimeObject ___occuredException;
			NativeMethods.hideAddPeopleButton( Handle, CachedSelectors.hideAddPeopleButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void hideShowLastImport_( char import ) {
			RuntimeObject ___occuredException;
			NativeMethods.hideShowLastImport_( Handle, CachedSelectors.hideShowLastImport_, out ___occuredException, sizeof( char ), import );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initAsPeoplePicker_mainSplit_searchLabel_searchField_( NObjective.RuntimeObject picker, NObjective.RuntimeObject mainSplit, NObjective.RuntimeObject searchLabel, NObjective.RuntimeObject searchField ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initAsPeoplePicker_mainSplit_searchLabel_searchField_( Handle, CachedSelectors.initAsPeoplePicker_mainSplit_searchLabel_searchField_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), picker, mainSplit, searchLabel, searchField );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject inputController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inputController( Handle, CachedSelectors.inputController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int integerForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.integerForKey_( Handle, CachedSelectors.integerForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isAddressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAddressBook( Handle, CachedSelectors.isAddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isAnimating() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAnimating( Handle, CachedSelectors.isAnimating, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isCardDisplayed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCardDisplayed( Handle, CachedSelectors.isCardDisplayed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isCardPaneVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCardPaneVisible( Handle, CachedSelectors.isCardPaneVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isDirectoriesPaneVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDirectoriesPaneVisible( Handle, CachedSelectors.isDirectoriesPaneVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isDirectoryResultsPaneVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDirectoryResultsPaneVisible( Handle, CachedSelectors.isDirectoryResultsPaneVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isDistributionList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDistributionList( Handle, CachedSelectors.isDistributionList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEditingGroupName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEditingGroupName( Handle, CachedSelectors.isEditingGroupName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isFrontWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFrontWindow( Handle, CachedSelectors.isFrontWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isGroupsPaneVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isGroupsPaneVisible( Handle, CachedSelectors.isGroupsPaneVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isLoaded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLoaded( Handle, CachedSelectors.isLoaded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isMembersPaneVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMembersPaneVisible( Handle, CachedSelectors.isMembersPaneVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isModal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isModal( Handle, CachedSelectors.isModal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isPeoplePicker() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPeoplePicker( Handle, CachedSelectors.isPeoplePicker, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void layoutSanityCheck() {
			RuntimeObject ___occuredException;
			NativeMethods.layoutSanityCheck( Handle, CachedSelectors.layoutSanityCheck, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void layoutStatusbar() {
			RuntimeObject ___occuredException;
			NativeMethods.layoutStatusbar( Handle, CachedSelectors.layoutStatusbar, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int layoutType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.layoutType( Handle, CachedSelectors.layoutType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void makeBTAvailable_( NObjective.RuntimeObject available ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeBTAvailable_( Handle, CachedSelectors.makeBTAvailable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), available );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeBTUnavailable_( NObjective.RuntimeObject unavailable ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeBTUnavailable_( Handle, CachedSelectors.makeBTUnavailable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), unavailable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float maxWidthOfLocalizedDefaultGroupStrings() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maxWidthOfLocalizedDefaultGroupStrings( Handle, CachedSelectors.maxWidthOfLocalizedDefaultGroupStrings, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void membersChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersChanged_( Handle, CachedSelectors.membersChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject membersController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.membersController( Handle, CachedSelectors.membersController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void membersSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersSelectionChanged_( Handle, CachedSelectors.membersSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float minimumGroupWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimumGroupWidth( Handle, CachedSelectors.minimumGroupWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float minimunWindowWidth_( char width ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimunWindowWidth_( Handle, CachedSelectors.minimunWindowWidth_, out ___occuredException, sizeof( char ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char modalMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modalMode( Handle, CachedSelectors.modalMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject model() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.model( Handle, CachedSelectors.model, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nextCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.nextCard_( Handle, CachedSelectors.nextCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nextCardFlashingButton() {
			RuntimeObject ___occuredException;
			NativeMethods.nextCardFlashingButton( Handle, CachedSelectors.nextCardFlashingButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nextPreviousCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.nextPreviousCard_( Handle, CachedSelectors.nextPreviousCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject objectForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectForKey_( Handle, CachedSelectors.objectForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void openInSeparateWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.openInSeparateWindow_( Handle, CachedSelectors.openInSeparateWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void openInSeparateWindowWithoutAsking() {
			RuntimeObject ___occuredException;
			NativeMethods.openInSeparateWindowWithoutAsking( Handle, CachedSelectors.openInSeparateWindowWithoutAsking, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void openPersonInSeparateWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.openPersonInSeparateWindow_( Handle, CachedSelectors.openPersonInSeparateWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject peoplePane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peoplePane( Handle, CachedSelectors.peoplePane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject peoplePickerView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peoplePickerView( Handle, CachedSelectors.peoplePickerView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void personChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.personChanged_( Handle, CachedSelectors.personChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void previousCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.previousCard_( Handle, CachedSelectors.previousCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void previousCardFlashingButton() {
			RuntimeObject ___occuredException;
			NativeMethods.previousCardFlashingButton( Handle, CachedSelectors.previousCardFlashingButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetFirstLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.resetFirstLastName_( Handle, CachedSelectors.resetFirstLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetGroupAndPeopleFromDefaults() {
			RuntimeObject ___occuredException;
			NativeMethods.resetGroupAndPeopleFromDefaults( Handle, CachedSelectors.resetGroupAndPeopleFromDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resizeColumnsToMinimun() {
			RuntimeObject ___occuredException;
			NativeMethods.resizeColumnsToMinimun( Handle, CachedSelectors.resizeColumnsToMinimun, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resizeWindow_animate_fromLayout_toLayout_paneWidths_numberOfPanes_( float window, char animate, int fromLayout, int toLayout, System.IntPtr paneWidths, int numberOfPanes ) {
			RuntimeObject ___occuredException;
			NativeMethods.resizeWindow_animate_fromLayout_toLayout_paneWidths_numberOfPanes_( Handle, CachedSelectors.resizeWindow_animate_fromLayout_toLayout_paneWidths_numberOfPanes_, out ___occuredException, sizeof( float ) + sizeof( char ) + sizeof( int ) + sizeof( int ) + sizeof( System.IntPtr ) + sizeof( int ), window, animate, fromLayout, toLayout, paneWidths, numberOfPanes
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject searchController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchController( Handle, CachedSelectors.searchController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchField() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchField( Handle, CachedSelectors.searchField, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchString( Handle, CachedSelectors.searchString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedGroupsInMembersColumn() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroupsInMembersColumn( Handle, CachedSelectors.selectedGroupsInMembersColumn, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint selectedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedPeople( Handle, CachedSelectors.selectedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public void setAllowGroupSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowGroupSelection_( Handle, CachedSelectors.setAllowGroupSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsDirectoriesSearches_( char searches ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsDirectoriesSearches_( Handle, CachedSelectors.setAllowsDirectoriesSearches_, out ___occuredException, sizeof( char ), searches );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsGroupEditing_( char editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsGroupEditing_( Handle, CachedSelectors.setAllowsGroupEditing_, out ___occuredException, sizeof( char ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAutosaveName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAutosaveName_( Handle, CachedSelectors.setAutosaveName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBluetoothDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBluetoothDelegate_( Handle, CachedSelectors.setBluetoothDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBool_forKey_( char @bool, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBool_forKey_( Handle, CachedSelectors.setBool_forKey_, out ___occuredException, sizeof( char ) + sizeof( NObjective.RuntimeObject ), @bool, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCountLabel_( NObjective.RuntimeObject label ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCountLabel_( Handle, CachedSelectors.setCountLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), label );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDeltas_( NObjective.RuntimeObject deltas ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDeltas_( Handle, CachedSelectors.setDeltas_, out ___occuredException, sizeof( NObjective.RuntimeObject ), deltas );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFloat_forKey_( float @float, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFloat_forKey_( Handle, CachedSelectors.setFloat_forKey_, out ___occuredException, sizeof( float ) + sizeof( NObjective.RuntimeObject ), @float, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setInteger_forKey_( int integer, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setInteger_forKey_( Handle, CachedSelectors.setInteger_forKey_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), integer, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsDistributionList_( char list ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsDistributionList_( Handle, CachedSelectors.setIsDistributionList_, out ___occuredException, sizeof( char ), list );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLayoutType_animate_( int type, char animate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLayoutType_animate_( Handle, CachedSelectors.setLayoutType_animate_, out ___occuredException, sizeof( int ) + sizeof( char ), type, animate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setModalMode_( char mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setModalMode_( Handle, CachedSelectors.setModalMode_, out ___occuredException, sizeof( char ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObject_forKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObject_forKey_( Handle, CachedSelectors.setObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPeoplePickerView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPeoplePickerView_( Handle, CachedSelectors.setPeoplePickerView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchString_( Handle, CachedSelectors.setSearchString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldHideMeCard_( char card ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldHideMeCard_( Handle, CachedSelectors.setShouldHideMeCard_, out ___occuredException, sizeof( char ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowIdentityBadges_( char badges ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowIdentityBadges_( Handle, CachedSelectors.setShowIdentityBadges_, out ___occuredException, sizeof( char ), badges );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowIdentityGroups_( char groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowIdentityGroups_( Handle, CachedSelectors.setShowIdentityGroups_, out ___occuredException, sizeof( char ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUIState_( NObjective.RuntimeObject state ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUIState_( Handle, CachedSelectors.setUIState_, out ___occuredException, sizeof( NObjective.RuntimeObject ), state );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setupAsPeoplePicker_( char picker ) {
			RuntimeObject ___occuredException;
			NativeMethods.setupAsPeoplePicker_( Handle, CachedSelectors.setupAsPeoplePicker_, out ___occuredException, sizeof( char ), picker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUpDataSources() {
			RuntimeObject ___occuredException;
			NativeMethods.setUpDataSources( Handle, CachedSelectors.setUpDataSources, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUpDataSourcesAndSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.setUpDataSourcesAndSelection( Handle, CachedSelectors.setUpDataSourcesAndSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setupKeyboardNavigation_( NObjective.RuntimeObject navigation ) {
			RuntimeObject ___occuredException;
			NativeMethods.setupKeyboardNavigation_( Handle, CachedSelectors.setupKeyboardNavigation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), navigation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldHideMeCard() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldHideMeCard( Handle, CachedSelectors.shouldHideMeCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool shouldIncludeMember_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldIncludeMember_( Handle, CachedSelectors.shouldIncludeMember_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void showAsCompany_( NObjective.RuntimeObject company ) {
			RuntimeObject ___occuredException;
			NativeMethods.showAsCompany_( Handle, CachedSelectors.showAsCompany_, out ___occuredException, sizeof( NObjective.RuntimeObject ), company );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showAsPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.showAsPerson_( Handle, CachedSelectors.showAsPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.showCard_( Handle, CachedSelectors.showCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showCardAndColumns_( NObjective.RuntimeObject columns ) {
			RuntimeObject ___occuredException;
			NativeMethods.showCardAndColumns_( Handle, CachedSelectors.showCardAndColumns_, out ___occuredException, sizeof( NObjective.RuntimeObject ), columns );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showColumns_( NObjective.RuntimeObject columns ) {
			RuntimeObject ___occuredException;
			NativeMethods.showColumns_( Handle, CachedSelectors.showColumns_, out ___occuredException, sizeof( NObjective.RuntimeObject ), columns );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showDirectories_( NObjective.RuntimeObject directories ) {
			RuntimeObject ___occuredException;
			NativeMethods.showDirectories_( Handle, CachedSelectors.showDirectories_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directories );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char showIdentityBadges() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.showIdentityBadges( Handle, CachedSelectors.showIdentityBadges, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char showIdentityGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.showIdentityGroups( Handle, CachedSelectors.showIdentityGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void showLastImport_( NObjective.RuntimeObject import ) {
			RuntimeObject ___occuredException;
			NativeMethods.showLastImport_( Handle, CachedSelectors.showLastImport_, out ___occuredException, sizeof( NObjective.RuntimeObject ), import );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showPeopleButton() {
			RuntimeObject ___occuredException;
			NativeMethods.showPeopleButton( Handle, CachedSelectors.showPeopleButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject spinningArrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.spinningArrows( Handle, CachedSelectors.spinningArrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject splitView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView( Handle, CachedSelectors.splitView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float splitView_constrainMaxCoordinate_ofSubviewAt_( NObjective.RuntimeObject view, float constrainMaxCoordinate, int ofSubviewAt ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView_constrainMaxCoordinate_ofSubviewAt_( Handle, CachedSelectors.splitView_constrainMaxCoordinate_ofSubviewAt_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ) + sizeof( int ), view, constrainMaxCoordinate, ofSubviewAt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float splitView_constrainMinCoordinate_ofSubviewAt_( NObjective.RuntimeObject view, float constrainMinCoordinate, int ofSubviewAt ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView_constrainMinCoordinate_ofSubviewAt_( Handle, CachedSelectors.splitView_constrainMinCoordinate_ofSubviewAt_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ) + sizeof( int ), view, constrainMinCoordinate, ofSubviewAt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void splitView_didMoveDivider_distance_( NObjective.RuntimeObject view, int didMoveDivider, float distance ) {
			RuntimeObject ___occuredException;
			NativeMethods.splitView_didMoveDivider_distance_( Handle, CachedSelectors.splitView_didMoveDivider_distance_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( float ), view, didMoveDivider, distance );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char splitView_willMoveDivider_distance_( NObjective.RuntimeObject view, int willMoveDivider, float distance ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView_willMoveDivider_distance_( Handle, CachedSelectors.splitView_willMoveDivider_distance_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( float ), view, willMoveDivider, distance );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void splitViewDidResizeSubviews_( NObjective.RuntimeObject subviews ) {
			RuntimeObject ___occuredException;
			NativeMethods.splitViewDidResizeSubviews_( Handle, CachedSelectors.splitViewDidResizeSubviews_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subviews );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startWindowModal() {
			RuntimeObject ___occuredException;
			NativeMethods.startWindowModal( Handle, CachedSelectors.startWindowModal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject stringsFromSelectionExpanding_( char expanding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromSelectionExpanding_( Handle, CachedSelectors.stringsFromSelectionExpanding_, out ___occuredException, sizeof( char ), expanding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void swapFirstLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.swapFirstLastName_( Handle, CachedSelectors.swapFirstLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void switchLayoutTo_withAnimation_( int to, char withAnimation ) {
			RuntimeObject ___occuredException;
			NativeMethods.switchLayoutTo_withAnimation_( Handle, CachedSelectors.switchLayoutTo_withAnimation_, out ___occuredException, sizeof( int ) + sizeof( char ), to, withAnimation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void tearDown() {
			RuntimeObject ___occuredException;
			NativeMethods.tearDown( Handle, CachedSelectors.tearDown, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void thisIsACompany_( NObjective.RuntimeObject company ) {
			RuntimeObject ___occuredException;
			NativeMethods.thisIsACompany_( Handle, CachedSelectors.thisIsACompany_, out ___occuredException, sizeof( NObjective.RuntimeObject ), company );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void turnOffEditMode() {
			RuntimeObject ___occuredException;
			NativeMethods.turnOffEditMode( Handle, CachedSelectors.turnOffEditMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject uiState() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiState( Handle, CachedSelectors.uiState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void updateCountLabel() {
			RuntimeObject ___occuredException;
			NativeMethods.updateCountLabel( Handle, CachedSelectors.updateCountLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateNextPreviousState() {
			RuntimeObject ___occuredException;
			NativeMethods.updateNextPreviousState( Handle, CachedSelectors.updateNextPreviousState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updatePlusMinus_( NObjective.RuntimeObject minus ) {
			RuntimeObject ___occuredException;
			NativeMethods.updatePlusMinus_( Handle, CachedSelectors.updatePlusMinus_, out ___occuredException, sizeof( NObjective.RuntimeObject ), minus );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject window() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.window( Handle, CachedSelectors.window, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void writeSelectedGroupsAndPeopleToDefaults() {
			RuntimeObject ___occuredException;
			NativeMethods.writeSelectedGroupsAndPeopleToDefaults( Handle, CachedSelectors.writeSelectedGroupsAndPeopleToDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addFieldWithNoPopup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject popup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addGroupButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addPersonButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr addressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowGroupSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsDirectoriesSearches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char allowsGroupEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr autosaveName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr bluetoothDelegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char boolForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cardPane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr cardScrollView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void clearCustomImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void commitPendingChangesAndSave_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char save );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr deltas( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr deltaStateForUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void didEndShouldCloseSheet_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject sheet, int returnCode, System.IntPtr contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoriesController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoriesPane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryResultsController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr directoryResultsPane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doBluetooth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject bluetooth );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void doRemoveFromGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void dummyAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr editButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void editInput_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject input );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void enableSearchField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char field );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void find_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject find );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void findString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void finishWindowModal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float floatForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groupsController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr groupsPane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char groupsPaneHasFocus( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void groupsSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void handleSwitchToCardAndColumnsFrom_animate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @from, char animate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void handleSwitchToCardOnlyFrom_animate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @from, char animate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void handleSwitchToColumnsOnlyFrom_animate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @from, char animate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void handleSwitchToDirectoriesFrom_animate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @from, char animate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void hideAddPeopleButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void hideShowLastImport_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char import );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initAsPeoplePicker_mainSplit_searchLabel_searchField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject picker, NObjective.RuntimeObject mainSplit, NObjective.RuntimeObject searchLabel, NObjective.RuntimeObject searchField );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr inputController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int integerForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isAddressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isAnimating( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isCardDisplayed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isCardPaneVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isDirectoriesPaneVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isDirectoryResultsPaneVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isDistributionList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isEditingGroupName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isFrontWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isGroupsPaneVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isLoaded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isMembersPaneVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isModal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isPeoplePicker( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void layoutSanityCheck( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void layoutStatusbar( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int layoutType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void makeBTAvailable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject available );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void makeBTUnavailable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject unavailable );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float maxWidthOfLocalizedDefaultGroupStrings( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void membersChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr membersController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void membersSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float minimumGroupWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float minimunWindowWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char width );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char modalMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr model( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nextCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nextCardFlashingButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void nextPreviousCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr objectForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void openInSeparateWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void openInSeparateWindowWithoutAsking( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void openPersonInSeparateWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr peoplePane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr peoplePickerView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void personChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void previousCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void previousCardFlashingButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetFirstLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resetGroupAndPeopleFromDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resizeColumnsToMinimun( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void resizeWindow_animate_fromLayout_toLayout_paneWidths_numberOfPanes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float window, char animate, int fromLayout, int toLayout, System.IntPtr paneWidths, int numberOfPanes
			 );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchField( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr searchString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr selectedGroupsInMembersColumn( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint selectedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsDirectoriesSearches_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char searches );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAllowsGroupEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char editing );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setAutosaveName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setBluetoothDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setBool_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @bool, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setCountLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setDeltas_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject deltas );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setFloat_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @float, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setInteger_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int integer, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIsDistributionList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char list );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setLayoutType_animate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, char animate );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setModalMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char mode );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setObject_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPeoplePickerView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setSearchString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShouldHideMeCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShowIdentityBadges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char badges );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setShowIdentityGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char groups );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUIState_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject state );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setupAsPeoplePicker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char picker );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUpDataSources( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setUpDataSourcesAndSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setupKeyboardNavigation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject navigation );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool shouldHideMeCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool shouldIncludeMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showAsCompany_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject company );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showAsPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showCardAndColumns_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject columns );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showColumns_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject columns );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showDirectories_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directories );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char showIdentityBadges( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char showIdentityGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showLastImport_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject import );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void showPeopleButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr spinningArrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr splitView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float splitView_constrainMaxCoordinate_ofSubviewAt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, float constrainMaxCoordinate, int ofSubviewAt );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float splitView_constrainMinCoordinate_ofSubviewAt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, float constrainMinCoordinate, int ofSubviewAt );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void splitView_didMoveDivider_distance_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int didMoveDivider, float distance );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char splitView_willMoveDivider_distance_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int willMoveDivider, float distance );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void splitViewDidResizeSubviews_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subviews );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void startWindowModal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr stringsFromSelectionExpanding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char expanding );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void swapFirstLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void switchLayoutTo_withAnimation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int to, char withAnimation );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void tearDown( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void thisIsACompany_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject company );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void turnOffEditMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uiState( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateCountLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updateNextPreviousState( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void updatePlusMinus_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject minus );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr window( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void writeSelectedGroupsAndPeopleToDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addFieldWithNoPopup_ = "addFieldWithNoPopup:";
			public static readonly Selector addGroupButton = "addGroupButton";
			public static readonly Selector addPersonButton = "addPersonButton";
			public static readonly Selector addressBook = "addressBook";
			public static readonly Selector allowGroupSelection = "allowGroupSelection";
			public static readonly Selector allowsDirectoriesSearches = "allowsDirectoriesSearches";
			public static readonly Selector allowsGroupEditing = "allowsGroupEditing";
			public static readonly Selector autosaveName = "autosaveName";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector bluetoothDelegate = "bluetoothDelegate";
			public static readonly Selector boolForKey_ = "boolForKey:";
			public static readonly Selector cardPane = "cardPane";
			public static readonly Selector cardScrollView = "cardScrollView";
			public static readonly Selector clearCustomImage_ = "clearCustomImage:";
			public static readonly Selector commitPendingChangesAndSave_ = "commitPendingChangesAndSave:";
			public static readonly Selector deltas = "deltas";
			public static readonly Selector deltaStateForUID_ = "deltaStateForUID:";
			public static readonly Selector didEndShouldCloseSheet_returnCode_contextInfo_ = "didEndShouldCloseSheet:returnCode:contextInfo:";
			public static readonly Selector directoriesController = "directoriesController";
			public static readonly Selector directoriesPane = "directoriesPane";
			public static readonly Selector directoryResultsController = "directoryResultsController";
			public static readonly Selector directoryResultsPane = "directoryResultsPane";
			public static readonly Selector doBluetooth_ = "doBluetooth:";
			public static readonly Selector doRemoveFromGroup = "doRemoveFromGroup";
			public static readonly Selector dummyAction_ = "dummyAction:";
			public static readonly Selector editButton = "editButton";
			public static readonly Selector editInput_ = "editInput:";
			public static readonly Selector enableSearchField_ = "enableSearchField:";
			public static readonly Selector find_ = "find:";
			public static readonly Selector findString_ = "findString:";
			public static readonly Selector finishWindowModal = "finishWindowModal";
			public static readonly Selector floatForKey_ = "floatForKey:";
			public static readonly Selector groupsController = "groupsController";
			public static readonly Selector groupsPane = "groupsPane";
			public static readonly Selector groupsPaneHasFocus = "groupsPaneHasFocus";
			public static readonly Selector groupsSelectionChanged_ = "groupsSelectionChanged:";
			public static readonly Selector handleSwitchToCardAndColumnsFrom_animate_ = "handleSwitchToCardAndColumnsFrom:animate:";
			public static readonly Selector handleSwitchToCardOnlyFrom_animate_ = "handleSwitchToCardOnlyFrom:animate:";
			public static readonly Selector handleSwitchToColumnsOnlyFrom_animate_ = "handleSwitchToColumnsOnlyFrom:animate:";
			public static readonly Selector handleSwitchToDirectoriesFrom_animate_ = "handleSwitchToDirectoriesFrom:animate:";
			public static readonly Selector hideAddPeopleButton = "hideAddPeopleButton";
			public static readonly Selector hideShowLastImport_ = "hideShowLastImport:";
			public static readonly Selector initAsPeoplePicker_mainSplit_searchLabel_searchField_ = "initAsPeoplePicker:mainSplit:searchLabel:searchField:";
			public static readonly Selector inputController = "inputController";
			public static readonly Selector integerForKey_ = "integerForKey:";
			public static readonly Selector isAddressBook = "isAddressBook";
			public static readonly Selector isAnimating = "isAnimating";
			public static readonly Selector isCardDisplayed = "isCardDisplayed";
			public static readonly Selector isCardPaneVisible = "isCardPaneVisible";
			public static readonly Selector isDirectoriesPaneVisible = "isDirectoriesPaneVisible";
			public static readonly Selector isDirectoryResultsPaneVisible = "isDirectoryResultsPaneVisible";
			public static readonly Selector isDistributionList = "isDistributionList";
			public static readonly Selector isEditingGroupName = "isEditingGroupName";
			public static readonly Selector isFrontWindow = "isFrontWindow";
			public static readonly Selector isGroupsPaneVisible = "isGroupsPaneVisible";
			public static readonly Selector isLoaded = "isLoaded";
			public static readonly Selector isMembersPaneVisible = "isMembersPaneVisible";
			public static readonly Selector isModal = "isModal";
			public static readonly Selector isPeoplePicker = "isPeoplePicker";
			public static readonly Selector layoutSanityCheck = "layoutSanityCheck";
			public static readonly Selector layoutStatusbar = "layoutStatusbar";
			public static readonly Selector layoutType = "layoutType";
			public static readonly Selector makeBTAvailable_ = "makeBTAvailable:";
			public static readonly Selector makeBTUnavailable_ = "makeBTUnavailable:";
			public static readonly Selector maxWidthOfLocalizedDefaultGroupStrings = "maxWidthOfLocalizedDefaultGroupStrings";
			public static readonly Selector membersChanged_ = "membersChanged:";
			public static readonly Selector membersController = "membersController";
			public static readonly Selector membersSelectionChanged_ = "membersSelectionChanged:";
			public static readonly Selector minimumGroupWidth = "minimumGroupWidth";
			public static readonly Selector minimunWindowWidth_ = "minimunWindowWidth:";
			public static readonly Selector modalMode = "modalMode";
			public static readonly Selector model = "model";
			public static readonly Selector nextCard_ = "nextCard:";
			public static readonly Selector nextCardFlashingButton = "nextCardFlashingButton";
			public static readonly Selector nextPreviousCard_ = "nextPreviousCard:";
			public static readonly Selector objectForKey_ = "objectForKey:";
			public static readonly Selector openInSeparateWindow_ = "openInSeparateWindow:";
			public static readonly Selector openInSeparateWindowWithoutAsking = "openInSeparateWindowWithoutAsking";
			public static readonly Selector openPersonInSeparateWindow_ = "openPersonInSeparateWindow:";
			public static readonly Selector peoplePane = "peoplePane";
			public static readonly Selector peoplePickerView = "peoplePickerView";
			public static readonly Selector personChanged_ = "personChanged:";
			public static readonly Selector previousCard_ = "previousCard:";
			public static readonly Selector previousCardFlashingButton = "previousCardFlashingButton";
			public static readonly Selector resetFirstLastName_ = "resetFirstLastName:";
			public static readonly Selector resetGroupAndPeopleFromDefaults = "resetGroupAndPeopleFromDefaults";
			public static readonly Selector resizeColumnsToMinimun = "resizeColumnsToMinimun";
			public static readonly Selector resizeWindow_animate_fromLayout_toLayout_paneWidths_numberOfPanes_ = "resizeWindow:animate:fromLayout:toLayout:paneWidths:numberOfPanes:";
			public static readonly Selector searchController = "searchController";
			public static readonly Selector searchField = "searchField";
			public static readonly Selector searchString = "searchString";
			public static readonly Selector selectedGroupsInMembersColumn = "selectedGroupsInMembersColumn";
			public static readonly Selector selectedPeople = "selectedPeople";
			public static readonly Selector setAllowGroupSelection_ = "setAllowGroupSelection:";
			public static readonly Selector setAllowsDirectoriesSearches_ = "setAllowsDirectoriesSearches:";
			public static readonly Selector setAllowsGroupEditing_ = "setAllowsGroupEditing:";
			public static readonly Selector setAutosaveName_ = "setAutosaveName:";
			public static readonly Selector setBluetoothDelegate_ = "setBluetoothDelegate:";
			public static readonly Selector setBool_forKey_ = "setBool:forKey:";
			public static readonly Selector setCountLabel_ = "setCountLabel:";
			public static readonly Selector setDeltas_ = "setDeltas:";
			public static readonly Selector setFloat_forKey_ = "setFloat:forKey:";
			public static readonly Selector setInteger_forKey_ = "setInteger:forKey:";
			public static readonly Selector setIsDistributionList_ = "setIsDistributionList:";
			public static readonly Selector setLayoutType_animate_ = "setLayoutType:animate:";
			public static readonly Selector setModalMode_ = "setModalMode:";
			public static readonly Selector setObject_forKey_ = "setObject:forKey:";
			public static readonly Selector setPeoplePickerView_ = "setPeoplePickerView:";
			public static readonly Selector setSearchString_ = "setSearchString:";
			public static readonly Selector setShouldHideMeCard_ = "setShouldHideMeCard:";
			public static readonly Selector setShowIdentityBadges_ = "setShowIdentityBadges:";
			public static readonly Selector setShowIdentityGroups_ = "setShowIdentityGroups:";
			public static readonly Selector setUIState_ = "setUIState:";
			public static readonly Selector setupAsPeoplePicker_ = "setupAsPeoplePicker:";
			public static readonly Selector setUpDataSources = "setUpDataSources";
			public static readonly Selector setUpDataSourcesAndSelection = "setUpDataSourcesAndSelection";
			public static readonly Selector setupKeyboardNavigation_ = "setupKeyboardNavigation:";
			public static readonly Selector shouldHideMeCard = "shouldHideMeCard";
			public static readonly Selector shouldIncludeMember_ = "shouldIncludeMember:";
			public static readonly Selector showAsCompany_ = "showAsCompany:";
			public static readonly Selector showAsPerson_ = "showAsPerson:";
			public static readonly Selector showCard_ = "showCard:";
			public static readonly Selector showCardAndColumns_ = "showCardAndColumns:";
			public static readonly Selector showColumns_ = "showColumns:";
			public static readonly Selector showDirectories_ = "showDirectories:";
			public static readonly Selector showIdentityBadges = "showIdentityBadges";
			public static readonly Selector showIdentityGroups = "showIdentityGroups";
			public static readonly Selector showLastImport_ = "showLastImport:";
			public static readonly Selector showPeopleButton = "showPeopleButton";
			public static readonly Selector spinningArrows = "spinningArrows";
			public static readonly Selector splitView = "splitView";
			public static readonly Selector splitView_constrainMaxCoordinate_ofSubviewAt_ = "splitView:constrainMaxCoordinate:ofSubviewAt:";
			public static readonly Selector splitView_constrainMinCoordinate_ofSubviewAt_ = "splitView:constrainMinCoordinate:ofSubviewAt:";
			public static readonly Selector splitView_didMoveDivider_distance_ = "splitView:didMoveDivider:distance:";
			public static readonly Selector splitView_willMoveDivider_distance_ = "splitView:willMoveDivider:distance:";
			public static readonly Selector splitViewDidResizeSubviews_ = "splitViewDidResizeSubviews:";
			public static readonly Selector startWindowModal = "startWindowModal";
			public static readonly Selector stringsFromSelectionExpanding_ = "stringsFromSelectionExpanding:";
			public static readonly Selector swapFirstLastName_ = "swapFirstLastName:";
			public static readonly Selector switchLayoutTo_withAnimation_ = "switchLayoutTo:withAnimation:";
			public static readonly Selector tearDown = "tearDown";
			public static readonly Selector thisIsACompany_ = "thisIsACompany:";
			public static readonly Selector turnOffEditMode = "turnOffEditMode";
			public static readonly Selector uiState = "uiState";
			public static readonly Selector updateCountLabel = "updateCountLabel";
			public static readonly Selector updateNextPreviousState = "updateNextPreviousState";
			public static readonly Selector updatePlusMinus_ = "updatePlusMinus:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
			public static readonly Selector window = "window";
			public static readonly Selector writeSelectedGroupsAndPeopleToDefaults = "writeSelectedGroupsAndPeopleToDefaults";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABUndoer : IEquatable<ABUndoer> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABUndoer;
		public static implicit operator IntPtr( ABUndoer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABUndoer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABUndoer ) ) return false; 
			return Handle == ( ( ABUndoer )value ).Handle;
		}
		public bool Equals( ABUndoer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABUndoer value1, ABUndoer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABUndoer value1, ABUndoer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABUndoer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABUndoer alloc() {
			return new ABUndoer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithUndoManager_( NObjective.RuntimeObject manager ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUndoManager_( Handle, CachedSelectors.initWithUndoManager_, out ___occuredException, sizeof( NObjective.RuntimeObject ), manager );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithUndoManager_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithUndoManager_ = "initWithUndoManager:";
		}
	}
	[ProxyBaseClass(typeof( NSUndoManager ))]
	public struct ABUndoManager : IEquatable<ABUndoManager> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABUndoManager;
		public static implicit operator IntPtr( ABUndoManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABUndoManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABUndoManager ) ) return false; 
			return Handle == ( ( ABUndoManager )value ).Handle;
		}
		public bool Equals( ABUndoManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABUndoManager value1, ABUndoManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABUndoManager value1, ABUndoManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABUndoManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABUndoManager alloc() {
			return new ABUndoManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithStringsBundle_( NObjective.RuntimeObject bundle ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithStringsBundle_( Handle, CachedSelectors.initWithStringsBundle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), bundle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithStringsBundle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject bundle );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithStringsBundle_ = "initWithStringsBundle:";
		}
	}
	[ProxyBaseClass(typeof( ABImportPanelController ))]
	public struct ABvCardController : IEquatable<ABvCardController> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABvCardController;
		public static implicit operator IntPtr( ABvCardController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABvCardController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABvCardController ) ) return false; 
			return Handle == ( ( ABvCardController )value ).Handle;
		}
		public bool Equals( ABvCardController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABvCardController value1, ABvCardController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABvCardController value1, ABvCardController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABvCardController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABvCardController alloc() {
			return new ABvCardController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void addRecord_toArray_( NObjective.RuntimeObject record, NObjective.RuntimeObject toArray ) {
			RuntimeObject ___occuredException;
			NativeMethods.addRecord_toArray_( ClassHandle, CachedSelectors.addRecord_toArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, toArray );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void exportRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportRecords_( ClassHandle, CachedSelectors.exportRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject pathNamesForRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathNamesForRecords_( ClassHandle, CachedSelectors.pathNamesForRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject pathNamesForRecords_singleCard_( NObjective.RuntimeObject records, char singleCard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathNamesForRecords_singleCard_( ClassHandle, CachedSelectors.pathNamesForRecords_singleCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), records, singleCard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject pathNamesForRecords_singleCard_dataForAllRecords_( NObjective.RuntimeObject records, char singleCard, System.IntPtr dataForAllRecords ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathNamesForRecords_singleCard_dataForAllRecords_( ClassHandle, CachedSelectors.pathNamesForRecords_singleCard_dataForAllRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), records, singleCard, dataForAllRecords );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject pathNamesForRecords_singleCard_dataForAllRecords_inPath_( NObjective.RuntimeObject records, char singleCard, System.IntPtr dataForAllRecords, NObjective.RuntimeObject inPath ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathNamesForRecords_singleCard_dataForAllRecords_inPath_( ClassHandle, CachedSelectors.pathNamesForRecords_singleCard_dataForAllRecords_inPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ), records, singleCard, dataForAllRecords, inPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void savePanelDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, NObjective.RuntimeObject contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.savePanelDidEnd_returnCode_contextInfo_( ClassHandle, CachedSelectors.savePanelDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject uniqueNameForPerson_atPath_( NObjective.RuntimeObject person, NObjective.RuntimeObject atPath ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueNameForPerson_atPath_( ClassHandle, CachedSelectors.uniqueNameForPerson_atPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, atPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject vCardControllerWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vCardControllerWithUIController_( ClassHandle, CachedSelectors.vCardControllerWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject vCardRepresentationOfRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vCardRepresentationOfRecord_( ClassHandle, CachedSelectors.vCardRepresentationOfRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject vCardRepresentationOfRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vCardRepresentationOfRecords_( ClassHandle, CachedSelectors.vCardRepresentationOfRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allImportableFilesFromPaths_( NObjective.RuntimeObject paths ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allImportableFilesFromPaths_( Handle, CachedSelectors.allImportableFilesFromPaths_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paths );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char containsMetaDataCacheCards_( NObjective.RuntimeObject cards ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsMetaDataCacheCards_( Handle, CachedSelectors.containsMetaDataCacheCards_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cards );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void importPromisedFiles_intoGroup_( NObjective.RuntimeObject files, NObjective.RuntimeObject intoGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.importPromisedFiles_intoGroup_( Handle, CachedSelectors.importPromisedFiles_intoGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), files, intoGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importVCardData_intoGroup_( NObjective.RuntimeObject data, NObjective.RuntimeObject intoGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.importVCardData_intoGroup_( Handle, CachedSelectors.importVCardData_intoGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), data, intoGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importVCardFiles_intoGroup_( NObjective.RuntimeObject files, NObjective.RuntimeObject intoGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.importVCardFiles_intoGroup_( Handle, CachedSelectors.importVCardFiles_intoGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), files, intoGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importVCards() {
			RuntimeObject ___occuredException;
			NativeMethods.importVCards( Handle, CachedSelectors.importVCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nextData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextData( Handle, CachedSelectors.nextData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addRecord_toArray_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject toArray );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr allImportableFilesFromPaths_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paths );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char containsMetaDataCacheCards_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cards );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void exportRecords_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importPromisedFiles_intoGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject files, NObjective.RuntimeObject intoGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importVCardData_intoGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, NObjective.RuntimeObject intoGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importVCardFiles_intoGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject files, NObjective.RuntimeObject intoGroup );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void importVCards( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pathNamesForRecords_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pathNamesForRecords_singleCard_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records, char singleCard );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pathNamesForRecords_singleCard_dataForAllRecords_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records, char singleCard, System.IntPtr dataForAllRecords );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pathNamesForRecords_singleCard_dataForAllRecords_inPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records, char singleCard, System.IntPtr dataForAllRecords, NObjective.RuntimeObject inPath );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void savePanelDidEnd_returnCode_contextInfo_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, NObjective.RuntimeObject contextInfo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr uniqueNameForPerson_atPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject atPath );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr vCardControllerWithUIController_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr vCardRepresentationOfRecord_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr vCardRepresentationOfRecords_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
		}
		static internal class CachedSelectors {
			public static readonly Selector addRecord_toArray_ = "addRecord:toArray:";
			public static readonly Selector allImportableFilesFromPaths_ = "allImportableFilesFromPaths:";
			public static readonly Selector containsMetaDataCacheCards_ = "containsMetaDataCacheCards:";
			public static readonly Selector exportRecords_ = "exportRecords:";
			public static readonly Selector importPromisedFiles_intoGroup_ = "importPromisedFiles:intoGroup:";
			public static readonly Selector importVCardData_intoGroup_ = "importVCardData:intoGroup:";
			public static readonly Selector importVCardFiles_intoGroup_ = "importVCardFiles:intoGroup:";
			public static readonly Selector importVCards = "importVCards";
			public static readonly Selector nextData = "nextData";
			public static readonly Selector pathNamesForRecords_ = "pathNamesForRecords:";
			public static readonly Selector pathNamesForRecords_singleCard_ = "pathNamesForRecords:singleCard:";
			public static readonly Selector pathNamesForRecords_singleCard_dataForAllRecords_ = "pathNamesForRecords:singleCard:dataForAllRecords:";
			public static readonly Selector pathNamesForRecords_singleCard_dataForAllRecords_inPath_ = "pathNamesForRecords:singleCard:dataForAllRecords:inPath:";
			public static readonly Selector savePanelDidEnd_returnCode_contextInfo_ = "savePanelDidEnd:returnCode:contextInfo:";
			public static readonly Selector uniqueNameForPerson_atPath_ = "uniqueNameForPerson:atPath:";
			public static readonly Selector vCardControllerWithUIController_ = "vCardControllerWithUIController:";
			public static readonly Selector vCardRepresentationOfRecord_ = "vCardRepresentationOfRecord:";
			public static readonly Selector vCardRepresentationOfRecords_ = "vCardRepresentationOfRecords:";
		}
	}
	[ProxyBaseClass(typeof( ABVCardValueSetter ))]
	public struct ABVCardDictionaryValueSetter : IEquatable<ABVCardDictionaryValueSetter> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardDictionaryValueSetter;
		public static implicit operator IntPtr( ABVCardDictionaryValueSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardDictionaryValueSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABVCardDictionaryValueSetter ) ) return false; 
			return Handle == ( ( ABVCardDictionaryValueSetter )value ).Handle;
		}
		public bool Equals( ABVCardDictionaryValueSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardDictionaryValueSetter value1, ABVCardDictionaryValueSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardDictionaryValueSetter value1, ABVCardDictionaryValueSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardDictionaryValueSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardDictionaryValueSetter alloc() {
			return new ABVCardDictionaryValueSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject dictionaryRep() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryRep( Handle, CachedSelectors.dictionaryRep, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dictionaryRep( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector dictionaryRep = "dictionaryRep";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABVCardLexer : IEquatable<ABVCardLexer> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardLexer;
		public static implicit operator IntPtr( ABVCardLexer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardLexer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABVCardLexer ) ) return false; 
			return Handle == ( ( ABVCardLexer )value ).Handle;
		}
		public bool Equals( ABVCardLexer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardLexer value1, ABVCardLexer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardLexer value1, ABVCardLexer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardLexer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardLexer alloc() {
			return new ABVCardLexer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char advancePastEOL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advancePastEOL( Handle, CachedSelectors.advancePastEOL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advancePastEOLSingle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advancePastEOLSingle( Handle, CachedSelectors.advancePastEOLSingle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advancePastEOLUnicode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advancePastEOLUnicode( Handle, CachedSelectors.advancePastEOLUnicode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advanceToEOL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToEOL( Handle, CachedSelectors.advanceToEOL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advanceToEOLSingle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToEOLSingle( Handle, CachedSelectors.advanceToEOLSingle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advanceToEOLUnicode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToEOLUnicode( Handle, CachedSelectors.advanceToEOLUnicode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void advanceToPeakPoint() {
			RuntimeObject ___occuredException;
			NativeMethods.advanceToPeakPoint( Handle, CachedSelectors.advanceToPeakPoint, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int advanceToSingleByteString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToSingleByteString( Handle, CachedSelectors.advanceToSingleByteString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int advanceToString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToString( Handle, CachedSelectors.advanceToString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advanceToToken_throughTypes_( int token, int throughTypes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToToken_throughTypes_( Handle, CachedSelectors.advanceToToken_throughTypes_, out ___occuredException, sizeof( int ) + sizeof( int ), token, throughTypes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int advanceToUnicodeString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToUnicodeString( Handle, CachedSelectors.advanceToUnicodeString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char atEOF() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.atEOF( Handle, CachedSelectors.atEOF, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint cursor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cursor( Handle, CachedSelectors.cursor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public int errorCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.errorCount( Handle, CachedSelectors.errorCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_( Handle, CachedSelectors.initWithData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextArraySeperatedByToken_stoppingAt_inEncoding_( int token, int stoppingAt, uint inEncoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextArraySeperatedByToken_stoppingAt_inEncoding_( Handle, CachedSelectors.nextArraySeperatedByToken_stoppingAt_inEncoding_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( uint ), token, stoppingAt, inEncoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextBase64Data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextBase64Data( Handle, CachedSelectors.nextBase64Data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextBase64Line_( System.IntPtr line ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextBase64Line_( Handle, CachedSelectors.nextBase64Line_, out ___occuredException, sizeof( System.IntPtr ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextEscapedCharacter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextEscapedCharacter( Handle, CachedSelectors.nextEscapedCharacter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextQuotedPrintableData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextQuotedPrintableData( Handle, CachedSelectors.nextQuotedPrintableData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextSingleByteBase64Line_( System.IntPtr line ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextSingleByteBase64Line_( Handle, CachedSelectors.nextSingleByteBase64Line_, out ___occuredException, sizeof( System.IntPtr ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextSingleByteStringInEncoding_quotedPrintable_stopTokens_trim_( uint encoding, char quotedPrintable, int stopTokens, char trim ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextSingleByteStringInEncoding_quotedPrintable_stopTokens_trim_( Handle, CachedSelectors.nextSingleByteStringInEncoding_quotedPrintable_stopTokens_trim_, out ___occuredException, sizeof( uint ) + sizeof( char ) + sizeof( int ) + sizeof( char ), encoding, quotedPrintable, stopTokens, trim );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextStringInEncoding_quotedPrintable_stopTokens_trim_( uint encoding, char quotedPrintable, int stopTokens, char trim ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextStringInEncoding_quotedPrintable_stopTokens_trim_( Handle, CachedSelectors.nextStringInEncoding_quotedPrintable_stopTokens_trim_, out ___occuredException, sizeof( uint ) + sizeof( char ) + sizeof( int ) + sizeof( char ), encoding, quotedPrintable, stopTokens, trim );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int nextTokenPeak_( char peak ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextTokenPeak_( Handle, CachedSelectors.nextTokenPeak_, out ___occuredException, sizeof( char ), peak );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int nextTokenPeakSingle_length_( char single, int length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextTokenPeakSingle_length_( Handle, CachedSelectors.nextTokenPeakSingle_length_, out ___occuredException, sizeof( char ) + sizeof( int ), single, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int nextTokenPeakUnicode_length_( char unicode, int length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextTokenPeakUnicode_length_( Handle, CachedSelectors.nextTokenPeakUnicode_length_, out ___occuredException, sizeof( char ) + sizeof( int ), unicode, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nextUnicodeBase64Line_( System.IntPtr line ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextUnicodeBase64Line_( Handle, CachedSelectors.nextUnicodeBase64Line_, out ___occuredException, sizeof( System.IntPtr ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextUnicodeStringStopTokens_quotedPrintable_trim_( int tokens, char quotedPrintable, char trim ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextUnicodeStringStopTokens_quotedPrintable_trim_( Handle, CachedSelectors.nextUnicodeStringStopTokens_quotedPrintable_trim_, out ___occuredException, sizeof( int ) + sizeof( char ) + sizeof( char ), tokens, quotedPrintable, trim );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int tokenAtCursor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tokenAtCursor( Handle, CachedSelectors.tokenAtCursor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject tokenName_( int name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tokenName_( Handle, CachedSelectors.tokenName_, out ___occuredException, sizeof( int ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tokenSetForLength_( int length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tokenSetForLength_( Handle, CachedSelectors.tokenSetForLength_, out ___occuredException, sizeof( int ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char advancePastEOL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char advancePastEOLSingle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char advancePastEOLUnicode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char advanceToEOL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char advanceToEOLSingle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char advanceToEOLUnicode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void advanceToPeakPoint( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int advanceToSingleByteString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int advanceToString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char advanceToToken_throughTypes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int token, int throughTypes );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int advanceToUnicodeString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char atEOF( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint cursor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int errorCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextArraySeperatedByToken_stoppingAt_inEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int token, int stoppingAt, uint inEncoding );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextBase64Data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextBase64Line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr line );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextEscapedCharacter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextQuotedPrintableData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextSingleByteBase64Line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr line );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextSingleByteStringInEncoding_quotedPrintable_stopTokens_trim_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding, char quotedPrintable, int stopTokens, char trim );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextStringInEncoding_quotedPrintable_stopTokens_trim_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding, char quotedPrintable, int stopTokens, char trim );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int nextTokenPeak_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char peak );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int nextTokenPeakSingle_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char single, int length );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int nextTokenPeakUnicode_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char unicode, int length );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextUnicodeBase64Line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr line );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextUnicodeStringStopTokens_quotedPrintable_trim_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tokens, char quotedPrintable, char trim );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int tokenAtCursor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr tokenName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr tokenSetForLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int length );
		}
		static internal class CachedSelectors {
			public static readonly Selector advancePastEOL = "advancePastEOL";
			public static readonly Selector advancePastEOLSingle = "advancePastEOLSingle";
			public static readonly Selector advancePastEOLUnicode = "advancePastEOLUnicode";
			public static readonly Selector advanceToEOL = "advanceToEOL";
			public static readonly Selector advanceToEOLSingle = "advanceToEOLSingle";
			public static readonly Selector advanceToEOLUnicode = "advanceToEOLUnicode";
			public static readonly Selector advanceToPeakPoint = "advanceToPeakPoint";
			public static readonly Selector advanceToSingleByteString = "advanceToSingleByteString";
			public static readonly Selector advanceToString = "advanceToString";
			public static readonly Selector advanceToToken_throughTypes_ = "advanceToToken:throughTypes:";
			public static readonly Selector advanceToUnicodeString = "advanceToUnicodeString";
			public static readonly Selector atEOF = "atEOF";
			public static readonly Selector cursor = "cursor";
			public static readonly Selector errorCount = "errorCount";
			public static readonly Selector initWithData_ = "initWithData:";
			public static readonly Selector nextArraySeperatedByToken_stoppingAt_inEncoding_ = "nextArraySeperatedByToken:stoppingAt:inEncoding:";
			public static readonly Selector nextBase64Data = "nextBase64Data";
			public static readonly Selector nextBase64Line_ = "nextBase64Line:";
			public static readonly Selector nextEscapedCharacter = "nextEscapedCharacter";
			public static readonly Selector nextQuotedPrintableData = "nextQuotedPrintableData";
			public static readonly Selector nextSingleByteBase64Line_ = "nextSingleByteBase64Line:";
			public static readonly Selector nextSingleByteStringInEncoding_quotedPrintable_stopTokens_trim_ = "nextSingleByteStringInEncoding:quotedPrintable:stopTokens:trim:";
			public static readonly Selector nextStringInEncoding_quotedPrintable_stopTokens_trim_ = "nextStringInEncoding:quotedPrintable:stopTokens:trim:";
			public static readonly Selector nextTokenPeak_ = "nextTokenPeak:";
			public static readonly Selector nextTokenPeakSingle_length_ = "nextTokenPeakSingle:length:";
			public static readonly Selector nextTokenPeakUnicode_length_ = "nextTokenPeakUnicode:length:";
			public static readonly Selector nextUnicodeBase64Line_ = "nextUnicodeBase64Line:";
			public static readonly Selector nextUnicodeStringStopTokens_quotedPrintable_trim_ = "nextUnicodeStringStopTokens:quotedPrintable:trim:";
			public static readonly Selector tokenAtCursor = "tokenAtCursor";
			public static readonly Selector tokenName_ = "tokenName:";
			public static readonly Selector tokenSetForLength_ = "tokenSetForLength:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABVCardParameter : IEquatable<ABVCardParameter> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardParameter;
		public static implicit operator IntPtr( ABVCardParameter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardParameter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABVCardParameter ) ) return false; 
			return Handle == ( ( ABVCardParameter )value ).Handle;
		}
		public bool Equals( ABVCardParameter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardParameter value1, ABVCardParameter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardParameter value1, ABVCardParameter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardParameter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardParameter alloc() {
			return new ABVCardParameter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.addType_( Handle, CachedSelectors.addType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addTypes_( NObjective.RuntimeObject types ) {
			RuntimeObject ___occuredException;
			NativeMethods.addTypes_( Handle, CachedSelectors.addTypes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), types );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject grouping() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.grouping( Handle, CachedSelectors.grouping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithName_( Handle, CachedSelectors.initWithName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isPrimary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPrimary( Handle, CachedSelectors.isPrimary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setGrouping_( NObjective.RuntimeObject grouping ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGrouping_( Handle, CachedSelectors.setGrouping_, out ___occuredException, sizeof( NObjective.RuntimeObject ), grouping );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsPrimary_( char primary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsPrimary_( Handle, CachedSelectors.setIsPrimary_, out ___occuredException, sizeof( char ), primary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject types() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.types( Handle, CachedSelectors.types, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addTypes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr grouping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isPrimary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setGrouping_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject grouping );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setIsPrimary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char primary );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr types( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addType_ = "addType:";
			public static readonly Selector addTypes_ = "addTypes:";
			public static readonly Selector grouping = "grouping";
			public static readonly Selector initWithName_ = "initWithName:";
			public static readonly Selector isPrimary = "isPrimary";
			public static readonly Selector name = "name";
			public static readonly Selector setGrouping_ = "setGrouping:";
			public static readonly Selector setIsPrimary_ = "setIsPrimary:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector types = "types";
			public static readonly Selector value = "value";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABVCardParser : IEquatable<ABVCardParser> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardParser;
		public static implicit operator IntPtr( ABVCardParser value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardParser value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABVCardParser ) ) return false; 
			return Handle == ( ( ABVCardParser )value ).Handle;
		}
		public bool Equals( ABVCardParser value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardParser value1, ABVCardParser value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardParser value1, ABVCardParser value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardParser( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardParser alloc() {
			return new ABVCardParser( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject dictionaryRepresentationOfVCardAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryRepresentationOfVCardAtPath_( ClassHandle, CachedSelectors.dictionaryRepresentationOfVCardAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addAddressMultiValues() {
			RuntimeObject ___occuredException;
			NativeMethods.addAddressMultiValues( Handle, CachedSelectors.addAddressMultiValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char addIMValueTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addIMValueTo_( Handle, CachedSelectors.addIMValueTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void addMultiValues_toProperty_( NObjective.RuntimeObject values, NObjective.RuntimeObject toProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.addMultiValues_toProperty_( Handle, CachedSelectors.addMultiValues_toProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), values, toProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cleanUpCardState() {
			RuntimeObject ___occuredException;
			NativeMethods.cleanUpCardState( Handle, CachedSelectors.cleanUpCardState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject dateFromISO8601String_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFromISO8601String_( Handle, CachedSelectors.dateFromISO8601String_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject genericLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.genericLabel( Handle, CachedSelectors.genericLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject genericLabelUsingDefault_( char @default ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.genericLabelUsingDefault_( Handle, CachedSelectors.genericLabelUsingDefault_, out ___occuredException, sizeof( char ), @default );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasImportErrors() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasImportErrors( Handle, CachedSelectors.hasImportErrors, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char importToPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importToPerson_( Handle, CachedSelectors.importToPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char importToValueSetter_( NObjective.RuntimeObject setter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importToValueSetter_( Handle, CachedSelectors.importToValueSetter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), setter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_( Handle, CachedSelectors.initWithData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextPersonWithLength_addressBook_( System.IntPtr length, NObjective.RuntimeObject addressBook ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextPersonWithLength_addressBook_( Handle, CachedSelectors.nextPersonWithLength_addressBook_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ), length, addressBook );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char parseABDATE() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseABDATE( Handle, CachedSelectors.parseABDATE, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseABExtensionType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseABExtensionType_( Handle, CachedSelectors.parseABExtensionType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseABMaiden() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseABMaiden( Handle, CachedSelectors.parseABMaiden, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void parseABOrder() {
			RuntimeObject ___occuredException;
			NativeMethods.parseABOrder( Handle, CachedSelectors.parseABOrder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void parseABPhoto() {
			RuntimeObject ___occuredException;
			NativeMethods.parseABPhoto( Handle, CachedSelectors.parseABPhoto, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char parseABReleatedNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseABReleatedNames( Handle, CachedSelectors.parseABReleatedNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void parseABShowAs() {
			RuntimeObject ___occuredException;
			NativeMethods.parseABShowAs( Handle, CachedSelectors.parseABShowAs, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char parseABUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseABUID( Handle, CachedSelectors.parseABUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseADD() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseADD( Handle, CachedSelectors.parseADD, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseADR() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseADR( Handle, CachedSelectors.parseADR, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseBDAY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseBDAY( Handle, CachedSelectors.parseBDAY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseEMAIL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseEMAIL( Handle, CachedSelectors.parseEMAIL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseItem( Handle, CachedSelectors.parseItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseN() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseN( Handle, CachedSelectors.parseN, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseNICKNAME() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseNICKNAME( Handle, CachedSelectors.parseNICKNAME, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseORG() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseORG( Handle, CachedSelectors.parseORG, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void parsePhoto_( NObjective.RuntimeObject photo ) {
			RuntimeObject ___occuredException;
			NativeMethods.parsePhoto_( Handle, CachedSelectors.parsePhoto_, out ___occuredException, sizeof( NObjective.RuntimeObject ), photo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject parseSingleValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseSingleValue( Handle, CachedSelectors.parseSingleValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char parseTEL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseTEL( Handle, CachedSelectors.parseTEL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject parseURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseURL( Handle, CachedSelectors.parseURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char parseVERSION() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseVERSION( Handle, CachedSelectors.parseVERSION, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject people() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.people( Handle, CachedSelectors.people, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject phoneLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.phoneLabel( Handle, CachedSelectors.phoneLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addAddressMultiValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char addIMValueTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addMultiValues_toProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject values, NObjective.RuntimeObject toProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void cleanUpCardState( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dateFromISO8601String_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr dictionaryRepresentationOfVCardAtPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr genericLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr genericLabelUsingDefault_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @default );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasImportErrors( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char importToPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char importToValueSetter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject setter );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr nextPersonWithLength_addressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr length, NObjective.RuntimeObject addressBook );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseABDATE( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseABExtensionType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseABMaiden( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void parseABOrder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void parseABPhoto( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseABReleatedNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void parseABShowAs( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseABUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseADD( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseADR( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseBDAY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseEMAIL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseItem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseN( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseNICKNAME( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseORG( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void parsePhoto_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject photo );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr parseSingleValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseTEL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr parseURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char parseVERSION( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr people( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr phoneLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addAddressMultiValues = "addAddressMultiValues";
			public static readonly Selector addIMValueTo_ = "addIMValueTo:";
			public static readonly Selector addMultiValues_toProperty_ = "addMultiValues:toProperty:";
			public static readonly Selector cleanUpCardState = "cleanUpCardState";
			public static readonly Selector dateFromISO8601String_ = "dateFromISO8601String:";
			public static readonly Selector dictionaryRepresentationOfVCardAtPath_ = "dictionaryRepresentationOfVCardAtPath:";
			public static readonly Selector genericLabel = "genericLabel";
			public static readonly Selector genericLabelUsingDefault_ = "genericLabelUsingDefault:";
			public static readonly Selector hasImportErrors = "hasImportErrors";
			public static readonly Selector importToPerson_ = "importToPerson:";
			public static readonly Selector importToValueSetter_ = "importToValueSetter:";
			public static readonly Selector initWithData_ = "initWithData:";
			public static readonly Selector nextPersonWithLength_addressBook_ = "nextPersonWithLength:addressBook:";
			public static readonly Selector parseABDATE = "parseABDATE";
			public static readonly Selector parseABExtensionType_ = "parseABExtensionType:";
			public static readonly Selector parseABMaiden = "parseABMaiden";
			public static readonly Selector parseABOrder = "parseABOrder";
			public static readonly Selector parseABPhoto = "parseABPhoto";
			public static readonly Selector parseABReleatedNames = "parseABReleatedNames";
			public static readonly Selector parseABShowAs = "parseABShowAs";
			public static readonly Selector parseABUID = "parseABUID";
			public static readonly Selector parseADD = "parseADD";
			public static readonly Selector parseADR = "parseADR";
			public static readonly Selector parseBDAY = "parseBDAY";
			public static readonly Selector parseEMAIL = "parseEMAIL";
			public static readonly Selector parseItem = "parseItem";
			public static readonly Selector parseN = "parseN";
			public static readonly Selector parseNICKNAME = "parseNICKNAME";
			public static readonly Selector parseORG = "parseORG";
			public static readonly Selector parsePhoto_ = "parsePhoto:";
			public static readonly Selector parseSingleValue = "parseSingleValue";
			public static readonly Selector parseTEL = "parseTEL";
			public static readonly Selector parseURL = "parseURL";
			public static readonly Selector parseVERSION = "parseVERSION";
			public static readonly Selector people = "people";
			public static readonly Selector phoneLabel = "phoneLabel";
		}
	}
	[ProxyBaseClass(typeof( ABVCardValueSetter ))]
	public struct ABVCardPersonValueSetter : IEquatable<ABVCardPersonValueSetter> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardPersonValueSetter;
		public static implicit operator IntPtr( ABVCardPersonValueSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardPersonValueSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABVCardPersonValueSetter ) ) return false; 
			return Handle == ( ( ABVCardPersonValueSetter )value ).Handle;
		}
		public bool Equals( ABVCardPersonValueSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardPersonValueSetter value1, ABVCardPersonValueSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardPersonValueSetter value1, ABVCardPersonValueSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardPersonValueSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardPersonValueSetter alloc() {
			return new ABVCardPersonValueSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPerson_( Handle, CachedSelectors.initWithPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPerson_( Handle, CachedSelectors.setPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithPerson_ = "initWithPerson:";
			public static readonly Selector setPerson_ = "setPerson:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABVCardValueSetter : IEquatable<ABVCardValueSetter> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardValueSetter;
		public static implicit operator IntPtr( ABVCardValueSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardValueSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABVCardValueSetter ) ) return false; 
			return Handle == ( ( ABVCardValueSetter )value ).Handle;
		}
		public bool Equals( ABVCardValueSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardValueSetter value1, ABVCardValueSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardValueSetter value1, ABVCardValueSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardValueSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardValueSetter alloc() {
			return new ABVCardValueSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject fullName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fullName( Handle, CachedSelectors.fullName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char setImageData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setImageData_( Handle, CachedSelectors.setImageData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setValue_forProperty_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setValue_forProperty_( Handle, CachedSelectors.setValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setValueInTemporaryCache_forProperty_( NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueInTemporaryCache_forProperty_( Handle, CachedSelectors.setValueInTemporaryCache_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), cache, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject valueForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForProperty_( Handle, CachedSelectors.valueForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr fullName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char setImageData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char setValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setValueInTemporaryCache_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr valueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
		}
		static internal class CachedSelectors {
			public static readonly Selector fullName = "fullName";
			public static readonly Selector setImageData_ = "setImageData:";
			public static readonly Selector setValue_forProperty_ = "setValue:forProperty:";
			public static readonly Selector setValueInTemporaryCache_forProperty_ = "setValueInTemporaryCache:forProperty:";
			public static readonly Selector valueForProperty_ = "valueForProperty:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABWebDAVLock : IEquatable<ABWebDAVLock> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABWebDAVLock;
		public static implicit operator IntPtr( ABWebDAVLock value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABWebDAVLock value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABWebDAVLock ) ) return false; 
			return Handle == ( ( ABWebDAVLock )value ).Handle;
		}
		public bool Equals( ABWebDAVLock value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABWebDAVLock value1, ABWebDAVLock value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABWebDAVLock value1, ABWebDAVLock value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABWebDAVLock( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABWebDAVLock alloc() {
			return new ABWebDAVLock( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int lockTimeout() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockTimeout( ClassHandle, CachedSelectors.lockTimeout, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject bodyForContact_( NObjective.RuntimeObject contact ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bodyForContact_( Handle, CachedSelectors.bodyForContact_, out ___occuredException, sizeof( NObjective.RuntimeObject ), contact );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject expires() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expires( Handle, CachedSelectors.expires, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_( Handle, CachedSelectors.initWithURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lastApplied() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastApplied( Handle, CachedSelectors.lastApplied, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char locked() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.locked( Handle, CachedSelectors.locked, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char renew() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.renew( Handle, CachedSelectors.renew, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char tryLock() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tryLock( Handle, CachedSelectors.tryLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject url() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.url( Handle, CachedSelectors.url, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr bodyForContact_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject contact );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr expires( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr lastApplied( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char locked( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int lockTimeout( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char renew( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char tryLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr url( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector bodyForContact_ = "bodyForContact:";
			public static readonly Selector expires = "expires";
			public static readonly Selector initWithURL_ = "initWithURL:";
			public static readonly Selector lastApplied = "lastApplied";
			public static readonly Selector locked = "locked";
			public static readonly Selector lockTimeout = "lockTimeout";
			public static readonly Selector renew = "renew";
			public static readonly Selector tryLock = "tryLock";
			public static readonly Selector unlock = "unlock";
			public static readonly Selector url = "url";
		}
	}
	[ProxyBaseClass(typeof( NSWindow ))]
	public struct ABWindow : IEquatable<ABWindow> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABWindow;
		public static implicit operator IntPtr( ABWindow value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABWindow value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABWindow ) ) return false; 
			return Handle == ( ( ABWindow )value ).Handle;
		}
		public bool Equals( ABWindow value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABWindow value1, ABWindow value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABWindow value1, ABWindow value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABWindow( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABWindow alloc() {
			return new ABWindow( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidDeminiaturize_( NObjective.RuntimeObject deminiaturize ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidDeminiaturize_( Handle, CachedSelectors.windowDidDeminiaturize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), deminiaturize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void windowDidDeminiaturize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject deminiaturize );
		}
		static internal class CachedSelectors {
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector windowDidDeminiaturize_ = "windowDidDeminiaturize:";
		}
	}
	[ProxyBaseClass(typeof( NSObject ))]
	public struct ABXMLParseNode : IEquatable<ABXMLParseNode> {
		internal NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABXMLParseNode;
		public static implicit operator IntPtr( ABXMLParseNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABXMLParseNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			if( !( value is ABXMLParseNode ) ) return false; 
			return Handle == ( ( ABXMLParseNode )value ).Handle;
		}
		public bool Equals( ABXMLParseNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABXMLParseNode value1, ABXMLParseNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABXMLParseNode value1, ABXMLParseNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABXMLParseNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABXMLParseNode alloc() {
			return new ABXMLParseNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			NativeMethods.addChild_( Handle, CachedSelectors.addChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject childAtIndex_( int index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childAtIndex_( Handle, CachedSelectors.childAtIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int childCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childCount( Handle, CachedSelectors.childCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject childNodesMatchingString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childNodesMatchingString_( Handle, CachedSelectors.childNodesMatchingString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject children() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.children( Handle, CachedSelectors.children, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasChildren( Handle, CachedSelectors.hasChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithString_nodeType_( NObjective.RuntimeObject @string, int nodeType ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_nodeType_( Handle, CachedSelectors.initWithString_nodeType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), @string, nodeType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int nodeType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nodeType( Handle, CachedSelectors.nodeType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject objectGraphDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectGraphDescription( Handle, CachedSelectors.objectGraphDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parent( Handle, CachedSelectors.parent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setParent_( NObjective.RuntimeObject parent ) {
			RuntimeObject ___occuredException;
			NativeMethods.setParent_( Handle, CachedSelectors.setParent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), parent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @string() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@string( Handle, CachedSelectors.@string, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr childAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int childCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr childNodesMatchingString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr children( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char hasChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr initWithString_nodeType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, int nodeType );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int nodeType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr objectGraphDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr parent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void setParent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject parent );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr @string( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addChild_ = "addChild:";
			public static readonly Selector childAtIndex_ = "childAtIndex:";
			public static readonly Selector childCount = "childCount";
			public static readonly Selector childNodesMatchingString_ = "childNodesMatchingString:";
			public static readonly Selector children = "children";
			public static readonly Selector hasChildren = "hasChildren";
			public static readonly Selector initWithString_nodeType_ = "initWithString:nodeType:";
			public static readonly Selector nodeType = "nodeType";
			public static readonly Selector objectGraphDescription = "objectGraphDescription";
			public static readonly Selector parent = "parent";
			public static readonly Selector setParent_ = "setParent:";
			public static readonly Selector @string = "string";
		}
	}
	public static class AddressBookExtensionsOfNSMutableData {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static void abAppendString_( this NSMutableData ___this, NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.abAppendString_( ___this, CachedSelectors.abAppendString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void abAppendString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
		}
		static internal class CachedSelectors {
			public static readonly Selector abAppendString_ = "abAppendString:";
		}
	}
	public static class AddressBookExtensionsOfDSoNode {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject findAllUsers( this DSoNode ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findAllUsers( ___this, CachedSelectors.findAllUsers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr findAllUsers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector findAllUsers = "findAllUsers";
		}
	}
	public static class AddressBookExtensionsOfNSDictionary {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject abDictionaryForBackupAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abDictionaryForBackupAtPath_( NSDictionary.ClassHandle, CachedSelectors.abDictionaryForBackupAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abBackupDate( this NSDictionary ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abBackupDate( ___this, CachedSelectors.abBackupDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint abBackupGroupsCount( this NSDictionary ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abBackupGroupsCount( ___this, CachedSelectors.abBackupGroupsCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public static NObjective.RuntimeObject abBackupPath( this NSDictionary ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abBackupPath( ___this, CachedSelectors.abBackupPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint abBackupPeopleCount( this NSDictionary ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abBackupPeopleCount( ___this, CachedSelectors.abBackupPeopleCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public static int abCompareBackupInfo_( this NSDictionary ___this, NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abCompareBackupInfo_( ___this, CachedSelectors.abCompareBackupInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abBackupDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint abBackupGroupsCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abBackupPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint abBackupPeopleCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern int abCompareBackupInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abDictionaryForBackupAtPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
		}
		static internal class CachedSelectors {
			public static readonly Selector abBackupDate = "abBackupDate";
			public static readonly Selector abBackupGroupsCount = "abBackupGroupsCount";
			public static readonly Selector abBackupPath = "abBackupPath";
			public static readonly Selector abBackupPeopleCount = "abBackupPeopleCount";
			public static readonly Selector abCompareBackupInfo_ = "abCompareBackupInfo:";
			public static readonly Selector abDictionaryForBackupAtPath_ = "abDictionaryForBackupAtPath:";
		}
	}
	public static class AddressBookExtensionsOfNSURL {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject ab_URLWithStringByEscapingStringIfNecessary_( NObjective.RuntimeObject necessary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_URLWithStringByEscapingStringIfNecessary_( NSURL.ClassHandle, CachedSelectors.ab_URLWithStringByEscapingStringIfNecessary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), necessary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abProperURLWithString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abProperURLWithString_( NSURL.ClassHandle, CachedSelectors.abProperURLWithString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abArguments( this NSURL ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abArguments( ___this, CachedSelectors.abArguments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abURLWithScheme_( this NSURL ___this, NObjective.RuntimeObject scheme ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abURLWithScheme_( ___this, CachedSelectors.abURLWithScheme_, out ___occuredException, sizeof( NObjective.RuntimeObject ), scheme );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject lastComponent( this NSURL ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastComponent( ___this, CachedSelectors.lastComponent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject pathlessURL( this NSURL ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathlessURL( ___this, CachedSelectors.pathlessURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject URLByAppendingComponent_( this NSURL ___this, NObjective.RuntimeObject component ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLByAppendingComponent_( ___this, CachedSelectors.URLByAppendingComponent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), component );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject URLByDeletingLastComponent( this NSURL ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLByDeletingLastComponent( ___this, CachedSelectors.URLByDeletingLastComponent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr ab_URLWithStringByEscapingStringIfNecessary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject necessary );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abArguments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abProperURLWithString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abURLWithScheme_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject scheme );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr lastComponent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pathlessURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr URLByAppendingComponent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject component );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr URLByDeletingLastComponent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector ab_URLWithStringByEscapingStringIfNecessary_ = "ab_URLWithStringByEscapingStringIfNecessary:";
			public static readonly Selector abArguments = "abArguments";
			public static readonly Selector abProperURLWithString_ = "abProperURLWithString:";
			public static readonly Selector abURLWithScheme_ = "abURLWithScheme:";
			public static readonly Selector lastComponent = "lastComponent";
			public static readonly Selector pathlessURL = "pathlessURL";
			public static readonly Selector URLByAppendingComponent_ = "URLByAppendingComponent:";
			public static readonly Selector URLByDeletingLastComponent = "URLByDeletingLastComponent";
		}
	}
	public static class AddressBookExtensionsOfNSImage {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject imageNamed_ofType_inBundle_( NObjective.RuntimeObject named, NObjective.RuntimeObject ofType, NObjective.RuntimeObject inBundle ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageNamed_ofType_inBundle_( NSImage.ClassHandle, CachedSelectors.imageNamed_ofType_inBundle_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), named, ofType, inBundle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject reflection( this NSImage ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reflection( ___this, CachedSelectors.reflection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject reflectionWithInitialAlpha_height_( this NSImage ___this, float alpha, float height ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reflectionWithInitialAlpha_height_( ___this, CachedSelectors.reflectionWithInitialAlpha_height_, out ___occuredException, sizeof( float ) + sizeof( float ), alpha, height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr imageNamed_ofType_inBundle_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject named, NObjective.RuntimeObject ofType, NObjective.RuntimeObject inBundle );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr reflection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr reflectionWithInitialAlpha_height_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float alpha, float height );
		}
		static internal class CachedSelectors {
			public static readonly Selector imageNamed_ofType_inBundle_ = "imageNamed:ofType:inBundle:";
			public static readonly Selector reflection = "reflection";
			public static readonly Selector reflectionWithInitialAlpha_height_ = "reflectionWithInitialAlpha:height:";
		}
	}
	public static class AddressBookExtensionsOfNSObject {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static char abCaseInsensitiveIsEqual_( this NSObject ___this, NObjective.RuntimeObject equal ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abCaseInsensitiveIsEqual_( ___this, CachedSelectors.abCaseInsensitiveIsEqual_, out ___occuredException, sizeof( NObjective.RuntimeObject ), equal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abCaseInsensitiveIsEqual_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject equal );
		}
		static internal class CachedSelectors {
			public static readonly Selector abCaseInsensitiveIsEqual_ = "abCaseInsensitiveIsEqual:";
		}
	}
	public static class AddressBookExtensionsOfNSCalendarDate {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static double ab_smallestTimeIntervalAroundTodayYearLess( this NSCalendarDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_smallestTimeIntervalAroundTodayYearLess( ___this, CachedSelectors.ab_smallestTimeIntervalAroundTodayYearLess, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static double ab_timeIntervalFromTodayYearLess( this NSCalendarDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_timeIntervalFromTodayYearLess( ___this, CachedSelectors.ab_timeIntervalFromTodayYearLess, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static double ab_timeIntervalSinceToday( this NSCalendarDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_timeIntervalSinceToday( ___this, CachedSelectors.ab_timeIntervalSinceToday, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double ab_smallestTimeIntervalAroundTodayYearLess( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double ab_timeIntervalFromTodayYearLess( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double ab_timeIntervalSinceToday( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector ab_smallestTimeIntervalAroundTodayYearLess = "ab_smallestTimeIntervalAroundTodayYearLess";
			public static readonly Selector ab_timeIntervalFromTodayYearLess = "ab_timeIntervalFromTodayYearLess";
			public static readonly Selector ab_timeIntervalSinceToday = "ab_timeIntervalSinceToday";
		}
	}
	public static class AddressBookExtensionsOfDSoUser {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject getHomePath( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getHomePath( ___this, CachedSelectors.getHomePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject getPassword( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPassword( ___this, CachedSelectors.getPassword, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject getPicture( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPicture( ___this, CachedSelectors.getPicture, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject getRealName( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getRealName( ___this, CachedSelectors.getRealName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static bool isMobileHomeUser( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMobileHomeUser( ___this, CachedSelectors.isMobileHomeUser, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isPortableUser( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPortableUser( ___this, CachedSelectors.isPortableUser, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr getHomePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr getPassword( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr getPicture( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr getRealName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isMobileHomeUser( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isPortableUser( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector getHomePath = "getHomePath";
			public static readonly Selector getPassword = "getPassword";
			public static readonly Selector getPicture = "getPicture";
			public static readonly Selector getRealName = "getRealName";
			public static readonly Selector isMobileHomeUser = "isMobileHomeUser";
			public static readonly Selector isPortableUser = "isPortableUser";
		}
	}
	public static class AddressBookExtensionsOfNSMutableArray {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static void addUniqueObjectsFromArray_( this NSMutableArray ___this, NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			NativeMethods.addUniqueObjectsFromArray_( ___this, CachedSelectors.addUniqueObjectsFromArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject pop( this NSMutableArray ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pop( ___this, CachedSelectors.pop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void push_( this NSMutableArray ___this, NObjective.RuntimeObject push ) {
			RuntimeObject ___occuredException;
			NativeMethods.push_( ___this, CachedSelectors.push_, out ___occuredException, sizeof( NObjective.RuntimeObject ), push );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject top( this NSMutableArray ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.top( ___this, CachedSelectors.top, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void addUniqueObjectsFromArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr pop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern void push_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject push );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr top( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addUniqueObjectsFromArray_ = "addUniqueObjectsFromArray:";
			public static readonly Selector pop = "pop";
			public static readonly Selector push_ = "push:";
			public static readonly Selector top = "top";
		}
	}
	public static class AddressBookExtensionsOfNSArray {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject abArrayCombinedWithArray_( this NSArray ___this, NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abArrayCombinedWithArray_( ___this, CachedSelectors.abArrayCombinedWithArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char abContainsCaseInsensitiveString_( this NSArray ___this, NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abContainsCaseInsensitiveString_( ___this, CachedSelectors.abContainsCaseInsensitiveString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject abDifferencesBetweenArray_( this NSArray ___this, NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abDifferencesBetweenArray_( ___this, CachedSelectors.abDifferencesBetweenArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abIndicesForObjects_( this NSArray ___this, NObjective.RuntimeObject objects ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abIndicesForObjects_( ___this, CachedSelectors.abIndicesForObjects_, out ___occuredException, sizeof( NObjective.RuntimeObject ), objects );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abPeopleFromUniqueIds( this NSArray ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abPeopleFromUniqueIds( ___this, CachedSelectors.abPeopleFromUniqueIds, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abPeopleFromUniqueIdsWithAddressBook_( this NSArray ___this, NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abPeopleFromUniqueIdsWithAddressBook_( ___this, CachedSelectors.abPeopleFromUniqueIdsWithAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abUniqueIds( this NSArray ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abUniqueIds( ___this, CachedSelectors.abUniqueIds, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject arrayWithResultsOf_( this NSArray ___this, NObjective.Selector of ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayWithResultsOf_( ___this, CachedSelectors.arrayWithResultsOf_, out ___occuredException, sizeof( NObjective.Selector ), of );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abArrayCombinedWithArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abContainsCaseInsensitiveString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abDifferencesBetweenArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abIndicesForObjects_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject objects );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abPeopleFromUniqueIds( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abPeopleFromUniqueIdsWithAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abUniqueIds( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr arrayWithResultsOf_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector of );
		}
		static internal class CachedSelectors {
			public static readonly Selector abArrayCombinedWithArray_ = "abArrayCombinedWithArray:";
			public static readonly Selector abContainsCaseInsensitiveString_ = "abContainsCaseInsensitiveString:";
			public static readonly Selector abDifferencesBetweenArray_ = "abDifferencesBetweenArray:";
			public static readonly Selector abIndicesForObjects_ = "abIndicesForObjects:";
			public static readonly Selector abPeopleFromUniqueIds = "abPeopleFromUniqueIds";
			public static readonly Selector abPeopleFromUniqueIdsWithAddressBook_ = "abPeopleFromUniqueIdsWithAddressBook:";
			public static readonly Selector abUniqueIds = "abUniqueIds";
			public static readonly Selector arrayWithResultsOf_ = "arrayWithResultsOf:";
		}
	}
	public static class AddressBookExtensionsOfNSFileManager {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject abExtendedAttributeForKey_onFile_( this NSFileManager ___this, NObjective.RuntimeObject key, NObjective.RuntimeObject onFile ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abExtendedAttributeForKey_onFile_( ___this, CachedSelectors.abExtendedAttributeForKey_onFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, onFile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abExtendedAttributesOnFile_( this NSFileManager ___this, NObjective.RuntimeObject file ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abExtendedAttributesOnFile_( ___this, CachedSelectors.abExtendedAttributesOnFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ), file );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char abRemoveExtendedAttributeForKey_onFile_( this NSFileManager ___this, NObjective.RuntimeObject key, NObjective.RuntimeObject onFile ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abRemoveExtendedAttributeForKey_onFile_( ___this, CachedSelectors.abRemoveExtendedAttributeForKey_onFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, onFile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char abSetExtendedAttribute_forKey_onFile_( this NSFileManager ___this, NObjective.RuntimeObject attribute, NObjective.RuntimeObject forKey, NObjective.RuntimeObject onFile ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abSetExtendedAttribute_forKey_onFile_( ___this, CachedSelectors.abSetExtendedAttribute_forKey_onFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), attribute, forKey, onFile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abExtendedAttributeForKey_onFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject onFile );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abExtendedAttributesOnFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject file );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abRemoveExtendedAttributeForKey_onFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject onFile );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abSetExtendedAttribute_forKey_onFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute, NObjective.RuntimeObject forKey, NObjective.RuntimeObject onFile );
		}
		static internal class CachedSelectors {
			public static readonly Selector abExtendedAttributeForKey_onFile_ = "abExtendedAttributeForKey:onFile:";
			public static readonly Selector abExtendedAttributesOnFile_ = "abExtendedAttributesOnFile:";
			public static readonly Selector abRemoveExtendedAttributeForKey_onFile_ = "abRemoveExtendedAttributeForKey:onFile:";
			public static readonly Selector abSetExtendedAttribute_forKey_onFile_ = "abSetExtendedAttribute:forKey:onFile:";
		}
	}
	public static class AddressBookExtensionsOfNSPredicate {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject predicateByAlsoMatchingNilValueForLeftExpression_modifier_( this NSPredicate ___this, NObjective.RuntimeObject expression, uint modifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateByAlsoMatchingNilValueForLeftExpression_modifier_( ___this, CachedSelectors.predicateByAlsoMatchingNilValueForLeftExpression_modifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), expression, modifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr predicateByAlsoMatchingNilValueForLeftExpression_modifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject expression, uint modifier );
		}
		static internal class CachedSelectors {
			public static readonly Selector predicateByAlsoMatchingNilValueForLeftExpression_modifier_ = "predicateByAlsoMatchingNilValueForLeftExpression:modifier:";
		}
	}
	public static class AddressBookExtensionsOfNSDate {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static double ab_smallestTimeIntervalAroundTodayYearLess( this NSDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_smallestTimeIntervalAroundTodayYearLess( ___this, CachedSelectors.ab_smallestTimeIntervalAroundTodayYearLess, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static double ab_timeIntervalFromTodayYearLess( this NSDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_timeIntervalFromTodayYearLess( ___this, CachedSelectors.ab_timeIntervalFromTodayYearLess, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static double ab_timeIntervalSinceToday( this NSDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_timeIntervalSinceToday( ___this, CachedSelectors.ab_timeIntervalSinceToday, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double ab_smallestTimeIntervalAroundTodayYearLess( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double ab_timeIntervalFromTodayYearLess( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern double ab_timeIntervalSinceToday( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector ab_smallestTimeIntervalAroundTodayYearLess = "ab_smallestTimeIntervalAroundTodayYearLess";
			public static readonly Selector ab_timeIntervalFromTodayYearLess = "ab_timeIntervalFromTodayYearLess";
			public static readonly Selector ab_timeIntervalSinceToday = "ab_timeIntervalSinceToday";
		}
	}
	public static class AddressBookExtensionsOfNSData {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject abDecodeBase64( this NSData ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abDecodeBase64( ___this, CachedSelectors.abDecodeBase64, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abDecodedUTF7( this NSData ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abDecodedUTF7( ___this, CachedSelectors.abDecodedUTF7, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abEncodeBase64DataBreakLines_allowSlash_padChar_( this NSData ___this, char lines, char allowSlash, char padChar ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEncodeBase64DataBreakLines_allowSlash_padChar_( ___this, CachedSelectors.abEncodeBase64DataBreakLines_allowSlash_padChar_, out ___occuredException, sizeof( char ) + sizeof( char ) + sizeof( char ), lines, allowSlash, padChar );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char abIsUTF16EntourageVCard( this NSData ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abIsUTF16EntourageVCard( ___this, CachedSelectors.abIsUTF16EntourageVCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abDecodeBase64( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abDecodedUTF7( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abEncodeBase64DataBreakLines_allowSlash_padChar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char lines, char allowSlash, char padChar );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern char abIsUTF16EntourageVCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector abDecodeBase64 = "abDecodeBase64";
			public static readonly Selector abDecodedUTF7 = "abDecodedUTF7";
			public static readonly Selector abEncodeBase64DataBreakLines_allowSlash_padChar_ = "abEncodeBase64DataBreakLines:allowSlash:padChar:";
			public static readonly Selector abIsUTF16EntourageVCard = "abIsUTF16EntourageVCard";
		}
	}
	public static class AddressBookExtensionsOfNSString {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject ab_queryPieces( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_queryPieces( ___this, CachedSelectors.ab_queryPieces, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject ab_queryPiecesNoLowerCase( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_queryPiecesNoLowerCase( ___this, CachedSelectors.ab_queryPiecesNoLowerCase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject ab_stringByAddingPercentEscapesIfNecessary( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_stringByAddingPercentEscapesIfNecessary( ___this, CachedSelectors.ab_stringByAddingPercentEscapesIfNecessary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject ab_StringByMakingNameUnique( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_StringByMakingNameUnique( ___this, CachedSelectors.ab_StringByMakingNameUnique, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abcdNormalizedSearchString( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abcdNormalizedSearchString( ___this, CachedSelectors.abcdNormalizedSearchString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abEllipsizeWithFont_withWidth_( this NSString ___this, NObjective.RuntimeObject font, float withWidth ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEllipsizeWithFont_withWidth_( ___this, CachedSelectors.abEllipsizeWithFont_withWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ), font, withWidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abEllipsizeWithFont_withWidth_reverseForRightToLeft_( this NSString ___this, NObjective.RuntimeObject font, float withWidth, char reverseForRightToLeft ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEllipsizeWithFont_withWidth_reverseForRightToLeft_( ___this, CachedSelectors.abEllipsizeWithFont_withWidth_reverseForRightToLeft_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ) + sizeof( char ), font, withWidth, reverseForRightToLeft );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint abEndOfParagraphStartingAtIndex_( this NSString ___this, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEndOfParagraphStartingAtIndex_( ___this, CachedSelectors.abEndOfParagraphStartingAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint )___result;
		}
		unsafe public static NObjective.RuntimeObject abEscapeStringForUnichar_and_advance_( this NSString ___this, ushort unichar, ushort and, System.IntPtr advance ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEscapeStringForUnichar_and_advance_( ___this, CachedSelectors.abEscapeStringForUnichar_and_advance_, out ___occuredException, sizeof( ushort ) + sizeof( ushort ) + sizeof( System.IntPtr ), unichar, and, advance );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abNormalizedUID( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abNormalizedUID( ___this, CachedSelectors.abNormalizedUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static float abRankOfPhoneNumberMatchingString_( this NSString ___this, NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abRankOfPhoneNumberMatchingString_( ___this, CachedSelectors.abRankOfPhoneNumberMatchingString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject abStandardizedPhoneNumber( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abStandardizedPhoneNumber( ___this, CachedSelectors.abStandardizedPhoneNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abStringByRemovingDotMac( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abStringByRemovingDotMac( ___this, CachedSelectors.abStringByRemovingDotMac, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abStringByRemovingPunctuation( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abStringByRemovingPunctuation( ___this, CachedSelectors.abStringByRemovingPunctuation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abUIDWithTableName_( this NSString ___this, NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abUIDWithTableName_( ___this, CachedSelectors.abUIDWithTableName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abVCardDataRepresenation( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abVCardDataRepresenation( ___this, CachedSelectors.abVCardDataRepresenation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abVCardKoshify( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abVCardKoshify( ___this, CachedSelectors.abVCardKoshify, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abWords( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abWords( ___this, CachedSelectors.abWords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static bool isCompatibleWithSubscription_( this NSString ___this, NObjective.RuntimeObject subscription ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCompatibleWithSubscription_( ___this, CachedSelectors.isCompatibleWithSubscription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isSubscribed( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSubscribed( ___this, CachedSelectors.isSubscribed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr ab_queryPieces( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr ab_queryPiecesNoLowerCase( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr ab_stringByAddingPercentEscapesIfNecessary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr ab_StringByMakingNameUnique( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abcdNormalizedSearchString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abEllipsizeWithFont_withWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject font, float withWidth );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abEllipsizeWithFont_withWidth_reverseForRightToLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject font, float withWidth, char reverseForRightToLeft );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern uint abEndOfParagraphStartingAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abEscapeStringForUnichar_and_advance_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort unichar, ushort and, System.IntPtr advance );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abNormalizedUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2")]
			public static extern float abRankOfPhoneNumberMatchingString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abStandardizedPhoneNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abStringByRemovingDotMac( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abStringByRemovingPunctuation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abUIDWithTableName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abVCardDataRepresenation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abVCardKoshify( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern IntPtr abWords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isCompatibleWithSubscription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscription );
			[DllImport(Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2")]
			public static extern bool isSubscribed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector ab_queryPieces = "ab_queryPieces";
			public static readonly Selector ab_queryPiecesNoLowerCase = "ab_queryPiecesNoLowerCase";
			public static readonly Selector ab_stringByAddingPercentEscapesIfNecessary = "ab_stringByAddingPercentEscapesIfNecessary";
			public static readonly Selector ab_StringByMakingNameUnique = "ab_StringByMakingNameUnique";
			public static readonly Selector abcdNormalizedSearchString = "abcdNormalizedSearchString";
			public static readonly Selector abEllipsizeWithFont_withWidth_ = "abEllipsizeWithFont:withWidth:";
			public static readonly Selector abEllipsizeWithFont_withWidth_reverseForRightToLeft_ = "abEllipsizeWithFont:withWidth:reverseForRightToLeft:";
			public static readonly Selector abEndOfParagraphStartingAtIndex_ = "abEndOfParagraphStartingAtIndex:";
			public static readonly Selector abEscapeStringForUnichar_and_advance_ = "abEscapeStringForUnichar:and:advance:";
			public static readonly Selector abNormalizedUID = "abNormalizedUID";
			public static readonly Selector abRankOfPhoneNumberMatchingString_ = "abRankOfPhoneNumberMatchingString:";
			public static readonly Selector abStandardizedPhoneNumber = "abStandardizedPhoneNumber";
			public static readonly Selector abStringByRemovingDotMac = "abStringByRemovingDotMac";
			public static readonly Selector abStringByRemovingPunctuation = "abStringByRemovingPunctuation";
			public static readonly Selector abUIDWithTableName_ = "abUIDWithTableName:";
			public static readonly Selector abVCardDataRepresenation = "abVCardDataRepresenation";
			public static readonly Selector abVCardKoshify = "abVCardKoshify";
			public static readonly Selector abWords = "abWords";
			public static readonly Selector isCompatibleWithSubscription_ = "isCompatibleWithSubscription:";
			public static readonly Selector isSubscribed = "isSubscribed";
		}
	}
	static internal class AddressBookCachedClasses {
		static internal int ___lazyLoad = Platform.NativeMethods.dlopen( "/System/Library/Frameworks/AddressBook.framework/Versions/A/AddressBook" );
		public static readonly RuntimeClass _AB_PeopleSorting_Operation = "_AB_PeopleSorting_Operation";
		public static readonly RuntimeClass AB_AFCard = "AB_AFCard";
		public static readonly RuntimeClass AB_AFDataFile = "AB_AFDataFile";
		public static readonly RuntimeClass ABAccessibilityMockUIElement = "ABAccessibilityMockUIElement";
		public static readonly RuntimeClass ABACE = "ABACE";
		public static readonly RuntimeClass ABACL = "ABACL";
		public static readonly RuntimeClass ABAddressAttributedString = "ABAddressAttributedString";
		public static readonly RuntimeClass ABAddressBook = "ABAddressBook";
		public static readonly RuntimeClass ABAddToGroupCommand = "ABAddToGroupCommand";
		public static readonly RuntimeClass ABAllGroup = "ABAllGroup";
		public static readonly RuntimeClass ABAuthenticationInfo = "ABAuthenticationInfo";
		public static readonly RuntimeClass ABBackgroundImageButtonCell = "ABBackgroundImageButtonCell";
		public static readonly RuntimeClass ABBackupManager = "ABBackupManager";
		public static readonly RuntimeClass ABBackupScheduler = "ABBackupScheduler";
		public static readonly RuntimeClass ABBevellerView = "ABBevellerView";
		public static readonly RuntimeClass ABBuddyStatus = "ABBuddyStatus";
		public static readonly RuntimeClass ABButtonCell = "ABButtonCell";
		public static readonly RuntimeClass ABCardBackgroundView = "ABCardBackgroundView";
		public static readonly RuntimeClass ABCardItemRuler = "ABCardItemRuler";
		public static readonly RuntimeClass ABCardItemRulerAccessibilityElement = "ABCardItemRulerAccessibilityElement";
		public static readonly RuntimeClass ABCardViewerController = "ABCardViewerController";
		public static readonly RuntimeClass ABCardWindowController = "ABCardWindowController";
		public static readonly RuntimeClass ABCDAddressBookSource = "ABCDAddressBookSource";
		public static readonly RuntimeClass ABCDContact = "ABCDContact";
		public static readonly RuntimeClass ABCDContactDate = "ABCDContactDate";
		public static readonly RuntimeClass ABCDContactIndex = "ABCDContactIndex";
		public static readonly RuntimeClass ABCDCustomPropertyValue = "ABCDCustomPropertyValue";
		public static readonly RuntimeClass ABCDDeletedRecordLog = "ABCDDeletedRecordLog";
		public static readonly RuntimeClass ABCDEmailAddress = "ABCDEmailAddress";
		public static readonly RuntimeClass ABCDGroup = "ABCDGroup";
		public static readonly RuntimeClass ABCDInfo = "ABCDInfo";
		public static readonly RuntimeClass ABCDMailRecent = "ABCDMailRecent";
		public static readonly RuntimeClass ABCDNote = "ABCDNote";
		public static readonly RuntimeClass ABCDOwnedObject = "ABCDOwnedObject";
		public static readonly RuntimeClass ABCDRecord = "ABCDRecord";
		public static readonly RuntimeClass ABCDSmartGroup = "ABCDSmartGroup";
		public static readonly RuntimeClass ABCDSubscribedContact = "ABCDSubscribedContact";
		public static readonly RuntimeClass ABCDSubscribedGroup = "ABCDSubscribedGroup";
		public static readonly RuntimeClass ABCertController = "ABCertController";
		public static readonly RuntimeClass ABCertificateButtonCell = "ABCertificateButtonCell";
		public static readonly RuntimeClass ABChangePropertiesCommand = "ABChangePropertiesCommand";
		public static readonly RuntimeClass ABChangePropertyCommand = "ABChangePropertyCommand";
		public static readonly RuntimeClass ABCommand = "ABCommand";
		public static readonly RuntimeClass ABCompanyButtonCell = "ABCompanyButtonCell";
		public static readonly RuntimeClass ABConverter = "ABConverter";
		public static readonly RuntimeClass ABCustomLabelEditor = "ABCustomLabelEditor";
		public static readonly RuntimeClass ABDataType = "ABDataType";
		public static readonly RuntimeClass ABDatePicker = "ABDatePicker";
		public static readonly RuntimeClass ABDatePickerCell = "ABDatePickerCell";
		public static readonly RuntimeClass ABDAVManager = "ABDAVManager";
		public static readonly RuntimeClass ABDAVQuery = "ABDAVQuery";
		public static readonly RuntimeClass ABDBCache = "ABDBCache";
		public static readonly RuntimeClass ABDeleteGroupsCommand = "ABDeleteGroupsCommand";
		public static readonly RuntimeClass ABDeleteRecordsCommand = "ABDeleteRecordsCommand";
		public static readonly RuntimeClass ABDirectoriesController = "ABDirectoriesController";
		public static readonly RuntimeClass ABDirectoriesGroup = "ABDirectoriesGroup";
		public static readonly RuntimeClass ABDirectoryResultsController = "ABDirectoryResultsController";
		public static readonly RuntimeClass ABDragAnimationView = "ABDragAnimationView";
		public static readonly RuntimeClass ABDragAnimationWindow = "ABDragAnimationWindow";
		public static readonly RuntimeClass ABEditSmartGroupCommand = "ABEditSmartGroupCommand";
		public static readonly RuntimeClass ABExchangeSetup = "ABExchangeSetup";
		public static readonly RuntimeClass ABFileManager = "ABFileManager";
		public static readonly RuntimeClass ABFlareScrollView = "ABFlareScrollView";
		public static readonly RuntimeClass ABGroup = "ABGroup";
		public static readonly RuntimeClass ABGroupCommand = "ABGroupCommand";
		public static readonly RuntimeClass ABGroupContents = "ABGroupContents";
		public static readonly RuntimeClass ABGroupsController = "ABGroupsController";
		public static readonly RuntimeClass ABGroupsControllerDataSource = "ABGroupsControllerDataSource";
		public static readonly RuntimeClass ABImageCell = "ABImageCell";
		public static readonly RuntimeClass ABImportCommand = "ABImportCommand";
		public static readonly RuntimeClass ABImportPanelController = "ABImportPanelController";
		public static readonly RuntimeClass ABInfo = "ABInfo";
		public static readonly RuntimeClass ABInputController = "ABInputController";
		public static readonly RuntimeClass ABInputModel = "ABInputModel";
		public static readonly RuntimeClass ABInstantPopUpButtonCell = "ABInstantPopUpButtonCell";
		public static readonly RuntimeClass ABKeyValueCell = "ABKeyValueCell";
		public static readonly RuntimeClass ABLabelPopUpButtonCell = "ABLabelPopUpButtonCell";
		public static readonly RuntimeClass ABLastImportGroup = "ABLastImportGroup";
		public static readonly RuntimeClass ABLayoutManager = "ABLayoutManager";
		public static readonly RuntimeClass ABLDAP_ConfigController = "ABLDAP_ConfigController";
		public static readonly RuntimeClass ABLDAP_Manager = "ABLDAP_Manager";
		public static readonly RuntimeClass ABLDAP_Query = "ABLDAP_Query";
		public static readonly RuntimeClass ABLDAP_Query_DS = "ABLDAP_Query_DS";
		public static readonly RuntimeClass ABLDAP_ResultElement = "ABLDAP_ResultElement";
		public static readonly RuntimeClass ABLDAP_Server = "ABLDAP_Server";
		public static readonly RuntimeClass ABLocalImageDataCache = "ABLocalImageDataCache";
		public static readonly RuntimeClass ABLog = "ABLog";
		public static readonly RuntimeClass ABMailRecent = "ABMailRecent";
		public static readonly RuntimeClass ABMatrix = "ABMatrix";
		public static readonly RuntimeClass ABMeCommand = "ABMeCommand";
		public static readonly RuntimeClass ABMembersController = "ABMembersController";
		public static readonly RuntimeClass ABMergePeopleCommand = "ABMergePeopleCommand";
		public static readonly RuntimeClass ABMerger = "ABMerger";
		public static readonly RuntimeClass ABMessage = "ABMessage";
		public static readonly RuntimeClass ABMessageView = "ABMessageView";
		public static readonly RuntimeClass ABMetadataAddOperation = "ABMetadataAddOperation";
		public static readonly RuntimeClass ABMetadataDeleteOperation = "ABMetadataDeleteOperation";
		public static readonly RuntimeClass ABMetadataMarkViewedOperation = "ABMetadataMarkViewedOperation";
		public static readonly RuntimeClass ABMetadataOperation = "ABMetadataOperation";
		public static readonly RuntimeClass ABMetadataOperationController = "ABMetadataOperationController";
		public static readonly RuntimeClass ABMetadataValidateOperation = "ABMetadataValidateOperation";
		public static readonly RuntimeClass ABMetaKitDatabaseConverter = "ABMetaKitDatabaseConverter";
		public static readonly RuntimeClass ABModel = "ABModel";
		public static readonly RuntimeClass ABMultiValue = "ABMultiValue";
		public static readonly RuntimeClass ABMultiValueCoreDataWrapper = "ABMultiValueCoreDataWrapper";
		public static readonly RuntimeClass ABMutableMultiValue = "ABMutableMultiValue";
		public static readonly RuntimeClass ABMutablePackedImage = "ABMutablePackedImage";
		public static readonly RuntimeClass ABNetworkController = "ABNetworkController";
		public static readonly RuntimeClass ABNewGroupCommand = "ABNewGroupCommand";
		public static readonly RuntimeClass ABNewPersonCommand = "ABNewPersonCommand";
		public static readonly RuntimeClass ABNewSmartGroupCommand = "ABNewSmartGroupCommand";
		public static readonly RuntimeClass ABOnMyMacGroup = "ABOnMyMacGroup";
		public static readonly RuntimeClass ABOutlineView = "ABOutlineView";
		public static readonly RuntimeClass ABPackedImage = "ABPackedImage";
		public static readonly RuntimeClass ABPasteGroupsCommand = "ABPasteGroupsCommand";
		public static readonly RuntimeClass ABPastePeopleCommand = "ABPastePeopleCommand";
		public static readonly RuntimeClass ABPeopleController = "ABPeopleController";
		public static readonly RuntimeClass ABPeoplePickerController = "ABPeoplePickerController";
		public static readonly RuntimeClass ABPeoplePickerNibLoader = "ABPeoplePickerNibLoader";
		public static readonly RuntimeClass ABPeoplePickerView = "ABPeoplePickerView";
		public static readonly RuntimeClass ABPeopleTableTextFieldCell = "ABPeopleTableTextFieldCell";
		public static readonly RuntimeClass ABPerson = "ABPerson";
		public static readonly RuntimeClass ABPersonImageView = "ABPersonImageView";
		public static readonly RuntimeClass ABPhoneFormatter = "ABPhoneFormatter";
		public static readonly RuntimeClass ABPopUpButtonCell = "ABPopUpButtonCell";
		public static readonly RuntimeClass ABProgressWedgeCell = "ABProgressWedgeCell";
		public static readonly RuntimeClass ABPropertyHeaderCell = "ABPropertyHeaderCell";
		public static readonly RuntimeClass ABPropertyTableColumn = "ABPropertyTableColumn";
		public static readonly RuntimeClass ABRadioButtonCell = "ABRadioButtonCell";
		public static readonly RuntimeClass ABRecord = "ABRecord";
		public static readonly RuntimeClass ABRecordCoreDataFactoryImpl = "ABRecordCoreDataFactoryImpl";
		public static readonly RuntimeClass ABRectObject = "ABRectObject";
		public static readonly RuntimeClass ABRemoteImageLoader = "ABRemoteImageLoader";
		public static readonly RuntimeClass ABRemoveFromGroupCommand = "ABRemoveFromGroupCommand";
		public static readonly RuntimeClass ABRenameGroupCommand = "ABRenameGroupCommand";
		public static readonly RuntimeClass ABRollOver = "ABRollOver";
		public static readonly RuntimeClass ABScrollView = "ABScrollView";
		public static readonly RuntimeClass ABSearchController = "ABSearchController";
		public static readonly RuntimeClass ABSearchElement = "ABSearchElement";
		public static readonly RuntimeClass ABSearchElementConjunction = "ABSearchElementConjunction";
		public static readonly RuntimeClass ABSearchElementHelper = "ABSearchElementHelper";
		public static readonly RuntimeClass ABSearchElementMatch = "ABSearchElementMatch";
		public static readonly RuntimeClass ABSearchElementOrderManager = "ABSearchElementOrderManager";
		public static readonly RuntimeClass ABSearchElementSetView = "ABSearchElementSetView";
		public static readonly RuntimeClass ABSearchElementUIController = "ABSearchElementUIController";
		public static readonly RuntimeClass ABSearchElementView = "ABSearchElementView";
		public static readonly RuntimeClass ABSearchField = "ABSearchField";
		public static readonly RuntimeClass ABSearchFieldCell = "ABSearchFieldCell";
		public static readonly RuntimeClass ABSeparatedButtons = "ABSeparatedButtons";
		public static readonly RuntimeClass ABSeparatedButtonsAccessibilityElement = "ABSeparatedButtonsAccessibilityElement";
		public static readonly RuntimeClass ABSeparatedButtonsCell = "ABSeparatedButtonsCell";
		public static readonly RuntimeClass ABSeparatorLineCell = "ABSeparatorLineCell";
		public static readonly RuntimeClass ABSetImageCommand = "ABSetImageCommand";
		public static readonly RuntimeClass ABShowAsCommand = "ABShowAsCommand";
		public static readonly RuntimeClass ABSimpleImportController = "ABSimpleImportController";
		public static readonly RuntimeClass ABSingleColorView = "ABSingleColorView";
		public static readonly RuntimeClass ABSmartGroup = "ABSmartGroup";
		public static readonly RuntimeClass ABSpaceFormatter = "ABSpaceFormatter";
		public static readonly RuntimeClass ABSpecialGroup = "ABSpecialGroup";
		public static readonly RuntimeClass ABSplitView = "ABSplitView";
		public static readonly RuntimeClass ABSubrowGroupElement = "ABSubrowGroupElement";
		public static readonly RuntimeClass ABSubrowObject = "ABSubrowObject";
		public static readonly RuntimeClass ABSubscribedGroup = "ABSubscribedGroup";
		public static readonly RuntimeClass ABSubscribedPerson = "ABSubscribedPerson";
		public static readonly RuntimeClass ABSubscription = "ABSubscription";
		public static readonly RuntimeClass ABSwapLastFirstCommand = "ABSwapLastFirstCommand";
		public static readonly RuntimeClass ABSyncManager = "ABSyncManager";
		public static readonly RuntimeClass ABTableController = "ABTableController";
		public static readonly RuntimeClass ABTableHeaderView = "ABTableHeaderView";
		public static readonly RuntimeClass ABTableRow = "ABTableRow";
		public static readonly RuntimeClass ABTableView = "ABTableView";
		public static readonly RuntimeClass ABTemporalAgent = "ABTemporalAgent";
		public static readonly RuntimeClass ABTextContainer = "ABTextContainer";
		public static readonly RuntimeClass ABTextFieldCell = "ABTextFieldCell";
		public static readonly RuntimeClass ABTextLabelAccessibilityElement = "ABTextLabelAccessibilityElement";
		public static readonly RuntimeClass ABTextStorage = "ABTextStorage";
		public static readonly RuntimeClass ABTextValueAccessibilityElement = "ABTextValueAccessibilityElement";
		public static readonly RuntimeClass ABTextView = "ABTextView";
		public static readonly RuntimeClass ABTypesetter = "ABTypesetter";
		public static readonly RuntimeClass ABUIController = "ABUIController";
		public static readonly RuntimeClass ABUndoer = "ABUndoer";
		public static readonly RuntimeClass ABUndoManager = "ABUndoManager";
		public static readonly RuntimeClass ABvCardController = "ABvCardController";
		public static readonly RuntimeClass ABVCardDictionaryValueSetter = "ABVCardDictionaryValueSetter";
		public static readonly RuntimeClass ABVCardLexer = "ABVCardLexer";
		public static readonly RuntimeClass ABVCardParameter = "ABVCardParameter";
		public static readonly RuntimeClass ABVCardParser = "ABVCardParser";
		public static readonly RuntimeClass ABVCardPersonValueSetter = "ABVCardPersonValueSetter";
		public static readonly RuntimeClass ABVCardValueSetter = "ABVCardValueSetter";
		public static readonly RuntimeClass ABWebDAVLock = "ABWebDAVLock";
		public static readonly RuntimeClass ABWindow = "ABWindow";
		public static readonly RuntimeClass ABXMLParseNode = "ABXMLParseNode";
		public static readonly RuntimeClass NSMutableData = "NSMutableData";
		public static readonly RuntimeClass DSoNode = "DSoNode";
		public static readonly RuntimeClass NSDictionary = "NSDictionary";
		public static readonly RuntimeClass NSURL = "NSURL";
		public static readonly RuntimeClass NSImage = "NSImage";
		public static readonly RuntimeClass NSObject = "NSObject";
		public static readonly RuntimeClass NSCalendarDate = "NSCalendarDate";
		public static readonly RuntimeClass DSoUser = "DSoUser";
		public static readonly RuntimeClass NSMutableArray = "NSMutableArray";
		public static readonly RuntimeClass NSArray = "NSArray";
		public static readonly RuntimeClass NSFileManager = "NSFileManager";
		public static readonly RuntimeClass NSPredicate = "NSPredicate";
		public static readonly RuntimeClass NSDate = "NSDate";
		public static readonly RuntimeClass NSData = "NSData";
		public static readonly RuntimeClass NSString = "NSString";
	}
}
