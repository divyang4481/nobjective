//
// Copyright (C) 2009 Eugeny Grishul
//
// See license in License.txt
//

namespace NObjective.Proxies {
	using System;
	using System.Runtime.InteropServices;
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMAbstractView : IEquatable<DOMAbstractView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMAbstractView;
		public static implicit operator DOMObject( DOMAbstractView value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMAbstractView value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMAbstractView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMAbstractView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMAbstractView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMAbstractView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMAbstractView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMAbstractView value1, DOMAbstractView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMAbstractView value1, DOMAbstractView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMAbstractView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMAbstractView alloc() {
			return new DOMAbstractView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject document() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.document( Handle, CachedSelectors.document, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject document {
				get { return _handle.document(); }
			}
			private readonly DOMAbstractView _handle;
			public ObjectiveCPropertyImplementation( DOMAbstractView value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr document( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector document = "document";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMNode ) )]
	public struct DOMAttr : IEquatable<DOMAttr> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMAttr;
		public static implicit operator DOMNode( DOMAttr value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMAttr value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMAttr value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMAttr value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMAttr value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMAttr value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMAttr?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMAttr value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMAttr value1, DOMAttr value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMAttr value1, DOMAttr value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMAttr( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMAttr alloc() {
			return new DOMAttr( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject ownerElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ownerElement( Handle, CachedSelectors.ownerElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char specified() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.specified( Handle, CachedSelectors.specified, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject style() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.style( Handle, CachedSelectors.style, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject ownerElement {
				get { return _handle.ownerElement(); }
			}
			public char specified {
				get { return _handle.specified(); }
			}
			public NObjective.RuntimeObject style {
				get { return _handle.style(); }
			}
			public NObjective.RuntimeObject value {
				get { return _handle.value(); }
			}
			private readonly DOMAttr _handle;
			public ObjectiveCPropertyImplementation( DOMAttr value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ownerElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char specified( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr style( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector name = "name";
			public static readonly Selector ownerElement = "ownerElement";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector specified = "specified";
			public static readonly Selector style = "style";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMText ) )]
	public struct DOMCDATASection : IEquatable<DOMCDATASection> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCDATASection;
		public static implicit operator DOMText( DOMCDATASection value ) {
			return new DOMText( value.Handle );
		}
		public static implicit operator DOMCharacterData( DOMCDATASection value ) {
			return new DOMCharacterData( value.Handle );
		}
		public static implicit operator DOMNode( DOMCDATASection value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMCDATASection value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCDATASection value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCDATASection value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCDATASection value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCDATASection value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCDATASection?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCDATASection value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCDATASection value1, DOMCDATASection value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCDATASection value1, DOMCDATASection value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCDATASection( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCDATASection alloc() {
			return new DOMCDATASection( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMNode ) )]
	public struct DOMCharacterData : IEquatable<DOMCharacterData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCharacterData;
		public static implicit operator DOMNode( DOMCharacterData value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMCharacterData value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCharacterData value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCharacterData value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCharacterData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCharacterData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCharacterData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCharacterData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCharacterData value1, DOMCharacterData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCharacterData value1, DOMCharacterData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCharacterData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCharacterData alloc() {
			return new DOMCharacterData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void appendData_( string data ) {
			RuntimeObject ___occuredException;
			var ___wrappeddata = Runtime.CreateStringProxy( data );
			NativeMethods.appendData_( Handle, CachedSelectors.appendData_, out ___occuredException, sizeof( IntPtr ), ___wrappeddata );
			Runtime.ReleaseNativeObject( ___wrappeddata );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deleteData__( uint data, uint unnamedParameter ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteData__( Handle, CachedSelectors.deleteData__, out ___occuredException, sizeof( uint ) + sizeof( uint ), data, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteData_length_( uint data, uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteData_length_( Handle, CachedSelectors.deleteData_length_, out ___occuredException, sizeof( uint ) + sizeof( uint ), data, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertData__( uint data, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			NativeMethods.insertData__( Handle, CachedSelectors.insertData__, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ), data, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertData_data_( uint data, string data2 ) {
			RuntimeObject ___occuredException;
			var ___wrappeddata2 = Runtime.CreateStringProxy( data2 );
			NativeMethods.insertData_data_( Handle, CachedSelectors.insertData_data_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ), data, ___wrappeddata2 );
			Runtime.ReleaseNativeObject( ___wrappeddata2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void replaceData___( uint data, uint unnamedParameter, string unnamedParameter2 ) {
			RuntimeObject ___occuredException;
			var ___wrappedunnamedParameter2 = Runtime.CreateStringProxy( unnamedParameter2 );
			NativeMethods.replaceData___( Handle, CachedSelectors.replaceData___, out ___occuredException, sizeof( uint ) + sizeof( uint ) + sizeof( IntPtr ), data, unnamedParameter, ___wrappedunnamedParameter2 );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceData_length_data_( uint data, uint length, string data2 ) {
			RuntimeObject ___occuredException;
			var ___wrappeddata2 = Runtime.CreateStringProxy( data2 );
			NativeMethods.replaceData_length_data_( Handle, CachedSelectors.replaceData_length_data_, out ___occuredException, sizeof( uint ) + sizeof( uint ) + sizeof( IntPtr ), data, length, ___wrappeddata2 );
			Runtime.ReleaseNativeObject( ___wrappeddata2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.setData_( Handle, CachedSelectors.setData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string substringData__( uint data, uint unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.substringData__( Handle, CachedSelectors.substringData__, out ___occuredException, sizeof( uint ) + sizeof( uint ), data, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string substringData_length_( uint data, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.substringData_length_( Handle, CachedSelectors.substringData_length_, out ___occuredException, sizeof( uint ) + sizeof( uint ), data, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject data {
				get { return _handle.data(); }
			}
			public uint length {
				get { return _handle.length(); }
			}
			private readonly DOMCharacterData _handle;
			public ObjectiveCPropertyImplementation( DOMCharacterData value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteData__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint data, uint unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteData_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint data, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertData__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint data, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertData_data_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint data, IntPtr data2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceData___( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint data, uint unnamedParameter, IntPtr unnamedParameter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceData_length_data_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint data, uint length, IntPtr data2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr substringData__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint data, uint unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr substringData_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint data, uint length );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendData_ = "appendData:";
			public static readonly Selector data = "data";
			public static readonly Selector deleteData__ = "deleteData::";
			public static readonly Selector deleteData_length_ = "deleteData:length:";
			public static readonly Selector insertData__ = "insertData::";
			public static readonly Selector insertData_data_ = "insertData:data:";
			public static readonly Selector length = "length";
			public static readonly Selector replaceData___ = "replaceData:::";
			public static readonly Selector replaceData_length_data_ = "replaceData:length:data:";
			public static readonly Selector setData_ = "setData:";
			public static readonly Selector substringData__ = "substringData::";
			public static readonly Selector substringData_length_ = "substringData:length:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCharacterData ) )]
	public struct DOMComment : IEquatable<DOMComment> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMComment;
		public static implicit operator DOMCharacterData( DOMComment value ) {
			return new DOMCharacterData( value.Handle );
		}
		public static implicit operator DOMNode( DOMComment value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMComment value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMComment value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMComment value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMComment value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMComment value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMComment?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMComment value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMComment value1, DOMComment value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMComment value1, DOMComment value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMComment( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMComment alloc() {
			return new DOMComment( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMCounter : IEquatable<DOMCounter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCounter;
		public static implicit operator DOMObject( DOMCounter value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCounter value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCounter value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCounter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCounter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCounter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCounter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCounter value1, DOMCounter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCounter value1, DOMCounter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCounter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCounter alloc() {
			return new DOMCounter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject identifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifier( Handle, CachedSelectors.identifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject listStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.listStyle( Handle, CachedSelectors.listStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject separator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.separator( Handle, CachedSelectors.separator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject identifier {
				get { return _handle.identifier(); }
			}
			public NObjective.RuntimeObject listStyle {
				get { return _handle.listStyle(); }
			}
			public NObjective.RuntimeObject separator {
				get { return _handle.separator(); }
			}
			private readonly DOMCounter _handle;
			public ObjectiveCPropertyImplementation( DOMCounter value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr identifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr listStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr separator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector identifier = "identifier";
			public static readonly Selector listStyle = "listStyle";
			public static readonly Selector separator = "separator";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCSSRule ) )]
	public struct DOMCSSCharsetRule : IEquatable<DOMCSSCharsetRule> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSCharsetRule;
		public static implicit operator DOMCSSRule( DOMCSSCharsetRule value ) {
			return new DOMCSSRule( value.Handle );
		}
		public static implicit operator DOMObject( DOMCSSCharsetRule value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSCharsetRule value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSCharsetRule value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSCharsetRule value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSCharsetRule value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSCharsetRule?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSCharsetRule value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSCharsetRule value1, DOMCSSCharsetRule value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSCharsetRule value1, DOMCSSCharsetRule value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSCharsetRule( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSCharsetRule alloc() {
			return new DOMCSSCharsetRule( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject encoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.encoding( Handle, CachedSelectors.encoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject encoding {
				get { return _handle.encoding(); }
			}
			private readonly DOMCSSCharsetRule _handle;
			public ObjectiveCPropertyImplementation( DOMCSSCharsetRule value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr encoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector encoding = "encoding";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCSSRule ) )]
	public struct DOMCSSFontFaceRule : IEquatable<DOMCSSFontFaceRule> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSFontFaceRule;
		public static implicit operator DOMCSSRule( DOMCSSFontFaceRule value ) {
			return new DOMCSSRule( value.Handle );
		}
		public static implicit operator DOMObject( DOMCSSFontFaceRule value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSFontFaceRule value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSFontFaceRule value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSFontFaceRule value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSFontFaceRule value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSFontFaceRule?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSFontFaceRule value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSFontFaceRule value1, DOMCSSFontFaceRule value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSFontFaceRule value1, DOMCSSFontFaceRule value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSFontFaceRule( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSFontFaceRule alloc() {
			return new DOMCSSFontFaceRule( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject style() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.style( Handle, CachedSelectors.style, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject style {
				get { return _handle.style(); }
			}
			private readonly DOMCSSFontFaceRule _handle;
			public ObjectiveCPropertyImplementation( DOMCSSFontFaceRule value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr style( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector style = "style";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCSSRule ) )]
	public struct DOMCSSImportRule : IEquatable<DOMCSSImportRule> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSImportRule;
		public static implicit operator DOMCSSRule( DOMCSSImportRule value ) {
			return new DOMCSSRule( value.Handle );
		}
		public static implicit operator DOMObject( DOMCSSImportRule value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSImportRule value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSImportRule value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSImportRule value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSImportRule value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSImportRule?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSImportRule value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSImportRule value1, DOMCSSImportRule value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSImportRule value1, DOMCSSImportRule value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSImportRule( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSImportRule alloc() {
			return new DOMCSSImportRule( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject media() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.media( Handle, CachedSelectors.media, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject styleSheet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.styleSheet( Handle, CachedSelectors.styleSheet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject media {
				get { return _handle.media(); }
			}
			public NObjective.RuntimeObject styleSheet {
				get { return _handle.styleSheet(); }
			}
			private readonly DOMCSSImportRule _handle;
			public ObjectiveCPropertyImplementation( DOMCSSImportRule value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr media( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr styleSheet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector href = "href";
			public static readonly Selector media = "media";
			public static readonly Selector styleSheet = "styleSheet";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCSSRule ) )]
	public struct DOMCSSMediaRule : IEquatable<DOMCSSMediaRule> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSMediaRule;
		public static implicit operator DOMCSSRule( DOMCSSMediaRule value ) {
			return new DOMCSSRule( value.Handle );
		}
		public static implicit operator DOMObject( DOMCSSMediaRule value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSMediaRule value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSMediaRule value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSMediaRule value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSMediaRule value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSMediaRule?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSMediaRule value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSMediaRule value1, DOMCSSMediaRule value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSMediaRule value1, DOMCSSMediaRule value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSMediaRule( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSMediaRule alloc() {
			return new DOMCSSMediaRule( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cssRules() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cssRules( Handle, CachedSelectors.cssRules, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deleteRule_( uint rule ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteRule_( Handle, CachedSelectors.deleteRule_, out ___occuredException, sizeof( uint ), rule );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint insertRule__( string rule, uint unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedrule = Runtime.CreateStringProxy( rule );
			var ___result = NativeMethods.insertRule__( Handle, CachedSelectors.insertRule__, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), ___wrappedrule, unnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedrule );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint insertRule_index_( string rule, uint index ) {
			RuntimeObject ___occuredException;
			var ___wrappedrule = Runtime.CreateStringProxy( rule );
			var ___result = NativeMethods.insertRule_index_( Handle, CachedSelectors.insertRule_index_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), ___wrappedrule, index );
			Runtime.ReleaseNativeObject( ___wrappedrule );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject media() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.media( Handle, CachedSelectors.media, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject cssRules {
				get { return _handle.cssRules(); }
			}
			public NObjective.RuntimeObject media {
				get { return _handle.media(); }
			}
			private readonly DOMCSSMediaRule _handle;
			public ObjectiveCPropertyImplementation( DOMCSSMediaRule value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cssRules( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteRule_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint rule );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint insertRule__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr rule, uint unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint insertRule_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr rule, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr media( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cssRules = "cssRules";
			public static readonly Selector deleteRule_ = "deleteRule:";
			public static readonly Selector insertRule__ = "insertRule::";
			public static readonly Selector insertRule_index_ = "insertRule:index:";
			public static readonly Selector media = "media";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCSSRule ) )]
	public struct DOMCSSPageRule : IEquatable<DOMCSSPageRule> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSPageRule;
		public static implicit operator DOMCSSRule( DOMCSSPageRule value ) {
			return new DOMCSSRule( value.Handle );
		}
		public static implicit operator DOMObject( DOMCSSPageRule value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSPageRule value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSPageRule value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSPageRule value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSPageRule value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSPageRule?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSPageRule value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSPageRule value1, DOMCSSPageRule value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSPageRule value1, DOMCSSPageRule value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSPageRule( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSPageRule alloc() {
			return new DOMCSSPageRule( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject selectorText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectorText( Handle, CachedSelectors.selectorText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setSelectorText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectorText_( Handle, CachedSelectors.setSelectorText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject style() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.style( Handle, CachedSelectors.style, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject selectorText {
				get { return _handle.selectorText(); }
			}
			public NObjective.RuntimeObject style {
				get { return _handle.style(); }
			}
			private readonly DOMCSSPageRule _handle;
			public ObjectiveCPropertyImplementation( DOMCSSPageRule value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectorText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectorText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr style( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector selectorText = "selectorText";
			public static readonly Selector setSelectorText_ = "setSelectorText:";
			public static readonly Selector style = "style";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCSSValue ) )]
	public struct DOMCSSPrimitiveValue : IEquatable<DOMCSSPrimitiveValue> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSPrimitiveValue;
		public static implicit operator DOMCSSValue( DOMCSSPrimitiveValue value ) {
			return new DOMCSSValue( value.Handle );
		}
		public static implicit operator DOMObject( DOMCSSPrimitiveValue value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSPrimitiveValue value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSPrimitiveValue value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSPrimitiveValue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSPrimitiveValue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSPrimitiveValue?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSPrimitiveValue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSPrimitiveValue value1, DOMCSSPrimitiveValue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSPrimitiveValue value1, DOMCSSPrimitiveValue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSPrimitiveValue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSPrimitiveValue alloc() {
			return new DOMCSSPrimitiveValue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMCounter getCounterValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCounterValue( Handle, CachedSelectors.getCounterValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCounter( ___result );
		}
		unsafe public float getFloatValue_( ushort value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getFloatValue_( Handle, CachedSelectors.getFloatValue_, out ___occuredException, sizeof( ushort ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public DOMRect getRectValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getRectValue( Handle, CachedSelectors.getRectValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMRect( ___result );
		}
		unsafe public DOMRGBColor getRGBColorValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getRGBColorValue( Handle, CachedSelectors.getRGBColorValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMRGBColor( ___result );
		}
		unsafe public string getStringValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getStringValue( Handle, CachedSelectors.getStringValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public ushort primitiveType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.primitiveType( Handle, CachedSelectors.primitiveType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setFloatValue__( ushort value, float unnamedParameter ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFloatValue__( Handle, CachedSelectors.setFloatValue__, out ___occuredException, sizeof( ushort ) + sizeof( float ), value, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFloatValue_floatValue_( ushort value, float floatValue ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFloatValue_floatValue_( Handle, CachedSelectors.setFloatValue_floatValue_, out ___occuredException, sizeof( ushort ) + sizeof( float ), value, floatValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStringValue__( ushort value, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			NativeMethods.setStringValue__( Handle, CachedSelectors.setStringValue__, out ___occuredException, sizeof( ushort ) + sizeof( IntPtr ), value, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStringValue_stringValue_( ushort value, string stringValue ) {
			RuntimeObject ___occuredException;
			var ___wrappedstringValue = Runtime.CreateStringProxy( stringValue );
			NativeMethods.setStringValue_stringValue_( Handle, CachedSelectors.setStringValue_stringValue_, out ___occuredException, sizeof( ushort ) + sizeof( IntPtr ), value, ___wrappedstringValue );
			Runtime.ReleaseNativeObject( ___wrappedstringValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public ushort primitiveType {
				get { return _handle.primitiveType(); }
			}
			private readonly DOMCSSPrimitiveValue _handle;
			public ObjectiveCPropertyImplementation( DOMCSSPrimitiveValue value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCounterValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float getFloatValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getRectValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getRGBColorValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getStringValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort primitiveType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFloatValue__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort value, float unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFloatValue_floatValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort value, float floatValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStringValue__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort value, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStringValue_stringValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort value, IntPtr stringValue );
		}
		static internal class CachedSelectors {
			public static readonly Selector getCounterValue = "getCounterValue";
			public static readonly Selector getFloatValue_ = "getFloatValue:";
			public static readonly Selector getRectValue = "getRectValue";
			public static readonly Selector getRGBColorValue = "getRGBColorValue";
			public static readonly Selector getStringValue = "getStringValue";
			public static readonly Selector primitiveType = "primitiveType";
			public static readonly Selector setFloatValue__ = "setFloatValue::";
			public static readonly Selector setFloatValue_floatValue_ = "setFloatValue:floatValue:";
			public static readonly Selector setStringValue__ = "setStringValue::";
			public static readonly Selector setStringValue_stringValue_ = "setStringValue:stringValue:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMCSSRule : IEquatable<DOMCSSRule> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSRule;
		public static implicit operator DOMObject( DOMCSSRule value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSRule value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSRule value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSRule value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSRule value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSRule?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSRule value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSRule value1, DOMCSSRule value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSRule value1, DOMCSSRule value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSRule( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSRule alloc() {
			return new DOMCSSRule( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cssText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cssText( Handle, CachedSelectors.cssText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentRule() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentRule( Handle, CachedSelectors.parentRule, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentStyleSheet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentStyleSheet( Handle, CachedSelectors.parentStyleSheet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setCssText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCssText_( Handle, CachedSelectors.setCssText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public ushort type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject cssText {
				get { return _handle.cssText(); }
			}
			public NObjective.RuntimeObject parentRule {
				get { return _handle.parentRule(); }
			}
			public NObjective.RuntimeObject parentStyleSheet {
				get { return _handle.parentStyleSheet(); }
			}
			public ushort type {
				get { return _handle.type(); }
			}
			private readonly DOMCSSRule _handle;
			public ObjectiveCPropertyImplementation( DOMCSSRule value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cssText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentRule( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentStyleSheet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCssText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cssText = "cssText";
			public static readonly Selector parentRule = "parentRule";
			public static readonly Selector parentStyleSheet = "parentStyleSheet";
			public static readonly Selector setCssText_ = "setCssText:";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMCSSRuleList : IEquatable<DOMCSSRuleList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSRuleList;
		public static implicit operator DOMObject( DOMCSSRuleList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSRuleList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSRuleList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSRuleList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSRuleList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSRuleList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSRuleList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSRuleList value1, DOMCSSRuleList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSRuleList value1, DOMCSSRuleList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSRuleList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSRuleList alloc() {
			return new DOMCSSRuleList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMCSSRule item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSRule( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public uint length {
				get { return _handle.length(); }
			}
			private readonly DOMCSSRuleList _handle;
			public ObjectiveCPropertyImplementation( DOMCSSRuleList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector item_ = "item:";
			public static readonly Selector length = "length";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMCSSStyleDeclaration : IEquatable<DOMCSSStyleDeclaration> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSStyleDeclaration;
		public static implicit operator DOMObject( DOMCSSStyleDeclaration value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSStyleDeclaration value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSStyleDeclaration value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSStyleDeclaration value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSStyleDeclaration value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSStyleDeclaration?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSStyleDeclaration value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSStyleDeclaration value1, DOMCSSStyleDeclaration value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSStyleDeclaration value1, DOMCSSStyleDeclaration value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSStyleDeclaration( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSStyleDeclaration alloc() {
			return new DOMCSSStyleDeclaration( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public string azimuth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.azimuth( Handle, CachedSelectors.azimuth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string background() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.background( Handle, CachedSelectors.background, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string backgroundAttachment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backgroundAttachment( Handle, CachedSelectors.backgroundAttachment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string backgroundColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backgroundColor( Handle, CachedSelectors.backgroundColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string backgroundImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backgroundImage( Handle, CachedSelectors.backgroundImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string backgroundPosition() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backgroundPosition( Handle, CachedSelectors.backgroundPosition, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string backgroundRepeat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backgroundRepeat( Handle, CachedSelectors.backgroundRepeat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string border() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.border( Handle, CachedSelectors.border, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderBottom() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderBottom( Handle, CachedSelectors.borderBottom, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderBottomColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderBottomColor( Handle, CachedSelectors.borderBottomColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderBottomStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderBottomStyle( Handle, CachedSelectors.borderBottomStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderBottomWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderBottomWidth( Handle, CachedSelectors.borderBottomWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderCollapse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderCollapse( Handle, CachedSelectors.borderCollapse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderColor( Handle, CachedSelectors.borderColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderLeft() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderLeft( Handle, CachedSelectors.borderLeft, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderLeftColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderLeftColor( Handle, CachedSelectors.borderLeftColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderLeftStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderLeftStyle( Handle, CachedSelectors.borderLeftStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderLeftWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderLeftWidth( Handle, CachedSelectors.borderLeftWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderRight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderRight( Handle, CachedSelectors.borderRight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderRightColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderRightColor( Handle, CachedSelectors.borderRightColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderRightStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderRightStyle( Handle, CachedSelectors.borderRightStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderRightWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderRightWidth( Handle, CachedSelectors.borderRightWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderSpacing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderSpacing( Handle, CachedSelectors.borderSpacing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderStyle( Handle, CachedSelectors.borderStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderTop() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderTop( Handle, CachedSelectors.borderTop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderTopColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderTopColor( Handle, CachedSelectors.borderTopColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderTopStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderTopStyle( Handle, CachedSelectors.borderTopStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderTopWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderTopWidth( Handle, CachedSelectors.borderTopWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string borderWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.borderWidth( Handle, CachedSelectors.borderWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string bottom() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bottom( Handle, CachedSelectors.bottom, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string captionSide() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.captionSide( Handle, CachedSelectors.captionSide, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string clear() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string clip() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clip( Handle, CachedSelectors.clip, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string color() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.color( Handle, CachedSelectors.color, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string content() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.content( Handle, CachedSelectors.content, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string counterIncrement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.counterIncrement( Handle, CachedSelectors.counterIncrement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string counterReset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.counterReset( Handle, CachedSelectors.counterReset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string cssFloat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cssFloat( Handle, CachedSelectors.cssFloat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject cssText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cssText( Handle, CachedSelectors.cssText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string cue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cue( Handle, CachedSelectors.cue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string cueAfter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cueAfter( Handle, CachedSelectors.cueAfter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string cueBefore() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cueBefore( Handle, CachedSelectors.cueBefore, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string cursor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cursor( Handle, CachedSelectors.cursor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string direction() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.direction( Handle, CachedSelectors.direction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string display() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.display( Handle, CachedSelectors.display, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string elevation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elevation( Handle, CachedSelectors.elevation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string emptyCells() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.emptyCells( Handle, CachedSelectors.emptyCells, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string font() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.font( Handle, CachedSelectors.font, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string fontFamily() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fontFamily( Handle, CachedSelectors.fontFamily, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string fontSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fontSize( Handle, CachedSelectors.fontSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string fontSizeAdjust() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fontSizeAdjust( Handle, CachedSelectors.fontSizeAdjust, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string fontStretch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fontStretch( Handle, CachedSelectors.fontStretch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string fontStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fontStyle( Handle, CachedSelectors.fontStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string fontVariant() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fontVariant( Handle, CachedSelectors.fontVariant, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string fontWeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fontWeight( Handle, CachedSelectors.fontWeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public DOMCSSValue getPropertyCSSValue_( string value ) {
			RuntimeObject ___occuredException;
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			var ___result = NativeMethods.getPropertyCSSValue_( Handle, CachedSelectors.getPropertyCSSValue_, out ___occuredException, sizeof( IntPtr ), ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSValue( ___result );
		}
		unsafe public string getPropertyPriority_( string priority ) {
			RuntimeObject ___occuredException;
			var ___wrappedpriority = Runtime.CreateStringProxy( priority );
			var ___result = NativeMethods.getPropertyPriority_( Handle, CachedSelectors.getPropertyPriority_, out ___occuredException, sizeof( IntPtr ), ___wrappedpriority );
			Runtime.ReleaseNativeObject( ___wrappedpriority );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string getPropertyShorthand_( string shorthand ) {
			RuntimeObject ___occuredException;
			var ___wrappedshorthand = Runtime.CreateStringProxy( shorthand );
			var ___result = NativeMethods.getPropertyShorthand_( Handle, CachedSelectors.getPropertyShorthand_, out ___occuredException, sizeof( IntPtr ), ___wrappedshorthand );
			Runtime.ReleaseNativeObject( ___wrappedshorthand );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string getPropertyValue_( string value ) {
			RuntimeObject ___occuredException;
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			var ___result = NativeMethods.getPropertyValue_( Handle, CachedSelectors.getPropertyValue_, out ___occuredException, sizeof( IntPtr ), ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool isPropertyImplicit_( string @implicit ) {
			RuntimeObject ___occuredException;
			var ___wrappedimplicit = Runtime.CreateStringProxy( @implicit );
			var ___result = NativeMethods.isPropertyImplicit_( Handle, CachedSelectors.isPropertyImplicit_, out ___occuredException, sizeof( IntPtr ), ___wrappedimplicit );
			Runtime.ReleaseNativeObject( ___wrappedimplicit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string left() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.left( Handle, CachedSelectors.left, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string letterSpacing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.letterSpacing( Handle, CachedSelectors.letterSpacing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string lineHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lineHeight( Handle, CachedSelectors.lineHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string listStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.listStyle( Handle, CachedSelectors.listStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string listStyleImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.listStyleImage( Handle, CachedSelectors.listStyleImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string listStylePosition() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.listStylePosition( Handle, CachedSelectors.listStylePosition, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string listStyleType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.listStyleType( Handle, CachedSelectors.listStyleType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string margin() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.margin( Handle, CachedSelectors.margin, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string marginBottom() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marginBottom( Handle, CachedSelectors.marginBottom, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string marginLeft() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marginLeft( Handle, CachedSelectors.marginLeft, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string marginRight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marginRight( Handle, CachedSelectors.marginRight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string marginTop() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marginTop( Handle, CachedSelectors.marginTop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string markerOffset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markerOffset( Handle, CachedSelectors.markerOffset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string marks() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marks( Handle, CachedSelectors.marks, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string maxHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maxHeight( Handle, CachedSelectors.maxHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string maxWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maxWidth( Handle, CachedSelectors.maxWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string minHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minHeight( Handle, CachedSelectors.minHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string minWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minWidth( Handle, CachedSelectors.minWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string orphans() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orphans( Handle, CachedSelectors.orphans, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string outline() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outline( Handle, CachedSelectors.outline, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string outlineColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineColor( Handle, CachedSelectors.outlineColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string outlineStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineStyle( Handle, CachedSelectors.outlineStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string outlineWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineWidth( Handle, CachedSelectors.outlineWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string overflow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.overflow( Handle, CachedSelectors.overflow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string padding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.padding( Handle, CachedSelectors.padding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string paddingBottom() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.paddingBottom( Handle, CachedSelectors.paddingBottom, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string paddingLeft() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.paddingLeft( Handle, CachedSelectors.paddingLeft, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string paddingRight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.paddingRight( Handle, CachedSelectors.paddingRight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string paddingTop() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.paddingTop( Handle, CachedSelectors.paddingTop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string page() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.page( Handle, CachedSelectors.page, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string pageBreakAfter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pageBreakAfter( Handle, CachedSelectors.pageBreakAfter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string pageBreakBefore() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pageBreakBefore( Handle, CachedSelectors.pageBreakBefore, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string pageBreakInside() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pageBreakInside( Handle, CachedSelectors.pageBreakInside, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject parentRule() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentRule( Handle, CachedSelectors.parentRule, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string pause() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pause( Handle, CachedSelectors.pause, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string pauseAfter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pauseAfter( Handle, CachedSelectors.pauseAfter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string pauseBefore() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pauseBefore( Handle, CachedSelectors.pauseBefore, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string pitch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pitch( Handle, CachedSelectors.pitch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string pitchRange() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pitchRange( Handle, CachedSelectors.pitchRange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string playDuring() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.playDuring( Handle, CachedSelectors.playDuring, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string position() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.position( Handle, CachedSelectors.position, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string quotes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.quotes( Handle, CachedSelectors.quotes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string removeProperty_( string property ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___result = NativeMethods.removeProperty_( Handle, CachedSelectors.removeProperty_, out ___occuredException, sizeof( IntPtr ), ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string richness() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.richness( Handle, CachedSelectors.richness, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string right() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.right( Handle, CachedSelectors.right, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void setAzimuth_( string azimuth ) {
			RuntimeObject ___occuredException;
			var ___wrappedazimuth = Runtime.CreateStringProxy( azimuth );
			NativeMethods.setAzimuth_( Handle, CachedSelectors.setAzimuth_, out ___occuredException, sizeof( IntPtr ), ___wrappedazimuth );
			Runtime.ReleaseNativeObject( ___wrappedazimuth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBackground_( string background ) {
			RuntimeObject ___occuredException;
			var ___wrappedbackground = Runtime.CreateStringProxy( background );
			NativeMethods.setBackground_( Handle, CachedSelectors.setBackground_, out ___occuredException, sizeof( IntPtr ), ___wrappedbackground );
			Runtime.ReleaseNativeObject( ___wrappedbackground );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBackgroundAttachment_( string attachment ) {
			RuntimeObject ___occuredException;
			var ___wrappedattachment = Runtime.CreateStringProxy( attachment );
			NativeMethods.setBackgroundAttachment_( Handle, CachedSelectors.setBackgroundAttachment_, out ___occuredException, sizeof( IntPtr ), ___wrappedattachment );
			Runtime.ReleaseNativeObject( ___wrappedattachment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBackgroundColor_( string color ) {
			RuntimeObject ___occuredException;
			var ___wrappedcolor = Runtime.CreateStringProxy( color );
			NativeMethods.setBackgroundColor_( Handle, CachedSelectors.setBackgroundColor_, out ___occuredException, sizeof( IntPtr ), ___wrappedcolor );
			Runtime.ReleaseNativeObject( ___wrappedcolor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBackgroundImage_( string image ) {
			RuntimeObject ___occuredException;
			var ___wrappedimage = Runtime.CreateStringProxy( image );
			NativeMethods.setBackgroundImage_( Handle, CachedSelectors.setBackgroundImage_, out ___occuredException, sizeof( IntPtr ), ___wrappedimage );
			Runtime.ReleaseNativeObject( ___wrappedimage );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBackgroundPosition_( string position ) {
			RuntimeObject ___occuredException;
			var ___wrappedposition = Runtime.CreateStringProxy( position );
			NativeMethods.setBackgroundPosition_( Handle, CachedSelectors.setBackgroundPosition_, out ___occuredException, sizeof( IntPtr ), ___wrappedposition );
			Runtime.ReleaseNativeObject( ___wrappedposition );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBackgroundRepeat_( string repeat ) {
			RuntimeObject ___occuredException;
			var ___wrappedrepeat = Runtime.CreateStringProxy( repeat );
			NativeMethods.setBackgroundRepeat_( Handle, CachedSelectors.setBackgroundRepeat_, out ___occuredException, sizeof( IntPtr ), ___wrappedrepeat );
			Runtime.ReleaseNativeObject( ___wrappedrepeat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorder_( string border ) {
			RuntimeObject ___occuredException;
			var ___wrappedborder = Runtime.CreateStringProxy( border );
			NativeMethods.setBorder_( Handle, CachedSelectors.setBorder_, out ___occuredException, sizeof( IntPtr ), ___wrappedborder );
			Runtime.ReleaseNativeObject( ___wrappedborder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderBottom_( string bottom ) {
			RuntimeObject ___occuredException;
			var ___wrappedbottom = Runtime.CreateStringProxy( bottom );
			NativeMethods.setBorderBottom_( Handle, CachedSelectors.setBorderBottom_, out ___occuredException, sizeof( IntPtr ), ___wrappedbottom );
			Runtime.ReleaseNativeObject( ___wrappedbottom );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderBottomColor_( string color ) {
			RuntimeObject ___occuredException;
			var ___wrappedcolor = Runtime.CreateStringProxy( color );
			NativeMethods.setBorderBottomColor_( Handle, CachedSelectors.setBorderBottomColor_, out ___occuredException, sizeof( IntPtr ), ___wrappedcolor );
			Runtime.ReleaseNativeObject( ___wrappedcolor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderBottomStyle_( string style ) {
			RuntimeObject ___occuredException;
			var ___wrappedstyle = Runtime.CreateStringProxy( style );
			NativeMethods.setBorderBottomStyle_( Handle, CachedSelectors.setBorderBottomStyle_, out ___occuredException, sizeof( IntPtr ), ___wrappedstyle );
			Runtime.ReleaseNativeObject( ___wrappedstyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderBottomWidth_( string width ) {
			RuntimeObject ___occuredException;
			var ___wrappedwidth = Runtime.CreateStringProxy( width );
			NativeMethods.setBorderBottomWidth_( Handle, CachedSelectors.setBorderBottomWidth_, out ___occuredException, sizeof( IntPtr ), ___wrappedwidth );
			Runtime.ReleaseNativeObject( ___wrappedwidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderCollapse_( string collapse ) {
			RuntimeObject ___occuredException;
			var ___wrappedcollapse = Runtime.CreateStringProxy( collapse );
			NativeMethods.setBorderCollapse_( Handle, CachedSelectors.setBorderCollapse_, out ___occuredException, sizeof( IntPtr ), ___wrappedcollapse );
			Runtime.ReleaseNativeObject( ___wrappedcollapse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderColor_( string color ) {
			RuntimeObject ___occuredException;
			var ___wrappedcolor = Runtime.CreateStringProxy( color );
			NativeMethods.setBorderColor_( Handle, CachedSelectors.setBorderColor_, out ___occuredException, sizeof( IntPtr ), ___wrappedcolor );
			Runtime.ReleaseNativeObject( ___wrappedcolor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderLeft_( string left ) {
			RuntimeObject ___occuredException;
			var ___wrappedleft = Runtime.CreateStringProxy( left );
			NativeMethods.setBorderLeft_( Handle, CachedSelectors.setBorderLeft_, out ___occuredException, sizeof( IntPtr ), ___wrappedleft );
			Runtime.ReleaseNativeObject( ___wrappedleft );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderLeftColor_( string color ) {
			RuntimeObject ___occuredException;
			var ___wrappedcolor = Runtime.CreateStringProxy( color );
			NativeMethods.setBorderLeftColor_( Handle, CachedSelectors.setBorderLeftColor_, out ___occuredException, sizeof( IntPtr ), ___wrappedcolor );
			Runtime.ReleaseNativeObject( ___wrappedcolor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderLeftStyle_( string style ) {
			RuntimeObject ___occuredException;
			var ___wrappedstyle = Runtime.CreateStringProxy( style );
			NativeMethods.setBorderLeftStyle_( Handle, CachedSelectors.setBorderLeftStyle_, out ___occuredException, sizeof( IntPtr ), ___wrappedstyle );
			Runtime.ReleaseNativeObject( ___wrappedstyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderLeftWidth_( string width ) {
			RuntimeObject ___occuredException;
			var ___wrappedwidth = Runtime.CreateStringProxy( width );
			NativeMethods.setBorderLeftWidth_( Handle, CachedSelectors.setBorderLeftWidth_, out ___occuredException, sizeof( IntPtr ), ___wrappedwidth );
			Runtime.ReleaseNativeObject( ___wrappedwidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderRight_( string right ) {
			RuntimeObject ___occuredException;
			var ___wrappedright = Runtime.CreateStringProxy( right );
			NativeMethods.setBorderRight_( Handle, CachedSelectors.setBorderRight_, out ___occuredException, sizeof( IntPtr ), ___wrappedright );
			Runtime.ReleaseNativeObject( ___wrappedright );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderRightColor_( string color ) {
			RuntimeObject ___occuredException;
			var ___wrappedcolor = Runtime.CreateStringProxy( color );
			NativeMethods.setBorderRightColor_( Handle, CachedSelectors.setBorderRightColor_, out ___occuredException, sizeof( IntPtr ), ___wrappedcolor );
			Runtime.ReleaseNativeObject( ___wrappedcolor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderRightStyle_( string style ) {
			RuntimeObject ___occuredException;
			var ___wrappedstyle = Runtime.CreateStringProxy( style );
			NativeMethods.setBorderRightStyle_( Handle, CachedSelectors.setBorderRightStyle_, out ___occuredException, sizeof( IntPtr ), ___wrappedstyle );
			Runtime.ReleaseNativeObject( ___wrappedstyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderRightWidth_( string width ) {
			RuntimeObject ___occuredException;
			var ___wrappedwidth = Runtime.CreateStringProxy( width );
			NativeMethods.setBorderRightWidth_( Handle, CachedSelectors.setBorderRightWidth_, out ___occuredException, sizeof( IntPtr ), ___wrappedwidth );
			Runtime.ReleaseNativeObject( ___wrappedwidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderSpacing_( string spacing ) {
			RuntimeObject ___occuredException;
			var ___wrappedspacing = Runtime.CreateStringProxy( spacing );
			NativeMethods.setBorderSpacing_( Handle, CachedSelectors.setBorderSpacing_, out ___occuredException, sizeof( IntPtr ), ___wrappedspacing );
			Runtime.ReleaseNativeObject( ___wrappedspacing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderStyle_( string style ) {
			RuntimeObject ___occuredException;
			var ___wrappedstyle = Runtime.CreateStringProxy( style );
			NativeMethods.setBorderStyle_( Handle, CachedSelectors.setBorderStyle_, out ___occuredException, sizeof( IntPtr ), ___wrappedstyle );
			Runtime.ReleaseNativeObject( ___wrappedstyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderTop_( string top ) {
			RuntimeObject ___occuredException;
			var ___wrappedtop = Runtime.CreateStringProxy( top );
			NativeMethods.setBorderTop_( Handle, CachedSelectors.setBorderTop_, out ___occuredException, sizeof( IntPtr ), ___wrappedtop );
			Runtime.ReleaseNativeObject( ___wrappedtop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderTopColor_( string color ) {
			RuntimeObject ___occuredException;
			var ___wrappedcolor = Runtime.CreateStringProxy( color );
			NativeMethods.setBorderTopColor_( Handle, CachedSelectors.setBorderTopColor_, out ___occuredException, sizeof( IntPtr ), ___wrappedcolor );
			Runtime.ReleaseNativeObject( ___wrappedcolor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderTopStyle_( string style ) {
			RuntimeObject ___occuredException;
			var ___wrappedstyle = Runtime.CreateStringProxy( style );
			NativeMethods.setBorderTopStyle_( Handle, CachedSelectors.setBorderTopStyle_, out ___occuredException, sizeof( IntPtr ), ___wrappedstyle );
			Runtime.ReleaseNativeObject( ___wrappedstyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderTopWidth_( string width ) {
			RuntimeObject ___occuredException;
			var ___wrappedwidth = Runtime.CreateStringProxy( width );
			NativeMethods.setBorderTopWidth_( Handle, CachedSelectors.setBorderTopWidth_, out ___occuredException, sizeof( IntPtr ), ___wrappedwidth );
			Runtime.ReleaseNativeObject( ___wrappedwidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorderWidth_( string width ) {
			RuntimeObject ___occuredException;
			var ___wrappedwidth = Runtime.CreateStringProxy( width );
			NativeMethods.setBorderWidth_( Handle, CachedSelectors.setBorderWidth_, out ___occuredException, sizeof( IntPtr ), ___wrappedwidth );
			Runtime.ReleaseNativeObject( ___wrappedwidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBottom_( string bottom ) {
			RuntimeObject ___occuredException;
			var ___wrappedbottom = Runtime.CreateStringProxy( bottom );
			NativeMethods.setBottom_( Handle, CachedSelectors.setBottom_, out ___occuredException, sizeof( IntPtr ), ___wrappedbottom );
			Runtime.ReleaseNativeObject( ___wrappedbottom );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCaptionSide_( string side ) {
			RuntimeObject ___occuredException;
			var ___wrappedside = Runtime.CreateStringProxy( side );
			NativeMethods.setCaptionSide_( Handle, CachedSelectors.setCaptionSide_, out ___occuredException, sizeof( IntPtr ), ___wrappedside );
			Runtime.ReleaseNativeObject( ___wrappedside );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setClear_( string clear ) {
			RuntimeObject ___occuredException;
			var ___wrappedclear = Runtime.CreateStringProxy( clear );
			NativeMethods.setClear_( Handle, CachedSelectors.setClear_, out ___occuredException, sizeof( IntPtr ), ___wrappedclear );
			Runtime.ReleaseNativeObject( ___wrappedclear );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setClip_( string clip ) {
			RuntimeObject ___occuredException;
			var ___wrappedclip = Runtime.CreateStringProxy( clip );
			NativeMethods.setClip_( Handle, CachedSelectors.setClip_, out ___occuredException, sizeof( IntPtr ), ___wrappedclip );
			Runtime.ReleaseNativeObject( ___wrappedclip );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setColor_( string color ) {
			RuntimeObject ___occuredException;
			var ___wrappedcolor = Runtime.CreateStringProxy( color );
			NativeMethods.setColor_( Handle, CachedSelectors.setColor_, out ___occuredException, sizeof( IntPtr ), ___wrappedcolor );
			Runtime.ReleaseNativeObject( ___wrappedcolor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setContent_( string content ) {
			RuntimeObject ___occuredException;
			var ___wrappedcontent = Runtime.CreateStringProxy( content );
			NativeMethods.setContent_( Handle, CachedSelectors.setContent_, out ___occuredException, sizeof( IntPtr ), ___wrappedcontent );
			Runtime.ReleaseNativeObject( ___wrappedcontent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCounterIncrement_( string increment ) {
			RuntimeObject ___occuredException;
			var ___wrappedincrement = Runtime.CreateStringProxy( increment );
			NativeMethods.setCounterIncrement_( Handle, CachedSelectors.setCounterIncrement_, out ___occuredException, sizeof( IntPtr ), ___wrappedincrement );
			Runtime.ReleaseNativeObject( ___wrappedincrement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCounterReset_( string reset ) {
			RuntimeObject ___occuredException;
			var ___wrappedreset = Runtime.CreateStringProxy( reset );
			NativeMethods.setCounterReset_( Handle, CachedSelectors.setCounterReset_, out ___occuredException, sizeof( IntPtr ), ___wrappedreset );
			Runtime.ReleaseNativeObject( ___wrappedreset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCssFloat_( string @float ) {
			RuntimeObject ___occuredException;
			var ___wrappedfloat = Runtime.CreateStringProxy( @float );
			NativeMethods.setCssFloat_( Handle, CachedSelectors.setCssFloat_, out ___occuredException, sizeof( IntPtr ), ___wrappedfloat );
			Runtime.ReleaseNativeObject( ___wrappedfloat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCssText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCssText_( Handle, CachedSelectors.setCssText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCue_( string cue ) {
			RuntimeObject ___occuredException;
			var ___wrappedcue = Runtime.CreateStringProxy( cue );
			NativeMethods.setCue_( Handle, CachedSelectors.setCue_, out ___occuredException, sizeof( IntPtr ), ___wrappedcue );
			Runtime.ReleaseNativeObject( ___wrappedcue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCueAfter_( string after ) {
			RuntimeObject ___occuredException;
			var ___wrappedafter = Runtime.CreateStringProxy( after );
			NativeMethods.setCueAfter_( Handle, CachedSelectors.setCueAfter_, out ___occuredException, sizeof( IntPtr ), ___wrappedafter );
			Runtime.ReleaseNativeObject( ___wrappedafter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCueBefore_( string before ) {
			RuntimeObject ___occuredException;
			var ___wrappedbefore = Runtime.CreateStringProxy( before );
			NativeMethods.setCueBefore_( Handle, CachedSelectors.setCueBefore_, out ___occuredException, sizeof( IntPtr ), ___wrappedbefore );
			Runtime.ReleaseNativeObject( ___wrappedbefore );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCursor_( string cursor ) {
			RuntimeObject ___occuredException;
			var ___wrappedcursor = Runtime.CreateStringProxy( cursor );
			NativeMethods.setCursor_( Handle, CachedSelectors.setCursor_, out ___occuredException, sizeof( IntPtr ), ___wrappedcursor );
			Runtime.ReleaseNativeObject( ___wrappedcursor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDirection_( string direction ) {
			RuntimeObject ___occuredException;
			var ___wrappeddirection = Runtime.CreateStringProxy( direction );
			NativeMethods.setDirection_( Handle, CachedSelectors.setDirection_, out ___occuredException, sizeof( IntPtr ), ___wrappeddirection );
			Runtime.ReleaseNativeObject( ___wrappeddirection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisplay_( string display ) {
			RuntimeObject ___occuredException;
			var ___wrappeddisplay = Runtime.CreateStringProxy( display );
			NativeMethods.setDisplay_( Handle, CachedSelectors.setDisplay_, out ___occuredException, sizeof( IntPtr ), ___wrappeddisplay );
			Runtime.ReleaseNativeObject( ___wrappeddisplay );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setElevation_( string elevation ) {
			RuntimeObject ___occuredException;
			var ___wrappedelevation = Runtime.CreateStringProxy( elevation );
			NativeMethods.setElevation_( Handle, CachedSelectors.setElevation_, out ___occuredException, sizeof( IntPtr ), ___wrappedelevation );
			Runtime.ReleaseNativeObject( ___wrappedelevation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEmptyCells_( string cells ) {
			RuntimeObject ___occuredException;
			var ___wrappedcells = Runtime.CreateStringProxy( cells );
			NativeMethods.setEmptyCells_( Handle, CachedSelectors.setEmptyCells_, out ___occuredException, sizeof( IntPtr ), ___wrappedcells );
			Runtime.ReleaseNativeObject( ___wrappedcells );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFont_( string font ) {
			RuntimeObject ___occuredException;
			var ___wrappedfont = Runtime.CreateStringProxy( font );
			NativeMethods.setFont_( Handle, CachedSelectors.setFont_, out ___occuredException, sizeof( IntPtr ), ___wrappedfont );
			Runtime.ReleaseNativeObject( ___wrappedfont );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFontFamily_( string family ) {
			RuntimeObject ___occuredException;
			var ___wrappedfamily = Runtime.CreateStringProxy( family );
			NativeMethods.setFontFamily_( Handle, CachedSelectors.setFontFamily_, out ___occuredException, sizeof( IntPtr ), ___wrappedfamily );
			Runtime.ReleaseNativeObject( ___wrappedfamily );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFontSize_( string size ) {
			RuntimeObject ___occuredException;
			var ___wrappedsize = Runtime.CreateStringProxy( size );
			NativeMethods.setFontSize_( Handle, CachedSelectors.setFontSize_, out ___occuredException, sizeof( IntPtr ), ___wrappedsize );
			Runtime.ReleaseNativeObject( ___wrappedsize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFontSizeAdjust_( string adjust ) {
			RuntimeObject ___occuredException;
			var ___wrappedadjust = Runtime.CreateStringProxy( adjust );
			NativeMethods.setFontSizeAdjust_( Handle, CachedSelectors.setFontSizeAdjust_, out ___occuredException, sizeof( IntPtr ), ___wrappedadjust );
			Runtime.ReleaseNativeObject( ___wrappedadjust );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFontStretch_( string stretch ) {
			RuntimeObject ___occuredException;
			var ___wrappedstretch = Runtime.CreateStringProxy( stretch );
			NativeMethods.setFontStretch_( Handle, CachedSelectors.setFontStretch_, out ___occuredException, sizeof( IntPtr ), ___wrappedstretch );
			Runtime.ReleaseNativeObject( ___wrappedstretch );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFontStyle_( string style ) {
			RuntimeObject ___occuredException;
			var ___wrappedstyle = Runtime.CreateStringProxy( style );
			NativeMethods.setFontStyle_( Handle, CachedSelectors.setFontStyle_, out ___occuredException, sizeof( IntPtr ), ___wrappedstyle );
			Runtime.ReleaseNativeObject( ___wrappedstyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFontVariant_( string variant ) {
			RuntimeObject ___occuredException;
			var ___wrappedvariant = Runtime.CreateStringProxy( variant );
			NativeMethods.setFontVariant_( Handle, CachedSelectors.setFontVariant_, out ___occuredException, sizeof( IntPtr ), ___wrappedvariant );
			Runtime.ReleaseNativeObject( ___wrappedvariant );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFontWeight_( string weight ) {
			RuntimeObject ___occuredException;
			var ___wrappedweight = Runtime.CreateStringProxy( weight );
			NativeMethods.setFontWeight_( Handle, CachedSelectors.setFontWeight_, out ___occuredException, sizeof( IntPtr ), ___wrappedweight );
			Runtime.ReleaseNativeObject( ___wrappedweight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHeight_( string height ) {
			RuntimeObject ___occuredException;
			var ___wrappedheight = Runtime.CreateStringProxy( height );
			NativeMethods.setHeight_( Handle, CachedSelectors.setHeight_, out ___occuredException, sizeof( IntPtr ), ___wrappedheight );
			Runtime.ReleaseNativeObject( ___wrappedheight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLeft_( string left ) {
			RuntimeObject ___occuredException;
			var ___wrappedleft = Runtime.CreateStringProxy( left );
			NativeMethods.setLeft_( Handle, CachedSelectors.setLeft_, out ___occuredException, sizeof( IntPtr ), ___wrappedleft );
			Runtime.ReleaseNativeObject( ___wrappedleft );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLetterSpacing_( string spacing ) {
			RuntimeObject ___occuredException;
			var ___wrappedspacing = Runtime.CreateStringProxy( spacing );
			NativeMethods.setLetterSpacing_( Handle, CachedSelectors.setLetterSpacing_, out ___occuredException, sizeof( IntPtr ), ___wrappedspacing );
			Runtime.ReleaseNativeObject( ___wrappedspacing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLineHeight_( string height ) {
			RuntimeObject ___occuredException;
			var ___wrappedheight = Runtime.CreateStringProxy( height );
			NativeMethods.setLineHeight_( Handle, CachedSelectors.setLineHeight_, out ___occuredException, sizeof( IntPtr ), ___wrappedheight );
			Runtime.ReleaseNativeObject( ___wrappedheight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setListStyle_( string style ) {
			RuntimeObject ___occuredException;
			var ___wrappedstyle = Runtime.CreateStringProxy( style );
			NativeMethods.setListStyle_( Handle, CachedSelectors.setListStyle_, out ___occuredException, sizeof( IntPtr ), ___wrappedstyle );
			Runtime.ReleaseNativeObject( ___wrappedstyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setListStyleImage_( string image ) {
			RuntimeObject ___occuredException;
			var ___wrappedimage = Runtime.CreateStringProxy( image );
			NativeMethods.setListStyleImage_( Handle, CachedSelectors.setListStyleImage_, out ___occuredException, sizeof( IntPtr ), ___wrappedimage );
			Runtime.ReleaseNativeObject( ___wrappedimage );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setListStylePosition_( string position ) {
			RuntimeObject ___occuredException;
			var ___wrappedposition = Runtime.CreateStringProxy( position );
			NativeMethods.setListStylePosition_( Handle, CachedSelectors.setListStylePosition_, out ___occuredException, sizeof( IntPtr ), ___wrappedposition );
			Runtime.ReleaseNativeObject( ___wrappedposition );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setListStyleType_( string type ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			NativeMethods.setListStyleType_( Handle, CachedSelectors.setListStyleType_, out ___occuredException, sizeof( IntPtr ), ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMargin_( string margin ) {
			RuntimeObject ___occuredException;
			var ___wrappedmargin = Runtime.CreateStringProxy( margin );
			NativeMethods.setMargin_( Handle, CachedSelectors.setMargin_, out ___occuredException, sizeof( IntPtr ), ___wrappedmargin );
			Runtime.ReleaseNativeObject( ___wrappedmargin );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarginBottom_( string bottom ) {
			RuntimeObject ___occuredException;
			var ___wrappedbottom = Runtime.CreateStringProxy( bottom );
			NativeMethods.setMarginBottom_( Handle, CachedSelectors.setMarginBottom_, out ___occuredException, sizeof( IntPtr ), ___wrappedbottom );
			Runtime.ReleaseNativeObject( ___wrappedbottom );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarginLeft_( string left ) {
			RuntimeObject ___occuredException;
			var ___wrappedleft = Runtime.CreateStringProxy( left );
			NativeMethods.setMarginLeft_( Handle, CachedSelectors.setMarginLeft_, out ___occuredException, sizeof( IntPtr ), ___wrappedleft );
			Runtime.ReleaseNativeObject( ___wrappedleft );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarginRight_( string right ) {
			RuntimeObject ___occuredException;
			var ___wrappedright = Runtime.CreateStringProxy( right );
			NativeMethods.setMarginRight_( Handle, CachedSelectors.setMarginRight_, out ___occuredException, sizeof( IntPtr ), ___wrappedright );
			Runtime.ReleaseNativeObject( ___wrappedright );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarginTop_( string top ) {
			RuntimeObject ___occuredException;
			var ___wrappedtop = Runtime.CreateStringProxy( top );
			NativeMethods.setMarginTop_( Handle, CachedSelectors.setMarginTop_, out ___occuredException, sizeof( IntPtr ), ___wrappedtop );
			Runtime.ReleaseNativeObject( ___wrappedtop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarkerOffset_( string offset ) {
			RuntimeObject ___occuredException;
			var ___wrappedoffset = Runtime.CreateStringProxy( offset );
			NativeMethods.setMarkerOffset_( Handle, CachedSelectors.setMarkerOffset_, out ___occuredException, sizeof( IntPtr ), ___wrappedoffset );
			Runtime.ReleaseNativeObject( ___wrappedoffset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarks_( string marks ) {
			RuntimeObject ___occuredException;
			var ___wrappedmarks = Runtime.CreateStringProxy( marks );
			NativeMethods.setMarks_( Handle, CachedSelectors.setMarks_, out ___occuredException, sizeof( IntPtr ), ___wrappedmarks );
			Runtime.ReleaseNativeObject( ___wrappedmarks );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMaxHeight_( string height ) {
			RuntimeObject ___occuredException;
			var ___wrappedheight = Runtime.CreateStringProxy( height );
			NativeMethods.setMaxHeight_( Handle, CachedSelectors.setMaxHeight_, out ___occuredException, sizeof( IntPtr ), ___wrappedheight );
			Runtime.ReleaseNativeObject( ___wrappedheight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMaxWidth_( string width ) {
			RuntimeObject ___occuredException;
			var ___wrappedwidth = Runtime.CreateStringProxy( width );
			NativeMethods.setMaxWidth_( Handle, CachedSelectors.setMaxWidth_, out ___occuredException, sizeof( IntPtr ), ___wrappedwidth );
			Runtime.ReleaseNativeObject( ___wrappedwidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinHeight_( string height ) {
			RuntimeObject ___occuredException;
			var ___wrappedheight = Runtime.CreateStringProxy( height );
			NativeMethods.setMinHeight_( Handle, CachedSelectors.setMinHeight_, out ___occuredException, sizeof( IntPtr ), ___wrappedheight );
			Runtime.ReleaseNativeObject( ___wrappedheight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinWidth_( string width ) {
			RuntimeObject ___occuredException;
			var ___wrappedwidth = Runtime.CreateStringProxy( width );
			NativeMethods.setMinWidth_( Handle, CachedSelectors.setMinWidth_, out ___occuredException, sizeof( IntPtr ), ___wrappedwidth );
			Runtime.ReleaseNativeObject( ___wrappedwidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOrphans_( string orphans ) {
			RuntimeObject ___occuredException;
			var ___wrappedorphans = Runtime.CreateStringProxy( orphans );
			NativeMethods.setOrphans_( Handle, CachedSelectors.setOrphans_, out ___occuredException, sizeof( IntPtr ), ___wrappedorphans );
			Runtime.ReleaseNativeObject( ___wrappedorphans );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOutline_( string outline ) {
			RuntimeObject ___occuredException;
			var ___wrappedoutline = Runtime.CreateStringProxy( outline );
			NativeMethods.setOutline_( Handle, CachedSelectors.setOutline_, out ___occuredException, sizeof( IntPtr ), ___wrappedoutline );
			Runtime.ReleaseNativeObject( ___wrappedoutline );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOutlineColor_( string color ) {
			RuntimeObject ___occuredException;
			var ___wrappedcolor = Runtime.CreateStringProxy( color );
			NativeMethods.setOutlineColor_( Handle, CachedSelectors.setOutlineColor_, out ___occuredException, sizeof( IntPtr ), ___wrappedcolor );
			Runtime.ReleaseNativeObject( ___wrappedcolor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOutlineStyle_( string style ) {
			RuntimeObject ___occuredException;
			var ___wrappedstyle = Runtime.CreateStringProxy( style );
			NativeMethods.setOutlineStyle_( Handle, CachedSelectors.setOutlineStyle_, out ___occuredException, sizeof( IntPtr ), ___wrappedstyle );
			Runtime.ReleaseNativeObject( ___wrappedstyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOutlineWidth_( string width ) {
			RuntimeObject ___occuredException;
			var ___wrappedwidth = Runtime.CreateStringProxy( width );
			NativeMethods.setOutlineWidth_( Handle, CachedSelectors.setOutlineWidth_, out ___occuredException, sizeof( IntPtr ), ___wrappedwidth );
			Runtime.ReleaseNativeObject( ___wrappedwidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOverflow_( string overflow ) {
			RuntimeObject ___occuredException;
			var ___wrappedoverflow = Runtime.CreateStringProxy( overflow );
			NativeMethods.setOverflow_( Handle, CachedSelectors.setOverflow_, out ___occuredException, sizeof( IntPtr ), ___wrappedoverflow );
			Runtime.ReleaseNativeObject( ___wrappedoverflow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPadding_( string padding ) {
			RuntimeObject ___occuredException;
			var ___wrappedpadding = Runtime.CreateStringProxy( padding );
			NativeMethods.setPadding_( Handle, CachedSelectors.setPadding_, out ___occuredException, sizeof( IntPtr ), ___wrappedpadding );
			Runtime.ReleaseNativeObject( ___wrappedpadding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPaddingBottom_( string bottom ) {
			RuntimeObject ___occuredException;
			var ___wrappedbottom = Runtime.CreateStringProxy( bottom );
			NativeMethods.setPaddingBottom_( Handle, CachedSelectors.setPaddingBottom_, out ___occuredException, sizeof( IntPtr ), ___wrappedbottom );
			Runtime.ReleaseNativeObject( ___wrappedbottom );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPaddingLeft_( string left ) {
			RuntimeObject ___occuredException;
			var ___wrappedleft = Runtime.CreateStringProxy( left );
			NativeMethods.setPaddingLeft_( Handle, CachedSelectors.setPaddingLeft_, out ___occuredException, sizeof( IntPtr ), ___wrappedleft );
			Runtime.ReleaseNativeObject( ___wrappedleft );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPaddingRight_( string right ) {
			RuntimeObject ___occuredException;
			var ___wrappedright = Runtime.CreateStringProxy( right );
			NativeMethods.setPaddingRight_( Handle, CachedSelectors.setPaddingRight_, out ___occuredException, sizeof( IntPtr ), ___wrappedright );
			Runtime.ReleaseNativeObject( ___wrappedright );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPaddingTop_( string top ) {
			RuntimeObject ___occuredException;
			var ___wrappedtop = Runtime.CreateStringProxy( top );
			NativeMethods.setPaddingTop_( Handle, CachedSelectors.setPaddingTop_, out ___occuredException, sizeof( IntPtr ), ___wrappedtop );
			Runtime.ReleaseNativeObject( ___wrappedtop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPage_( string page ) {
			RuntimeObject ___occuredException;
			var ___wrappedpage = Runtime.CreateStringProxy( page );
			NativeMethods.setPage_( Handle, CachedSelectors.setPage_, out ___occuredException, sizeof( IntPtr ), ___wrappedpage );
			Runtime.ReleaseNativeObject( ___wrappedpage );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPageBreakAfter_( string after ) {
			RuntimeObject ___occuredException;
			var ___wrappedafter = Runtime.CreateStringProxy( after );
			NativeMethods.setPageBreakAfter_( Handle, CachedSelectors.setPageBreakAfter_, out ___occuredException, sizeof( IntPtr ), ___wrappedafter );
			Runtime.ReleaseNativeObject( ___wrappedafter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPageBreakBefore_( string before ) {
			RuntimeObject ___occuredException;
			var ___wrappedbefore = Runtime.CreateStringProxy( before );
			NativeMethods.setPageBreakBefore_( Handle, CachedSelectors.setPageBreakBefore_, out ___occuredException, sizeof( IntPtr ), ___wrappedbefore );
			Runtime.ReleaseNativeObject( ___wrappedbefore );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPageBreakInside_( string inside ) {
			RuntimeObject ___occuredException;
			var ___wrappedinside = Runtime.CreateStringProxy( inside );
			NativeMethods.setPageBreakInside_( Handle, CachedSelectors.setPageBreakInside_, out ___occuredException, sizeof( IntPtr ), ___wrappedinside );
			Runtime.ReleaseNativeObject( ___wrappedinside );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPause_( string pause ) {
			RuntimeObject ___occuredException;
			var ___wrappedpause = Runtime.CreateStringProxy( pause );
			NativeMethods.setPause_( Handle, CachedSelectors.setPause_, out ___occuredException, sizeof( IntPtr ), ___wrappedpause );
			Runtime.ReleaseNativeObject( ___wrappedpause );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPauseAfter_( string after ) {
			RuntimeObject ___occuredException;
			var ___wrappedafter = Runtime.CreateStringProxy( after );
			NativeMethods.setPauseAfter_( Handle, CachedSelectors.setPauseAfter_, out ___occuredException, sizeof( IntPtr ), ___wrappedafter );
			Runtime.ReleaseNativeObject( ___wrappedafter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPauseBefore_( string before ) {
			RuntimeObject ___occuredException;
			var ___wrappedbefore = Runtime.CreateStringProxy( before );
			NativeMethods.setPauseBefore_( Handle, CachedSelectors.setPauseBefore_, out ___occuredException, sizeof( IntPtr ), ___wrappedbefore );
			Runtime.ReleaseNativeObject( ___wrappedbefore );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPitch_( string pitch ) {
			RuntimeObject ___occuredException;
			var ___wrappedpitch = Runtime.CreateStringProxy( pitch );
			NativeMethods.setPitch_( Handle, CachedSelectors.setPitch_, out ___occuredException, sizeof( IntPtr ), ___wrappedpitch );
			Runtime.ReleaseNativeObject( ___wrappedpitch );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPitchRange_( string range ) {
			RuntimeObject ___occuredException;
			var ___wrappedrange = Runtime.CreateStringProxy( range );
			NativeMethods.setPitchRange_( Handle, CachedSelectors.setPitchRange_, out ___occuredException, sizeof( IntPtr ), ___wrappedrange );
			Runtime.ReleaseNativeObject( ___wrappedrange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPlayDuring_( string during ) {
			RuntimeObject ___occuredException;
			var ___wrappedduring = Runtime.CreateStringProxy( during );
			NativeMethods.setPlayDuring_( Handle, CachedSelectors.setPlayDuring_, out ___occuredException, sizeof( IntPtr ), ___wrappedduring );
			Runtime.ReleaseNativeObject( ___wrappedduring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPosition_( string position ) {
			RuntimeObject ___occuredException;
			var ___wrappedposition = Runtime.CreateStringProxy( position );
			NativeMethods.setPosition_( Handle, CachedSelectors.setPosition_, out ___occuredException, sizeof( IntPtr ), ___wrappedposition );
			Runtime.ReleaseNativeObject( ___wrappedposition );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProperty___( string property, string unnamedParameter, string unnamedParameter2 ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___wrappedunnamedParameter2 = Runtime.CreateStringProxy( unnamedParameter2 );
			NativeMethods.setProperty___( Handle, CachedSelectors.setProperty___, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedproperty, ___wrappedunnamedParameter, ___wrappedunnamedParameter2 );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProperty_value_priority_( string property, string value, string priority ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			var ___wrappedpriority = Runtime.CreateStringProxy( priority );
			NativeMethods.setProperty_value_priority_( Handle, CachedSelectors.setProperty_value_priority_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedproperty, ___wrappedvalue, ___wrappedpriority );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedpriority );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setQuotes_( string quotes ) {
			RuntimeObject ___occuredException;
			var ___wrappedquotes = Runtime.CreateStringProxy( quotes );
			NativeMethods.setQuotes_( Handle, CachedSelectors.setQuotes_, out ___occuredException, sizeof( IntPtr ), ___wrappedquotes );
			Runtime.ReleaseNativeObject( ___wrappedquotes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRichness_( string richness ) {
			RuntimeObject ___occuredException;
			var ___wrappedrichness = Runtime.CreateStringProxy( richness );
			NativeMethods.setRichness_( Handle, CachedSelectors.setRichness_, out ___occuredException, sizeof( IntPtr ), ___wrappedrichness );
			Runtime.ReleaseNativeObject( ___wrappedrichness );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRight_( string right ) {
			RuntimeObject ___occuredException;
			var ___wrappedright = Runtime.CreateStringProxy( right );
			NativeMethods.setRight_( Handle, CachedSelectors.setRight_, out ___occuredException, sizeof( IntPtr ), ___wrappedright );
			Runtime.ReleaseNativeObject( ___wrappedright );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSize_( string size ) {
			RuntimeObject ___occuredException;
			var ___wrappedsize = Runtime.CreateStringProxy( size );
			NativeMethods.setSize_( Handle, CachedSelectors.setSize_, out ___occuredException, sizeof( IntPtr ), ___wrappedsize );
			Runtime.ReleaseNativeObject( ___wrappedsize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSpeak_( string speak ) {
			RuntimeObject ___occuredException;
			var ___wrappedspeak = Runtime.CreateStringProxy( speak );
			NativeMethods.setSpeak_( Handle, CachedSelectors.setSpeak_, out ___occuredException, sizeof( IntPtr ), ___wrappedspeak );
			Runtime.ReleaseNativeObject( ___wrappedspeak );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSpeakHeader_( string header ) {
			RuntimeObject ___occuredException;
			var ___wrappedheader = Runtime.CreateStringProxy( header );
			NativeMethods.setSpeakHeader_( Handle, CachedSelectors.setSpeakHeader_, out ___occuredException, sizeof( IntPtr ), ___wrappedheader );
			Runtime.ReleaseNativeObject( ___wrappedheader );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSpeakNumeral_( string numeral ) {
			RuntimeObject ___occuredException;
			var ___wrappednumeral = Runtime.CreateStringProxy( numeral );
			NativeMethods.setSpeakNumeral_( Handle, CachedSelectors.setSpeakNumeral_, out ___occuredException, sizeof( IntPtr ), ___wrappednumeral );
			Runtime.ReleaseNativeObject( ___wrappednumeral );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSpeakPunctuation_( string punctuation ) {
			RuntimeObject ___occuredException;
			var ___wrappedpunctuation = Runtime.CreateStringProxy( punctuation );
			NativeMethods.setSpeakPunctuation_( Handle, CachedSelectors.setSpeakPunctuation_, out ___occuredException, sizeof( IntPtr ), ___wrappedpunctuation );
			Runtime.ReleaseNativeObject( ___wrappedpunctuation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSpeechRate_( string rate ) {
			RuntimeObject ___occuredException;
			var ___wrappedrate = Runtime.CreateStringProxy( rate );
			NativeMethods.setSpeechRate_( Handle, CachedSelectors.setSpeechRate_, out ___occuredException, sizeof( IntPtr ), ___wrappedrate );
			Runtime.ReleaseNativeObject( ___wrappedrate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStress_( string stress ) {
			RuntimeObject ___occuredException;
			var ___wrappedstress = Runtime.CreateStringProxy( stress );
			NativeMethods.setStress_( Handle, CachedSelectors.setStress_, out ___occuredException, sizeof( IntPtr ), ___wrappedstress );
			Runtime.ReleaseNativeObject( ___wrappedstress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTableLayout_( string layout ) {
			RuntimeObject ___occuredException;
			var ___wrappedlayout = Runtime.CreateStringProxy( layout );
			NativeMethods.setTableLayout_( Handle, CachedSelectors.setTableLayout_, out ___occuredException, sizeof( IntPtr ), ___wrappedlayout );
			Runtime.ReleaseNativeObject( ___wrappedlayout );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextAlign_( string align ) {
			RuntimeObject ___occuredException;
			var ___wrappedalign = Runtime.CreateStringProxy( align );
			NativeMethods.setTextAlign_( Handle, CachedSelectors.setTextAlign_, out ___occuredException, sizeof( IntPtr ), ___wrappedalign );
			Runtime.ReleaseNativeObject( ___wrappedalign );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextDecoration_( string decoration ) {
			RuntimeObject ___occuredException;
			var ___wrappeddecoration = Runtime.CreateStringProxy( decoration );
			NativeMethods.setTextDecoration_( Handle, CachedSelectors.setTextDecoration_, out ___occuredException, sizeof( IntPtr ), ___wrappeddecoration );
			Runtime.ReleaseNativeObject( ___wrappeddecoration );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextIndent_( string indent ) {
			RuntimeObject ___occuredException;
			var ___wrappedindent = Runtime.CreateStringProxy( indent );
			NativeMethods.setTextIndent_( Handle, CachedSelectors.setTextIndent_, out ___occuredException, sizeof( IntPtr ), ___wrappedindent );
			Runtime.ReleaseNativeObject( ___wrappedindent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextShadow_( string shadow ) {
			RuntimeObject ___occuredException;
			var ___wrappedshadow = Runtime.CreateStringProxy( shadow );
			NativeMethods.setTextShadow_( Handle, CachedSelectors.setTextShadow_, out ___occuredException, sizeof( IntPtr ), ___wrappedshadow );
			Runtime.ReleaseNativeObject( ___wrappedshadow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextTransform_( string transform ) {
			RuntimeObject ___occuredException;
			var ___wrappedtransform = Runtime.CreateStringProxy( transform );
			NativeMethods.setTextTransform_( Handle, CachedSelectors.setTextTransform_, out ___occuredException, sizeof( IntPtr ), ___wrappedtransform );
			Runtime.ReleaseNativeObject( ___wrappedtransform );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTop_( string top ) {
			RuntimeObject ___occuredException;
			var ___wrappedtop = Runtime.CreateStringProxy( top );
			NativeMethods.setTop_( Handle, CachedSelectors.setTop_, out ___occuredException, sizeof( IntPtr ), ___wrappedtop );
			Runtime.ReleaseNativeObject( ___wrappedtop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUnicodeBidi_( string bidi ) {
			RuntimeObject ___occuredException;
			var ___wrappedbidi = Runtime.CreateStringProxy( bidi );
			NativeMethods.setUnicodeBidi_( Handle, CachedSelectors.setUnicodeBidi_, out ___occuredException, sizeof( IntPtr ), ___wrappedbidi );
			Runtime.ReleaseNativeObject( ___wrappedbidi );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVerticalAlign_( string align ) {
			RuntimeObject ___occuredException;
			var ___wrappedalign = Runtime.CreateStringProxy( align );
			NativeMethods.setVerticalAlign_( Handle, CachedSelectors.setVerticalAlign_, out ___occuredException, sizeof( IntPtr ), ___wrappedalign );
			Runtime.ReleaseNativeObject( ___wrappedalign );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVisibility_( string visibility ) {
			RuntimeObject ___occuredException;
			var ___wrappedvisibility = Runtime.CreateStringProxy( visibility );
			NativeMethods.setVisibility_( Handle, CachedSelectors.setVisibility_, out ___occuredException, sizeof( IntPtr ), ___wrappedvisibility );
			Runtime.ReleaseNativeObject( ___wrappedvisibility );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVoiceFamily_( string family ) {
			RuntimeObject ___occuredException;
			var ___wrappedfamily = Runtime.CreateStringProxy( family );
			NativeMethods.setVoiceFamily_( Handle, CachedSelectors.setVoiceFamily_, out ___occuredException, sizeof( IntPtr ), ___wrappedfamily );
			Runtime.ReleaseNativeObject( ___wrappedfamily );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVolume_( string volume ) {
			RuntimeObject ___occuredException;
			var ___wrappedvolume = Runtime.CreateStringProxy( volume );
			NativeMethods.setVolume_( Handle, CachedSelectors.setVolume_, out ___occuredException, sizeof( IntPtr ), ___wrappedvolume );
			Runtime.ReleaseNativeObject( ___wrappedvolume );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWhiteSpace_( string space ) {
			RuntimeObject ___occuredException;
			var ___wrappedspace = Runtime.CreateStringProxy( space );
			NativeMethods.setWhiteSpace_( Handle, CachedSelectors.setWhiteSpace_, out ___occuredException, sizeof( IntPtr ), ___wrappedspace );
			Runtime.ReleaseNativeObject( ___wrappedspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidows_( string widows ) {
			RuntimeObject ___occuredException;
			var ___wrappedwidows = Runtime.CreateStringProxy( widows );
			NativeMethods.setWidows_( Handle, CachedSelectors.setWidows_, out ___occuredException, sizeof( IntPtr ), ___wrappedwidows );
			Runtime.ReleaseNativeObject( ___wrappedwidows );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( string width ) {
			RuntimeObject ___occuredException;
			var ___wrappedwidth = Runtime.CreateStringProxy( width );
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( IntPtr ), ___wrappedwidth );
			Runtime.ReleaseNativeObject( ___wrappedwidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWordSpacing_( string spacing ) {
			RuntimeObject ___occuredException;
			var ___wrappedspacing = Runtime.CreateStringProxy( spacing );
			NativeMethods.setWordSpacing_( Handle, CachedSelectors.setWordSpacing_, out ___occuredException, sizeof( IntPtr ), ___wrappedspacing );
			Runtime.ReleaseNativeObject( ___wrappedspacing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setZIndex_( string index ) {
			RuntimeObject ___occuredException;
			var ___wrappedindex = Runtime.CreateStringProxy( index );
			NativeMethods.setZIndex_( Handle, CachedSelectors.setZIndex_, out ___occuredException, sizeof( IntPtr ), ___wrappedindex );
			Runtime.ReleaseNativeObject( ___wrappedindex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string size() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.size( Handle, CachedSelectors.size, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string speak() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.speak( Handle, CachedSelectors.speak, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string speakHeader() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.speakHeader( Handle, CachedSelectors.speakHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string speakNumeral() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.speakNumeral( Handle, CachedSelectors.speakNumeral, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string speakPunctuation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.speakPunctuation( Handle, CachedSelectors.speakPunctuation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string speechRate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.speechRate( Handle, CachedSelectors.speechRate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string stress() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stress( Handle, CachedSelectors.stress, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string tableLayout() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableLayout( Handle, CachedSelectors.tableLayout, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string textAlign() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textAlign( Handle, CachedSelectors.textAlign, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string textDecoration() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textDecoration( Handle, CachedSelectors.textDecoration, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string textIndent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textIndent( Handle, CachedSelectors.textIndent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string textShadow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textShadow( Handle, CachedSelectors.textShadow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string textTransform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textTransform( Handle, CachedSelectors.textTransform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string top() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.top( Handle, CachedSelectors.top, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string unicodeBidi() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unicodeBidi( Handle, CachedSelectors.unicodeBidi, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string verticalAlign() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.verticalAlign( Handle, CachedSelectors.verticalAlign, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string visibility() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.visibility( Handle, CachedSelectors.visibility, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string voiceFamily() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.voiceFamily( Handle, CachedSelectors.voiceFamily, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string volume() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.volume( Handle, CachedSelectors.volume, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string whiteSpace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.whiteSpace( Handle, CachedSelectors.whiteSpace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string widows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.widows( Handle, CachedSelectors.widows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string wordSpacing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wordSpacing( Handle, CachedSelectors.wordSpacing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string zIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.zIndex( Handle, CachedSelectors.zIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject cssText {
				get { return _handle.cssText(); }
			}
			public uint length {
				get { return _handle.length(); }
			}
			public NObjective.RuntimeObject parentRule {
				get { return _handle.parentRule(); }
			}
			private readonly DOMCSSStyleDeclaration _handle;
			public ObjectiveCPropertyImplementation( DOMCSSStyleDeclaration value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr azimuth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr background( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backgroundAttachment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backgroundColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backgroundImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backgroundPosition( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backgroundRepeat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr border( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderBottom( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderBottomColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderBottomStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderBottomWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderCollapse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderLeft( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderLeftColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderLeftStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderLeftWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderRight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderRightColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderRightStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderRightWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderSpacing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderTop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderTopColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderTopStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderTopWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr borderWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bottom( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr captionSide( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr clip( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr color( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr content( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr counterIncrement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr counterReset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cssFloat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cssText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cueAfter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cueBefore( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cursor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr direction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr display( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elevation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr emptyCells( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr font( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fontFamily( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fontSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fontSizeAdjust( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fontStretch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fontStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fontVariant( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fontWeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPropertyCSSValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPropertyPriority_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr priority );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPropertyShorthand_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr shorthand );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPropertyValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPropertyImplicit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @implicit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr left( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr letterSpacing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lineHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr listStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr listStyleImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr listStylePosition( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr listStyleType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr margin( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr marginBottom( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr marginLeft( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr marginRight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr marginTop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr markerOffset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr marks( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr maxHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr maxWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr minHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr minWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orphans( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outline( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outlineColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outlineStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outlineWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr overflow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr padding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr paddingBottom( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr paddingLeft( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr paddingRight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr paddingTop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr page( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pageBreakAfter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pageBreakBefore( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pageBreakInside( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentRule( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pause( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pauseAfter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pauseBefore( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pitch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pitchRange( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr playDuring( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr position( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr quotes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr richness( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr right( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAzimuth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr azimuth );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBackground_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr background );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBackgroundAttachment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attachment );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBackgroundColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBackgroundImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBackgroundPosition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr position );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBackgroundRepeat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr repeat );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr border );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderBottom_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bottom );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderBottomColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderBottomStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderBottomWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderCollapse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr collapse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderLeftColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderLeftStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderLeftWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderRight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr right );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderRightColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderRightStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderRightWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderSpacing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr spacing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderTop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr top );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderTopColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderTopStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderTopWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorderWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBottom_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bottom );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCaptionSide_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr side );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setClear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr clear );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setClip_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr clip );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr content );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCounterIncrement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr increment );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCounterReset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr reset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCssFloat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @float );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCssText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr cue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCueAfter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr after );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCueBefore_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr before );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCursor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr cursor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDirection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr direction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisplay_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr display );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setElevation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr elevation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEmptyCells_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr cells );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFont_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr font );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFontFamily_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr family );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFontSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFontSizeAdjust_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr adjust );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFontStretch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr stretch );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFontStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFontVariant_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr variant );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFontWeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr weight );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLetterSpacing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr spacing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLineHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setListStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setListStyleImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setListStylePosition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr position );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setListStyleType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMargin_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr margin );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarginBottom_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bottom );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarginLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarginRight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr right );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarginTop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr top );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarkerOffset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr offset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarks_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr marks );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMaxHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMaxWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOrphans_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr orphans );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOutline_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr outline );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOutlineColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOutlineStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOutlineWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOverflow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr overflow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPadding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr padding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPaddingBottom_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bottom );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPaddingLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPaddingRight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr right );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPaddingTop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr top );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr page );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPageBreakAfter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr after );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPageBreakBefore_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr before );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPageBreakInside_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr inside );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPause_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr pause );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPauseAfter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr after );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPauseBefore_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr before );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPitch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr pitch );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPitchRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPlayDuring_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr during );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPosition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr position );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProperty___( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property, IntPtr unnamedParameter, IntPtr unnamedParameter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProperty_value_priority_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property, IntPtr value, IntPtr priority );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setQuotes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr quotes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRichness_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr richness );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr right );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSpeak_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr speak );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSpeakHeader_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr header );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSpeakNumeral_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr numeral );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSpeakPunctuation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr punctuation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSpeechRate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr rate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr stress );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTableLayout_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr layout );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextDecoration_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr decoration );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextIndent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr indent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextShadow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr shadow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextTransform_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr transform );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr top );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUnicodeBidi_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bidi );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVerticalAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVisibility_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr visibility );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVoiceFamily_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr family );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVolume_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr volume );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWhiteSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr space );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidows_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr widows );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWordSpacing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr spacing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setZIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr size( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr speak( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr speakHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr speakNumeral( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr speakPunctuation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr speechRate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stress( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tableLayout( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textAlign( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textDecoration( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textIndent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textShadow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textTransform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr top( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr unicodeBidi( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr verticalAlign( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr visibility( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr voiceFamily( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr volume( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr whiteSpace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr widows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr wordSpacing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr zIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector azimuth = "azimuth";
			public static readonly Selector background = "background";
			public static readonly Selector backgroundAttachment = "backgroundAttachment";
			public static readonly Selector backgroundColor = "backgroundColor";
			public static readonly Selector backgroundImage = "backgroundImage";
			public static readonly Selector backgroundPosition = "backgroundPosition";
			public static readonly Selector backgroundRepeat = "backgroundRepeat";
			public static readonly Selector border = "border";
			public static readonly Selector borderBottom = "borderBottom";
			public static readonly Selector borderBottomColor = "borderBottomColor";
			public static readonly Selector borderBottomStyle = "borderBottomStyle";
			public static readonly Selector borderBottomWidth = "borderBottomWidth";
			public static readonly Selector borderCollapse = "borderCollapse";
			public static readonly Selector borderColor = "borderColor";
			public static readonly Selector borderLeft = "borderLeft";
			public static readonly Selector borderLeftColor = "borderLeftColor";
			public static readonly Selector borderLeftStyle = "borderLeftStyle";
			public static readonly Selector borderLeftWidth = "borderLeftWidth";
			public static readonly Selector borderRight = "borderRight";
			public static readonly Selector borderRightColor = "borderRightColor";
			public static readonly Selector borderRightStyle = "borderRightStyle";
			public static readonly Selector borderRightWidth = "borderRightWidth";
			public static readonly Selector borderSpacing = "borderSpacing";
			public static readonly Selector borderStyle = "borderStyle";
			public static readonly Selector borderTop = "borderTop";
			public static readonly Selector borderTopColor = "borderTopColor";
			public static readonly Selector borderTopStyle = "borderTopStyle";
			public static readonly Selector borderTopWidth = "borderTopWidth";
			public static readonly Selector borderWidth = "borderWidth";
			public static readonly Selector bottom = "bottom";
			public static readonly Selector captionSide = "captionSide";
			public static readonly Selector clear = "clear";
			public static readonly Selector clip = "clip";
			public static readonly Selector color = "color";
			public static readonly Selector content = "content";
			public static readonly Selector counterIncrement = "counterIncrement";
			public static readonly Selector counterReset = "counterReset";
			public static readonly Selector cssFloat = "cssFloat";
			public static readonly Selector cssText = "cssText";
			public static readonly Selector cue = "cue";
			public static readonly Selector cueAfter = "cueAfter";
			public static readonly Selector cueBefore = "cueBefore";
			public static readonly Selector cursor = "cursor";
			public static readonly Selector direction = "direction";
			public static readonly Selector display = "display";
			public static readonly Selector elevation = "elevation";
			public static readonly Selector emptyCells = "emptyCells";
			public static readonly Selector font = "font";
			public static readonly Selector fontFamily = "fontFamily";
			public static readonly Selector fontSize = "fontSize";
			public static readonly Selector fontSizeAdjust = "fontSizeAdjust";
			public static readonly Selector fontStretch = "fontStretch";
			public static readonly Selector fontStyle = "fontStyle";
			public static readonly Selector fontVariant = "fontVariant";
			public static readonly Selector fontWeight = "fontWeight";
			public static readonly Selector getPropertyCSSValue_ = "getPropertyCSSValue:";
			public static readonly Selector getPropertyPriority_ = "getPropertyPriority:";
			public static readonly Selector getPropertyShorthand_ = "getPropertyShorthand:";
			public static readonly Selector getPropertyValue_ = "getPropertyValue:";
			public static readonly Selector height = "height";
			public static readonly Selector isPropertyImplicit_ = "isPropertyImplicit:";
			public static readonly Selector item_ = "item:";
			public static readonly Selector left = "left";
			public static readonly Selector length = "length";
			public static readonly Selector letterSpacing = "letterSpacing";
			public static readonly Selector lineHeight = "lineHeight";
			public static readonly Selector listStyle = "listStyle";
			public static readonly Selector listStyleImage = "listStyleImage";
			public static readonly Selector listStylePosition = "listStylePosition";
			public static readonly Selector listStyleType = "listStyleType";
			public static readonly Selector margin = "margin";
			public static readonly Selector marginBottom = "marginBottom";
			public static readonly Selector marginLeft = "marginLeft";
			public static readonly Selector marginRight = "marginRight";
			public static readonly Selector marginTop = "marginTop";
			public static readonly Selector markerOffset = "markerOffset";
			public static readonly Selector marks = "marks";
			public static readonly Selector maxHeight = "maxHeight";
			public static readonly Selector maxWidth = "maxWidth";
			public static readonly Selector minHeight = "minHeight";
			public static readonly Selector minWidth = "minWidth";
			public static readonly Selector orphans = "orphans";
			public static readonly Selector outline = "outline";
			public static readonly Selector outlineColor = "outlineColor";
			public static readonly Selector outlineStyle = "outlineStyle";
			public static readonly Selector outlineWidth = "outlineWidth";
			public static readonly Selector overflow = "overflow";
			public static readonly Selector padding = "padding";
			public static readonly Selector paddingBottom = "paddingBottom";
			public static readonly Selector paddingLeft = "paddingLeft";
			public static readonly Selector paddingRight = "paddingRight";
			public static readonly Selector paddingTop = "paddingTop";
			public static readonly Selector page = "page";
			public static readonly Selector pageBreakAfter = "pageBreakAfter";
			public static readonly Selector pageBreakBefore = "pageBreakBefore";
			public static readonly Selector pageBreakInside = "pageBreakInside";
			public static readonly Selector parentRule = "parentRule";
			public static readonly Selector pause = "pause";
			public static readonly Selector pauseAfter = "pauseAfter";
			public static readonly Selector pauseBefore = "pauseBefore";
			public static readonly Selector pitch = "pitch";
			public static readonly Selector pitchRange = "pitchRange";
			public static readonly Selector playDuring = "playDuring";
			public static readonly Selector position = "position";
			public static readonly Selector quotes = "quotes";
			public static readonly Selector removeProperty_ = "removeProperty:";
			public static readonly Selector richness = "richness";
			public static readonly Selector right = "right";
			public static readonly Selector setAzimuth_ = "setAzimuth:";
			public static readonly Selector setBackground_ = "setBackground:";
			public static readonly Selector setBackgroundAttachment_ = "setBackgroundAttachment:";
			public static readonly Selector setBackgroundColor_ = "setBackgroundColor:";
			public static readonly Selector setBackgroundImage_ = "setBackgroundImage:";
			public static readonly Selector setBackgroundPosition_ = "setBackgroundPosition:";
			public static readonly Selector setBackgroundRepeat_ = "setBackgroundRepeat:";
			public static readonly Selector setBorder_ = "setBorder:";
			public static readonly Selector setBorderBottom_ = "setBorderBottom:";
			public static readonly Selector setBorderBottomColor_ = "setBorderBottomColor:";
			public static readonly Selector setBorderBottomStyle_ = "setBorderBottomStyle:";
			public static readonly Selector setBorderBottomWidth_ = "setBorderBottomWidth:";
			public static readonly Selector setBorderCollapse_ = "setBorderCollapse:";
			public static readonly Selector setBorderColor_ = "setBorderColor:";
			public static readonly Selector setBorderLeft_ = "setBorderLeft:";
			public static readonly Selector setBorderLeftColor_ = "setBorderLeftColor:";
			public static readonly Selector setBorderLeftStyle_ = "setBorderLeftStyle:";
			public static readonly Selector setBorderLeftWidth_ = "setBorderLeftWidth:";
			public static readonly Selector setBorderRight_ = "setBorderRight:";
			public static readonly Selector setBorderRightColor_ = "setBorderRightColor:";
			public static readonly Selector setBorderRightStyle_ = "setBorderRightStyle:";
			public static readonly Selector setBorderRightWidth_ = "setBorderRightWidth:";
			public static readonly Selector setBorderSpacing_ = "setBorderSpacing:";
			public static readonly Selector setBorderStyle_ = "setBorderStyle:";
			public static readonly Selector setBorderTop_ = "setBorderTop:";
			public static readonly Selector setBorderTopColor_ = "setBorderTopColor:";
			public static readonly Selector setBorderTopStyle_ = "setBorderTopStyle:";
			public static readonly Selector setBorderTopWidth_ = "setBorderTopWidth:";
			public static readonly Selector setBorderWidth_ = "setBorderWidth:";
			public static readonly Selector setBottom_ = "setBottom:";
			public static readonly Selector setCaptionSide_ = "setCaptionSide:";
			public static readonly Selector setClear_ = "setClear:";
			public static readonly Selector setClip_ = "setClip:";
			public static readonly Selector setColor_ = "setColor:";
			public static readonly Selector setContent_ = "setContent:";
			public static readonly Selector setCounterIncrement_ = "setCounterIncrement:";
			public static readonly Selector setCounterReset_ = "setCounterReset:";
			public static readonly Selector setCssFloat_ = "setCssFloat:";
			public static readonly Selector setCssText_ = "setCssText:";
			public static readonly Selector setCue_ = "setCue:";
			public static readonly Selector setCueAfter_ = "setCueAfter:";
			public static readonly Selector setCueBefore_ = "setCueBefore:";
			public static readonly Selector setCursor_ = "setCursor:";
			public static readonly Selector setDirection_ = "setDirection:";
			public static readonly Selector setDisplay_ = "setDisplay:";
			public static readonly Selector setElevation_ = "setElevation:";
			public static readonly Selector setEmptyCells_ = "setEmptyCells:";
			public static readonly Selector setFont_ = "setFont:";
			public static readonly Selector setFontFamily_ = "setFontFamily:";
			public static readonly Selector setFontSize_ = "setFontSize:";
			public static readonly Selector setFontSizeAdjust_ = "setFontSizeAdjust:";
			public static readonly Selector setFontStretch_ = "setFontStretch:";
			public static readonly Selector setFontStyle_ = "setFontStyle:";
			public static readonly Selector setFontVariant_ = "setFontVariant:";
			public static readonly Selector setFontWeight_ = "setFontWeight:";
			public static readonly Selector setHeight_ = "setHeight:";
			public static readonly Selector setLeft_ = "setLeft:";
			public static readonly Selector setLetterSpacing_ = "setLetterSpacing:";
			public static readonly Selector setLineHeight_ = "setLineHeight:";
			public static readonly Selector setListStyle_ = "setListStyle:";
			public static readonly Selector setListStyleImage_ = "setListStyleImage:";
			public static readonly Selector setListStylePosition_ = "setListStylePosition:";
			public static readonly Selector setListStyleType_ = "setListStyleType:";
			public static readonly Selector setMargin_ = "setMargin:";
			public static readonly Selector setMarginBottom_ = "setMarginBottom:";
			public static readonly Selector setMarginLeft_ = "setMarginLeft:";
			public static readonly Selector setMarginRight_ = "setMarginRight:";
			public static readonly Selector setMarginTop_ = "setMarginTop:";
			public static readonly Selector setMarkerOffset_ = "setMarkerOffset:";
			public static readonly Selector setMarks_ = "setMarks:";
			public static readonly Selector setMaxHeight_ = "setMaxHeight:";
			public static readonly Selector setMaxWidth_ = "setMaxWidth:";
			public static readonly Selector setMinHeight_ = "setMinHeight:";
			public static readonly Selector setMinWidth_ = "setMinWidth:";
			public static readonly Selector setOrphans_ = "setOrphans:";
			public static readonly Selector setOutline_ = "setOutline:";
			public static readonly Selector setOutlineColor_ = "setOutlineColor:";
			public static readonly Selector setOutlineStyle_ = "setOutlineStyle:";
			public static readonly Selector setOutlineWidth_ = "setOutlineWidth:";
			public static readonly Selector setOverflow_ = "setOverflow:";
			public static readonly Selector setPadding_ = "setPadding:";
			public static readonly Selector setPaddingBottom_ = "setPaddingBottom:";
			public static readonly Selector setPaddingLeft_ = "setPaddingLeft:";
			public static readonly Selector setPaddingRight_ = "setPaddingRight:";
			public static readonly Selector setPaddingTop_ = "setPaddingTop:";
			public static readonly Selector setPage_ = "setPage:";
			public static readonly Selector setPageBreakAfter_ = "setPageBreakAfter:";
			public static readonly Selector setPageBreakBefore_ = "setPageBreakBefore:";
			public static readonly Selector setPageBreakInside_ = "setPageBreakInside:";
			public static readonly Selector setPause_ = "setPause:";
			public static readonly Selector setPauseAfter_ = "setPauseAfter:";
			public static readonly Selector setPauseBefore_ = "setPauseBefore:";
			public static readonly Selector setPitch_ = "setPitch:";
			public static readonly Selector setPitchRange_ = "setPitchRange:";
			public static readonly Selector setPlayDuring_ = "setPlayDuring:";
			public static readonly Selector setPosition_ = "setPosition:";
			public static readonly Selector setProperty___ = "setProperty:::";
			public static readonly Selector setProperty_value_priority_ = "setProperty:value:priority:";
			public static readonly Selector setQuotes_ = "setQuotes:";
			public static readonly Selector setRichness_ = "setRichness:";
			public static readonly Selector setRight_ = "setRight:";
			public static readonly Selector setSize_ = "setSize:";
			public static readonly Selector setSpeak_ = "setSpeak:";
			public static readonly Selector setSpeakHeader_ = "setSpeakHeader:";
			public static readonly Selector setSpeakNumeral_ = "setSpeakNumeral:";
			public static readonly Selector setSpeakPunctuation_ = "setSpeakPunctuation:";
			public static readonly Selector setSpeechRate_ = "setSpeechRate:";
			public static readonly Selector setStress_ = "setStress:";
			public static readonly Selector setTableLayout_ = "setTableLayout:";
			public static readonly Selector setTextAlign_ = "setTextAlign:";
			public static readonly Selector setTextDecoration_ = "setTextDecoration:";
			public static readonly Selector setTextIndent_ = "setTextIndent:";
			public static readonly Selector setTextShadow_ = "setTextShadow:";
			public static readonly Selector setTextTransform_ = "setTextTransform:";
			public static readonly Selector setTop_ = "setTop:";
			public static readonly Selector setUnicodeBidi_ = "setUnicodeBidi:";
			public static readonly Selector setVerticalAlign_ = "setVerticalAlign:";
			public static readonly Selector setVisibility_ = "setVisibility:";
			public static readonly Selector setVoiceFamily_ = "setVoiceFamily:";
			public static readonly Selector setVolume_ = "setVolume:";
			public static readonly Selector setWhiteSpace_ = "setWhiteSpace:";
			public static readonly Selector setWidows_ = "setWidows:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector setWordSpacing_ = "setWordSpacing:";
			public static readonly Selector setZIndex_ = "setZIndex:";
			public static readonly Selector size = "size";
			public static readonly Selector speak = "speak";
			public static readonly Selector speakHeader = "speakHeader";
			public static readonly Selector speakNumeral = "speakNumeral";
			public static readonly Selector speakPunctuation = "speakPunctuation";
			public static readonly Selector speechRate = "speechRate";
			public static readonly Selector stress = "stress";
			public static readonly Selector tableLayout = "tableLayout";
			public static readonly Selector textAlign = "textAlign";
			public static readonly Selector textDecoration = "textDecoration";
			public static readonly Selector textIndent = "textIndent";
			public static readonly Selector textShadow = "textShadow";
			public static readonly Selector textTransform = "textTransform";
			public static readonly Selector top = "top";
			public static readonly Selector unicodeBidi = "unicodeBidi";
			public static readonly Selector verticalAlign = "verticalAlign";
			public static readonly Selector visibility = "visibility";
			public static readonly Selector voiceFamily = "voiceFamily";
			public static readonly Selector volume = "volume";
			public static readonly Selector whiteSpace = "whiteSpace";
			public static readonly Selector widows = "widows";
			public static readonly Selector width = "width";
			public static readonly Selector wordSpacing = "wordSpacing";
			public static readonly Selector zIndex = "zIndex";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCSSRule ) )]
	public struct DOMCSSStyleRule : IEquatable<DOMCSSStyleRule> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSStyleRule;
		public static implicit operator DOMCSSRule( DOMCSSStyleRule value ) {
			return new DOMCSSRule( value.Handle );
		}
		public static implicit operator DOMObject( DOMCSSStyleRule value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSStyleRule value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSStyleRule value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSStyleRule value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSStyleRule value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSStyleRule?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSStyleRule value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSStyleRule value1, DOMCSSStyleRule value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSStyleRule value1, DOMCSSStyleRule value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSStyleRule( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSStyleRule alloc() {
			return new DOMCSSStyleRule( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject selectorText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectorText( Handle, CachedSelectors.selectorText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setSelectorText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectorText_( Handle, CachedSelectors.setSelectorText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject style() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.style( Handle, CachedSelectors.style, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject selectorText {
				get { return _handle.selectorText(); }
			}
			public NObjective.RuntimeObject style {
				get { return _handle.style(); }
			}
			private readonly DOMCSSStyleRule _handle;
			public ObjectiveCPropertyImplementation( DOMCSSStyleRule value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectorText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectorText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr style( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector selectorText = "selectorText";
			public static readonly Selector setSelectorText_ = "setSelectorText:";
			public static readonly Selector style = "style";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMStyleSheet ) )]
	public struct DOMCSSStyleSheet : IEquatable<DOMCSSStyleSheet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSStyleSheet;
		public static implicit operator DOMStyleSheet( DOMCSSStyleSheet value ) {
			return new DOMStyleSheet( value.Handle );
		}
		public static implicit operator DOMObject( DOMCSSStyleSheet value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSStyleSheet value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSStyleSheet value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSStyleSheet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSStyleSheet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSStyleSheet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSStyleSheet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSStyleSheet value1, DOMCSSStyleSheet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSStyleSheet value1, DOMCSSStyleSheet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSStyleSheet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSStyleSheet alloc() {
			return new DOMCSSStyleSheet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int addRule_style_index_( NObjective.RuntimeObject rule, NObjective.RuntimeObject style, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addRule_style_index_( Handle, CachedSelectors.addRule_style_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), rule, style, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject cssRules() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cssRules( Handle, CachedSelectors.cssRules, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deleteRule_( uint rule ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteRule_( Handle, CachedSelectors.deleteRule_, out ___occuredException, sizeof( uint ), rule );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint insertRule__( string rule, uint unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedrule = Runtime.CreateStringProxy( rule );
			var ___result = NativeMethods.insertRule__( Handle, CachedSelectors.insertRule__, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), ___wrappedrule, unnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedrule );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint insertRule_index_( string rule, uint index ) {
			RuntimeObject ___occuredException;
			var ___wrappedrule = Runtime.CreateStringProxy( rule );
			var ___result = NativeMethods.insertRule_index_( Handle, CachedSelectors.insertRule_index_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), ___wrappedrule, index );
			Runtime.ReleaseNativeObject( ___wrappedrule );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject ownerRule() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ownerRule( Handle, CachedSelectors.ownerRule, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeRule_( uint rule ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeRule_( Handle, CachedSelectors.removeRule_, out ___occuredException, sizeof( uint ), rule );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject rules() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rules( Handle, CachedSelectors.rules, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject cssRules {
				get { return _handle.cssRules(); }
			}
			public NObjective.RuntimeObject ownerRule {
				get { return _handle.ownerRule(); }
			}
			private readonly DOMCSSStyleSheet _handle;
			public ObjectiveCPropertyImplementation( DOMCSSStyleSheet value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int addRule_style_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rule, NObjective.RuntimeObject style, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cssRules( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteRule_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint rule );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint insertRule__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr rule, uint unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint insertRule_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr rule, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ownerRule( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeRule_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint rule );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rules( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addRule_style_index_ = "addRule:style:index:";
			public static readonly Selector cssRules = "cssRules";
			public static readonly Selector deleteRule_ = "deleteRule:";
			public static readonly Selector insertRule__ = "insertRule::";
			public static readonly Selector insertRule_index_ = "insertRule:index:";
			public static readonly Selector ownerRule = "ownerRule";
			public static readonly Selector removeRule_ = "removeRule:";
			public static readonly Selector rules = "rules";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCSSRule ) )]
	public struct DOMCSSUnknownRule : IEquatable<DOMCSSUnknownRule> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSUnknownRule;
		public static implicit operator DOMCSSRule( DOMCSSUnknownRule value ) {
			return new DOMCSSRule( value.Handle );
		}
		public static implicit operator DOMObject( DOMCSSUnknownRule value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSUnknownRule value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSUnknownRule value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSUnknownRule value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSUnknownRule value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSUnknownRule?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSUnknownRule value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSUnknownRule value1, DOMCSSUnknownRule value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSUnknownRule value1, DOMCSSUnknownRule value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSUnknownRule( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSUnknownRule alloc() {
			return new DOMCSSUnknownRule( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMCSSValue : IEquatable<DOMCSSValue> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSValue;
		public static implicit operator DOMObject( DOMCSSValue value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSValue value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSValue value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSValue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSValue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSValue?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSValue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSValue value1, DOMCSSValue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSValue value1, DOMCSSValue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSValue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSValue alloc() {
			return new DOMCSSValue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cssText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cssText( Handle, CachedSelectors.cssText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ushort cssValueType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cssValueType( Handle, CachedSelectors.cssValueType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCssText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCssText_( Handle, CachedSelectors.setCssText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject cssText {
				get { return _handle.cssText(); }
			}
			public ushort cssValueType {
				get { return _handle.cssValueType(); }
			}
			private readonly DOMCSSValue _handle;
			public ObjectiveCPropertyImplementation( DOMCSSValue value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cssText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort cssValueType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCssText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
		}
		static internal class CachedSelectors {
			public static readonly Selector cssText = "cssText";
			public static readonly Selector cssValueType = "cssValueType";
			public static readonly Selector setCssText_ = "setCssText:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCSSValue ) )]
	public struct DOMCSSValueList : IEquatable<DOMCSSValueList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMCSSValueList;
		public static implicit operator DOMCSSValue( DOMCSSValueList value ) {
			return new DOMCSSValue( value.Handle );
		}
		public static implicit operator DOMObject( DOMCSSValueList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMCSSValueList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMCSSValueList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMCSSValueList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMCSSValueList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMCSSValueList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMCSSValueList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMCSSValueList value1, DOMCSSValueList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMCSSValueList value1, DOMCSSValueList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMCSSValueList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMCSSValueList alloc() {
			return new DOMCSSValueList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMCSSValue item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSValue( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public uint length {
				get { return _handle.length(); }
			}
			private readonly DOMCSSValueList _handle;
			public ObjectiveCPropertyImplementation( DOMCSSValueList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector item_ = "item:";
			public static readonly Selector length = "length";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMNode ) )]
	public struct DOMDocument : IEquatable<DOMDocument> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMDocument;
		public static implicit operator DOMNode( DOMDocument value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMDocument value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMDocument value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMDocument value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMDocument value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMDocument value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMDocument?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMDocument value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMDocument value1, DOMDocument value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMDocument value1, DOMDocument value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMDocument( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMDocument alloc() {
			return new DOMDocument( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMNode adoptNode_( DOMNode node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.adoptNode_( Handle, CachedSelectors.adoptNode_, out ___occuredException, sizeof( DOMNode ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public NObjective.RuntimeObject anchors() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.anchors( Handle, CachedSelectors.anchors, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject applets() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.applets( Handle, CachedSelectors.applets, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject body() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.body( Handle, CachedSelectors.body, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject characterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.characterSet( Handle, CachedSelectors.characterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject charset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.charset( Handle, CachedSelectors.charset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cookie() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cookie( Handle, CachedSelectors.cookie, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMAttr createAttribute_( string attribute ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			var ___result = NativeMethods.createAttribute_( Handle, CachedSelectors.createAttribute_, out ___occuredException, sizeof( IntPtr ), ___wrappedattribute );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMAttr( ___result );
		}
		unsafe public DOMAttr createAttributeNS__( string ns, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.createAttributeNS__( Handle, CachedSelectors.createAttributeNS__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMAttr( ___result );
		}
		unsafe public DOMAttr createAttributeNS_qualifiedName_( string ns, string qualifiedName ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedqualifiedName = Runtime.CreateStringProxy( qualifiedName );
			var ___result = NativeMethods.createAttributeNS_qualifiedName_( Handle, CachedSelectors.createAttributeNS_qualifiedName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedqualifiedName );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedqualifiedName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMAttr( ___result );
		}
		unsafe public DOMCDATASection createCDATASection_( string section ) {
			RuntimeObject ___occuredException;
			var ___wrappedsection = Runtime.CreateStringProxy( section );
			var ___result = NativeMethods.createCDATASection_( Handle, CachedSelectors.createCDATASection_, out ___occuredException, sizeof( IntPtr ), ___wrappedsection );
			Runtime.ReleaseNativeObject( ___wrappedsection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCDATASection( ___result );
		}
		unsafe public DOMComment createComment_( string comment ) {
			RuntimeObject ___occuredException;
			var ___wrappedcomment = Runtime.CreateStringProxy( comment );
			var ___result = NativeMethods.createComment_( Handle, CachedSelectors.createComment_, out ___occuredException, sizeof( IntPtr ), ___wrappedcomment );
			Runtime.ReleaseNativeObject( ___wrappedcomment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMComment( ___result );
		}
		unsafe public DOMCSSStyleDeclaration createCSSStyleDeclaration() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createCSSStyleDeclaration( Handle, CachedSelectors.createCSSStyleDeclaration, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSStyleDeclaration( ___result );
		}
		unsafe public DOMDocumentFragment createDocumentFragment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createDocumentFragment( Handle, CachedSelectors.createDocumentFragment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocumentFragment( ___result );
		}
		unsafe public DOMElement createElement_( string element ) {
			RuntimeObject ___occuredException;
			var ___wrappedelement = Runtime.CreateStringProxy( element );
			var ___result = NativeMethods.createElement_( Handle, CachedSelectors.createElement_, out ___occuredException, sizeof( IntPtr ), ___wrappedelement );
			Runtime.ReleaseNativeObject( ___wrappedelement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMElement( ___result );
		}
		unsafe public DOMElement createElementNS__( string ns, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.createElementNS__( Handle, CachedSelectors.createElementNS__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMElement( ___result );
		}
		unsafe public DOMElement createElementNS_qualifiedName_( string ns, string qualifiedName ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedqualifiedName = Runtime.CreateStringProxy( qualifiedName );
			var ___result = NativeMethods.createElementNS_qualifiedName_( Handle, CachedSelectors.createElementNS_qualifiedName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedqualifiedName );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedqualifiedName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMElement( ___result );
		}
		unsafe public DOMEntityReference createEntityReference_( string reference ) {
			RuntimeObject ___occuredException;
			var ___wrappedreference = Runtime.CreateStringProxy( reference );
			var ___result = NativeMethods.createEntityReference_( Handle, CachedSelectors.createEntityReference_, out ___occuredException, sizeof( IntPtr ), ___wrappedreference );
			Runtime.ReleaseNativeObject( ___wrappedreference );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMEntityReference( ___result );
		}
		unsafe public DOMEvent createEvent_( string @event ) {
			RuntimeObject ___occuredException;
			var ___wrappedevent = Runtime.CreateStringProxy( @event );
			var ___result = NativeMethods.createEvent_( Handle, CachedSelectors.createEvent_, out ___occuredException, sizeof( IntPtr ), ___wrappedevent );
			Runtime.ReleaseNativeObject( ___wrappedevent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMEvent( ___result );
		}
		unsafe public DOMXPathExpression createExpression__( string expression, NObjective.RuntimeObject unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedexpression = Runtime.CreateStringProxy( expression );
			var ___result = NativeMethods.createExpression__( Handle, CachedSelectors.createExpression__, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), ___wrappedexpression, unnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedexpression );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMXPathExpression( ___result );
		}
		unsafe public DOMXPathExpression createExpression_resolver_( string expression, NObjective.RuntimeObject resolver ) {
			RuntimeObject ___occuredException;
			var ___wrappedexpression = Runtime.CreateStringProxy( expression );
			var ___result = NativeMethods.createExpression_resolver_( Handle, CachedSelectors.createExpression_resolver_, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), ___wrappedexpression, resolver );
			Runtime.ReleaseNativeObject( ___wrappedexpression );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMXPathExpression( ___result );
		}
		unsafe public DOMNodeIterator createNodeIterator____( DOMNode iterator, uint unnamedParameter, NObjective.RuntimeObject unnamedParameter2, bool unnamedParameter3 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createNodeIterator____( Handle, CachedSelectors.createNodeIterator____, out ___occuredException, sizeof( DOMNode ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( bool ), iterator, unnamedParameter, unnamedParameter2, unnamedParameter3 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNodeIterator( ___result );
		}
		unsafe public DOMNodeIterator createNodeIterator_whatToShow_filter_expandEntityReferences_( DOMNode iterator, uint whatToShow, NObjective.RuntimeObject filter, bool expandEntityReferences ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createNodeIterator_whatToShow_filter_expandEntityReferences_( Handle, CachedSelectors.createNodeIterator_whatToShow_filter_expandEntityReferences_, out ___occuredException, sizeof( DOMNode ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( bool ), iterator, whatToShow, filter, expandEntityReferences );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNodeIterator( ___result );
		}
		unsafe public NObjective.RuntimeObject createNSResolver_( DOMNode resolver ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createNSResolver_( Handle, CachedSelectors.createNSResolver_, out ___occuredException, sizeof( DOMNode ), resolver );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMProcessingInstruction createProcessingInstruction__( string instruction, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedinstruction = Runtime.CreateStringProxy( instruction );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.createProcessingInstruction__( Handle, CachedSelectors.createProcessingInstruction__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedinstruction, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedinstruction );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMProcessingInstruction( ___result );
		}
		unsafe public DOMProcessingInstruction createProcessingInstruction_data_( string instruction, string data ) {
			RuntimeObject ___occuredException;
			var ___wrappedinstruction = Runtime.CreateStringProxy( instruction );
			var ___wrappeddata = Runtime.CreateStringProxy( data );
			var ___result = NativeMethods.createProcessingInstruction_data_( Handle, CachedSelectors.createProcessingInstruction_data_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedinstruction, ___wrappeddata );
			Runtime.ReleaseNativeObject( ___wrappedinstruction );
			Runtime.ReleaseNativeObject( ___wrappeddata );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMProcessingInstruction( ___result );
		}
		unsafe public DOMRange createRange() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createRange( Handle, CachedSelectors.createRange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMRange( ___result );
		}
		unsafe public DOMText createTextNode_( string node ) {
			RuntimeObject ___occuredException;
			var ___wrappednode = Runtime.CreateStringProxy( node );
			var ___result = NativeMethods.createTextNode_( Handle, CachedSelectors.createTextNode_, out ___occuredException, sizeof( IntPtr ), ___wrappednode );
			Runtime.ReleaseNativeObject( ___wrappednode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMText( ___result );
		}
		unsafe public DOMTreeWalker createTreeWalker____( DOMNode walker, uint unnamedParameter, NObjective.RuntimeObject unnamedParameter2, bool unnamedParameter3 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createTreeWalker____( Handle, CachedSelectors.createTreeWalker____, out ___occuredException, sizeof( DOMNode ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( bool ), walker, unnamedParameter, unnamedParameter2, unnamedParameter3 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMTreeWalker( ___result );
		}
		unsafe public DOMTreeWalker createTreeWalker_whatToShow_filter_expandEntityReferences_( DOMNode walker, uint whatToShow, NObjective.RuntimeObject filter, bool expandEntityReferences ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createTreeWalker_whatToShow_filter_expandEntityReferences_( Handle, CachedSelectors.createTreeWalker_whatToShow_filter_expandEntityReferences_, out ___occuredException, sizeof( DOMNode ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( bool ), walker, whatToShow, filter, expandEntityReferences );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMTreeWalker( ___result );
		}
		unsafe public NObjective.RuntimeObject defaultCharset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultCharset( Handle, CachedSelectors.defaultCharset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject defaultView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultView( Handle, CachedSelectors.defaultView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doctype() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doctype( Handle, CachedSelectors.doctype, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject documentElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentElement( Handle, CachedSelectors.documentElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject documentURI() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentURI( Handle, CachedSelectors.documentURI, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject domain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.domain( Handle, CachedSelectors.domain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject elementFromPoint_y_( int point, int y ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementFromPoint_y_( Handle, CachedSelectors.elementFromPoint_y_, out ___occuredException, sizeof( int ) + sizeof( int ), point, y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMXPathResult evaluate_____( string evaluate, DOMNode unnamedParameter, NObjective.RuntimeObject unnamedParameter2, ushort unnamedParameter3, DOMXPathResult unnamedParameter4 ) {
			RuntimeObject ___occuredException;
			var ___wrappedevaluate = Runtime.CreateStringProxy( evaluate );
			var ___result = NativeMethods.evaluate_____( Handle, CachedSelectors.evaluate_____, out ___occuredException, sizeof( IntPtr ) + sizeof( DOMNode ) + sizeof( NObjective.RuntimeObject ) + sizeof( ushort ) + sizeof( DOMXPathResult ), ___wrappedevaluate, unnamedParameter, unnamedParameter2, unnamedParameter3, unnamedParameter4 );
			Runtime.ReleaseNativeObject( ___wrappedevaluate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMXPathResult( ___result );
		}
		unsafe public DOMXPathResult evaluate_contextNode_resolver_type_inResult_( string evaluate, DOMNode contextNode, NObjective.RuntimeObject resolver, ushort type, DOMXPathResult inResult ) {
			RuntimeObject ___occuredException;
			var ___wrappedevaluate = Runtime.CreateStringProxy( evaluate );
			var ___result = NativeMethods.evaluate_contextNode_resolver_type_inResult_( Handle, CachedSelectors.evaluate_contextNode_resolver_type_inResult_, out ___occuredException, sizeof( IntPtr ) + sizeof( DOMNode ) + sizeof( NObjective.RuntimeObject ) + sizeof( ushort ) + sizeof( DOMXPathResult ), ___wrappedevaluate, contextNode, resolver, type, inResult );
			Runtime.ReleaseNativeObject( ___wrappedevaluate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMXPathResult( ___result );
		}
		unsafe public char execCommand_( NObjective.RuntimeObject command ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.execCommand_( Handle, CachedSelectors.execCommand_, out ___occuredException, sizeof( NObjective.RuntimeObject ), command );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char execCommand_userInterface_( NObjective.RuntimeObject command, char userInterface ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.execCommand_userInterface_( Handle, CachedSelectors.execCommand_userInterface_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), command, userInterface );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char execCommand_userInterface_value_( NObjective.RuntimeObject command, char userInterface, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.execCommand_userInterface_value_( Handle, CachedSelectors.execCommand_userInterface_value_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), command, userInterface, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject forms() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.forms( Handle, CachedSelectors.forms, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMCSSStyleDeclaration getComputedStyle__( DOMElement style, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.getComputedStyle__( Handle, CachedSelectors.getComputedStyle__, out ___occuredException, sizeof( DOMElement ) + sizeof( IntPtr ), style, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSStyleDeclaration( ___result );
		}
		unsafe public DOMCSSStyleDeclaration getComputedStyle_pseudoElement_( DOMElement style, string pseudoElement ) {
			RuntimeObject ___occuredException;
			var ___wrappedpseudoElement = Runtime.CreateStringProxy( pseudoElement );
			var ___result = NativeMethods.getComputedStyle_pseudoElement_( Handle, CachedSelectors.getComputedStyle_pseudoElement_, out ___occuredException, sizeof( DOMElement ) + sizeof( IntPtr ), style, ___wrappedpseudoElement );
			Runtime.ReleaseNativeObject( ___wrappedpseudoElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSStyleDeclaration( ___result );
		}
		unsafe public DOMElement getElementById_( string id ) {
			RuntimeObject ___occuredException;
			var ___wrappedid = Runtime.CreateStringProxy( id );
			var ___result = NativeMethods.getElementById_( Handle, CachedSelectors.getElementById_, out ___occuredException, sizeof( IntPtr ), ___wrappedid );
			Runtime.ReleaseNativeObject( ___wrappedid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMElement( ___result );
		}
		unsafe public NObjective.RuntimeObject getElementsByClassName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getElementsByClassName_( Handle, CachedSelectors.getElementsByClassName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getElementsByName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getElementsByName_( Handle, CachedSelectors.getElementsByName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMNodeList getElementsByTagName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.getElementsByTagName_( Handle, CachedSelectors.getElementsByTagName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNodeList( ___result );
		}
		unsafe public DOMNodeList getElementsByTagNameNS__( string ns, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.getElementsByTagNameNS__( Handle, CachedSelectors.getElementsByTagNameNS__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNodeList( ___result );
		}
		unsafe public DOMNodeList getElementsByTagNameNS_localName_( string ns, string localName ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedlocalName = Runtime.CreateStringProxy( localName );
			var ___result = NativeMethods.getElementsByTagNameNS_localName_( Handle, CachedSelectors.getElementsByTagNameNS_localName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedlocalName );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedlocalName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNodeList( ___result );
		}
		unsafe public DOMCSSRuleList getMatchedCSSRules_pseudoElement_( DOMElement rules, string pseudoElement ) {
			RuntimeObject ___occuredException;
			var ___wrappedpseudoElement = Runtime.CreateStringProxy( pseudoElement );
			var ___result = NativeMethods.getMatchedCSSRules_pseudoElement_( Handle, CachedSelectors.getMatchedCSSRules_pseudoElement_, out ___occuredException, sizeof( DOMElement ) + sizeof( IntPtr ), rules, ___wrappedpseudoElement );
			Runtime.ReleaseNativeObject( ___wrappedpseudoElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSRuleList( ___result );
		}
		unsafe public DOMCSSRuleList getMatchedCSSRules_pseudoElement_authorOnly_( DOMElement rules, string pseudoElement, bool authorOnly ) {
			RuntimeObject ___occuredException;
			var ___wrappedpseudoElement = Runtime.CreateStringProxy( pseudoElement );
			var ___result = NativeMethods.getMatchedCSSRules_pseudoElement_authorOnly_( Handle, CachedSelectors.getMatchedCSSRules_pseudoElement_authorOnly_, out ___occuredException, sizeof( DOMElement ) + sizeof( IntPtr ) + sizeof( bool ), rules, ___wrappedpseudoElement, authorOnly );
			Runtime.ReleaseNativeObject( ___wrappedpseudoElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSRuleList( ___result );
		}
		unsafe public DOMCSSStyleDeclaration getOverrideStyle__( DOMElement style, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.getOverrideStyle__( Handle, CachedSelectors.getOverrideStyle__, out ___occuredException, sizeof( DOMElement ) + sizeof( IntPtr ), style, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSStyleDeclaration( ___result );
		}
		unsafe public DOMCSSStyleDeclaration getOverrideStyle_pseudoElement_( DOMElement style, string pseudoElement ) {
			RuntimeObject ___occuredException;
			var ___wrappedpseudoElement = Runtime.CreateStringProxy( pseudoElement );
			var ___result = NativeMethods.getOverrideStyle_pseudoElement_( Handle, CachedSelectors.getOverrideStyle_pseudoElement_, out ___occuredException, sizeof( DOMElement ) + sizeof( IntPtr ), style, ___wrappedpseudoElement );
			Runtime.ReleaseNativeObject( ___wrappedpseudoElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSStyleDeclaration( ___result );
		}
		unsafe public NObjective.RuntimeObject images() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.images( Handle, CachedSelectors.images, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject implementation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.implementation( Handle, CachedSelectors.implementation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMNode importNode__( DOMNode node, bool unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importNode__( Handle, CachedSelectors.importNode__, out ___occuredException, sizeof( DOMNode ) + sizeof( bool ), node, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode importNode_deep_( DOMNode node, bool deep ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importNode_deep_( Handle, CachedSelectors.importNode_deep_, out ___occuredException, sizeof( DOMNode ) + sizeof( bool ), node, deep );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public NObjective.RuntimeObject inputEncoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inputEncoding( Handle, CachedSelectors.inputEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lastModified() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastModified( Handle, CachedSelectors.lastModified, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject links() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.links( Handle, CachedSelectors.links, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject preferredStylesheetSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preferredStylesheetSet( Handle, CachedSelectors.preferredStylesheetSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char queryCommandEnabled_( NObjective.RuntimeObject enabled ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryCommandEnabled_( Handle, CachedSelectors.queryCommandEnabled_, out ___occuredException, sizeof( NObjective.RuntimeObject ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char queryCommandIndeterm_( NObjective.RuntimeObject indeterm ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryCommandIndeterm_( Handle, CachedSelectors.queryCommandIndeterm_, out ___occuredException, sizeof( NObjective.RuntimeObject ), indeterm );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char queryCommandState_( NObjective.RuntimeObject state ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryCommandState_( Handle, CachedSelectors.queryCommandState_, out ___occuredException, sizeof( NObjective.RuntimeObject ), state );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char queryCommandSupported_( NObjective.RuntimeObject supported ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryCommandSupported_( Handle, CachedSelectors.queryCommandSupported_, out ___occuredException, sizeof( NObjective.RuntimeObject ), supported );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject queryCommandValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryCommandValue_( Handle, CachedSelectors.queryCommandValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject querySelector_( NObjective.RuntimeObject selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.querySelector_( Handle, CachedSelectors.querySelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject querySelectorAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.querySelectorAll_( Handle, CachedSelectors.querySelectorAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject readyState() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.readyState( Handle, CachedSelectors.readyState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject referrer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.referrer( Handle, CachedSelectors.referrer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedStylesheetSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedStylesheetSet( Handle, CachedSelectors.selectedStylesheetSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setBody_( NObjective.RuntimeObject body ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBody_( Handle, CachedSelectors.setBody_, out ___occuredException, sizeof( NObjective.RuntimeObject ), body );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCharset_( NObjective.RuntimeObject charset ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCharset_( Handle, CachedSelectors.setCharset_, out ___occuredException, sizeof( NObjective.RuntimeObject ), charset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCookie_( NObjective.RuntimeObject cookie ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCookie_( Handle, CachedSelectors.setCookie_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cookie );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDocumentURI_( NObjective.RuntimeObject uri ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDocumentURI_( Handle, CachedSelectors.setDocumentURI_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uri );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedStylesheetSet_( NObjective.RuntimeObject @set ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedStylesheetSet_( Handle, CachedSelectors.setSelectedStylesheetSet_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitle_( Handle, CachedSelectors.setTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlStandalone_( char standalone ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlStandalone_( Handle, CachedSelectors.setXmlStandalone_, out ___occuredException, sizeof( char ), standalone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlVersion_( NObjective.RuntimeObject version ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlVersion_( Handle, CachedSelectors.setXmlVersion_, out ___occuredException, sizeof( NObjective.RuntimeObject ), version );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject styleSheets() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.styleSheets( Handle, CachedSelectors.styleSheets, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject URL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URL( Handle, CachedSelectors.URL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlEncoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlEncoding( Handle, CachedSelectors.xmlEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char xmlStandalone() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlStandalone( Handle, CachedSelectors.xmlStandalone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject xmlVersion() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlVersion( Handle, CachedSelectors.xmlVersion, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject anchors {
				get { return _handle.anchors(); }
			}
			public NObjective.RuntimeObject applets {
				get { return _handle.applets(); }
			}
			public NObjective.RuntimeObject body {
				get { return _handle.body(); }
			}
			public NObjective.RuntimeObject cookie {
				get { return _handle.cookie(); }
			}
			public NObjective.RuntimeObject defaultView {
				get { return _handle.defaultView(); }
			}
			public NObjective.RuntimeObject doctype {
				get { return _handle.doctype(); }
			}
			public NObjective.RuntimeObject documentElement {
				get { return _handle.documentElement(); }
			}
			public NObjective.RuntimeObject domain {
				get { return _handle.domain(); }
			}
			public NObjective.RuntimeObject forms {
				get { return _handle.forms(); }
			}
			public NObjective.RuntimeObject images {
				get { return _handle.images(); }
			}
			public NObjective.RuntimeObject implementation {
				get { return _handle.implementation(); }
			}
			public NObjective.RuntimeObject links {
				get { return _handle.links(); }
			}
			public NObjective.RuntimeObject referrer {
				get { return _handle.referrer(); }
			}
			public NObjective.RuntimeObject styleSheets {
				get { return _handle.styleSheets(); }
			}
			public NObjective.RuntimeObject title {
				get { return _handle.title(); }
			}
			public NObjective.RuntimeObject URL {
				get { return _handle.URL(); }
			}
			private readonly DOMDocument _handle;
			public ObjectiveCPropertyImplementation( DOMDocument value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr adoptNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr anchors( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr applets( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr body( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr characterSet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr charset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cookie( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createAttributeNS__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createAttributeNS_qualifiedName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr qualifiedName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createCDATASection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr section );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createComment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr comment );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createCSSStyleDeclaration( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createDocumentFragment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createElementNS__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createElementNS_qualifiedName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr qualifiedName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createEntityReference_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr reference );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @event );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createExpression__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr expression, NObjective.RuntimeObject unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createExpression_resolver_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr expression, NObjective.RuntimeObject resolver );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createNodeIterator____( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode iterator, uint unnamedParameter, NObjective.RuntimeObject unnamedParameter2, bool unnamedParameter3 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createNodeIterator_whatToShow_filter_expandEntityReferences_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode iterator, uint whatToShow, NObjective.RuntimeObject filter, bool expandEntityReferences );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createNSResolver_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode resolver );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createProcessingInstruction__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr instruction, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createProcessingInstruction_data_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr instruction, IntPtr data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createRange( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createTextNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createTreeWalker____( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode walker, uint unnamedParameter, NObjective.RuntimeObject unnamedParameter2, bool unnamedParameter3 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createTreeWalker_whatToShow_filter_expandEntityReferences_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode walker, uint whatToShow, NObjective.RuntimeObject filter, bool expandEntityReferences );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultCharset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doctype( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr documentElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr documentURI( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr domain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementFromPoint_y_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int point, int y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr evaluate_____( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr evaluate, DOMNode unnamedParameter, NObjective.RuntimeObject unnamedParameter2, ushort unnamedParameter3, DOMXPathResult unnamedParameter4 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr evaluate_contextNode_resolver_type_inResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr evaluate, DOMNode contextNode, NObjective.RuntimeObject resolver, ushort type, DOMXPathResult inResult );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char execCommand_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject command );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char execCommand_userInterface_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject command, char userInterface );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char execCommand_userInterface_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject command, char userInterface, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr forms( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getComputedStyle__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMElement style, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getComputedStyle_pseudoElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMElement style, IntPtr pseudoElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getElementById_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getElementsByClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getElementsByName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getElementsByTagName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getElementsByTagNameNS__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getElementsByTagNameNS_localName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr localName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getMatchedCSSRules_pseudoElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMElement rules, IntPtr pseudoElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getMatchedCSSRules_pseudoElement_authorOnly_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMElement rules, IntPtr pseudoElement, bool authorOnly );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getOverrideStyle__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMElement style, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getOverrideStyle_pseudoElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMElement style, IntPtr pseudoElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr images( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr implementation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr importNode__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode node, bool unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr importNode_deep_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode node, bool deep );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr inputEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastModified( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr links( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preferredStylesheetSet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char queryCommandEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char queryCommandIndeterm_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject indeterm );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char queryCommandState_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject state );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char queryCommandSupported_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject supported );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr queryCommandValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr querySelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr querySelectorAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr readyState( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr referrer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedStylesheetSet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBody_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject body );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCharset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject charset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCookie_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cookie );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDocumentURI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uri );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedStylesheetSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlStandalone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char standalone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlVersion_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject version );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr styleSheets( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char xmlStandalone( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlVersion( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector adoptNode_ = "adoptNode:";
			public static readonly Selector anchors = "anchors";
			public static readonly Selector applets = "applets";
			public static readonly Selector body = "body";
			public static readonly Selector characterSet = "characterSet";
			public static readonly Selector charset = "charset";
			public static readonly Selector cookie = "cookie";
			public static readonly Selector createAttribute_ = "createAttribute:";
			public static readonly Selector createAttributeNS__ = "createAttributeNS::";
			public static readonly Selector createAttributeNS_qualifiedName_ = "createAttributeNS:qualifiedName:";
			public static readonly Selector createCDATASection_ = "createCDATASection:";
			public static readonly Selector createComment_ = "createComment:";
			public static readonly Selector createCSSStyleDeclaration = "createCSSStyleDeclaration";
			public static readonly Selector createDocumentFragment = "createDocumentFragment";
			public static readonly Selector createElement_ = "createElement:";
			public static readonly Selector createElementNS__ = "createElementNS::";
			public static readonly Selector createElementNS_qualifiedName_ = "createElementNS:qualifiedName:";
			public static readonly Selector createEntityReference_ = "createEntityReference:";
			public static readonly Selector createEvent_ = "createEvent:";
			public static readonly Selector createExpression__ = "createExpression::";
			public static readonly Selector createExpression_resolver_ = "createExpression:resolver:";
			public static readonly Selector createNodeIterator____ = "createNodeIterator::::";
			public static readonly Selector createNodeIterator_whatToShow_filter_expandEntityReferences_ = "createNodeIterator:whatToShow:filter:expandEntityReferences:";
			public static readonly Selector createNSResolver_ = "createNSResolver:";
			public static readonly Selector createProcessingInstruction__ = "createProcessingInstruction::";
			public static readonly Selector createProcessingInstruction_data_ = "createProcessingInstruction:data:";
			public static readonly Selector createRange = "createRange";
			public static readonly Selector createTextNode_ = "createTextNode:";
			public static readonly Selector createTreeWalker____ = "createTreeWalker::::";
			public static readonly Selector createTreeWalker_whatToShow_filter_expandEntityReferences_ = "createTreeWalker:whatToShow:filter:expandEntityReferences:";
			public static readonly Selector defaultCharset = "defaultCharset";
			public static readonly Selector defaultView = "defaultView";
			public static readonly Selector doctype = "doctype";
			public static readonly Selector documentElement = "documentElement";
			public static readonly Selector documentURI = "documentURI";
			public static readonly Selector domain = "domain";
			public static readonly Selector elementFromPoint_y_ = "elementFromPoint:y:";
			public static readonly Selector evaluate_____ = "evaluate:::::";
			public static readonly Selector evaluate_contextNode_resolver_type_inResult_ = "evaluate:contextNode:resolver:type:inResult:";
			public static readonly Selector execCommand_ = "execCommand:";
			public static readonly Selector execCommand_userInterface_ = "execCommand:userInterface:";
			public static readonly Selector execCommand_userInterface_value_ = "execCommand:userInterface:value:";
			public static readonly Selector forms = "forms";
			public static readonly Selector getComputedStyle__ = "getComputedStyle::";
			public static readonly Selector getComputedStyle_pseudoElement_ = "getComputedStyle:pseudoElement:";
			public static readonly Selector getElementById_ = "getElementById:";
			public static readonly Selector getElementsByClassName_ = "getElementsByClassName:";
			public static readonly Selector getElementsByName_ = "getElementsByName:";
			public static readonly Selector getElementsByTagName_ = "getElementsByTagName:";
			public static readonly Selector getElementsByTagNameNS__ = "getElementsByTagNameNS::";
			public static readonly Selector getElementsByTagNameNS_localName_ = "getElementsByTagNameNS:localName:";
			public static readonly Selector getMatchedCSSRules_pseudoElement_ = "getMatchedCSSRules:pseudoElement:";
			public static readonly Selector getMatchedCSSRules_pseudoElement_authorOnly_ = "getMatchedCSSRules:pseudoElement:authorOnly:";
			public static readonly Selector getOverrideStyle__ = "getOverrideStyle::";
			public static readonly Selector getOverrideStyle_pseudoElement_ = "getOverrideStyle:pseudoElement:";
			public static readonly Selector images = "images";
			public static readonly Selector implementation = "implementation";
			public static readonly Selector importNode__ = "importNode::";
			public static readonly Selector importNode_deep_ = "importNode:deep:";
			public static readonly Selector inputEncoding = "inputEncoding";
			public static readonly Selector lastModified = "lastModified";
			public static readonly Selector links = "links";
			public static readonly Selector preferredStylesheetSet = "preferredStylesheetSet";
			public static readonly Selector queryCommandEnabled_ = "queryCommandEnabled:";
			public static readonly Selector queryCommandIndeterm_ = "queryCommandIndeterm:";
			public static readonly Selector queryCommandState_ = "queryCommandState:";
			public static readonly Selector queryCommandSupported_ = "queryCommandSupported:";
			public static readonly Selector queryCommandValue_ = "queryCommandValue:";
			public static readonly Selector querySelector_ = "querySelector:";
			public static readonly Selector querySelectorAll_ = "querySelectorAll:";
			public static readonly Selector readyState = "readyState";
			public static readonly Selector referrer = "referrer";
			public static readonly Selector selectedStylesheetSet = "selectedStylesheetSet";
			public static readonly Selector setBody_ = "setBody:";
			public static readonly Selector setCharset_ = "setCharset:";
			public static readonly Selector setCookie_ = "setCookie:";
			public static readonly Selector setDocumentURI_ = "setDocumentURI:";
			public static readonly Selector setSelectedStylesheetSet_ = "setSelectedStylesheetSet:";
			public static readonly Selector setTitle_ = "setTitle:";
			public static readonly Selector setXmlStandalone_ = "setXmlStandalone:";
			public static readonly Selector setXmlVersion_ = "setXmlVersion:";
			public static readonly Selector styleSheets = "styleSheets";
			public static readonly Selector title = "title";
			public static readonly Selector URL = "URL";
			public static readonly Selector xmlEncoding = "xmlEncoding";
			public static readonly Selector xmlStandalone = "xmlStandalone";
			public static readonly Selector xmlVersion = "xmlVersion";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMNode ) )]
	public struct DOMDocumentFragment : IEquatable<DOMDocumentFragment> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMDocumentFragment;
		public static implicit operator DOMNode( DOMDocumentFragment value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMDocumentFragment value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMDocumentFragment value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMDocumentFragment value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMDocumentFragment value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMDocumentFragment value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMDocumentFragment?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMDocumentFragment value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMDocumentFragment value1, DOMDocumentFragment value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMDocumentFragment value1, DOMDocumentFragment value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMDocumentFragment( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMDocumentFragment alloc() {
			return new DOMDocumentFragment( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMNode ) )]
	public struct DOMDocumentType : IEquatable<DOMDocumentType> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMDocumentType;
		public static implicit operator DOMNode( DOMDocumentType value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMDocumentType value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMDocumentType value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMDocumentType value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMDocumentType value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMDocumentType value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMDocumentType?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMDocumentType value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMDocumentType value1, DOMDocumentType value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMDocumentType value1, DOMDocumentType value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMDocumentType( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMDocumentType alloc() {
			return new DOMDocumentType( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject entities() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.entities( Handle, CachedSelectors.entities, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject internalSubset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.internalSubset( Handle, CachedSelectors.internalSubset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject notations() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notations( Handle, CachedSelectors.notations, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject publicId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicId( Handle, CachedSelectors.publicId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject systemId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemId( Handle, CachedSelectors.systemId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject entities {
				get { return _handle.entities(); }
			}
			public NObjective.RuntimeObject internalSubset {
				get { return _handle.internalSubset(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject notations {
				get { return _handle.notations(); }
			}
			public NObjective.RuntimeObject publicId {
				get { return _handle.publicId(); }
			}
			public NObjective.RuntimeObject systemId {
				get { return _handle.systemId(); }
			}
			private readonly DOMDocumentType _handle;
			public ObjectiveCPropertyImplementation( DOMDocumentType value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr entities( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr internalSubset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notations( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr publicId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector entities = "entities";
			public static readonly Selector internalSubset = "internalSubset";
			public static readonly Selector name = "name";
			public static readonly Selector notations = "notations";
			public static readonly Selector publicId = "publicId";
			public static readonly Selector systemId = "systemId";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMNode ) )]
	public struct DOMElement : IEquatable<DOMElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMElement;
		public static implicit operator DOMNode( DOMElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMElement value1, DOMElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMElement value1, DOMElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMElement alloc() {
			return new DOMElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void blur() {
			RuntimeObject ___occuredException;
			NativeMethods.blur( Handle, CachedSelectors.blur, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int clientHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clientHeight( Handle, CachedSelectors.clientHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int clientLeft() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clientLeft( Handle, CachedSelectors.clientLeft, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int clientTop() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clientTop( Handle, CachedSelectors.clientTop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int clientWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clientWidth( Handle, CachedSelectors.clientWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char contains_( NObjective.RuntimeObject contains ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contains_( Handle, CachedSelectors.contains_, out ___occuredException, sizeof( NObjective.RuntimeObject ), contains );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void focus() {
			RuntimeObject ___occuredException;
			NativeMethods.focus( Handle, CachedSelectors.focus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string getAttribute_( string attribute ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			var ___result = NativeMethods.getAttribute_( Handle, CachedSelectors.getAttribute_, out ___occuredException, sizeof( IntPtr ), ___wrappedattribute );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public DOMAttr getAttributeNode_( string node ) {
			RuntimeObject ___occuredException;
			var ___wrappednode = Runtime.CreateStringProxy( node );
			var ___result = NativeMethods.getAttributeNode_( Handle, CachedSelectors.getAttributeNode_, out ___occuredException, sizeof( IntPtr ), ___wrappednode );
			Runtime.ReleaseNativeObject( ___wrappednode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMAttr( ___result );
		}
		unsafe public DOMAttr getAttributeNodeNS__( string ns, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.getAttributeNodeNS__( Handle, CachedSelectors.getAttributeNodeNS__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMAttr( ___result );
		}
		unsafe public DOMAttr getAttributeNodeNS_localName_( string ns, string localName ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedlocalName = Runtime.CreateStringProxy( localName );
			var ___result = NativeMethods.getAttributeNodeNS_localName_( Handle, CachedSelectors.getAttributeNodeNS_localName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedlocalName );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedlocalName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMAttr( ___result );
		}
		unsafe public string getAttributeNS__( string ns, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.getAttributeNS__( Handle, CachedSelectors.getAttributeNS__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string getAttributeNS_localName_( string ns, string localName ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedlocalName = Runtime.CreateStringProxy( localName );
			var ___result = NativeMethods.getAttributeNS_localName_( Handle, CachedSelectors.getAttributeNS_localName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedlocalName );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedlocalName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject getElementsByClassName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getElementsByClassName_( Handle, CachedSelectors.getElementsByClassName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMNodeList getElementsByTagName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.getElementsByTagName_( Handle, CachedSelectors.getElementsByTagName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNodeList( ___result );
		}
		unsafe public DOMNodeList getElementsByTagNameNS__( string ns, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.getElementsByTagNameNS__( Handle, CachedSelectors.getElementsByTagNameNS__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNodeList( ___result );
		}
		unsafe public DOMNodeList getElementsByTagNameNS_localName_( string ns, string localName ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedlocalName = Runtime.CreateStringProxy( localName );
			var ___result = NativeMethods.getElementsByTagNameNS_localName_( Handle, CachedSelectors.getElementsByTagNameNS_localName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedlocalName );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedlocalName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNodeList( ___result );
		}
		unsafe public bool hasAttribute_( string attribute ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			var ___result = NativeMethods.hasAttribute_( Handle, CachedSelectors.hasAttribute_, out ___occuredException, sizeof( IntPtr ), ___wrappedattribute );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool hasAttributeNS__( string ns, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.hasAttributeNS__( Handle, CachedSelectors.hasAttributeNS__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool hasAttributeNS_localName_( string ns, string localName ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedlocalName = Runtime.CreateStringProxy( localName );
			var ___result = NativeMethods.hasAttributeNS_localName_( Handle, CachedSelectors.hasAttributeNS_localName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedlocalName );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedlocalName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSImage image() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.image( Handle, CachedSelectors.image, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSImage( ___result );
		}
		unsafe public NObjective.RuntimeObject innerText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.innerText( Handle, CachedSelectors.innerText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject insertAdjacentElement_element_( NObjective.RuntimeObject element, NObjective.RuntimeObject element2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertAdjacentElement_element_( Handle, CachedSelectors.insertAdjacentElement_element_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), element, element2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isFocused() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFocused( Handle, CachedSelectors.isFocused, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int offsetHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offsetHeight( Handle, CachedSelectors.offsetHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int offsetLeft() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offsetLeft( Handle, CachedSelectors.offsetLeft, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject offsetParent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offsetParent( Handle, CachedSelectors.offsetParent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int offsetTop() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offsetTop( Handle, CachedSelectors.offsetTop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int offsetWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offsetWidth( Handle, CachedSelectors.offsetWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject querySelector_( NObjective.RuntimeObject selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.querySelector_( Handle, CachedSelectors.querySelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject querySelectorAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.querySelectorAll_( Handle, CachedSelectors.querySelectorAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAttribute_( string attribute ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			NativeMethods.removeAttribute_( Handle, CachedSelectors.removeAttribute_, out ___occuredException, sizeof( IntPtr ), ___wrappedattribute );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public DOMAttr removeAttributeNode_( DOMAttr node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeAttributeNode_( Handle, CachedSelectors.removeAttributeNode_, out ___occuredException, sizeof( DOMAttr ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMAttr( ___result );
		}
		unsafe public void removeAttributeNS__( string ns, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			NativeMethods.removeAttributeNS__( Handle, CachedSelectors.removeAttributeNS__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAttributeNS_localName_( string ns, string localName ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedlocalName = Runtime.CreateStringProxy( localName );
			NativeMethods.removeAttributeNS_localName_( Handle, CachedSelectors.removeAttributeNS_localName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedlocalName );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedlocalName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollByLines_( int lines ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollByLines_( Handle, CachedSelectors.scrollByLines_, out ___occuredException, sizeof( int ), lines );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollByPages_( int pages ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollByPages_( Handle, CachedSelectors.scrollByPages_, out ___occuredException, sizeof( int ), pages );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int scrollHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrollHeight( Handle, CachedSelectors.scrollHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void scrollIntoView_( bool view ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollIntoView_( Handle, CachedSelectors.scrollIntoView_, out ___occuredException, sizeof( bool ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollIntoViewIfNeeded_( bool needed ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollIntoViewIfNeeded_( Handle, CachedSelectors.scrollIntoViewIfNeeded_, out ___occuredException, sizeof( bool ), needed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int scrollLeft() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrollLeft( Handle, CachedSelectors.scrollLeft, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int scrollTop() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrollTop( Handle, CachedSelectors.scrollTop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int scrollWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrollWidth( Handle, CachedSelectors.scrollWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAttribute__( string attribute, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			NativeMethods.setAttribute__( Handle, CachedSelectors.setAttribute__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedattribute, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAttribute_value_( string attribute, string value ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			NativeMethods.setAttribute_value_( Handle, CachedSelectors.setAttribute_value_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedattribute, ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public DOMAttr setAttributeNode_( DOMAttr node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setAttributeNode_( Handle, CachedSelectors.setAttributeNode_, out ___occuredException, sizeof( DOMAttr ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMAttr( ___result );
		}
		unsafe public DOMAttr setAttributeNodeNS_( DOMAttr ns ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setAttributeNodeNS_( Handle, CachedSelectors.setAttributeNodeNS_, out ___occuredException, sizeof( DOMAttr ), ns );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMAttr( ___result );
		}
		unsafe public void setAttributeNS___( string ns, string unnamedParameter, string unnamedParameter2 ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___wrappedunnamedParameter2 = Runtime.CreateStringProxy( unnamedParameter2 );
			NativeMethods.setAttributeNS___( Handle, CachedSelectors.setAttributeNS___, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter, ___wrappedunnamedParameter2 );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAttributeNS_qualifiedName_value_( string ns, string qualifiedName, string value ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedqualifiedName = Runtime.CreateStringProxy( qualifiedName );
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			NativeMethods.setAttributeNS_qualifiedName_value_( Handle, CachedSelectors.setAttributeNS_qualifiedName_value_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedqualifiedName, ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedqualifiedName );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScrollLeft_( int left ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScrollLeft_( Handle, CachedSelectors.setScrollLeft_, out ___occuredException, sizeof( int ), left );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScrollTop_( int top ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScrollTop_( Handle, CachedSelectors.setScrollTop_, out ___occuredException, sizeof( int ), top );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject style() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.style( Handle, CachedSelectors.style, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tagName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tagName( Handle, CachedSelectors.tagName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public int clientHeight {
				get { return _handle.clientHeight(); }
			}
			public int clientWidth {
				get { return _handle.clientWidth(); }
			}
			public int offsetHeight {
				get { return _handle.offsetHeight(); }
			}
			public int offsetLeft {
				get { return _handle.offsetLeft(); }
			}
			public NObjective.RuntimeObject offsetParent {
				get { return _handle.offsetParent(); }
			}
			public int offsetTop {
				get { return _handle.offsetTop(); }
			}
			public int offsetWidth {
				get { return _handle.offsetWidth(); }
			}
			public int scrollHeight {
				get { return _handle.scrollHeight(); }
			}
			public int scrollLeft {
				get { return _handle.scrollLeft(); }
			}
			public int scrollTop {
				get { return _handle.scrollTop(); }
			}
			public int scrollWidth {
				get { return _handle.scrollWidth(); }
			}
			public NObjective.RuntimeObject style {
				get { return _handle.style(); }
			}
			public NObjective.RuntimeObject tagName {
				get { return _handle.tagName(); }
			}
			private readonly DOMElement _handle;
			public ObjectiveCPropertyImplementation( DOMElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void blur( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int clientHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int clientLeft( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int clientTop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int clientWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char contains_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject contains );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void focus( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getAttributeNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getAttributeNodeNS__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getAttributeNodeNS_localName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr localName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getAttributeNS__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getAttributeNS_localName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr localName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getElementsByClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getElementsByTagName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getElementsByTagNameNS__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getElementsByTagNameNS_localName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr localName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasAttributeNS__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasAttributeNS_localName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr localName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr image( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr innerText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertAdjacentElement_element_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, NObjective.RuntimeObject element2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isFocused( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int offsetHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int offsetLeft( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr offsetParent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int offsetTop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int offsetWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr querySelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr querySelectorAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeAttributeNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMAttr node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAttributeNS__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAttributeNS_localName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr localName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollByLines_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int lines );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollByPages_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int pages );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int scrollHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollIntoView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollIntoViewIfNeeded_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool needed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int scrollLeft( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int scrollTop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int scrollWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttribute__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttribute_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute, IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr setAttributeNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMAttr node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr setAttributeNodeNS_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMAttr ns );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributeNS___( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter, IntPtr unnamedParameter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributeNS_qualifiedName_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr qualifiedName, IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScrollLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScrollTop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int top );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr style( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tagName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector blur = "blur";
			public static readonly Selector clientHeight = "clientHeight";
			public static readonly Selector clientLeft = "clientLeft";
			public static readonly Selector clientTop = "clientTop";
			public static readonly Selector clientWidth = "clientWidth";
			public static readonly Selector contains_ = "contains:";
			public static readonly Selector focus = "focus";
			public static readonly Selector getAttribute_ = "getAttribute:";
			public static readonly Selector getAttributeNode_ = "getAttributeNode:";
			public static readonly Selector getAttributeNodeNS__ = "getAttributeNodeNS::";
			public static readonly Selector getAttributeNodeNS_localName_ = "getAttributeNodeNS:localName:";
			public static readonly Selector getAttributeNS__ = "getAttributeNS::";
			public static readonly Selector getAttributeNS_localName_ = "getAttributeNS:localName:";
			public static readonly Selector getElementsByClassName_ = "getElementsByClassName:";
			public static readonly Selector getElementsByTagName_ = "getElementsByTagName:";
			public static readonly Selector getElementsByTagNameNS__ = "getElementsByTagNameNS::";
			public static readonly Selector getElementsByTagNameNS_localName_ = "getElementsByTagNameNS:localName:";
			public static readonly Selector hasAttribute_ = "hasAttribute:";
			public static readonly Selector hasAttributeNS__ = "hasAttributeNS::";
			public static readonly Selector hasAttributeNS_localName_ = "hasAttributeNS:localName:";
			public static readonly Selector image = "image";
			public static readonly Selector innerText = "innerText";
			public static readonly Selector insertAdjacentElement_element_ = "insertAdjacentElement:element:";
			public static readonly Selector isFocused = "isFocused";
			public static readonly Selector offsetHeight = "offsetHeight";
			public static readonly Selector offsetLeft = "offsetLeft";
			public static readonly Selector offsetParent = "offsetParent";
			public static readonly Selector offsetTop = "offsetTop";
			public static readonly Selector offsetWidth = "offsetWidth";
			public static readonly Selector querySelector_ = "querySelector:";
			public static readonly Selector querySelectorAll_ = "querySelectorAll:";
			public static readonly Selector removeAttribute_ = "removeAttribute:";
			public static readonly Selector removeAttributeNode_ = "removeAttributeNode:";
			public static readonly Selector removeAttributeNS__ = "removeAttributeNS::";
			public static readonly Selector removeAttributeNS_localName_ = "removeAttributeNS:localName:";
			public static readonly Selector scrollByLines_ = "scrollByLines:";
			public static readonly Selector scrollByPages_ = "scrollByPages:";
			public static readonly Selector scrollHeight = "scrollHeight";
			public static readonly Selector scrollIntoView_ = "scrollIntoView:";
			public static readonly Selector scrollIntoViewIfNeeded_ = "scrollIntoViewIfNeeded:";
			public static readonly Selector scrollLeft = "scrollLeft";
			public static readonly Selector scrollTop = "scrollTop";
			public static readonly Selector scrollWidth = "scrollWidth";
			public static readonly Selector setAttribute__ = "setAttribute::";
			public static readonly Selector setAttribute_value_ = "setAttribute:value:";
			public static readonly Selector setAttributeNode_ = "setAttributeNode:";
			public static readonly Selector setAttributeNodeNS_ = "setAttributeNodeNS:";
			public static readonly Selector setAttributeNS___ = "setAttributeNS:::";
			public static readonly Selector setAttributeNS_qualifiedName_value_ = "setAttributeNS:qualifiedName:value:";
			public static readonly Selector setScrollLeft_ = "setScrollLeft:";
			public static readonly Selector setScrollTop_ = "setScrollTop:";
			public static readonly Selector style = "style";
			public static readonly Selector tagName = "tagName";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMNode ) )]
	public struct DOMEntity : IEquatable<DOMEntity> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMEntity;
		public static implicit operator DOMNode( DOMEntity value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMEntity value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMEntity value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMEntity value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMEntity value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMEntity value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMEntity?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMEntity value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMEntity value1, DOMEntity value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMEntity value1, DOMEntity value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMEntity( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMEntity alloc() {
			return new DOMEntity( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject notationName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notationName( Handle, CachedSelectors.notationName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject publicId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicId( Handle, CachedSelectors.publicId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject systemId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemId( Handle, CachedSelectors.systemId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject notationName {
				get { return _handle.notationName(); }
			}
			public NObjective.RuntimeObject publicId {
				get { return _handle.publicId(); }
			}
			public NObjective.RuntimeObject systemId {
				get { return _handle.systemId(); }
			}
			private readonly DOMEntity _handle;
			public ObjectiveCPropertyImplementation( DOMEntity value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notationName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr publicId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector notationName = "notationName";
			public static readonly Selector publicId = "publicId";
			public static readonly Selector systemId = "systemId";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMNode ) )]
	public struct DOMEntityReference : IEquatable<DOMEntityReference> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMEntityReference;
		public static implicit operator DOMNode( DOMEntityReference value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMEntityReference value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMEntityReference value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMEntityReference value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMEntityReference value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMEntityReference value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMEntityReference?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMEntityReference value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMEntityReference value1, DOMEntityReference value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMEntityReference value1, DOMEntityReference value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMEntityReference( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMEntityReference alloc() {
			return new DOMEntityReference( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMEvent : IEquatable<DOMEvent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMEvent;
		public static implicit operator DOMObject( DOMEvent value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMEvent value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMEvent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMEvent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMEvent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMEvent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMEvent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMEvent value1, DOMEvent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMEvent value1, DOMEvent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMEvent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMEvent alloc() {
			return new DOMEvent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char bubbles() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bubbles( Handle, CachedSelectors.bubbles, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char cancelable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cancelable( Handle, CachedSelectors.cancelable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char cancelBubble() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cancelBubble( Handle, CachedSelectors.cancelBubble, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject currentTarget() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentTarget( Handle, CachedSelectors.currentTarget, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ushort eventPhase() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.eventPhase( Handle, CachedSelectors.eventPhase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void initEvent___( string @event, bool unnamedParameter, bool unnamedParameter2 ) {
			RuntimeObject ___occuredException;
			var ___wrappedevent = Runtime.CreateStringProxy( @event );
			NativeMethods.initEvent___( Handle, CachedSelectors.initEvent___, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( bool ), ___wrappedevent, unnamedParameter, unnamedParameter2 );
			Runtime.ReleaseNativeObject( ___wrappedevent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void initEvent_canBubbleArg_cancelableArg_( string @event, bool canBubbleArg, bool cancelableArg ) {
			RuntimeObject ___occuredException;
			var ___wrappedevent = Runtime.CreateStringProxy( @event );
			NativeMethods.initEvent_canBubbleArg_cancelableArg_( Handle, CachedSelectors.initEvent_canBubbleArg_cancelableArg_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( bool ), ___wrappedevent, canBubbleArg, cancelableArg );
			Runtime.ReleaseNativeObject( ___wrappedevent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void preventDefault() {
			RuntimeObject ___occuredException;
			NativeMethods.preventDefault( Handle, CachedSelectors.preventDefault, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char returnValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.returnValue( Handle, CachedSelectors.returnValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCancelBubble_( char bubble ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCancelBubble_( Handle, CachedSelectors.setCancelBubble_, out ___occuredException, sizeof( char ), bubble );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setReturnValue_( char value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setReturnValue_( Handle, CachedSelectors.setReturnValue_, out ___occuredException, sizeof( char ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject srcElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.srcElement( Handle, CachedSelectors.srcElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void stopPropagation() {
			RuntimeObject ___occuredException;
			NativeMethods.stopPropagation( Handle, CachedSelectors.stopPropagation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ulong timeStamp() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeStamp( Handle, CachedSelectors.timeStamp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public char bubbles {
				get { return _handle.bubbles(); }
			}
			public char cancelable {
				get { return _handle.cancelable(); }
			}
			public NObjective.RuntimeObject currentTarget {
				get { return _handle.currentTarget(); }
			}
			public ushort eventPhase {
				get { return _handle.eventPhase(); }
			}
			public NObjective.RuntimeObject target {
				get { return _handle.target(); }
			}
			public ulong timeStamp {
				get { return _handle.timeStamp(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			private readonly DOMEvent _handle;
			public ObjectiveCPropertyImplementation( DOMEvent value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char bubbles( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char cancelable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char cancelBubble( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentTarget( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort eventPhase( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initEvent___( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @event, bool unnamedParameter, bool unnamedParameter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initEvent_canBubbleArg_cancelableArg_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @event, bool canBubbleArg, bool cancelableArg );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void preventDefault( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char returnValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCancelBubble_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char bubble );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setReturnValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr srcElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopPropagation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ulong timeStamp( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector bubbles = "bubbles";
			public static readonly Selector cancelable = "cancelable";
			public static readonly Selector cancelBubble = "cancelBubble";
			public static readonly Selector currentTarget = "currentTarget";
			public static readonly Selector eventPhase = "eventPhase";
			public static readonly Selector initEvent___ = "initEvent:::";
			public static readonly Selector initEvent_canBubbleArg_cancelableArg_ = "initEvent:canBubbleArg:cancelableArg:";
			public static readonly Selector preventDefault = "preventDefault";
			public static readonly Selector returnValue = "returnValue";
			public static readonly Selector setCancelBubble_ = "setCancelBubble:";
			public static readonly Selector setReturnValue_ = "setReturnValue:";
			public static readonly Selector srcElement = "srcElement";
			public static readonly Selector stopPropagation = "stopPropagation";
			public static readonly Selector target = "target";
			public static readonly Selector timeStamp = "timeStamp";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLAnchorElement : IEquatable<DOMHTMLAnchorElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLAnchorElement;
		public static implicit operator DOMHTMLElement( DOMHTMLAnchorElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLAnchorElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLAnchorElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLAnchorElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLAnchorElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLAnchorElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLAnchorElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLAnchorElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLAnchorElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLAnchorElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLAnchorElement value1, DOMHTMLAnchorElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLAnchorElement value1, DOMHTMLAnchorElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLAnchorElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLAnchorElement alloc() {
			return new DOMHTMLAnchorElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject absoluteLinkURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.absoluteLinkURL( Handle, CachedSelectors.absoluteLinkURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessKey( Handle, CachedSelectors.accessKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject charset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.charset( Handle, CachedSelectors.charset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject coords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.coords( Handle, CachedSelectors.coords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject hashName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hashName( Handle, CachedSelectors.hashName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject host() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.host( Handle, CachedSelectors.host, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject hostname() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hostname( Handle, CachedSelectors.hostname, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject hreflang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hreflang( Handle, CachedSelectors.hreflang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pathname() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathname( Handle, CachedSelectors.pathname, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject port() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.port( Handle, CachedSelectors.port, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject protocol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protocol( Handle, CachedSelectors.protocol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rel( Handle, CachedSelectors.rel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rev() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rev( Handle, CachedSelectors.rev, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject search() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.search( Handle, CachedSelectors.search, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAccessKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccessKey_( Handle, CachedSelectors.setAccessKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCharset_( NObjective.RuntimeObject charset ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCharset_( Handle, CachedSelectors.setCharset_, out ___occuredException, sizeof( NObjective.RuntimeObject ), charset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCoords_( NObjective.RuntimeObject coords ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCoords_( Handle, CachedSelectors.setCoords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coords );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHref_( NObjective.RuntimeObject href ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHref_( Handle, CachedSelectors.setHref_, out ___occuredException, sizeof( NObjective.RuntimeObject ), href );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHreflang_( NObjective.RuntimeObject hreflang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHreflang_( Handle, CachedSelectors.setHreflang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), hreflang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRel_( NObjective.RuntimeObject rel ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRel_( Handle, CachedSelectors.setRel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRev_( NObjective.RuntimeObject rev ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRev_( Handle, CachedSelectors.setRev_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rev );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShape_( NObjective.RuntimeObject shape ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShape_( Handle, CachedSelectors.setShape_, out ___occuredException, sizeof( NObjective.RuntimeObject ), shape );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTabIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTabIndex_( Handle, CachedSelectors.setTabIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTarget_( Handle, CachedSelectors.setTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject shape() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shape( Handle, CachedSelectors.shape, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int tabIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tabIndex( Handle, CachedSelectors.tabIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject text() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.text( Handle, CachedSelectors.text, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject absoluteLinkURL {
				get { return _handle.absoluteLinkURL(); }
			}
			public NObjective.RuntimeObject accessKey {
				get { return _handle.accessKey(); }
			}
			public NObjective.RuntimeObject charset {
				get { return _handle.charset(); }
			}
			public NObjective.RuntimeObject coords {
				get { return _handle.coords(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject hreflang {
				get { return _handle.hreflang(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject rel {
				get { return _handle.rel(); }
			}
			public NObjective.RuntimeObject rev {
				get { return _handle.rev(); }
			}
			public NObjective.RuntimeObject shape {
				get { return _handle.shape(); }
			}
			public int tabIndex {
				get { return _handle.tabIndex(); }
			}
			public NObjective.RuntimeObject target {
				get { return _handle.target(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			private readonly DOMHTMLAnchorElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLAnchorElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr absoluteLinkURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr charset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr coords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hashName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr host( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hostname( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hreflang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathname( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr port( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr protocol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rev( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr search( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAccessKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCharset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject charset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCoords_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coords );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHref_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject href );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHreflang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject hreflang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRev_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rev );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShape_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject shape );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTabIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr shape( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int tabIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr text( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector absoluteLinkURL = "absoluteLinkURL";
			public static readonly Selector accessKey = "accessKey";
			public static readonly Selector charset = "charset";
			public static readonly Selector coords = "coords";
			public static readonly Selector hashName = "hashName";
			public static readonly Selector host = "host";
			public static readonly Selector hostname = "hostname";
			public static readonly Selector href = "href";
			public static readonly Selector hreflang = "hreflang";
			public static readonly Selector name = "name";
			public static readonly Selector pathname = "pathname";
			public static readonly Selector port = "port";
			public static readonly Selector protocol = "protocol";
			public static readonly Selector rel = "rel";
			public static readonly Selector rev = "rev";
			public static readonly Selector search = "search";
			public static readonly Selector setAccessKey_ = "setAccessKey:";
			public static readonly Selector setCharset_ = "setCharset:";
			public static readonly Selector setCoords_ = "setCoords:";
			public static readonly Selector setHref_ = "setHref:";
			public static readonly Selector setHreflang_ = "setHreflang:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setRel_ = "setRel:";
			public static readonly Selector setRev_ = "setRev:";
			public static readonly Selector setShape_ = "setShape:";
			public static readonly Selector setTabIndex_ = "setTabIndex:";
			public static readonly Selector setTarget_ = "setTarget:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector shape = "shape";
			public static readonly Selector tabIndex = "tabIndex";
			public static readonly Selector target = "target";
			public static readonly Selector text = "text";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLAppletElement : IEquatable<DOMHTMLAppletElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLAppletElement;
		public static implicit operator DOMHTMLElement( DOMHTMLAppletElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLAppletElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLAppletElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLAppletElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLAppletElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLAppletElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLAppletElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLAppletElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLAppletElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLAppletElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLAppletElement value1, DOMHTMLAppletElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLAppletElement value1, DOMHTMLAppletElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLAppletElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLAppletElement alloc() {
			return new DOMHTMLAppletElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject alt() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alt( Handle, CachedSelectors.alt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject archive() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archive( Handle, CachedSelectors.archive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject code() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.code( Handle, CachedSelectors.code, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject codeBase() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.codeBase( Handle, CachedSelectors.codeBase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int hspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hspace( Handle, CachedSelectors.hspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject @object() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@object( Handle, CachedSelectors.@object, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlt_( NObjective.RuntimeObject alt ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlt_( Handle, CachedSelectors.setAlt_, out ___occuredException, sizeof( NObjective.RuntimeObject ), alt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setArchive_( NObjective.RuntimeObject archive ) {
			RuntimeObject ___occuredException;
			NativeMethods.setArchive_( Handle, CachedSelectors.setArchive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), archive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCode_( NObjective.RuntimeObject code ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCode_( Handle, CachedSelectors.setCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCodeBase_( NObjective.RuntimeObject @base ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCodeBase_( Handle, CachedSelectors.setCodeBase_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @base );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHeight_( NObjective.RuntimeObject height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHeight_( Handle, CachedSelectors.setHeight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHspace_( int hspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHspace_( Handle, CachedSelectors.setHspace_, out ___occuredException, sizeof( int ), hspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObject_( Handle, CachedSelectors.setObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVspace_( int vspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVspace_( Handle, CachedSelectors.setVspace_, out ___occuredException, sizeof( int ), vspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( NObjective.RuntimeObject width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int vspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vspace( Handle, CachedSelectors.vspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject alt {
				get { return _handle.alt(); }
			}
			public NObjective.RuntimeObject archive {
				get { return _handle.archive(); }
			}
			public NObjective.RuntimeObject code {
				get { return _handle.code(); }
			}
			public NObjective.RuntimeObject codeBase {
				get { return _handle.codeBase(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public int hspace {
				get { return _handle.hspace(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject @object {
				get { return _handle.@object(); }
			}
			public int vspace {
				get { return _handle.vspace(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLAppletElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLAppletElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr code( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr codeBase( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int hspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @object( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject alt );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setArchive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject archive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCodeBase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @base );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int hspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int vspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int vspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector alt = "alt";
			public static readonly Selector archive = "archive";
			public static readonly Selector code = "code";
			public static readonly Selector codeBase = "codeBase";
			public static readonly Selector height = "height";
			public static readonly Selector hspace = "hspace";
			public static readonly Selector name = "name";
			public static readonly Selector @object = "object";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setAlt_ = "setAlt:";
			public static readonly Selector setArchive_ = "setArchive:";
			public static readonly Selector setCode_ = "setCode:";
			public static readonly Selector setCodeBase_ = "setCodeBase:";
			public static readonly Selector setHeight_ = "setHeight:";
			public static readonly Selector setHspace_ = "setHspace:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setObject_ = "setObject:";
			public static readonly Selector setVspace_ = "setVspace:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector vspace = "vspace";
			public static readonly Selector width = "width";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLAreaElement : IEquatable<DOMHTMLAreaElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLAreaElement;
		public static implicit operator DOMHTMLElement( DOMHTMLAreaElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLAreaElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLAreaElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLAreaElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLAreaElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLAreaElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLAreaElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLAreaElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLAreaElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLAreaElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLAreaElement value1, DOMHTMLAreaElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLAreaElement value1, DOMHTMLAreaElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLAreaElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLAreaElement alloc() {
			return new DOMHTMLAreaElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject absoluteLinkURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.absoluteLinkURL( Handle, CachedSelectors.absoluteLinkURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessKey( Handle, CachedSelectors.accessKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject alt() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alt( Handle, CachedSelectors.alt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject coords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.coords( Handle, CachedSelectors.coords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject hashName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hashName( Handle, CachedSelectors.hashName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject host() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.host( Handle, CachedSelectors.host, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject hostname() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hostname( Handle, CachedSelectors.hostname, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char noHref() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.noHref( Handle, CachedSelectors.noHref, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject pathname() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathname( Handle, CachedSelectors.pathname, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject port() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.port( Handle, CachedSelectors.port, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject protocol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protocol( Handle, CachedSelectors.protocol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject search() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.search( Handle, CachedSelectors.search, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAccessKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccessKey_( Handle, CachedSelectors.setAccessKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlt_( NObjective.RuntimeObject alt ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlt_( Handle, CachedSelectors.setAlt_, out ___occuredException, sizeof( NObjective.RuntimeObject ), alt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCoords_( NObjective.RuntimeObject coords ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCoords_( Handle, CachedSelectors.setCoords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coords );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHref_( NObjective.RuntimeObject href ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHref_( Handle, CachedSelectors.setHref_, out ___occuredException, sizeof( NObjective.RuntimeObject ), href );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNoHref_( char href ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNoHref_( Handle, CachedSelectors.setNoHref_, out ___occuredException, sizeof( char ), href );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShape_( NObjective.RuntimeObject shape ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShape_( Handle, CachedSelectors.setShape_, out ___occuredException, sizeof( NObjective.RuntimeObject ), shape );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTabIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTabIndex_( Handle, CachedSelectors.setTabIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTarget_( Handle, CachedSelectors.setTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject shape() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shape( Handle, CachedSelectors.shape, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int tabIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tabIndex( Handle, CachedSelectors.tabIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject absoluteLinkURL {
				get { return _handle.absoluteLinkURL(); }
			}
			public NObjective.RuntimeObject accessKey {
				get { return _handle.accessKey(); }
			}
			public NObjective.RuntimeObject alt {
				get { return _handle.alt(); }
			}
			public NObjective.RuntimeObject coords {
				get { return _handle.coords(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public char noHref {
				get { return _handle.noHref(); }
			}
			public NObjective.RuntimeObject shape {
				get { return _handle.shape(); }
			}
			public int tabIndex {
				get { return _handle.tabIndex(); }
			}
			public NObjective.RuntimeObject target {
				get { return _handle.target(); }
			}
			private readonly DOMHTMLAreaElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLAreaElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr absoluteLinkURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr coords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hashName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr host( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hostname( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char noHref( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathname( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr port( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr protocol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr search( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAccessKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject alt );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCoords_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coords );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHref_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject href );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNoHref_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char href );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShape_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject shape );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTabIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr shape( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int tabIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector absoluteLinkURL = "absoluteLinkURL";
			public static readonly Selector accessKey = "accessKey";
			public static readonly Selector alt = "alt";
			public static readonly Selector coords = "coords";
			public static readonly Selector hashName = "hashName";
			public static readonly Selector host = "host";
			public static readonly Selector hostname = "hostname";
			public static readonly Selector href = "href";
			public static readonly Selector noHref = "noHref";
			public static readonly Selector pathname = "pathname";
			public static readonly Selector port = "port";
			public static readonly Selector protocol = "protocol";
			public static readonly Selector search = "search";
			public static readonly Selector setAccessKey_ = "setAccessKey:";
			public static readonly Selector setAlt_ = "setAlt:";
			public static readonly Selector setCoords_ = "setCoords:";
			public static readonly Selector setHref_ = "setHref:";
			public static readonly Selector setNoHref_ = "setNoHref:";
			public static readonly Selector setShape_ = "setShape:";
			public static readonly Selector setTabIndex_ = "setTabIndex:";
			public static readonly Selector setTarget_ = "setTarget:";
			public static readonly Selector shape = "shape";
			public static readonly Selector tabIndex = "tabIndex";
			public static readonly Selector target = "target";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLBaseElement : IEquatable<DOMHTMLBaseElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLBaseElement;
		public static implicit operator DOMHTMLElement( DOMHTMLBaseElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLBaseElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLBaseElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLBaseElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLBaseElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLBaseElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLBaseElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLBaseElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLBaseElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLBaseElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLBaseElement value1, DOMHTMLBaseElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLBaseElement value1, DOMHTMLBaseElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLBaseElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLBaseElement alloc() {
			return new DOMHTMLBaseElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setHref_( NObjective.RuntimeObject href ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHref_( Handle, CachedSelectors.setHref_, out ___occuredException, sizeof( NObjective.RuntimeObject ), href );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTarget_( Handle, CachedSelectors.setTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject target {
				get { return _handle.target(); }
			}
			private readonly DOMHTMLBaseElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLBaseElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHref_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject href );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector href = "href";
			public static readonly Selector setHref_ = "setHref:";
			public static readonly Selector setTarget_ = "setTarget:";
			public static readonly Selector target = "target";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLBaseFontElement : IEquatable<DOMHTMLBaseFontElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLBaseFontElement;
		public static implicit operator DOMHTMLElement( DOMHTMLBaseFontElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLBaseFontElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLBaseFontElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLBaseFontElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLBaseFontElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLBaseFontElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLBaseFontElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLBaseFontElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLBaseFontElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLBaseFontElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLBaseFontElement value1, DOMHTMLBaseFontElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLBaseFontElement value1, DOMHTMLBaseFontElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLBaseFontElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLBaseFontElement alloc() {
			return new DOMHTMLBaseFontElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject color() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.color( Handle, CachedSelectors.color, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject face() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.face( Handle, CachedSelectors.face, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setColor_( Handle, CachedSelectors.setColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFace_( NObjective.RuntimeObject face ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFace_( Handle, CachedSelectors.setFace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), face );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSize_( NObjective.RuntimeObject size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSize_( Handle, CachedSelectors.setSize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject size() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.size( Handle, CachedSelectors.size, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject color {
				get { return _handle.color(); }
			}
			public NObjective.RuntimeObject face {
				get { return _handle.face(); }
			}
			public NObjective.RuntimeObject size {
				get { return _handle.size(); }
			}
			private readonly DOMHTMLBaseFontElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLBaseFontElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr color( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr face( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject face );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr size( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector color = "color";
			public static readonly Selector face = "face";
			public static readonly Selector setColor_ = "setColor:";
			public static readonly Selector setFace_ = "setFace:";
			public static readonly Selector setSize_ = "setSize:";
			public static readonly Selector size = "size";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLBodyElement : IEquatable<DOMHTMLBodyElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLBodyElement;
		public static implicit operator DOMHTMLElement( DOMHTMLBodyElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLBodyElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLBodyElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLBodyElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLBodyElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLBodyElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLBodyElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLBodyElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLBodyElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLBodyElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLBodyElement value1, DOMHTMLBodyElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLBodyElement value1, DOMHTMLBodyElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLBodyElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLBodyElement alloc() {
			return new DOMHTMLBodyElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject aLink() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.aLink( Handle, CachedSelectors.aLink, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject background() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.background( Handle, CachedSelectors.background, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject bgColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bgColor( Handle, CachedSelectors.bgColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject link() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.link( Handle, CachedSelectors.link, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setALink_( NObjective.RuntimeObject link ) {
			RuntimeObject ___occuredException;
			NativeMethods.setALink_( Handle, CachedSelectors.setALink_, out ___occuredException, sizeof( NObjective.RuntimeObject ), link );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBackground_( NObjective.RuntimeObject background ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBackground_( Handle, CachedSelectors.setBackground_, out ___occuredException, sizeof( NObjective.RuntimeObject ), background );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBgColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBgColor_( Handle, CachedSelectors.setBgColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLink_( NObjective.RuntimeObject link ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLink_( Handle, CachedSelectors.setLink_, out ___occuredException, sizeof( NObjective.RuntimeObject ), link );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setText_( Handle, CachedSelectors.setText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVLink_( NObjective.RuntimeObject link ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVLink_( Handle, CachedSelectors.setVLink_, out ___occuredException, sizeof( NObjective.RuntimeObject ), link );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject text() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.text( Handle, CachedSelectors.text, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject vLink() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vLink( Handle, CachedSelectors.vLink, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject aLink {
				get { return _handle.aLink(); }
			}
			public NObjective.RuntimeObject background {
				get { return _handle.background(); }
			}
			public NObjective.RuntimeObject bgColor {
				get { return _handle.bgColor(); }
			}
			public NObjective.RuntimeObject link {
				get { return _handle.link(); }
			}
			public NObjective.RuntimeObject text {
				get { return _handle.text(); }
			}
			public NObjective.RuntimeObject vLink {
				get { return _handle.vLink(); }
			}
			private readonly DOMHTMLBodyElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLBodyElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr aLink( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr background( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bgColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr link( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setALink_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject link );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBackground_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject background );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBgColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLink_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject link );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVLink_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject link );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr text( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vLink( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector aLink = "aLink";
			public static readonly Selector background = "background";
			public static readonly Selector bgColor = "bgColor";
			public static readonly Selector link = "link";
			public static readonly Selector setALink_ = "setALink:";
			public static readonly Selector setBackground_ = "setBackground:";
			public static readonly Selector setBgColor_ = "setBgColor:";
			public static readonly Selector setLink_ = "setLink:";
			public static readonly Selector setText_ = "setText:";
			public static readonly Selector setVLink_ = "setVLink:";
			public static readonly Selector text = "text";
			public static readonly Selector vLink = "vLink";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLBRElement : IEquatable<DOMHTMLBRElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLBRElement;
		public static implicit operator DOMHTMLElement( DOMHTMLBRElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLBRElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLBRElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLBRElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLBRElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLBRElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLBRElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLBRElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLBRElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLBRElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLBRElement value1, DOMHTMLBRElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLBRElement value1, DOMHTMLBRElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLBRElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLBRElement alloc() {
			return new DOMHTMLBRElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject clear() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setClear_( NObjective.RuntimeObject clear ) {
			RuntimeObject ___occuredException;
			NativeMethods.setClear_( Handle, CachedSelectors.setClear_, out ___occuredException, sizeof( NObjective.RuntimeObject ), clear );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject clear {
				get { return _handle.clear(); }
			}
			private readonly DOMHTMLBRElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLBRElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setClear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject clear );
		}
		static internal class CachedSelectors {
			public static readonly Selector clear = "clear";
			public static readonly Selector setClear_ = "setClear:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLButtonElement : IEquatable<DOMHTMLButtonElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLButtonElement;
		public static implicit operator DOMHTMLElement( DOMHTMLButtonElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLButtonElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLButtonElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLButtonElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLButtonElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLButtonElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLButtonElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLButtonElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLButtonElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLButtonElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLButtonElement value1, DOMHTMLButtonElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLButtonElement value1, DOMHTMLButtonElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLButtonElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLButtonElement alloc() {
			return new DOMHTMLButtonElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessKey( Handle, CachedSelectors.accessKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void click() {
			RuntimeObject ___occuredException;
			NativeMethods.click( Handle, CachedSelectors.click, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char disabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabled( Handle, CachedSelectors.disabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject form() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.form( Handle, CachedSelectors.form, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAccessKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccessKey_( Handle, CachedSelectors.setAccessKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabled_( Handle, CachedSelectors.setDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTabIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTabIndex_( Handle, CachedSelectors.setTabIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int tabIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tabIndex( Handle, CachedSelectors.tabIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject accessKey {
				get { return _handle.accessKey(); }
			}
			public char disabled {
				get { return _handle.disabled(); }
			}
			public NObjective.RuntimeObject form {
				get { return _handle.form(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public int tabIndex {
				get { return _handle.tabIndex(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			public NObjective.RuntimeObject value {
				get { return _handle.value(); }
			}
			private readonly DOMHTMLButtonElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLButtonElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void click( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char disabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr form( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAccessKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTabIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int tabIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessKey = "accessKey";
			public static readonly Selector click = "click";
			public static readonly Selector disabled = "disabled";
			public static readonly Selector form = "form";
			public static readonly Selector name = "name";
			public static readonly Selector setAccessKey_ = "setAccessKey:";
			public static readonly Selector setDisabled_ = "setDisabled:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setTabIndex_ = "setTabIndex:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector tabIndex = "tabIndex";
			public static readonly Selector type = "type";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLCanvasElement : IEquatable<DOMHTMLCanvasElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLCanvasElement;
		public static implicit operator DOMHTMLElement( DOMHTMLCanvasElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLCanvasElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLCanvasElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLCanvasElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLCanvasElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLCanvasElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLCanvasElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLCanvasElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLCanvasElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLCanvasElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLCanvasElement value1, DOMHTMLCanvasElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLCanvasElement value1, DOMHTMLCanvasElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLCanvasElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLCanvasElement alloc() {
			return new DOMHTMLCanvasElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setHeight_( int height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHeight_( Handle, CachedSelectors.setHeight_, out ___occuredException, sizeof( int ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( int width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( int ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public int height {
				get { return _handle.height(); }
			}
			public int width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLCanvasElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLCanvasElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector height = "height";
			public static readonly Selector setHeight_ = "setHeight:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector width = "width";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMHTMLCollection : IEquatable<DOMHTMLCollection> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLCollection;
		public static implicit operator DOMObject( DOMHTMLCollection value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLCollection value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLCollection value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLCollection value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLCollection value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLCollection?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLCollection value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLCollection value1, DOMHTMLCollection value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLCollection value1, DOMHTMLCollection value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLCollection( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLCollection alloc() {
			return new DOMHTMLCollection( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMNode item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public DOMNode namedItem_( string item ) {
			RuntimeObject ___occuredException;
			var ___wrappeditem = Runtime.CreateStringProxy( item );
			var ___result = NativeMethods.namedItem_( Handle, CachedSelectors.namedItem_, out ___occuredException, sizeof( IntPtr ), ___wrappeditem );
			Runtime.ReleaseNativeObject( ___wrappeditem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public NObjective.RuntimeObject tags_( NObjective.RuntimeObject tags ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tags_( Handle, CachedSelectors.tags_, out ___occuredException, sizeof( NObjective.RuntimeObject ), tags );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public uint length {
				get { return _handle.length(); }
			}
			private readonly DOMHTMLCollection _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLCollection value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr namedItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tags_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject tags );
		}
		static internal class CachedSelectors {
			public static readonly Selector item_ = "item:";
			public static readonly Selector length = "length";
			public static readonly Selector namedItem_ = "namedItem:";
			public static readonly Selector tags_ = "tags:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLDirectoryElement : IEquatable<DOMHTMLDirectoryElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLDirectoryElement;
		public static implicit operator DOMHTMLElement( DOMHTMLDirectoryElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLDirectoryElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLDirectoryElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLDirectoryElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLDirectoryElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLDirectoryElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLDirectoryElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLDirectoryElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLDirectoryElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLDirectoryElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLDirectoryElement value1, DOMHTMLDirectoryElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLDirectoryElement value1, DOMHTMLDirectoryElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLDirectoryElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLDirectoryElement alloc() {
			return new DOMHTMLDirectoryElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char compact() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compact( Handle, CachedSelectors.compact, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCompact_( char compact ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCompact_( Handle, CachedSelectors.setCompact_, out ___occuredException, sizeof( char ), compact );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public char compact {
				get { return _handle.compact(); }
			}
			private readonly DOMHTMLDirectoryElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLDirectoryElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compact( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCompact_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char compact );
		}
		static internal class CachedSelectors {
			public static readonly Selector compact = "compact";
			public static readonly Selector setCompact_ = "setCompact:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLDivElement : IEquatable<DOMHTMLDivElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLDivElement;
		public static implicit operator DOMHTMLElement( DOMHTMLDivElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLDivElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLDivElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLDivElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLDivElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLDivElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLDivElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLDivElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLDivElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLDivElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLDivElement value1, DOMHTMLDivElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLDivElement value1, DOMHTMLDivElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLDivElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLDivElement alloc() {
			return new DOMHTMLDivElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			private readonly DOMHTMLDivElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLDivElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector setAlign_ = "setAlign:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLDListElement : IEquatable<DOMHTMLDListElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLDListElement;
		public static implicit operator DOMHTMLElement( DOMHTMLDListElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLDListElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLDListElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLDListElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLDListElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLDListElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLDListElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLDListElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLDListElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLDListElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLDListElement value1, DOMHTMLDListElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLDListElement value1, DOMHTMLDListElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLDListElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLDListElement alloc() {
			return new DOMHTMLDListElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char compact() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compact( Handle, CachedSelectors.compact, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCompact_( char compact ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCompact_( Handle, CachedSelectors.setCompact_, out ___occuredException, sizeof( char ), compact );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public char compact {
				get { return _handle.compact(); }
			}
			private readonly DOMHTMLDListElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLDListElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compact( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCompact_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char compact );
		}
		static internal class CachedSelectors {
			public static readonly Selector compact = "compact";
			public static readonly Selector setCompact_ = "setCompact:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMDocument ) )]
	public struct DOMHTMLDocument : IEquatable<DOMHTMLDocument> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLDocument;
		public static implicit operator DOMDocument( DOMHTMLDocument value ) {
			return new DOMDocument( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLDocument value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLDocument value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLDocument value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLDocument value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLDocument value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLDocument value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLDocument?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLDocument value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLDocument value1, DOMHTMLDocument value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLDocument value1, DOMHTMLDocument value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLDocument( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLDocument alloc() {
			return new DOMHTMLDocument( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject alinkColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alinkColor( Handle, CachedSelectors.alinkColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject bgColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bgColor( Handle, CachedSelectors.bgColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void captureEvents() {
			RuntimeObject ___occuredException;
			NativeMethods.captureEvents( Handle, CachedSelectors.captureEvents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void close() {
			RuntimeObject ___occuredException;
			NativeMethods.close( Handle, CachedSelectors.close, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject compatMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compatMode( Handle, CachedSelectors.compatMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMDocumentFragment createDocumentFragmentWithMarkupString_baseURL_( string @string, NSURL baseURL ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.createDocumentFragmentWithMarkupString_baseURL_( Handle, CachedSelectors.createDocumentFragmentWithMarkupString_baseURL_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSURL ), ___wrappedstring, baseURL );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocumentFragment( ___result );
		}
		unsafe public DOMDocumentFragment createDocumentFragmentWithText_( string text ) {
			RuntimeObject ___occuredException;
			var ___wrappedtext = Runtime.CreateStringProxy( text );
			var ___result = NativeMethods.createDocumentFragmentWithText_( Handle, CachedSelectors.createDocumentFragmentWithText_, out ___occuredException, sizeof( IntPtr ), ___wrappedtext );
			Runtime.ReleaseNativeObject( ___wrappedtext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocumentFragment( ___result );
		}
		unsafe public NObjective.RuntimeObject designMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.designMode( Handle, CachedSelectors.designMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dir() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dir( Handle, CachedSelectors.dir, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject embeds() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.embeds( Handle, CachedSelectors.embeds, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject fgColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fgColor( Handle, CachedSelectors.fgColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject linkColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.linkColor( Handle, CachedSelectors.linkColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void open() {
			RuntimeObject ___occuredException;
			NativeMethods.open( Handle, CachedSelectors.open, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject plugins() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.plugins( Handle, CachedSelectors.plugins, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void releaseEvents() {
			RuntimeObject ___occuredException;
			NativeMethods.releaseEvents( Handle, CachedSelectors.releaseEvents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject scripts() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scripts( Handle, CachedSelectors.scripts, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlinkColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlinkColor_( Handle, CachedSelectors.setAlinkColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBgColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBgColor_( Handle, CachedSelectors.setBgColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDesignMode_( NObjective.RuntimeObject mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDesignMode_( Handle, CachedSelectors.setDesignMode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDir_( NObjective.RuntimeObject dir ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDir_( Handle, CachedSelectors.setDir_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dir );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFgColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFgColor_( Handle, CachedSelectors.setFgColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLinkColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLinkColor_( Handle, CachedSelectors.setLinkColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVlinkColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVlinkColor_( Handle, CachedSelectors.setVlinkColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject vlinkColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vlinkColor( Handle, CachedSelectors.vlinkColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void write_( string write ) {
			RuntimeObject ___occuredException;
			var ___wrappedwrite = Runtime.CreateStringProxy( write );
			NativeMethods.write_( Handle, CachedSelectors.write_, out ___occuredException, sizeof( IntPtr ), ___wrappedwrite );
			Runtime.ReleaseNativeObject( ___wrappedwrite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeln_( string writeln ) {
			RuntimeObject ___occuredException;
			var ___wrappedwriteln = Runtime.CreateStringProxy( writeln );
			NativeMethods.writeln_( Handle, CachedSelectors.writeln_, out ___occuredException, sizeof( IntPtr ), ___wrappedwriteln );
			Runtime.ReleaseNativeObject( ___wrappedwriteln );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alinkColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bgColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void captureEvents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void close( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr compatMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createDocumentFragmentWithMarkupString_baseURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, NSURL baseURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createDocumentFragmentWithText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr designMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dir( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr embeds( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fgColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr linkColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void open( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr plugins( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void releaseEvents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scripts( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlinkColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBgColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDesignMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDir_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dir );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFgColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLinkColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVlinkColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vlinkColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void write_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr write );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeln_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr writeln );
		}
		static internal class CachedSelectors {
			public static readonly Selector alinkColor = "alinkColor";
			public static readonly Selector bgColor = "bgColor";
			public static readonly Selector captureEvents = "captureEvents";
			public static readonly Selector close = "close";
			public static readonly Selector compatMode = "compatMode";
			public static readonly Selector createDocumentFragmentWithMarkupString_baseURL_ = "createDocumentFragmentWithMarkupString:baseURL:";
			public static readonly Selector createDocumentFragmentWithText_ = "createDocumentFragmentWithText:";
			public static readonly Selector designMode = "designMode";
			public static readonly Selector dir = "dir";
			public static readonly Selector embeds = "embeds";
			public static readonly Selector fgColor = "fgColor";
			public static readonly Selector height = "height";
			public static readonly Selector linkColor = "linkColor";
			public static readonly Selector open = "open";
			public static readonly Selector plugins = "plugins";
			public static readonly Selector releaseEvents = "releaseEvents";
			public static readonly Selector scripts = "scripts";
			public static readonly Selector setAlinkColor_ = "setAlinkColor:";
			public static readonly Selector setBgColor_ = "setBgColor:";
			public static readonly Selector setDesignMode_ = "setDesignMode:";
			public static readonly Selector setDir_ = "setDir:";
			public static readonly Selector setFgColor_ = "setFgColor:";
			public static readonly Selector setLinkColor_ = "setLinkColor:";
			public static readonly Selector setVlinkColor_ = "setVlinkColor:";
			public static readonly Selector vlinkColor = "vlinkColor";
			public static readonly Selector width = "width";
			public static readonly Selector write_ = "write:";
			public static readonly Selector writeln_ = "writeln:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMElement ) )]
	public struct DOMHTMLElement : IEquatable<DOMHTMLElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLElement;
		public static implicit operator DOMElement( DOMHTMLElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLElement value1, DOMHTMLElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLElement value1, DOMHTMLElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLElement alloc() {
			return new DOMHTMLElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject children() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.children( Handle, CachedSelectors.children, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contentEditable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentEditable( Handle, CachedSelectors.contentEditable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dir() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dir( Handle, CachedSelectors.dir, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject idName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.idName( Handle, CachedSelectors.idName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject innerHTML() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.innerHTML( Handle, CachedSelectors.innerHTML, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lang( Handle, CachedSelectors.lang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject outerHTML() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outerHTML( Handle, CachedSelectors.outerHTML, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject outerText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outerText( Handle, CachedSelectors.outerText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setClassName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setClassName_( Handle, CachedSelectors.setClassName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setContentEditable_( NObjective.RuntimeObject editable ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContentEditable_( Handle, CachedSelectors.setContentEditable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDir_( NObjective.RuntimeObject dir ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDir_( Handle, CachedSelectors.setDir_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dir );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIdName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIdName_( Handle, CachedSelectors.setIdName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setInnerHTML_( NObjective.RuntimeObject html ) {
			RuntimeObject ___occuredException;
			NativeMethods.setInnerHTML_( Handle, CachedSelectors.setInnerHTML_, out ___occuredException, sizeof( NObjective.RuntimeObject ), html );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setInnerText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setInnerText_( Handle, CachedSelectors.setInnerText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLang_( NObjective.RuntimeObject lang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLang_( Handle, CachedSelectors.setLang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), lang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOuterHTML_( NObjective.RuntimeObject html ) {
			RuntimeObject ___occuredException;
			NativeMethods.setOuterHTML_( Handle, CachedSelectors.setOuterHTML_, out ___occuredException, sizeof( NObjective.RuntimeObject ), html );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOuterText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setOuterText_( Handle, CachedSelectors.setOuterText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitle_( Handle, CachedSelectors.setTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject titleDisplayString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.titleDisplayString( Handle, CachedSelectors.titleDisplayString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject children {
				get { return _handle.children(); }
			}
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject contentEditable {
				get { return _handle.contentEditable(); }
			}
			public NObjective.RuntimeObject dir {
				get { return _handle.dir(); }
			}
			public NObjective.RuntimeObject idName {
				get { return _handle.idName(); }
			}
			public NObjective.RuntimeObject innerHTML {
				get { return _handle.innerHTML(); }
			}
			public NObjective.RuntimeObject innerText {
				get { return new DOMElement( _handle ).innerText(); }
			}
			public bool isContentEditable {
				get { return new DOMNode( _handle ).isContentEditable(); }
			}
			public NObjective.RuntimeObject lang {
				get { return _handle.lang(); }
			}
			public NObjective.RuntimeObject outerHTML {
				get { return _handle.outerHTML(); }
			}
			public NObjective.RuntimeObject outerText {
				get { return _handle.outerText(); }
			}
			public NObjective.RuntimeObject title {
				get { return _handle.title(); }
			}
			public NObjective.RuntimeObject titleDisplayString {
				get { return _handle.titleDisplayString(); }
			}
			private readonly DOMHTMLElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr children( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentEditable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dir( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr idName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr innerHTML( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outerHTML( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outerText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContentEditable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDir_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dir );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIdName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setInnerHTML_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject html );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setInnerText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject lang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOuterHTML_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject html );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOuterText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr titleDisplayString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector children = "children";
			public static readonly Selector className = "className";
			public static readonly Selector contentEditable = "contentEditable";
			public static readonly Selector dir = "dir";
			public static readonly Selector idName = "idName";
			public static readonly Selector innerHTML = "innerHTML";
			public static readonly Selector lang = "lang";
			public static readonly Selector outerHTML = "outerHTML";
			public static readonly Selector outerText = "outerText";
			public static readonly Selector setClassName_ = "setClassName:";
			public static readonly Selector setContentEditable_ = "setContentEditable:";
			public static readonly Selector setDir_ = "setDir:";
			public static readonly Selector setIdName_ = "setIdName:";
			public static readonly Selector setInnerHTML_ = "setInnerHTML:";
			public static readonly Selector setInnerText_ = "setInnerText:";
			public static readonly Selector setLang_ = "setLang:";
			public static readonly Selector setOuterHTML_ = "setOuterHTML:";
			public static readonly Selector setOuterText_ = "setOuterText:";
			public static readonly Selector setTitle_ = "setTitle:";
			public static readonly Selector title = "title";
			public static readonly Selector titleDisplayString = "titleDisplayString";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLEmbedElement : IEquatable<DOMHTMLEmbedElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLEmbedElement;
		public static implicit operator DOMHTMLElement( DOMHTMLEmbedElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLEmbedElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLEmbedElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLEmbedElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLEmbedElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLEmbedElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLEmbedElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLEmbedElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLEmbedElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLEmbedElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLEmbedElement value1, DOMHTMLEmbedElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLEmbedElement value1, DOMHTMLEmbedElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLEmbedElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLEmbedElement alloc() {
			return new DOMHTMLEmbedElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getSVGDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getSVGDocument( Handle, CachedSelectors.getSVGDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHeight_( int height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHeight_( Handle, CachedSelectors.setHeight_, out ___occuredException, sizeof( int ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSrc_( NObjective.RuntimeObject src ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSrc_( Handle, CachedSelectors.setSrc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), src );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( int width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( int ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject src() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.src( Handle, CachedSelectors.src, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public int height {
				get { return _handle.height(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject src {
				get { return _handle.src(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			public int width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLEmbedElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLEmbedElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getSVGDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSrc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject src );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr src( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector getSVGDocument = "getSVGDocument";
			public static readonly Selector height = "height";
			public static readonly Selector name = "name";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setHeight_ = "setHeight:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setSrc_ = "setSrc:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector src = "src";
			public static readonly Selector type = "type";
			public static readonly Selector width = "width";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLFieldSetElement : IEquatable<DOMHTMLFieldSetElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLFieldSetElement;
		public static implicit operator DOMHTMLElement( DOMHTMLFieldSetElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLFieldSetElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLFieldSetElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLFieldSetElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLFieldSetElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLFieldSetElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLFieldSetElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLFieldSetElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLFieldSetElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLFieldSetElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLFieldSetElement value1, DOMHTMLFieldSetElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLFieldSetElement value1, DOMHTMLFieldSetElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLFieldSetElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLFieldSetElement alloc() {
			return new DOMHTMLFieldSetElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject form() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.form( Handle, CachedSelectors.form, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject form {
				get { return _handle.form(); }
			}
			private readonly DOMHTMLFieldSetElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLFieldSetElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr form( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector form = "form";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLFontElement : IEquatable<DOMHTMLFontElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLFontElement;
		public static implicit operator DOMHTMLElement( DOMHTMLFontElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLFontElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLFontElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLFontElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLFontElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLFontElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLFontElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLFontElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLFontElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLFontElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLFontElement value1, DOMHTMLFontElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLFontElement value1, DOMHTMLFontElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLFontElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLFontElement alloc() {
			return new DOMHTMLFontElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject color() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.color( Handle, CachedSelectors.color, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject face() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.face( Handle, CachedSelectors.face, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setColor_( Handle, CachedSelectors.setColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFace_( NObjective.RuntimeObject face ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFace_( Handle, CachedSelectors.setFace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), face );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSize_( NObjective.RuntimeObject size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSize_( Handle, CachedSelectors.setSize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject size() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.size( Handle, CachedSelectors.size, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject color {
				get { return _handle.color(); }
			}
			public NObjective.RuntimeObject face {
				get { return _handle.face(); }
			}
			public NObjective.RuntimeObject size {
				get { return _handle.size(); }
			}
			private readonly DOMHTMLFontElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLFontElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr color( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr face( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject face );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr size( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector color = "color";
			public static readonly Selector face = "face";
			public static readonly Selector setColor_ = "setColor:";
			public static readonly Selector setFace_ = "setFace:";
			public static readonly Selector setSize_ = "setSize:";
			public static readonly Selector size = "size";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLFormElement : IEquatable<DOMHTMLFormElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLFormElement;
		public static implicit operator DOMHTMLElement( DOMHTMLFormElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLFormElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLFormElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLFormElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLFormElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLFormElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLFormElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLFormElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLFormElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLFormElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLFormElement value1, DOMHTMLFormElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLFormElement value1, DOMHTMLFormElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLFormElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLFormElement alloc() {
			return new DOMHTMLFormElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject acceptCharset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.acceptCharset( Handle, CachedSelectors.acceptCharset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject action() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.action( Handle, CachedSelectors.action, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject elements() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elements( Handle, CachedSelectors.elements, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject encoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.encoding( Handle, CachedSelectors.encoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject enctype() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enctype( Handle, CachedSelectors.enctype, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject method() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.method( Handle, CachedSelectors.method, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reset() {
			RuntimeObject ___occuredException;
			NativeMethods.reset( Handle, CachedSelectors.reset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAcceptCharset_( NObjective.RuntimeObject charset ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAcceptCharset_( Handle, CachedSelectors.setAcceptCharset_, out ___occuredException, sizeof( NObjective.RuntimeObject ), charset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAction_( Handle, CachedSelectors.setAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEncoding_( NObjective.RuntimeObject encoding ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEncoding_( Handle, CachedSelectors.setEncoding_, out ___occuredException, sizeof( NObjective.RuntimeObject ), encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEnctype_( NObjective.RuntimeObject enctype ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEnctype_( Handle, CachedSelectors.setEnctype_, out ___occuredException, sizeof( NObjective.RuntimeObject ), enctype );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMethod_( NObjective.RuntimeObject method ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMethod_( Handle, CachedSelectors.setMethod_, out ___occuredException, sizeof( NObjective.RuntimeObject ), method );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTarget_( Handle, CachedSelectors.setTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void submit() {
			RuntimeObject ___occuredException;
			NativeMethods.submit( Handle, CachedSelectors.submit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject acceptCharset {
				get { return _handle.acceptCharset(); }
			}
			public NObjective.RuntimeObject action {
				get { return _handle.action(); }
			}
			public NObjective.RuntimeObject elements {
				get { return _handle.elements(); }
			}
			public NObjective.RuntimeObject enctype {
				get { return _handle.enctype(); }
			}
			public int length {
				get { return _handle.length(); }
			}
			public NObjective.RuntimeObject method {
				get { return _handle.method(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject target {
				get { return _handle.target(); }
			}
			private readonly DOMHTMLFormElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLFormElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr acceptCharset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr action( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elements( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr encoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr enctype( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr method( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAcceptCharset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject charset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEnctype_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject enctype );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMethod_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject method );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void submit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptCharset = "acceptCharset";
			public static readonly Selector action = "action";
			public static readonly Selector elements = "elements";
			public static readonly Selector encoding = "encoding";
			public static readonly Selector enctype = "enctype";
			public static readonly Selector length = "length";
			public static readonly Selector method = "method";
			public static readonly Selector name = "name";
			public static readonly Selector reset = "reset";
			public static readonly Selector setAcceptCharset_ = "setAcceptCharset:";
			public static readonly Selector setAction_ = "setAction:";
			public static readonly Selector setEncoding_ = "setEncoding:";
			public static readonly Selector setEnctype_ = "setEnctype:";
			public static readonly Selector setMethod_ = "setMethod:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setTarget_ = "setTarget:";
			public static readonly Selector submit = "submit";
			public static readonly Selector target = "target";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLFrameElement : IEquatable<DOMHTMLFrameElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLFrameElement;
		public static implicit operator DOMHTMLElement( DOMHTMLFrameElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLFrameElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLFrameElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLFrameElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLFrameElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLFrameElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLFrameElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLFrameElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLFrameElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLFrameElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLFrameElement value1, DOMHTMLFrameElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLFrameElement value1, DOMHTMLFrameElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLFrameElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLFrameElement alloc() {
			return new DOMHTMLFrameElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject contentDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentDocument( Handle, CachedSelectors.contentDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contentWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentWindow( Handle, CachedSelectors.contentWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject frameBorder() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frameBorder( Handle, CachedSelectors.frameBorder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getSVGDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getSVGDocument( Handle, CachedSelectors.getSVGDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject location() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.location( Handle, CachedSelectors.location, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject longDesc() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.longDesc( Handle, CachedSelectors.longDesc, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject marginHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marginHeight( Handle, CachedSelectors.marginHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject marginWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marginWidth( Handle, CachedSelectors.marginWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char noResize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.noResize( Handle, CachedSelectors.noResize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject scrolling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrolling( Handle, CachedSelectors.scrolling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setFrameBorder_( NObjective.RuntimeObject border ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFrameBorder_( Handle, CachedSelectors.setFrameBorder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), border );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLocation_( Handle, CachedSelectors.setLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLongDesc_( NObjective.RuntimeObject desc ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLongDesc_( Handle, CachedSelectors.setLongDesc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), desc );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarginHeight_( NObjective.RuntimeObject height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMarginHeight_( Handle, CachedSelectors.setMarginHeight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarginWidth_( NObjective.RuntimeObject width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMarginWidth_( Handle, CachedSelectors.setMarginWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNoResize_( char resize ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNoResize_( Handle, CachedSelectors.setNoResize_, out ___occuredException, sizeof( char ), resize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScrolling_( NObjective.RuntimeObject scrolling ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScrolling_( Handle, CachedSelectors.setScrolling_, out ___occuredException, sizeof( NObjective.RuntimeObject ), scrolling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSrc_( NObjective.RuntimeObject src ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSrc_( Handle, CachedSelectors.setSrc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), src );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject src() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.src( Handle, CachedSelectors.src, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject contentDocument {
				get { return _handle.contentDocument(); }
			}
			public NObjective.RuntimeObject frameBorder {
				get { return _handle.frameBorder(); }
			}
			public NObjective.RuntimeObject longDesc {
				get { return _handle.longDesc(); }
			}
			public NObjective.RuntimeObject marginHeight {
				get { return _handle.marginHeight(); }
			}
			public NObjective.RuntimeObject marginWidth {
				get { return _handle.marginWidth(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public char noResize {
				get { return _handle.noResize(); }
			}
			public NObjective.RuntimeObject scrolling {
				get { return _handle.scrolling(); }
			}
			public NObjective.RuntimeObject src {
				get { return _handle.src(); }
			}
			private readonly DOMHTMLFrameElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLFrameElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr frameBorder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getSVGDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr location( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr longDesc( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr marginHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr marginWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char noResize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scrolling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFrameBorder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject border );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLongDesc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject desc );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarginHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarginWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNoResize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char resize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScrolling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject scrolling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSrc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject src );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr src( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector contentDocument = "contentDocument";
			public static readonly Selector contentWindow = "contentWindow";
			public static readonly Selector frameBorder = "frameBorder";
			public static readonly Selector getSVGDocument = "getSVGDocument";
			public static readonly Selector height = "height";
			public static readonly Selector location = "location";
			public static readonly Selector longDesc = "longDesc";
			public static readonly Selector marginHeight = "marginHeight";
			public static readonly Selector marginWidth = "marginWidth";
			public static readonly Selector name = "name";
			public static readonly Selector noResize = "noResize";
			public static readonly Selector scrolling = "scrolling";
			public static readonly Selector setFrameBorder_ = "setFrameBorder:";
			public static readonly Selector setLocation_ = "setLocation:";
			public static readonly Selector setLongDesc_ = "setLongDesc:";
			public static readonly Selector setMarginHeight_ = "setMarginHeight:";
			public static readonly Selector setMarginWidth_ = "setMarginWidth:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setNoResize_ = "setNoResize:";
			public static readonly Selector setScrolling_ = "setScrolling:";
			public static readonly Selector setSrc_ = "setSrc:";
			public static readonly Selector src = "src";
			public static readonly Selector width = "width";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLFrameSetElement : IEquatable<DOMHTMLFrameSetElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLFrameSetElement;
		public static implicit operator DOMHTMLElement( DOMHTMLFrameSetElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLFrameSetElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLFrameSetElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLFrameSetElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLFrameSetElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLFrameSetElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLFrameSetElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLFrameSetElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLFrameSetElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLFrameSetElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLFrameSetElement value1, DOMHTMLFrameSetElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLFrameSetElement value1, DOMHTMLFrameSetElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLFrameSetElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLFrameSetElement alloc() {
			return new DOMHTMLFrameSetElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cols() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cols( Handle, CachedSelectors.cols, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rows( Handle, CachedSelectors.rows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setCols_( NObjective.RuntimeObject cols ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCols_( Handle, CachedSelectors.setCols_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cols );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRows_( NObjective.RuntimeObject rows ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRows_( Handle, CachedSelectors.setRows_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rows );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject cols {
				get { return _handle.cols(); }
			}
			public NObjective.RuntimeObject rows {
				get { return _handle.rows(); }
			}
			private readonly DOMHTMLFrameSetElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLFrameSetElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cols( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCols_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cols );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRows_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rows );
		}
		static internal class CachedSelectors {
			public static readonly Selector cols = "cols";
			public static readonly Selector rows = "rows";
			public static readonly Selector setCols_ = "setCols:";
			public static readonly Selector setRows_ = "setRows:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLHeadElement : IEquatable<DOMHTMLHeadElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLHeadElement;
		public static implicit operator DOMHTMLElement( DOMHTMLHeadElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLHeadElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLHeadElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLHeadElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLHeadElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLHeadElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLHeadElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLHeadElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLHeadElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLHeadElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLHeadElement value1, DOMHTMLHeadElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLHeadElement value1, DOMHTMLHeadElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLHeadElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLHeadElement alloc() {
			return new DOMHTMLHeadElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject profile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.profile( Handle, CachedSelectors.profile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setProfile_( NObjective.RuntimeObject profile ) {
			RuntimeObject ___occuredException;
			NativeMethods.setProfile_( Handle, CachedSelectors.setProfile_, out ___occuredException, sizeof( NObjective.RuntimeObject ), profile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject profile {
				get { return _handle.profile(); }
			}
			private readonly DOMHTMLHeadElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLHeadElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr profile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProfile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject profile );
		}
		static internal class CachedSelectors {
			public static readonly Selector profile = "profile";
			public static readonly Selector setProfile_ = "setProfile:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLHeadingElement : IEquatable<DOMHTMLHeadingElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLHeadingElement;
		public static implicit operator DOMHTMLElement( DOMHTMLHeadingElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLHeadingElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLHeadingElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLHeadingElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLHeadingElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLHeadingElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLHeadingElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLHeadingElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLHeadingElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLHeadingElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLHeadingElement value1, DOMHTMLHeadingElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLHeadingElement value1, DOMHTMLHeadingElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLHeadingElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLHeadingElement alloc() {
			return new DOMHTMLHeadingElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			private readonly DOMHTMLHeadingElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLHeadingElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector setAlign_ = "setAlign:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLHRElement : IEquatable<DOMHTMLHRElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLHRElement;
		public static implicit operator DOMHTMLElement( DOMHTMLHRElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLHRElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLHRElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLHRElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLHRElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLHRElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLHRElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLHRElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLHRElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLHRElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLHRElement value1, DOMHTMLHRElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLHRElement value1, DOMHTMLHRElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLHRElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLHRElement alloc() {
			return new DOMHTMLHRElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char noShade() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.noShade( Handle, CachedSelectors.noShade, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNoShade_( char shade ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNoShade_( Handle, CachedSelectors.setNoShade_, out ___occuredException, sizeof( char ), shade );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSize_( NObjective.RuntimeObject size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSize_( Handle, CachedSelectors.setSize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( NObjective.RuntimeObject width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject size() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.size( Handle, CachedSelectors.size, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public char noShade {
				get { return _handle.noShade(); }
			}
			public NObjective.RuntimeObject size {
				get { return _handle.size(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLHRElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLHRElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char noShade( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNoShade_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char shade );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr size( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector noShade = "noShade";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setNoShade_ = "setNoShade:";
			public static readonly Selector setSize_ = "setSize:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector size = "size";
			public static readonly Selector width = "width";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLHtmlElement : IEquatable<DOMHTMLHtmlElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLHtmlElement;
		public static implicit operator DOMHTMLElement( DOMHTMLHtmlElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLHtmlElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLHtmlElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLHtmlElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLHtmlElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLHtmlElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLHtmlElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLHtmlElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLHtmlElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLHtmlElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLHtmlElement value1, DOMHTMLHtmlElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLHtmlElement value1, DOMHTMLHtmlElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLHtmlElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLHtmlElement alloc() {
			return new DOMHTMLHtmlElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setVersion_( NObjective.RuntimeObject version ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVersion_( Handle, CachedSelectors.setVersion_, out ___occuredException, sizeof( NObjective.RuntimeObject ), version );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject version() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.version( Handle, CachedSelectors.version, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject version {
				get { return _handle.version(); }
			}
			private readonly DOMHTMLHtmlElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLHtmlElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVersion_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject version );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr version( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setVersion_ = "setVersion:";
			public static readonly Selector version = "version";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLIFrameElement : IEquatable<DOMHTMLIFrameElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLIFrameElement;
		public static implicit operator DOMHTMLElement( DOMHTMLIFrameElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLIFrameElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLIFrameElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLIFrameElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLIFrameElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLIFrameElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLIFrameElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLIFrameElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLIFrameElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLIFrameElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLIFrameElement value1, DOMHTMLIFrameElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLIFrameElement value1, DOMHTMLIFrameElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLIFrameElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLIFrameElement alloc() {
			return new DOMHTMLIFrameElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contentDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentDocument( Handle, CachedSelectors.contentDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contentWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentWindow( Handle, CachedSelectors.contentWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject frameBorder() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frameBorder( Handle, CachedSelectors.frameBorder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getSVGDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getSVGDocument( Handle, CachedSelectors.getSVGDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject longDesc() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.longDesc( Handle, CachedSelectors.longDesc, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject marginHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marginHeight( Handle, CachedSelectors.marginHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject marginWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marginWidth( Handle, CachedSelectors.marginWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject scrolling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrolling( Handle, CachedSelectors.scrolling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFrameBorder_( NObjective.RuntimeObject border ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFrameBorder_( Handle, CachedSelectors.setFrameBorder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), border );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHeight_( NObjective.RuntimeObject height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHeight_( Handle, CachedSelectors.setHeight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLongDesc_( NObjective.RuntimeObject desc ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLongDesc_( Handle, CachedSelectors.setLongDesc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), desc );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarginHeight_( NObjective.RuntimeObject height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMarginHeight_( Handle, CachedSelectors.setMarginHeight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarginWidth_( NObjective.RuntimeObject width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMarginWidth_( Handle, CachedSelectors.setMarginWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScrolling_( NObjective.RuntimeObject scrolling ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScrolling_( Handle, CachedSelectors.setScrolling_, out ___occuredException, sizeof( NObjective.RuntimeObject ), scrolling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSrc_( NObjective.RuntimeObject src ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSrc_( Handle, CachedSelectors.setSrc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), src );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( NObjective.RuntimeObject width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject src() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.src( Handle, CachedSelectors.src, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject contentDocument {
				get { return _handle.contentDocument(); }
			}
			public NObjective.RuntimeObject frameBorder {
				get { return _handle.frameBorder(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public NObjective.RuntimeObject longDesc {
				get { return _handle.longDesc(); }
			}
			public NObjective.RuntimeObject marginHeight {
				get { return _handle.marginHeight(); }
			}
			public NObjective.RuntimeObject marginWidth {
				get { return _handle.marginWidth(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject scrolling {
				get { return _handle.scrolling(); }
			}
			public NObjective.RuntimeObject src {
				get { return _handle.src(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLIFrameElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLIFrameElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr frameBorder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getSVGDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr longDesc( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr marginHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr marginWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scrolling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFrameBorder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject border );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLongDesc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject desc );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarginHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarginWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScrolling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject scrolling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSrc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject src );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr src( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector contentDocument = "contentDocument";
			public static readonly Selector contentWindow = "contentWindow";
			public static readonly Selector frameBorder = "frameBorder";
			public static readonly Selector getSVGDocument = "getSVGDocument";
			public static readonly Selector height = "height";
			public static readonly Selector longDesc = "longDesc";
			public static readonly Selector marginHeight = "marginHeight";
			public static readonly Selector marginWidth = "marginWidth";
			public static readonly Selector name = "name";
			public static readonly Selector scrolling = "scrolling";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setFrameBorder_ = "setFrameBorder:";
			public static readonly Selector setHeight_ = "setHeight:";
			public static readonly Selector setLongDesc_ = "setLongDesc:";
			public static readonly Selector setMarginHeight_ = "setMarginHeight:";
			public static readonly Selector setMarginWidth_ = "setMarginWidth:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setScrolling_ = "setScrolling:";
			public static readonly Selector setSrc_ = "setSrc:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector src = "src";
			public static readonly Selector width = "width";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLImageElement : IEquatable<DOMHTMLImageElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLImageElement;
		public static implicit operator DOMHTMLElement( DOMHTMLImageElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLImageElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLImageElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLImageElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLImageElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLImageElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLImageElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLImageElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLImageElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLImageElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLImageElement value1, DOMHTMLImageElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLImageElement value1, DOMHTMLImageElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLImageElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLImageElement alloc() {
			return new DOMHTMLImageElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject absoluteImageURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.absoluteImageURL( Handle, CachedSelectors.absoluteImageURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject alt() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alt( Handle, CachedSelectors.alt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject altDisplayString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.altDisplayString( Handle, CachedSelectors.altDisplayString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject border() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.border( Handle, CachedSelectors.border, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char complete() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.complete( Handle, CachedSelectors.complete, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int hspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hspace( Handle, CachedSelectors.hspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isMap() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMap( Handle, CachedSelectors.isMap, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject longDesc() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.longDesc( Handle, CachedSelectors.longDesc, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lowsrc() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lowsrc( Handle, CachedSelectors.lowsrc, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int naturalHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.naturalHeight( Handle, CachedSelectors.naturalHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int naturalWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.naturalWidth( Handle, CachedSelectors.naturalWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlt_( NObjective.RuntimeObject alt ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlt_( Handle, CachedSelectors.setAlt_, out ___occuredException, sizeof( NObjective.RuntimeObject ), alt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorder_( NObjective.RuntimeObject border ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBorder_( Handle, CachedSelectors.setBorder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), border );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHeight_( int height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHeight_( Handle, CachedSelectors.setHeight_, out ___occuredException, sizeof( int ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHspace_( int hspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHspace_( Handle, CachedSelectors.setHspace_, out ___occuredException, sizeof( int ), hspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsMap_( char map ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsMap_( Handle, CachedSelectors.setIsMap_, out ___occuredException, sizeof( char ), map );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLongDesc_( NObjective.RuntimeObject desc ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLongDesc_( Handle, CachedSelectors.setLongDesc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), desc );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLowsrc_( NObjective.RuntimeObject lowsrc ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLowsrc_( Handle, CachedSelectors.setLowsrc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), lowsrc );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSrc_( NObjective.RuntimeObject src ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSrc_( Handle, CachedSelectors.setSrc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), src );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUseMap_( NObjective.RuntimeObject map ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUseMap_( Handle, CachedSelectors.setUseMap_, out ___occuredException, sizeof( NObjective.RuntimeObject ), map );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVspace_( int vspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVspace_( Handle, CachedSelectors.setVspace_, out ___occuredException, sizeof( int ), vspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( int width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( int ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject src() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.src( Handle, CachedSelectors.src, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject useMap() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useMap( Handle, CachedSelectors.useMap, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int vspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vspace( Handle, CachedSelectors.vspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject absoluteImageURL {
				get { return _handle.absoluteImageURL(); }
			}
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject alt {
				get { return _handle.alt(); }
			}
			public NObjective.RuntimeObject altDisplayString {
				get { return _handle.altDisplayString(); }
			}
			public NObjective.RuntimeObject border {
				get { return _handle.border(); }
			}
			public int height {
				get { return _handle.height(); }
			}
			public int hspace {
				get { return _handle.hspace(); }
			}
			public bool isMap {
				get { return _handle.isMap(); }
			}
			public NObjective.RuntimeObject longDesc {
				get { return _handle.longDesc(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject src {
				get { return _handle.src(); }
			}
			public NObjective.RuntimeObject useMap {
				get { return _handle.useMap(); }
			}
			public int vspace {
				get { return _handle.vspace(); }
			}
			public int width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLImageElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLImageElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr absoluteImageURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr altDisplayString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr border( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char complete( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int hspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isMap( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr longDesc( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lowsrc( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int naturalHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int naturalWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject alt );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject border );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int hspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIsMap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char map );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLongDesc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject desc );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLowsrc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject lowsrc );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSrc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject src );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUseMap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject map );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int vspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr src( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr useMap( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int vspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector absoluteImageURL = "absoluteImageURL";
			public static readonly Selector align = "align";
			public static readonly Selector alt = "alt";
			public static readonly Selector altDisplayString = "altDisplayString";
			public static readonly Selector border = "border";
			public static readonly Selector complete = "complete";
			public static readonly Selector height = "height";
			public static readonly Selector hspace = "hspace";
			public static readonly Selector isMap = "isMap";
			public static readonly Selector longDesc = "longDesc";
			public static readonly Selector lowsrc = "lowsrc";
			public static readonly Selector name = "name";
			public static readonly Selector naturalHeight = "naturalHeight";
			public static readonly Selector naturalWidth = "naturalWidth";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setAlt_ = "setAlt:";
			public static readonly Selector setBorder_ = "setBorder:";
			public static readonly Selector setHeight_ = "setHeight:";
			public static readonly Selector setHspace_ = "setHspace:";
			public static readonly Selector setIsMap_ = "setIsMap:";
			public static readonly Selector setLongDesc_ = "setLongDesc:";
			public static readonly Selector setLowsrc_ = "setLowsrc:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setSrc_ = "setSrc:";
			public static readonly Selector setUseMap_ = "setUseMap:";
			public static readonly Selector setVspace_ = "setVspace:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector src = "src";
			public static readonly Selector useMap = "useMap";
			public static readonly Selector vspace = "vspace";
			public static readonly Selector width = "width";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLInputElement : IEquatable<DOMHTMLInputElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLInputElement;
		public static implicit operator DOMHTMLElement( DOMHTMLInputElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLInputElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLInputElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLInputElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLInputElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLInputElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLInputElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLInputElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLInputElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLInputElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLInputElement value1, DOMHTMLInputElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLInputElement value1, DOMHTMLInputElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLInputElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLInputElement alloc() {
			return new DOMHTMLInputElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject absoluteImageURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.absoluteImageURL( Handle, CachedSelectors.absoluteImageURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accept() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accept( Handle, CachedSelectors.accept, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessKey( Handle, CachedSelectors.accessKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject alt() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alt( Handle, CachedSelectors.alt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject altDisplayString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.altDisplayString( Handle, CachedSelectors.altDisplayString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char @checked() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@checked( Handle, CachedSelectors.@checked, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void click() {
			RuntimeObject ___occuredException;
			NativeMethods.click( Handle, CachedSelectors.click, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char defaultChecked() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultChecked( Handle, CachedSelectors.defaultChecked, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject defaultValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultValue( Handle, CachedSelectors.defaultValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char disabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabled( Handle, CachedSelectors.disabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject form() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.form( Handle, CachedSelectors.form, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char indeterminate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indeterminate( Handle, CachedSelectors.indeterminate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int maxLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maxLength( Handle, CachedSelectors.maxLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char readOnly() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.readOnly( Handle, CachedSelectors.readOnly, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void @select() {
			RuntimeObject ___occuredException;
			NativeMethods.@select( Handle, CachedSelectors.@select, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int selectionEnd() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionEnd( Handle, CachedSelectors.selectionEnd, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int selectionStart() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionStart( Handle, CachedSelectors.selectionStart, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAccept_( NObjective.RuntimeObject accept ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccept_( Handle, CachedSelectors.setAccept_, out ___occuredException, sizeof( NObjective.RuntimeObject ), accept );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAccessKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccessKey_( Handle, CachedSelectors.setAccessKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlt_( NObjective.RuntimeObject alt ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlt_( Handle, CachedSelectors.setAlt_, out ___occuredException, sizeof( NObjective.RuntimeObject ), alt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChecked_( char @checked ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChecked_( Handle, CachedSelectors.setChecked_, out ___occuredException, sizeof( char ), @checked );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultChecked_( char @checked ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultChecked_( Handle, CachedSelectors.setDefaultChecked_, out ___occuredException, sizeof( char ), @checked );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultValue_( Handle, CachedSelectors.setDefaultValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabled_( Handle, CachedSelectors.setDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIndeterminate_( char indeterminate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIndeterminate_( Handle, CachedSelectors.setIndeterminate_, out ___occuredException, sizeof( char ), indeterminate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMaxLength_( int length ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMaxLength_( Handle, CachedSelectors.setMaxLength_, out ___occuredException, sizeof( int ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setReadOnly_( char only ) {
			RuntimeObject ___occuredException;
			NativeMethods.setReadOnly_( Handle, CachedSelectors.setReadOnly_, out ___occuredException, sizeof( char ), only );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectionEnd_( int end ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectionEnd_( Handle, CachedSelectors.setSelectionEnd_, out ___occuredException, sizeof( int ), end );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectionRange_end_( int range, int end ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectionRange_end_( Handle, CachedSelectors.setSelectionRange_end_, out ___occuredException, sizeof( int ) + sizeof( int ), range, end );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectionStart_( int start ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectionStart_( Handle, CachedSelectors.setSelectionStart_, out ___occuredException, sizeof( int ), start );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSize_( NObjective.RuntimeObject size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSize_( Handle, CachedSelectors.setSize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSrc_( NObjective.RuntimeObject src ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSrc_( Handle, CachedSelectors.setSrc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), src );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTabIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTabIndex_( Handle, CachedSelectors.setTabIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUseMap_( NObjective.RuntimeObject map ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUseMap_( Handle, CachedSelectors.setUseMap_, out ___occuredException, sizeof( NObjective.RuntimeObject ), map );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject size() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.size( Handle, CachedSelectors.size, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject src() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.src( Handle, CachedSelectors.src, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int tabIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tabIndex( Handle, CachedSelectors.tabIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject useMap() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useMap( Handle, CachedSelectors.useMap, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject absoluteImageURL {
				get { return _handle.absoluteImageURL(); }
			}
			public NObjective.RuntimeObject accept {
				get { return _handle.accept(); }
			}
			public NObjective.RuntimeObject accessKey {
				get { return _handle.accessKey(); }
			}
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject alt {
				get { return _handle.alt(); }
			}
			public NObjective.RuntimeObject altDisplayString {
				get { return _handle.altDisplayString(); }
			}
			public char @checked {
				get { return _handle.@checked(); }
			}
			public char defaultChecked {
				get { return _handle.defaultChecked(); }
			}
			public NObjective.RuntimeObject defaultValue {
				get { return _handle.defaultValue(); }
			}
			public char disabled {
				get { return _handle.disabled(); }
			}
			public NObjective.RuntimeObject form {
				get { return _handle.form(); }
			}
			public int maxLength {
				get { return _handle.maxLength(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public char readOnly {
				get { return _handle.readOnly(); }
			}
			public NObjective.RuntimeObject size {
				get { return _handle.size(); }
			}
			public NObjective.RuntimeObject src {
				get { return _handle.src(); }
			}
			public int tabIndex {
				get { return _handle.tabIndex(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			public NObjective.RuntimeObject useMap {
				get { return _handle.useMap(); }
			}
			public NObjective.RuntimeObject value {
				get { return _handle.value(); }
			}
			private readonly DOMHTMLInputElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLInputElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr absoluteImageURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accept( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr altDisplayString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char @checked( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void click( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char defaultChecked( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char disabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr form( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char indeterminate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int maxLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char readOnly( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @select( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int selectionEnd( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int selectionStart( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAccept_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject accept );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAccessKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject alt );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChecked_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @checked );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultChecked_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @checked );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIndeterminate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char indeterminate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMaxLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setReadOnly_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char only );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectionEnd_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int end );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectionRange_end_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int range, int end );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectionStart_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int start );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSrc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject src );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTabIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUseMap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject map );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr size( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr src( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int tabIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr useMap( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector absoluteImageURL = "absoluteImageURL";
			public static readonly Selector accept = "accept";
			public static readonly Selector accessKey = "accessKey";
			public static readonly Selector align = "align";
			public static readonly Selector alt = "alt";
			public static readonly Selector altDisplayString = "altDisplayString";
			public static readonly Selector @checked = "checked";
			public static readonly Selector click = "click";
			public static readonly Selector defaultChecked = "defaultChecked";
			public static readonly Selector defaultValue = "defaultValue";
			public static readonly Selector disabled = "disabled";
			public static readonly Selector form = "form";
			public static readonly Selector indeterminate = "indeterminate";
			public static readonly Selector maxLength = "maxLength";
			public static readonly Selector name = "name";
			public static readonly Selector readOnly = "readOnly";
			public static readonly Selector @select = "select";
			public static readonly Selector selectionEnd = "selectionEnd";
			public static readonly Selector selectionStart = "selectionStart";
			public static readonly Selector setAccept_ = "setAccept:";
			public static readonly Selector setAccessKey_ = "setAccessKey:";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setAlt_ = "setAlt:";
			public static readonly Selector setChecked_ = "setChecked:";
			public static readonly Selector setDefaultChecked_ = "setDefaultChecked:";
			public static readonly Selector setDefaultValue_ = "setDefaultValue:";
			public static readonly Selector setDisabled_ = "setDisabled:";
			public static readonly Selector setIndeterminate_ = "setIndeterminate:";
			public static readonly Selector setMaxLength_ = "setMaxLength:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setReadOnly_ = "setReadOnly:";
			public static readonly Selector setSelectionEnd_ = "setSelectionEnd:";
			public static readonly Selector setSelectionRange_end_ = "setSelectionRange:end:";
			public static readonly Selector setSelectionStart_ = "setSelectionStart:";
			public static readonly Selector setSize_ = "setSize:";
			public static readonly Selector setSrc_ = "setSrc:";
			public static readonly Selector setTabIndex_ = "setTabIndex:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector setUseMap_ = "setUseMap:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector size = "size";
			public static readonly Selector src = "src";
			public static readonly Selector tabIndex = "tabIndex";
			public static readonly Selector type = "type";
			public static readonly Selector useMap = "useMap";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLInputElement ) )]
	public struct DOMHTMLIsIndexElement : IEquatable<DOMHTMLIsIndexElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLIsIndexElement;
		public static implicit operator DOMHTMLInputElement( DOMHTMLIsIndexElement value ) {
			return new DOMHTMLInputElement( value.Handle );
		}
		public static implicit operator DOMHTMLElement( DOMHTMLIsIndexElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLIsIndexElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLIsIndexElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLIsIndexElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLIsIndexElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLIsIndexElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLIsIndexElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLIsIndexElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLIsIndexElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLIsIndexElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLIsIndexElement value1, DOMHTMLIsIndexElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLIsIndexElement value1, DOMHTMLIsIndexElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLIsIndexElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLIsIndexElement alloc() {
			return new DOMHTMLIsIndexElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject prompt() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.prompt( Handle, CachedSelectors.prompt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setPrompt_( NObjective.RuntimeObject prompt ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrompt_( Handle, CachedSelectors.setPrompt_, out ___occuredException, sizeof( NObjective.RuntimeObject ), prompt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject form {
				get { return new DOMHTMLInputElement( _handle ).form(); }
			}
			public NObjective.RuntimeObject prompt {
				get { return _handle.prompt(); }
			}
			private readonly DOMHTMLIsIndexElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLIsIndexElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr prompt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPrompt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject prompt );
		}
		static internal class CachedSelectors {
			public static readonly Selector prompt = "prompt";
			public static readonly Selector setPrompt_ = "setPrompt:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLLabelElement : IEquatable<DOMHTMLLabelElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLLabelElement;
		public static implicit operator DOMHTMLElement( DOMHTMLLabelElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLLabelElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLLabelElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLLabelElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLLabelElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLLabelElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLLabelElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLLabelElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLLabelElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLLabelElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLLabelElement value1, DOMHTMLLabelElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLLabelElement value1, DOMHTMLLabelElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLLabelElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLLabelElement alloc() {
			return new DOMHTMLLabelElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessKey( Handle, CachedSelectors.accessKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject form() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.form( Handle, CachedSelectors.form, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject htmlFor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.htmlFor( Handle, CachedSelectors.htmlFor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAccessKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccessKey_( Handle, CachedSelectors.setAccessKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHtmlFor_( NObjective.RuntimeObject @for ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHtmlFor_( Handle, CachedSelectors.setHtmlFor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @for );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject accessKey {
				get { return _handle.accessKey(); }
			}
			public NObjective.RuntimeObject form {
				get { return _handle.form(); }
			}
			public NObjective.RuntimeObject htmlFor {
				get { return _handle.htmlFor(); }
			}
			private readonly DOMHTMLLabelElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLLabelElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr form( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr htmlFor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAccessKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHtmlFor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessKey = "accessKey";
			public static readonly Selector form = "form";
			public static readonly Selector htmlFor = "htmlFor";
			public static readonly Selector setAccessKey_ = "setAccessKey:";
			public static readonly Selector setHtmlFor_ = "setHtmlFor:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLLegendElement : IEquatable<DOMHTMLLegendElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLLegendElement;
		public static implicit operator DOMHTMLElement( DOMHTMLLegendElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLLegendElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLLegendElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLLegendElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLLegendElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLLegendElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLLegendElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLLegendElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLLegendElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLLegendElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLLegendElement value1, DOMHTMLLegendElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLLegendElement value1, DOMHTMLLegendElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLLegendElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLLegendElement alloc() {
			return new DOMHTMLLegendElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessKey( Handle, CachedSelectors.accessKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject form() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.form( Handle, CachedSelectors.form, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAccessKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccessKey_( Handle, CachedSelectors.setAccessKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject accessKey {
				get { return _handle.accessKey(); }
			}
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject form {
				get { return _handle.form(); }
			}
			private readonly DOMHTMLLegendElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLLegendElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr form( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAccessKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessKey = "accessKey";
			public static readonly Selector align = "align";
			public static readonly Selector form = "form";
			public static readonly Selector setAccessKey_ = "setAccessKey:";
			public static readonly Selector setAlign_ = "setAlign:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLLIElement : IEquatable<DOMHTMLLIElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLLIElement;
		public static implicit operator DOMHTMLElement( DOMHTMLLIElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLLIElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLLIElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLLIElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLLIElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLLIElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLLIElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLLIElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLLIElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLLIElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLLIElement value1, DOMHTMLLIElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLLIElement value1, DOMHTMLLIElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLLIElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLLIElement alloc() {
			return new DOMHTMLLIElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( int value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( int ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			public int value {
				get { return _handle.value(); }
			}
			private readonly DOMHTMLLIElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLLIElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector type = "type";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLLinkElement : IEquatable<DOMHTMLLinkElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLLinkElement;
		public static implicit operator DOMHTMLElement( DOMHTMLLinkElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLLinkElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLLinkElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLLinkElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLLinkElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLLinkElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLLinkElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLLinkElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLLinkElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLLinkElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLLinkElement value1, DOMHTMLLinkElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLLinkElement value1, DOMHTMLLinkElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLLinkElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLLinkElement alloc() {
			return new DOMHTMLLinkElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject absoluteLinkURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.absoluteLinkURL( Handle, CachedSelectors.absoluteLinkURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject charset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.charset( Handle, CachedSelectors.charset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char disabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabled( Handle, CachedSelectors.disabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject hreflang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hreflang( Handle, CachedSelectors.hreflang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject media() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.media( Handle, CachedSelectors.media, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rel( Handle, CachedSelectors.rel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rev() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rev( Handle, CachedSelectors.rev, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setCharset_( NObjective.RuntimeObject charset ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCharset_( Handle, CachedSelectors.setCharset_, out ___occuredException, sizeof( NObjective.RuntimeObject ), charset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabled_( Handle, CachedSelectors.setDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHref_( NObjective.RuntimeObject href ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHref_( Handle, CachedSelectors.setHref_, out ___occuredException, sizeof( NObjective.RuntimeObject ), href );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHreflang_( NObjective.RuntimeObject hreflang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHreflang_( Handle, CachedSelectors.setHreflang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), hreflang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMedia_( NObjective.RuntimeObject media ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMedia_( Handle, CachedSelectors.setMedia_, out ___occuredException, sizeof( NObjective.RuntimeObject ), media );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRel_( NObjective.RuntimeObject rel ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRel_( Handle, CachedSelectors.setRel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRev_( NObjective.RuntimeObject rev ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRev_( Handle, CachedSelectors.setRev_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rev );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTarget_( Handle, CachedSelectors.setTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject absoluteLinkURL {
				get { return _handle.absoluteLinkURL(); }
			}
			public NObjective.RuntimeObject charset {
				get { return _handle.charset(); }
			}
			public char disabled {
				get { return _handle.disabled(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject hreflang {
				get { return _handle.hreflang(); }
			}
			public NObjective.RuntimeObject media {
				get { return _handle.media(); }
			}
			public NObjective.RuntimeObject rel {
				get { return _handle.rel(); }
			}
			public NObjective.RuntimeObject rev {
				get { return _handle.rev(); }
			}
			public NObjective.RuntimeObject target {
				get { return _handle.target(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			private readonly DOMHTMLLinkElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLLinkElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr absoluteLinkURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr charset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char disabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hreflang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr media( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rev( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCharset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject charset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHref_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject href );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHreflang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject hreflang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMedia_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject media );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRev_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rev );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector absoluteLinkURL = "absoluteLinkURL";
			public static readonly Selector charset = "charset";
			public static readonly Selector disabled = "disabled";
			public static readonly Selector href = "href";
			public static readonly Selector hreflang = "hreflang";
			public static readonly Selector media = "media";
			public static readonly Selector rel = "rel";
			public static readonly Selector rev = "rev";
			public static readonly Selector setCharset_ = "setCharset:";
			public static readonly Selector setDisabled_ = "setDisabled:";
			public static readonly Selector setHref_ = "setHref:";
			public static readonly Selector setHreflang_ = "setHreflang:";
			public static readonly Selector setMedia_ = "setMedia:";
			public static readonly Selector setRel_ = "setRel:";
			public static readonly Selector setRev_ = "setRev:";
			public static readonly Selector setTarget_ = "setTarget:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector target = "target";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLMapElement : IEquatable<DOMHTMLMapElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLMapElement;
		public static implicit operator DOMHTMLElement( DOMHTMLMapElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLMapElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLMapElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLMapElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLMapElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLMapElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLMapElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLMapElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLMapElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLMapElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLMapElement value1, DOMHTMLMapElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLMapElement value1, DOMHTMLMapElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLMapElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLMapElement alloc() {
			return new DOMHTMLMapElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject areas() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.areas( Handle, CachedSelectors.areas, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject areas {
				get { return _handle.areas(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			private readonly DOMHTMLMapElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLMapElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr areas( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
		}
		static internal class CachedSelectors {
			public static readonly Selector areas = "areas";
			public static readonly Selector name = "name";
			public static readonly Selector setName_ = "setName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLMarqueeElement : IEquatable<DOMHTMLMarqueeElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLMarqueeElement;
		public static implicit operator DOMHTMLElement( DOMHTMLMarqueeElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLMarqueeElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLMarqueeElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLMarqueeElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLMarqueeElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLMarqueeElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLMarqueeElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLMarqueeElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLMarqueeElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLMarqueeElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLMarqueeElement value1, DOMHTMLMarqueeElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLMarqueeElement value1, DOMHTMLMarqueeElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLMarqueeElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLMarqueeElement alloc() {
			return new DOMHTMLMarqueeElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void start() {
			RuntimeObject ___occuredException;
			NativeMethods.start( Handle, CachedSelectors.start, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stop() {
			RuntimeObject ___occuredException;
			NativeMethods.stop( Handle, CachedSelectors.stop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void start( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector start = "start";
			public static readonly Selector stop = "stop";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLMenuElement : IEquatable<DOMHTMLMenuElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLMenuElement;
		public static implicit operator DOMHTMLElement( DOMHTMLMenuElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLMenuElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLMenuElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLMenuElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLMenuElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLMenuElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLMenuElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLMenuElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLMenuElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLMenuElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLMenuElement value1, DOMHTMLMenuElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLMenuElement value1, DOMHTMLMenuElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLMenuElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLMenuElement alloc() {
			return new DOMHTMLMenuElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char compact() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compact( Handle, CachedSelectors.compact, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCompact_( char compact ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCompact_( Handle, CachedSelectors.setCompact_, out ___occuredException, sizeof( char ), compact );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public char compact {
				get { return _handle.compact(); }
			}
			private readonly DOMHTMLMenuElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLMenuElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compact( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCompact_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char compact );
		}
		static internal class CachedSelectors {
			public static readonly Selector compact = "compact";
			public static readonly Selector setCompact_ = "setCompact:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLMetaElement : IEquatable<DOMHTMLMetaElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLMetaElement;
		public static implicit operator DOMHTMLElement( DOMHTMLMetaElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLMetaElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLMetaElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLMetaElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLMetaElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLMetaElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLMetaElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLMetaElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLMetaElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLMetaElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLMetaElement value1, DOMHTMLMetaElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLMetaElement value1, DOMHTMLMetaElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLMetaElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLMetaElement alloc() {
			return new DOMHTMLMetaElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject content() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.content( Handle, CachedSelectors.content, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject httpEquiv() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.httpEquiv( Handle, CachedSelectors.httpEquiv, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject scheme() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scheme( Handle, CachedSelectors.scheme, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setContent_( NObjective.RuntimeObject content ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContent_( Handle, CachedSelectors.setContent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), content );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHttpEquiv_( NObjective.RuntimeObject equiv ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHttpEquiv_( Handle, CachedSelectors.setHttpEquiv_, out ___occuredException, sizeof( NObjective.RuntimeObject ), equiv );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScheme_( NObjective.RuntimeObject scheme ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScheme_( Handle, CachedSelectors.setScheme_, out ___occuredException, sizeof( NObjective.RuntimeObject ), scheme );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject content {
				get { return _handle.content(); }
			}
			public NObjective.RuntimeObject httpEquiv {
				get { return _handle.httpEquiv(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject scheme {
				get { return _handle.scheme(); }
			}
			private readonly DOMHTMLMetaElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLMetaElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr content( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr httpEquiv( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scheme( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject content );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHttpEquiv_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject equiv );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScheme_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject scheme );
		}
		static internal class CachedSelectors {
			public static readonly Selector content = "content";
			public static readonly Selector httpEquiv = "httpEquiv";
			public static readonly Selector name = "name";
			public static readonly Selector scheme = "scheme";
			public static readonly Selector setContent_ = "setContent:";
			public static readonly Selector setHttpEquiv_ = "setHttpEquiv:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setScheme_ = "setScheme:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLModElement : IEquatable<DOMHTMLModElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLModElement;
		public static implicit operator DOMHTMLElement( DOMHTMLModElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLModElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLModElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLModElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLModElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLModElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLModElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLModElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLModElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLModElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLModElement value1, DOMHTMLModElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLModElement value1, DOMHTMLModElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLModElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLModElement alloc() {
			return new DOMHTMLModElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cite() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cite( Handle, CachedSelectors.cite, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dateTime() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateTime( Handle, CachedSelectors.dateTime, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setCite_( NObjective.RuntimeObject cite ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCite_( Handle, CachedSelectors.setCite_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDateTime_( NObjective.RuntimeObject time ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDateTime_( Handle, CachedSelectors.setDateTime_, out ___occuredException, sizeof( NObjective.RuntimeObject ), time );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject cite {
				get { return _handle.cite(); }
			}
			public NObjective.RuntimeObject dateTime {
				get { return _handle.dateTime(); }
			}
			private readonly DOMHTMLModElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLModElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cite( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateTime( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cite );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDateTime_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject time );
		}
		static internal class CachedSelectors {
			public static readonly Selector cite = "cite";
			public static readonly Selector dateTime = "dateTime";
			public static readonly Selector setCite_ = "setCite:";
			public static readonly Selector setDateTime_ = "setDateTime:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLObjectElement : IEquatable<DOMHTMLObjectElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLObjectElement;
		public static implicit operator DOMHTMLElement( DOMHTMLObjectElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLObjectElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLObjectElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLObjectElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLObjectElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLObjectElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLObjectElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLObjectElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLObjectElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLObjectElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLObjectElement value1, DOMHTMLObjectElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLObjectElement value1, DOMHTMLObjectElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLObjectElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLObjectElement alloc() {
			return new DOMHTMLObjectElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject absoluteImageURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.absoluteImageURL( Handle, CachedSelectors.absoluteImageURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject archive() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archive( Handle, CachedSelectors.archive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject border() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.border( Handle, CachedSelectors.border, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject code() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.code( Handle, CachedSelectors.code, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject codeBase() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.codeBase( Handle, CachedSelectors.codeBase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject codeType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.codeType( Handle, CachedSelectors.codeType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contentDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentDocument( Handle, CachedSelectors.contentDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char declare() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.declare( Handle, CachedSelectors.declare, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject form() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.form( Handle, CachedSelectors.form, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getSVGDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getSVGDocument( Handle, CachedSelectors.getSVGDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int hspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hspace( Handle, CachedSelectors.hspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setArchive_( NObjective.RuntimeObject archive ) {
			RuntimeObject ___occuredException;
			NativeMethods.setArchive_( Handle, CachedSelectors.setArchive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), archive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorder_( NObjective.RuntimeObject border ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBorder_( Handle, CachedSelectors.setBorder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), border );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCode_( NObjective.RuntimeObject code ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCode_( Handle, CachedSelectors.setCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCodeBase_( NObjective.RuntimeObject @base ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCodeBase_( Handle, CachedSelectors.setCodeBase_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @base );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCodeType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCodeType_( Handle, CachedSelectors.setCodeType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.setData_( Handle, CachedSelectors.setData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDeclare_( char declare ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDeclare_( Handle, CachedSelectors.setDeclare_, out ___occuredException, sizeof( char ), declare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHeight_( NObjective.RuntimeObject height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHeight_( Handle, CachedSelectors.setHeight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHspace_( int hspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHspace_( Handle, CachedSelectors.setHspace_, out ___occuredException, sizeof( int ), hspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStandby_( NObjective.RuntimeObject standby ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStandby_( Handle, CachedSelectors.setStandby_, out ___occuredException, sizeof( NObjective.RuntimeObject ), standby );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTabIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTabIndex_( Handle, CachedSelectors.setTabIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUseMap_( NObjective.RuntimeObject map ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUseMap_( Handle, CachedSelectors.setUseMap_, out ___occuredException, sizeof( NObjective.RuntimeObject ), map );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVspace_( int vspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVspace_( Handle, CachedSelectors.setVspace_, out ___occuredException, sizeof( int ), vspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( NObjective.RuntimeObject width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject standby() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.standby( Handle, CachedSelectors.standby, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int tabIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tabIndex( Handle, CachedSelectors.tabIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject useMap() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useMap( Handle, CachedSelectors.useMap, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int vspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vspace( Handle, CachedSelectors.vspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject absoluteImageURL {
				get { return _handle.absoluteImageURL(); }
			}
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject archive {
				get { return _handle.archive(); }
			}
			public NObjective.RuntimeObject border {
				get { return _handle.border(); }
			}
			public NObjective.RuntimeObject code {
				get { return _handle.code(); }
			}
			public NObjective.RuntimeObject codeBase {
				get { return _handle.codeBase(); }
			}
			public NObjective.RuntimeObject codeType {
				get { return _handle.codeType(); }
			}
			public NObjective.RuntimeObject contentDocument {
				get { return _handle.contentDocument(); }
			}
			public NObjective.RuntimeObject data {
				get { return _handle.data(); }
			}
			public char declare {
				get { return _handle.declare(); }
			}
			public NObjective.RuntimeObject form {
				get { return _handle.form(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public int hspace {
				get { return _handle.hspace(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject standby {
				get { return _handle.standby(); }
			}
			public int tabIndex {
				get { return _handle.tabIndex(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			public NObjective.RuntimeObject useMap {
				get { return _handle.useMap(); }
			}
			public int vspace {
				get { return _handle.vspace(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLObjectElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLObjectElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr absoluteImageURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr border( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr code( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr codeBase( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr codeType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char declare( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr form( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getSVGDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int hspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setArchive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject archive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject border );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCodeBase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @base );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCodeType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDeclare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char declare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int hspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStandby_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject standby );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTabIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUseMap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject map );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int vspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr standby( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int tabIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr useMap( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int vspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector absoluteImageURL = "absoluteImageURL";
			public static readonly Selector align = "align";
			public static readonly Selector archive = "archive";
			public static readonly Selector border = "border";
			public static readonly Selector code = "code";
			public static readonly Selector codeBase = "codeBase";
			public static readonly Selector codeType = "codeType";
			public static readonly Selector contentDocument = "contentDocument";
			public static readonly Selector data = "data";
			public static readonly Selector declare = "declare";
			public static readonly Selector form = "form";
			public static readonly Selector getSVGDocument = "getSVGDocument";
			public static readonly Selector height = "height";
			public static readonly Selector hspace = "hspace";
			public static readonly Selector name = "name";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setArchive_ = "setArchive:";
			public static readonly Selector setBorder_ = "setBorder:";
			public static readonly Selector setCode_ = "setCode:";
			public static readonly Selector setCodeBase_ = "setCodeBase:";
			public static readonly Selector setCodeType_ = "setCodeType:";
			public static readonly Selector setData_ = "setData:";
			public static readonly Selector setDeclare_ = "setDeclare:";
			public static readonly Selector setHeight_ = "setHeight:";
			public static readonly Selector setHspace_ = "setHspace:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setStandby_ = "setStandby:";
			public static readonly Selector setTabIndex_ = "setTabIndex:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector setUseMap_ = "setUseMap:";
			public static readonly Selector setVspace_ = "setVspace:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector standby = "standby";
			public static readonly Selector tabIndex = "tabIndex";
			public static readonly Selector type = "type";
			public static readonly Selector useMap = "useMap";
			public static readonly Selector vspace = "vspace";
			public static readonly Selector width = "width";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLOListElement : IEquatable<DOMHTMLOListElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLOListElement;
		public static implicit operator DOMHTMLElement( DOMHTMLOListElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLOListElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLOListElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLOListElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLOListElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLOListElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLOListElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLOListElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLOListElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLOListElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLOListElement value1, DOMHTMLOListElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLOListElement value1, DOMHTMLOListElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLOListElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLOListElement alloc() {
			return new DOMHTMLOListElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char compact() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compact( Handle, CachedSelectors.compact, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCompact_( char compact ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCompact_( Handle, CachedSelectors.setCompact_, out ___occuredException, sizeof( char ), compact );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStart_( int start ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStart_( Handle, CachedSelectors.setStart_, out ___occuredException, sizeof( int ), start );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int start() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.start( Handle, CachedSelectors.start, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public char compact {
				get { return _handle.compact(); }
			}
			public int start {
				get { return _handle.start(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			private readonly DOMHTMLOListElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLOListElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compact( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCompact_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char compact );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStart_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int start );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int start( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector compact = "compact";
			public static readonly Selector setCompact_ = "setCompact:";
			public static readonly Selector setStart_ = "setStart:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector start = "start";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLOptGroupElement : IEquatable<DOMHTMLOptGroupElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLOptGroupElement;
		public static implicit operator DOMHTMLElement( DOMHTMLOptGroupElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLOptGroupElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLOptGroupElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLOptGroupElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLOptGroupElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLOptGroupElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLOptGroupElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLOptGroupElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLOptGroupElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLOptGroupElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLOptGroupElement value1, DOMHTMLOptGroupElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLOptGroupElement value1, DOMHTMLOptGroupElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLOptGroupElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLOptGroupElement alloc() {
			return new DOMHTMLOptGroupElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char disabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabled( Handle, CachedSelectors.disabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject label() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.label( Handle, CachedSelectors.label, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabled_( Handle, CachedSelectors.setDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLabel_( NObjective.RuntimeObject label ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLabel_( Handle, CachedSelectors.setLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), label );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public char disabled {
				get { return _handle.disabled(); }
			}
			public NObjective.RuntimeObject label {
				get { return _handle.label(); }
			}
			private readonly DOMHTMLOptGroupElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLOptGroupElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char disabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr label( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label );
		}
		static internal class CachedSelectors {
			public static readonly Selector disabled = "disabled";
			public static readonly Selector label = "label";
			public static readonly Selector setDisabled_ = "setDisabled:";
			public static readonly Selector setLabel_ = "setLabel:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLOptionElement : IEquatable<DOMHTMLOptionElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLOptionElement;
		public static implicit operator DOMHTMLElement( DOMHTMLOptionElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLOptionElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLOptionElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLOptionElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLOptionElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLOptionElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLOptionElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLOptionElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLOptionElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLOptionElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLOptionElement value1, DOMHTMLOptionElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLOptionElement value1, DOMHTMLOptionElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLOptionElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLOptionElement alloc() {
			return new DOMHTMLOptionElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char defaultSelected() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultSelected( Handle, CachedSelectors.defaultSelected, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char disabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabled( Handle, CachedSelectors.disabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject form() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.form( Handle, CachedSelectors.form, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int index() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.index( Handle, CachedSelectors.index, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject label() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.label( Handle, CachedSelectors.label, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char selected() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selected( Handle, CachedSelectors.selected, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDefaultSelected_( char selected ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultSelected_( Handle, CachedSelectors.setDefaultSelected_, out ___occuredException, sizeof( char ), selected );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabled_( Handle, CachedSelectors.setDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLabel_( NObjective.RuntimeObject label ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLabel_( Handle, CachedSelectors.setLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), label );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelected_( char selected ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelected_( Handle, CachedSelectors.setSelected_, out ___occuredException, sizeof( char ), selected );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject text() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.text( Handle, CachedSelectors.text, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public char defaultSelected {
				get { return _handle.defaultSelected(); }
			}
			public char disabled {
				get { return _handle.disabled(); }
			}
			public NObjective.RuntimeObject form {
				get { return _handle.form(); }
			}
			public int index {
				get { return _handle.index(); }
			}
			public NObjective.RuntimeObject label {
				get { return _handle.label(); }
			}
			public char selected {
				get { return _handle.selected(); }
			}
			public NObjective.RuntimeObject text {
				get { return _handle.text(); }
			}
			public NObjective.RuntimeObject value {
				get { return _handle.value(); }
			}
			private readonly DOMHTMLOptionElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLOptionElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char defaultSelected( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char disabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr form( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int index( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr label( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char selected( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultSelected_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selected );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelected_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selected );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr text( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector defaultSelected = "defaultSelected";
			public static readonly Selector disabled = "disabled";
			public static readonly Selector form = "form";
			public static readonly Selector index = "index";
			public static readonly Selector label = "label";
			public static readonly Selector selected = "selected";
			public static readonly Selector setDefaultSelected_ = "setDefaultSelected:";
			public static readonly Selector setDisabled_ = "setDisabled:";
			public static readonly Selector setLabel_ = "setLabel:";
			public static readonly Selector setSelected_ = "setSelected:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector text = "text";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMHTMLOptionsCollection : IEquatable<DOMHTMLOptionsCollection> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLOptionsCollection;
		public static implicit operator DOMObject( DOMHTMLOptionsCollection value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLOptionsCollection value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLOptionsCollection value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLOptionsCollection value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLOptionsCollection value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLOptionsCollection?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLOptionsCollection value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLOptionsCollection value1, DOMHTMLOptionsCollection value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLOptionsCollection value1, DOMHTMLOptionsCollection value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLOptionsCollection( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLOptionsCollection alloc() {
			return new DOMHTMLOptionsCollection( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void add_index_( NObjective.RuntimeObject @add, uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.add_index_( Handle, CachedSelectors.add_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @add, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public DOMNode item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public DOMNode namedItem_( string item ) {
			RuntimeObject ___occuredException;
			var ___wrappeditem = Runtime.CreateStringProxy( item );
			var ___result = NativeMethods.namedItem_( Handle, CachedSelectors.namedItem_, out ___occuredException, sizeof( IntPtr ), ___wrappeditem );
			Runtime.ReleaseNativeObject( ___wrappeditem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public void remove_( uint @remove ) {
			RuntimeObject ___occuredException;
			NativeMethods.remove_( Handle, CachedSelectors.remove_, out ___occuredException, sizeof( uint ), @remove );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int selectedIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedIndex( Handle, CachedSelectors.selectedIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setLength_( uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLength_( Handle, CachedSelectors.setLength_, out ___occuredException, sizeof( uint ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedIndex_( Handle, CachedSelectors.setSelectedIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public uint length {
				get { return _handle.length(); }
			}
			private readonly DOMHTMLOptionsCollection _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLOptionsCollection value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void add_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @add, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr namedItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void remove_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @remove );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int selectedIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
		}
		static internal class CachedSelectors {
			public static readonly Selector add_index_ = "add:index:";
			public static readonly Selector item_ = "item:";
			public static readonly Selector length = "length";
			public static readonly Selector namedItem_ = "namedItem:";
			public static readonly Selector remove_ = "remove:";
			public static readonly Selector selectedIndex = "selectedIndex";
			public static readonly Selector setLength_ = "setLength:";
			public static readonly Selector setSelectedIndex_ = "setSelectedIndex:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLParagraphElement : IEquatable<DOMHTMLParagraphElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLParagraphElement;
		public static implicit operator DOMHTMLElement( DOMHTMLParagraphElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLParagraphElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLParagraphElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLParagraphElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLParagraphElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLParagraphElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLParagraphElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLParagraphElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLParagraphElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLParagraphElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLParagraphElement value1, DOMHTMLParagraphElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLParagraphElement value1, DOMHTMLParagraphElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLParagraphElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLParagraphElement alloc() {
			return new DOMHTMLParagraphElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			private readonly DOMHTMLParagraphElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLParagraphElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector setAlign_ = "setAlign:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLParamElement : IEquatable<DOMHTMLParamElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLParamElement;
		public static implicit operator DOMHTMLElement( DOMHTMLParamElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLParamElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLParamElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLParamElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLParamElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLParamElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLParamElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLParamElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLParamElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLParamElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLParamElement value1, DOMHTMLParamElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLParamElement value1, DOMHTMLParamElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLParamElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLParamElement alloc() {
			return new DOMHTMLParamElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValueType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueType_( Handle, CachedSelectors.setValueType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueType( Handle, CachedSelectors.valueType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			public NObjective.RuntimeObject value {
				get { return _handle.value(); }
			}
			public NObjective.RuntimeObject valueType {
				get { return _handle.valueType(); }
			}
			private readonly DOMHTMLParamElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLParamElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValueType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector name = "name";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector setValueType_ = "setValueType:";
			public static readonly Selector type = "type";
			public static readonly Selector value = "value";
			public static readonly Selector valueType = "valueType";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLPreElement : IEquatable<DOMHTMLPreElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLPreElement;
		public static implicit operator DOMHTMLElement( DOMHTMLPreElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLPreElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLPreElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLPreElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLPreElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLPreElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLPreElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLPreElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLPreElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLPreElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLPreElement value1, DOMHTMLPreElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLPreElement value1, DOMHTMLPreElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLPreElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLPreElement alloc() {
			return new DOMHTMLPreElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setWidth_( int width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( int ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWrap_( char wrap ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWrap_( Handle, CachedSelectors.setWrap_, out ___occuredException, sizeof( char ), wrap );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char wrap() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wrap( Handle, CachedSelectors.wrap, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public int width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLPreElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLPreElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWrap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char wrap );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char wrap( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector setWrap_ = "setWrap:";
			public static readonly Selector width = "width";
			public static readonly Selector wrap = "wrap";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLQuoteElement : IEquatable<DOMHTMLQuoteElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLQuoteElement;
		public static implicit operator DOMHTMLElement( DOMHTMLQuoteElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLQuoteElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLQuoteElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLQuoteElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLQuoteElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLQuoteElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLQuoteElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLQuoteElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLQuoteElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLQuoteElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLQuoteElement value1, DOMHTMLQuoteElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLQuoteElement value1, DOMHTMLQuoteElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLQuoteElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLQuoteElement alloc() {
			return new DOMHTMLQuoteElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cite() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cite( Handle, CachedSelectors.cite, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setCite_( NObjective.RuntimeObject cite ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCite_( Handle, CachedSelectors.setCite_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject cite {
				get { return _handle.cite(); }
			}
			private readonly DOMHTMLQuoteElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLQuoteElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cite( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cite );
		}
		static internal class CachedSelectors {
			public static readonly Selector cite = "cite";
			public static readonly Selector setCite_ = "setCite:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLScriptElement : IEquatable<DOMHTMLScriptElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLScriptElement;
		public static implicit operator DOMHTMLElement( DOMHTMLScriptElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLScriptElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLScriptElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLScriptElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLScriptElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLScriptElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLScriptElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLScriptElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLScriptElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLScriptElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLScriptElement value1, DOMHTMLScriptElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLScriptElement value1, DOMHTMLScriptElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLScriptElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLScriptElement alloc() {
			return new DOMHTMLScriptElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject charset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.charset( Handle, CachedSelectors.charset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char defer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defer( Handle, CachedSelectors.defer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject @event() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@event( Handle, CachedSelectors.@event, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject htmlFor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.htmlFor( Handle, CachedSelectors.htmlFor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setCharset_( NObjective.RuntimeObject charset ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCharset_( Handle, CachedSelectors.setCharset_, out ___occuredException, sizeof( NObjective.RuntimeObject ), charset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefer_( char defer ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefer_( Handle, CachedSelectors.setDefer_, out ___occuredException, sizeof( char ), defer );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEvent_( NObjective.RuntimeObject @event ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEvent_( Handle, CachedSelectors.setEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHtmlFor_( NObjective.RuntimeObject @for ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHtmlFor_( Handle, CachedSelectors.setHtmlFor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @for );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSrc_( NObjective.RuntimeObject src ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSrc_( Handle, CachedSelectors.setSrc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), src );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setText_( Handle, CachedSelectors.setText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject src() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.src( Handle, CachedSelectors.src, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject text() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.text( Handle, CachedSelectors.text, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject charset {
				get { return _handle.charset(); }
			}
			public char defer {
				get { return _handle.defer(); }
			}
			public NObjective.RuntimeObject @event {
				get { return _handle.@event(); }
			}
			public NObjective.RuntimeObject htmlFor {
				get { return _handle.htmlFor(); }
			}
			public NObjective.RuntimeObject src {
				get { return _handle.src(); }
			}
			public NObjective.RuntimeObject text {
				get { return _handle.text(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			private readonly DOMHTMLScriptElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLScriptElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr charset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char defer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @event( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr htmlFor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCharset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject charset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char defer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHtmlFor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSrc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject src );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr src( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr text( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector charset = "charset";
			public static readonly Selector defer = "defer";
			public static readonly Selector @event = "event";
			public static readonly Selector htmlFor = "htmlFor";
			public static readonly Selector setCharset_ = "setCharset:";
			public static readonly Selector setDefer_ = "setDefer:";
			public static readonly Selector setEvent_ = "setEvent:";
			public static readonly Selector setHtmlFor_ = "setHtmlFor:";
			public static readonly Selector setSrc_ = "setSrc:";
			public static readonly Selector setText_ = "setText:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector src = "src";
			public static readonly Selector text = "text";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLSelectElement : IEquatable<DOMHTMLSelectElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLSelectElement;
		public static implicit operator DOMHTMLElement( DOMHTMLSelectElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLSelectElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLSelectElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLSelectElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLSelectElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLSelectElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLSelectElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLSelectElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLSelectElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLSelectElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLSelectElement value1, DOMHTMLSelectElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLSelectElement value1, DOMHTMLSelectElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLSelectElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLSelectElement alloc() {
			return new DOMHTMLSelectElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void add__( DOMHTMLElement @add, DOMHTMLElement unnamedParameter ) {
			RuntimeObject ___occuredException;
			NativeMethods.add__( Handle, CachedSelectors.add__, out ___occuredException, sizeof( DOMHTMLElement ) + sizeof( DOMHTMLElement ), @add, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void add_before_( DOMHTMLElement @add, DOMHTMLElement before ) {
			RuntimeObject ___occuredException;
			NativeMethods.add_before_( Handle, CachedSelectors.add_before_, out ___occuredException, sizeof( DOMHTMLElement ) + sizeof( DOMHTMLElement ), @add, before );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char disabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabled( Handle, CachedSelectors.disabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject form() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.form( Handle, CachedSelectors.form, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char multiple() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.multiple( Handle, CachedSelectors.multiple, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject namedItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.namedItem_( Handle, CachedSelectors.namedItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject options() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.options( Handle, CachedSelectors.options, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void remove_( int @remove ) {
			RuntimeObject ___occuredException;
			NativeMethods.remove_( Handle, CachedSelectors.remove_, out ___occuredException, sizeof( int ), @remove );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int selectedIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedIndex( Handle, CachedSelectors.selectedIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabled_( Handle, CachedSelectors.setDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMultiple_( char multiple ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMultiple_( Handle, CachedSelectors.setMultiple_, out ___occuredException, sizeof( char ), multiple );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedIndex_( Handle, CachedSelectors.setSelectedIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSize_( int size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSize_( Handle, CachedSelectors.setSize_, out ___occuredException, sizeof( int ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTabIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTabIndex_( Handle, CachedSelectors.setTabIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int size() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.size( Handle, CachedSelectors.size, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int tabIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tabIndex( Handle, CachedSelectors.tabIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public char disabled {
				get { return _handle.disabled(); }
			}
			public NObjective.RuntimeObject form {
				get { return _handle.form(); }
			}
			public int length {
				get { return _handle.length(); }
			}
			public char multiple {
				get { return _handle.multiple(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public NObjective.RuntimeObject options {
				get { return _handle.options(); }
			}
			public int selectedIndex {
				get { return _handle.selectedIndex(); }
			}
			public int size {
				get { return _handle.size(); }
			}
			public int tabIndex {
				get { return _handle.tabIndex(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			public NObjective.RuntimeObject value {
				get { return _handle.value(); }
			}
			private readonly DOMHTMLSelectElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLSelectElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void add__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMHTMLElement @add, DOMHTMLElement unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void add_before_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMHTMLElement @add, DOMHTMLElement before );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char disabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr form( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char multiple( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr namedItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr options( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void remove_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @remove );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int selectedIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMultiple_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char multiple );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTabIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int size( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int tabIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector add__ = "add::";
			public static readonly Selector add_before_ = "add:before:";
			public static readonly Selector disabled = "disabled";
			public static readonly Selector form = "form";
			public static readonly Selector item_ = "item:";
			public static readonly Selector length = "length";
			public static readonly Selector multiple = "multiple";
			public static readonly Selector name = "name";
			public static readonly Selector namedItem_ = "namedItem:";
			public static readonly Selector options = "options";
			public static readonly Selector remove_ = "remove:";
			public static readonly Selector selectedIndex = "selectedIndex";
			public static readonly Selector setDisabled_ = "setDisabled:";
			public static readonly Selector setMultiple_ = "setMultiple:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setSelectedIndex_ = "setSelectedIndex:";
			public static readonly Selector setSize_ = "setSize:";
			public static readonly Selector setTabIndex_ = "setTabIndex:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector size = "size";
			public static readonly Selector tabIndex = "tabIndex";
			public static readonly Selector type = "type";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLStyleElement : IEquatable<DOMHTMLStyleElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLStyleElement;
		public static implicit operator DOMHTMLElement( DOMHTMLStyleElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLStyleElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLStyleElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLStyleElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLStyleElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLStyleElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLStyleElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLStyleElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLStyleElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLStyleElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLStyleElement value1, DOMHTMLStyleElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLStyleElement value1, DOMHTMLStyleElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLStyleElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLStyleElement alloc() {
			return new DOMHTMLStyleElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char disabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabled( Handle, CachedSelectors.disabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject media() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.media( Handle, CachedSelectors.media, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabled_( Handle, CachedSelectors.setDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMedia_( NObjective.RuntimeObject media ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMedia_( Handle, CachedSelectors.setMedia_, out ___occuredException, sizeof( NObjective.RuntimeObject ), media );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public char disabled {
				get { return _handle.disabled(); }
			}
			public NObjective.RuntimeObject media {
				get { return _handle.media(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			private readonly DOMHTMLStyleElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLStyleElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char disabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr media( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMedia_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject media );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector disabled = "disabled";
			public static readonly Selector media = "media";
			public static readonly Selector setDisabled_ = "setDisabled:";
			public static readonly Selector setMedia_ = "setMedia:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLTableCaptionElement : IEquatable<DOMHTMLTableCaptionElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLTableCaptionElement;
		public static implicit operator DOMHTMLElement( DOMHTMLTableCaptionElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLTableCaptionElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLTableCaptionElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLTableCaptionElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLTableCaptionElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLTableCaptionElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLTableCaptionElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLTableCaptionElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLTableCaptionElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLTableCaptionElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLTableCaptionElement value1, DOMHTMLTableCaptionElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLTableCaptionElement value1, DOMHTMLTableCaptionElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLTableCaptionElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLTableCaptionElement alloc() {
			return new DOMHTMLTableCaptionElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			private readonly DOMHTMLTableCaptionElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLTableCaptionElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector setAlign_ = "setAlign:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLTableCellElement : IEquatable<DOMHTMLTableCellElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLTableCellElement;
		public static implicit operator DOMHTMLElement( DOMHTMLTableCellElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLTableCellElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLTableCellElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLTableCellElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLTableCellElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLTableCellElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLTableCellElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLTableCellElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLTableCellElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLTableCellElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLTableCellElement value1, DOMHTMLTableCellElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLTableCellElement value1, DOMHTMLTableCellElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLTableCellElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLTableCellElement alloc() {
			return new DOMHTMLTableCellElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject abbr() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abbr( Handle, CachedSelectors.abbr, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject axis() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.axis( Handle, CachedSelectors.axis, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject bgColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bgColor( Handle, CachedSelectors.bgColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int cellIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cellIndex( Handle, CachedSelectors.cellIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject ch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ch( Handle, CachedSelectors.ch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject chOff() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.chOff( Handle, CachedSelectors.chOff, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int colSpan() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.colSpan( Handle, CachedSelectors.colSpan, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject headers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.headers( Handle, CachedSelectors.headers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char noWrap() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.noWrap( Handle, CachedSelectors.noWrap, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int rowSpan() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rowSpan( Handle, CachedSelectors.rowSpan, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject scope() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scope( Handle, CachedSelectors.scope, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAbbr_( NObjective.RuntimeObject abbr ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAbbr_( Handle, CachedSelectors.setAbbr_, out ___occuredException, sizeof( NObjective.RuntimeObject ), abbr );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAxis_( NObjective.RuntimeObject axis ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAxis_( Handle, CachedSelectors.setAxis_, out ___occuredException, sizeof( NObjective.RuntimeObject ), axis );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBgColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBgColor_( Handle, CachedSelectors.setBgColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCh_( NObjective.RuntimeObject ch ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCh_( Handle, CachedSelectors.setCh_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ch );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChOff_( NObjective.RuntimeObject off ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChOff_( Handle, CachedSelectors.setChOff_, out ___occuredException, sizeof( NObjective.RuntimeObject ), off );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setColSpan_( int span ) {
			RuntimeObject ___occuredException;
			NativeMethods.setColSpan_( Handle, CachedSelectors.setColSpan_, out ___occuredException, sizeof( int ), span );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHeaders_( NObjective.RuntimeObject headers ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHeaders_( Handle, CachedSelectors.setHeaders_, out ___occuredException, sizeof( NObjective.RuntimeObject ), headers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHeight_( NObjective.RuntimeObject height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHeight_( Handle, CachedSelectors.setHeight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNoWrap_( char wrap ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNoWrap_( Handle, CachedSelectors.setNoWrap_, out ___occuredException, sizeof( char ), wrap );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRowSpan_( int span ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRowSpan_( Handle, CachedSelectors.setRowSpan_, out ___occuredException, sizeof( int ), span );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScope_( NObjective.RuntimeObject scope ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScope_( Handle, CachedSelectors.setScope_, out ___occuredException, sizeof( NObjective.RuntimeObject ), scope );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVAlign_( Handle, CachedSelectors.setVAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( NObjective.RuntimeObject width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject vAlign() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vAlign( Handle, CachedSelectors.vAlign, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject abbr {
				get { return _handle.abbr(); }
			}
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject axis {
				get { return _handle.axis(); }
			}
			public NObjective.RuntimeObject bgColor {
				get { return _handle.bgColor(); }
			}
			public int cellIndex {
				get { return _handle.cellIndex(); }
			}
			public NObjective.RuntimeObject ch {
				get { return _handle.ch(); }
			}
			public NObjective.RuntimeObject chOff {
				get { return _handle.chOff(); }
			}
			public int colSpan {
				get { return _handle.colSpan(); }
			}
			public NObjective.RuntimeObject headers {
				get { return _handle.headers(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public char noWrap {
				get { return _handle.noWrap(); }
			}
			public int rowSpan {
				get { return _handle.rowSpan(); }
			}
			public NObjective.RuntimeObject scope {
				get { return _handle.scope(); }
			}
			public NObjective.RuntimeObject vAlign {
				get { return _handle.vAlign(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLTableCellElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLTableCellElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abbr( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr axis( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bgColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int cellIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr chOff( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int colSpan( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr headers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char noWrap( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int rowSpan( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scope( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAbbr_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject abbr );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAxis_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject axis );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBgColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCh_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ch );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChOff_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject off );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setColSpan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int span );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHeaders_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject headers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNoWrap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char wrap );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRowSpan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int span );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScope_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject scope );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vAlign( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector abbr = "abbr";
			public static readonly Selector align = "align";
			public static readonly Selector axis = "axis";
			public static readonly Selector bgColor = "bgColor";
			public static readonly Selector cellIndex = "cellIndex";
			public static readonly Selector ch = "ch";
			public static readonly Selector chOff = "chOff";
			public static readonly Selector colSpan = "colSpan";
			public static readonly Selector headers = "headers";
			public static readonly Selector height = "height";
			public static readonly Selector noWrap = "noWrap";
			public static readonly Selector rowSpan = "rowSpan";
			public static readonly Selector scope = "scope";
			public static readonly Selector setAbbr_ = "setAbbr:";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setAxis_ = "setAxis:";
			public static readonly Selector setBgColor_ = "setBgColor:";
			public static readonly Selector setCh_ = "setCh:";
			public static readonly Selector setChOff_ = "setChOff:";
			public static readonly Selector setColSpan_ = "setColSpan:";
			public static readonly Selector setHeaders_ = "setHeaders:";
			public static readonly Selector setHeight_ = "setHeight:";
			public static readonly Selector setNoWrap_ = "setNoWrap:";
			public static readonly Selector setRowSpan_ = "setRowSpan:";
			public static readonly Selector setScope_ = "setScope:";
			public static readonly Selector setVAlign_ = "setVAlign:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector vAlign = "vAlign";
			public static readonly Selector width = "width";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLTableColElement : IEquatable<DOMHTMLTableColElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLTableColElement;
		public static implicit operator DOMHTMLElement( DOMHTMLTableColElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLTableColElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLTableColElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLTableColElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLTableColElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLTableColElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLTableColElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLTableColElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLTableColElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLTableColElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLTableColElement value1, DOMHTMLTableColElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLTableColElement value1, DOMHTMLTableColElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLTableColElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLTableColElement alloc() {
			return new DOMHTMLTableColElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject ch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ch( Handle, CachedSelectors.ch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject chOff() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.chOff( Handle, CachedSelectors.chOff, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCh_( NObjective.RuntimeObject ch ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCh_( Handle, CachedSelectors.setCh_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ch );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChOff_( NObjective.RuntimeObject off ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChOff_( Handle, CachedSelectors.setChOff_, out ___occuredException, sizeof( NObjective.RuntimeObject ), off );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSpan_( int span ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSpan_( Handle, CachedSelectors.setSpan_, out ___occuredException, sizeof( int ), span );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVAlign_( Handle, CachedSelectors.setVAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( NObjective.RuntimeObject width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int span() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.span( Handle, CachedSelectors.span, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject vAlign() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vAlign( Handle, CachedSelectors.vAlign, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject ch {
				get { return _handle.ch(); }
			}
			public NObjective.RuntimeObject chOff {
				get { return _handle.chOff(); }
			}
			public int span {
				get { return _handle.span(); }
			}
			public NObjective.RuntimeObject vAlign {
				get { return _handle.vAlign(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLTableColElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLTableColElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr chOff( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCh_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ch );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChOff_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject off );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSpan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int span );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int span( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vAlign( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector ch = "ch";
			public static readonly Selector chOff = "chOff";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setCh_ = "setCh:";
			public static readonly Selector setChOff_ = "setChOff:";
			public static readonly Selector setSpan_ = "setSpan:";
			public static readonly Selector setVAlign_ = "setVAlign:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector span = "span";
			public static readonly Selector vAlign = "vAlign";
			public static readonly Selector width = "width";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLTableElement : IEquatable<DOMHTMLTableElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLTableElement;
		public static implicit operator DOMHTMLElement( DOMHTMLTableElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLTableElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLTableElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLTableElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLTableElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLTableElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLTableElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLTableElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLTableElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLTableElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLTableElement value1, DOMHTMLTableElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLTableElement value1, DOMHTMLTableElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLTableElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLTableElement alloc() {
			return new DOMHTMLTableElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject bgColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bgColor( Handle, CachedSelectors.bgColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject border() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.border( Handle, CachedSelectors.border, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject caption() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.caption( Handle, CachedSelectors.caption, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cellPadding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cellPadding( Handle, CachedSelectors.cellPadding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cellSpacing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cellSpacing( Handle, CachedSelectors.cellSpacing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMHTMLElement createCaption() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createCaption( Handle, CachedSelectors.createCaption, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMHTMLElement( ___result );
		}
		unsafe public DOMHTMLElement createTFoot() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createTFoot( Handle, CachedSelectors.createTFoot, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMHTMLElement( ___result );
		}
		unsafe public DOMHTMLElement createTHead() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createTHead( Handle, CachedSelectors.createTHead, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMHTMLElement( ___result );
		}
		unsafe public void deleteCaption() {
			RuntimeObject ___occuredException;
			NativeMethods.deleteCaption( Handle, CachedSelectors.deleteCaption, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteRow_( int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteRow_( Handle, CachedSelectors.deleteRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteTFoot() {
			RuntimeObject ___occuredException;
			NativeMethods.deleteTFoot( Handle, CachedSelectors.deleteTFoot, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteTHead() {
			RuntimeObject ___occuredException;
			NativeMethods.deleteTHead( Handle, CachedSelectors.deleteTHead, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject frameBorders() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frameBorders( Handle, CachedSelectors.frameBorders, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMHTMLElement insertRow_( int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertRow_( Handle, CachedSelectors.insertRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMHTMLElement( ___result );
		}
		unsafe public NObjective.RuntimeObject rows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rows( Handle, CachedSelectors.rows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rules() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rules( Handle, CachedSelectors.rules, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBgColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBgColor_( Handle, CachedSelectors.setBgColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBorder_( NObjective.RuntimeObject border ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBorder_( Handle, CachedSelectors.setBorder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), border );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCaption_( NObjective.RuntimeObject caption ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCaption_( Handle, CachedSelectors.setCaption_, out ___occuredException, sizeof( NObjective.RuntimeObject ), caption );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCellPadding_( NObjective.RuntimeObject padding ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCellPadding_( Handle, CachedSelectors.setCellPadding_, out ___occuredException, sizeof( NObjective.RuntimeObject ), padding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCellSpacing_( NObjective.RuntimeObject spacing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCellSpacing_( Handle, CachedSelectors.setCellSpacing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), spacing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFrameBorders_( NObjective.RuntimeObject borders ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFrameBorders_( Handle, CachedSelectors.setFrameBorders_, out ___occuredException, sizeof( NObjective.RuntimeObject ), borders );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRules_( NObjective.RuntimeObject rules ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRules_( Handle, CachedSelectors.setRules_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rules );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSummary_( NObjective.RuntimeObject summary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSummary_( Handle, CachedSelectors.setSummary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), summary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTFoot_( NObjective.RuntimeObject foot ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTFoot_( Handle, CachedSelectors.setTFoot_, out ___occuredException, sizeof( NObjective.RuntimeObject ), foot );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTHead_( NObjective.RuntimeObject head ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTHead_( Handle, CachedSelectors.setTHead_, out ___occuredException, sizeof( NObjective.RuntimeObject ), head );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( NObjective.RuntimeObject width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject summary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.summary( Handle, CachedSelectors.summary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tBodies() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tBodies( Handle, CachedSelectors.tBodies, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tFoot() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tFoot( Handle, CachedSelectors.tFoot, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tHead() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tHead( Handle, CachedSelectors.tHead, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject bgColor {
				get { return _handle.bgColor(); }
			}
			public NObjective.RuntimeObject border {
				get { return _handle.border(); }
			}
			public NObjective.RuntimeObject caption {
				get { return _handle.caption(); }
			}
			public NObjective.RuntimeObject cellPadding {
				get { return _handle.cellPadding(); }
			}
			public NObjective.RuntimeObject cellSpacing {
				get { return _handle.cellSpacing(); }
			}
			public NObjective.RuntimeObject frameBorders {
				get { return _handle.frameBorders(); }
			}
			public NObjective.RuntimeObject rows {
				get { return _handle.rows(); }
			}
			public NObjective.RuntimeObject rules {
				get { return _handle.rules(); }
			}
			public NObjective.RuntimeObject summary {
				get { return _handle.summary(); }
			}
			public NObjective.RuntimeObject tBodies {
				get { return _handle.tBodies(); }
			}
			public NObjective.RuntimeObject tFoot {
				get { return _handle.tFoot(); }
			}
			public NObjective.RuntimeObject tHead {
				get { return _handle.tHead(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			private readonly DOMHTMLTableElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLTableElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bgColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr border( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr caption( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cellPadding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cellSpacing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createCaption( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createTFoot( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createTHead( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteCaption( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteTFoot( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteTHead( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr frameBorders( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rules( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBgColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBorder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject border );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCaption_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject caption );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCellPadding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject padding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCellSpacing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject spacing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFrameBorders_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject borders );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRules_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rules );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSummary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject summary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTFoot_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject foot );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTHead_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject head );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr summary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tBodies( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tFoot( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tHead( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector bgColor = "bgColor";
			public static readonly Selector border = "border";
			public static readonly Selector caption = "caption";
			public static readonly Selector cellPadding = "cellPadding";
			public static readonly Selector cellSpacing = "cellSpacing";
			public static readonly Selector createCaption = "createCaption";
			public static readonly Selector createTFoot = "createTFoot";
			public static readonly Selector createTHead = "createTHead";
			public static readonly Selector deleteCaption = "deleteCaption";
			public static readonly Selector deleteRow_ = "deleteRow:";
			public static readonly Selector deleteTFoot = "deleteTFoot";
			public static readonly Selector deleteTHead = "deleteTHead";
			public static readonly Selector frameBorders = "frameBorders";
			public static readonly Selector insertRow_ = "insertRow:";
			public static readonly Selector rows = "rows";
			public static readonly Selector rules = "rules";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setBgColor_ = "setBgColor:";
			public static readonly Selector setBorder_ = "setBorder:";
			public static readonly Selector setCaption_ = "setCaption:";
			public static readonly Selector setCellPadding_ = "setCellPadding:";
			public static readonly Selector setCellSpacing_ = "setCellSpacing:";
			public static readonly Selector setFrameBorders_ = "setFrameBorders:";
			public static readonly Selector setRules_ = "setRules:";
			public static readonly Selector setSummary_ = "setSummary:";
			public static readonly Selector setTFoot_ = "setTFoot:";
			public static readonly Selector setTHead_ = "setTHead:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector summary = "summary";
			public static readonly Selector tBodies = "tBodies";
			public static readonly Selector tFoot = "tFoot";
			public static readonly Selector tHead = "tHead";
			public static readonly Selector width = "width";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLTableRowElement : IEquatable<DOMHTMLTableRowElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLTableRowElement;
		public static implicit operator DOMHTMLElement( DOMHTMLTableRowElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLTableRowElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLTableRowElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLTableRowElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLTableRowElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLTableRowElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLTableRowElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLTableRowElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLTableRowElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLTableRowElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLTableRowElement value1, DOMHTMLTableRowElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLTableRowElement value1, DOMHTMLTableRowElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLTableRowElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLTableRowElement alloc() {
			return new DOMHTMLTableRowElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject bgColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bgColor( Handle, CachedSelectors.bgColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cells() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cells( Handle, CachedSelectors.cells, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject ch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ch( Handle, CachedSelectors.ch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject chOff() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.chOff( Handle, CachedSelectors.chOff, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deleteCell_( int cell ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteCell_( Handle, CachedSelectors.deleteCell_, out ___occuredException, sizeof( int ), cell );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public DOMHTMLElement insertCell_( int cell ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertCell_( Handle, CachedSelectors.insertCell_, out ___occuredException, sizeof( int ), cell );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMHTMLElement( ___result );
		}
		unsafe public int rowIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rowIndex( Handle, CachedSelectors.rowIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int sectionRowIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sectionRowIndex( Handle, CachedSelectors.sectionRowIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBgColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBgColor_( Handle, CachedSelectors.setBgColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCh_( NObjective.RuntimeObject ch ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCh_( Handle, CachedSelectors.setCh_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ch );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChOff_( NObjective.RuntimeObject off ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChOff_( Handle, CachedSelectors.setChOff_, out ___occuredException, sizeof( NObjective.RuntimeObject ), off );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVAlign_( Handle, CachedSelectors.setVAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject vAlign() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vAlign( Handle, CachedSelectors.vAlign, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject bgColor {
				get { return _handle.bgColor(); }
			}
			public NObjective.RuntimeObject cells {
				get { return _handle.cells(); }
			}
			public NObjective.RuntimeObject ch {
				get { return _handle.ch(); }
			}
			public NObjective.RuntimeObject chOff {
				get { return _handle.chOff(); }
			}
			public int rowIndex {
				get { return _handle.rowIndex(); }
			}
			public int sectionRowIndex {
				get { return _handle.sectionRowIndex(); }
			}
			public NObjective.RuntimeObject vAlign {
				get { return _handle.vAlign(); }
			}
			private readonly DOMHTMLTableRowElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLTableRowElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bgColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cells( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr chOff( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteCell_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cell );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertCell_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cell );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int rowIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int sectionRowIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBgColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCh_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ch );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChOff_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject off );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vAlign( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector bgColor = "bgColor";
			public static readonly Selector cells = "cells";
			public static readonly Selector ch = "ch";
			public static readonly Selector chOff = "chOff";
			public static readonly Selector deleteCell_ = "deleteCell:";
			public static readonly Selector insertCell_ = "insertCell:";
			public static readonly Selector rowIndex = "rowIndex";
			public static readonly Selector sectionRowIndex = "sectionRowIndex";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setBgColor_ = "setBgColor:";
			public static readonly Selector setCh_ = "setCh:";
			public static readonly Selector setChOff_ = "setChOff:";
			public static readonly Selector setVAlign_ = "setVAlign:";
			public static readonly Selector vAlign = "vAlign";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLTableSectionElement : IEquatable<DOMHTMLTableSectionElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLTableSectionElement;
		public static implicit operator DOMHTMLElement( DOMHTMLTableSectionElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLTableSectionElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLTableSectionElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLTableSectionElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLTableSectionElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLTableSectionElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLTableSectionElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLTableSectionElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLTableSectionElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLTableSectionElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLTableSectionElement value1, DOMHTMLTableSectionElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLTableSectionElement value1, DOMHTMLTableSectionElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLTableSectionElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLTableSectionElement alloc() {
			return new DOMHTMLTableSectionElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject ch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ch( Handle, CachedSelectors.ch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject chOff() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.chOff( Handle, CachedSelectors.chOff, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deleteRow_( int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteRow_( Handle, CachedSelectors.deleteRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public DOMHTMLElement insertRow_( int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertRow_( Handle, CachedSelectors.insertRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMHTMLElement( ___result );
		}
		unsafe public NObjective.RuntimeObject rows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rows( Handle, CachedSelectors.rows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCh_( NObjective.RuntimeObject ch ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCh_( Handle, CachedSelectors.setCh_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ch );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChOff_( NObjective.RuntimeObject off ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChOff_( Handle, CachedSelectors.setChOff_, out ___occuredException, sizeof( NObjective.RuntimeObject ), off );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVAlign_( NObjective.RuntimeObject align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVAlign_( Handle, CachedSelectors.setVAlign_, out ___occuredException, sizeof( NObjective.RuntimeObject ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject vAlign() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vAlign( Handle, CachedSelectors.vAlign, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject align {
				get { return _handle.align(); }
			}
			public NObjective.RuntimeObject ch {
				get { return _handle.ch(); }
			}
			public NObjective.RuntimeObject chOff {
				get { return _handle.chOff(); }
			}
			public NObjective.RuntimeObject rows {
				get { return _handle.rows(); }
			}
			public NObjective.RuntimeObject vAlign {
				get { return _handle.vAlign(); }
			}
			private readonly DOMHTMLTableSectionElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLTableSectionElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr chOff( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCh_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ch );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChOff_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject off );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vAlign( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector ch = "ch";
			public static readonly Selector chOff = "chOff";
			public static readonly Selector deleteRow_ = "deleteRow:";
			public static readonly Selector insertRow_ = "insertRow:";
			public static readonly Selector rows = "rows";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setCh_ = "setCh:";
			public static readonly Selector setChOff_ = "setChOff:";
			public static readonly Selector setVAlign_ = "setVAlign:";
			public static readonly Selector vAlign = "vAlign";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLTextAreaElement : IEquatable<DOMHTMLTextAreaElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLTextAreaElement;
		public static implicit operator DOMHTMLElement( DOMHTMLTextAreaElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLTextAreaElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLTextAreaElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLTextAreaElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLTextAreaElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLTextAreaElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLTextAreaElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLTextAreaElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLTextAreaElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLTextAreaElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLTextAreaElement value1, DOMHTMLTextAreaElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLTextAreaElement value1, DOMHTMLTextAreaElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLTextAreaElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLTextAreaElement alloc() {
			return new DOMHTMLTextAreaElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessKey( Handle, CachedSelectors.accessKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int cols() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cols( Handle, CachedSelectors.cols, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject defaultValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultValue( Handle, CachedSelectors.defaultValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char disabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabled( Handle, CachedSelectors.disabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject form() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.form( Handle, CachedSelectors.form, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char readOnly() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.readOnly( Handle, CachedSelectors.readOnly, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int rows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rows( Handle, CachedSelectors.rows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void @select() {
			RuntimeObject ___occuredException;
			NativeMethods.@select( Handle, CachedSelectors.@select, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int selectionEnd() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionEnd( Handle, CachedSelectors.selectionEnd, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int selectionStart() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionStart( Handle, CachedSelectors.selectionStart, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAccessKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccessKey_( Handle, CachedSelectors.setAccessKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCols_( int cols ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCols_( Handle, CachedSelectors.setCols_, out ___occuredException, sizeof( int ), cols );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultValue_( Handle, CachedSelectors.setDefaultValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabled_( Handle, CachedSelectors.setDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setReadOnly_( char only ) {
			RuntimeObject ___occuredException;
			NativeMethods.setReadOnly_( Handle, CachedSelectors.setReadOnly_, out ___occuredException, sizeof( char ), only );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRows_( int rows ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRows_( Handle, CachedSelectors.setRows_, out ___occuredException, sizeof( int ), rows );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectionEnd_( int end ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectionEnd_( Handle, CachedSelectors.setSelectionEnd_, out ___occuredException, sizeof( int ), end );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectionRange_end_( int range, int end ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectionRange_end_( Handle, CachedSelectors.setSelectionRange_end_, out ___occuredException, sizeof( int ) + sizeof( int ), range, end );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectionStart_( int start ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectionStart_( Handle, CachedSelectors.setSelectionStart_, out ___occuredException, sizeof( int ), start );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTabIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTabIndex_( Handle, CachedSelectors.setTabIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int tabIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tabIndex( Handle, CachedSelectors.tabIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject accessKey {
				get { return _handle.accessKey(); }
			}
			public int cols {
				get { return _handle.cols(); }
			}
			public NObjective.RuntimeObject defaultValue {
				get { return _handle.defaultValue(); }
			}
			public char disabled {
				get { return _handle.disabled(); }
			}
			public NObjective.RuntimeObject form {
				get { return _handle.form(); }
			}
			public NObjective.RuntimeObject name {
				get { return _handle.name(); }
			}
			public char readOnly {
				get { return _handle.readOnly(); }
			}
			public int rows {
				get { return _handle.rows(); }
			}
			public int tabIndex {
				get { return _handle.tabIndex(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			public NObjective.RuntimeObject value {
				get { return _handle.value(); }
			}
			private readonly DOMHTMLTextAreaElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLTextAreaElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int cols( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char disabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr form( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char readOnly( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int rows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @select( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int selectionEnd( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int selectionStart( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAccessKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCols_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cols );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setReadOnly_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char only );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRows_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int rows );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectionEnd_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int end );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectionRange_end_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int range, int end );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectionStart_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int start );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTabIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int tabIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessKey = "accessKey";
			public static readonly Selector cols = "cols";
			public static readonly Selector defaultValue = "defaultValue";
			public static readonly Selector disabled = "disabled";
			public static readonly Selector form = "form";
			public static readonly Selector name = "name";
			public static readonly Selector readOnly = "readOnly";
			public static readonly Selector rows = "rows";
			public static readonly Selector @select = "select";
			public static readonly Selector selectionEnd = "selectionEnd";
			public static readonly Selector selectionStart = "selectionStart";
			public static readonly Selector setAccessKey_ = "setAccessKey:";
			public static readonly Selector setCols_ = "setCols:";
			public static readonly Selector setDefaultValue_ = "setDefaultValue:";
			public static readonly Selector setDisabled_ = "setDisabled:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setReadOnly_ = "setReadOnly:";
			public static readonly Selector setRows_ = "setRows:";
			public static readonly Selector setSelectionEnd_ = "setSelectionEnd:";
			public static readonly Selector setSelectionRange_end_ = "setSelectionRange:end:";
			public static readonly Selector setSelectionStart_ = "setSelectionStart:";
			public static readonly Selector setTabIndex_ = "setTabIndex:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector tabIndex = "tabIndex";
			public static readonly Selector type = "type";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLTitleElement : IEquatable<DOMHTMLTitleElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLTitleElement;
		public static implicit operator DOMHTMLElement( DOMHTMLTitleElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLTitleElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLTitleElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLTitleElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLTitleElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLTitleElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLTitleElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLTitleElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLTitleElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLTitleElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLTitleElement value1, DOMHTMLTitleElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLTitleElement value1, DOMHTMLTitleElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLTitleElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLTitleElement alloc() {
			return new DOMHTMLTitleElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setText_( Handle, CachedSelectors.setText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject text() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.text( Handle, CachedSelectors.text, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject text {
				get { return _handle.text(); }
			}
			private readonly DOMHTMLTitleElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLTitleElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr text( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setText_ = "setText:";
			public static readonly Selector text = "text";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMHTMLElement ) )]
	public struct DOMHTMLUListElement : IEquatable<DOMHTMLUListElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMHTMLUListElement;
		public static implicit operator DOMHTMLElement( DOMHTMLUListElement value ) {
			return new DOMHTMLElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMHTMLUListElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMHTMLUListElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMHTMLUListElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMHTMLUListElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMHTMLUListElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMHTMLUListElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMHTMLUListElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMHTMLUListElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMHTMLUListElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMHTMLUListElement value1, DOMHTMLUListElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMHTMLUListElement value1, DOMHTMLUListElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMHTMLUListElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMHTMLUListElement alloc() {
			return new DOMHTMLUListElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char compact() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compact( Handle, CachedSelectors.compact, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCompact_( char compact ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCompact_( Handle, CachedSelectors.setCompact_, out ___occuredException, sizeof( char ), compact );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public char compact {
				get { return _handle.compact(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			private readonly DOMHTMLUListElement _handle;
			public ObjectiveCPropertyImplementation( DOMHTMLUListElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compact( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCompact_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char compact );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector compact = "compact";
			public static readonly Selector setCompact_ = "setCompact:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMImplementation : IEquatable<DOMImplementation> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMImplementation;
		public static implicit operator DOMObject( DOMImplementation value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMImplementation value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMImplementation value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMImplementation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMImplementation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMImplementation?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMImplementation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMImplementation value1, DOMImplementation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMImplementation value1, DOMImplementation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMImplementation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMImplementation alloc() {
			return new DOMImplementation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMCSSStyleSheet createCSSStyleSheet__( string sheet, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedsheet = Runtime.CreateStringProxy( sheet );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.createCSSStyleSheet__( Handle, CachedSelectors.createCSSStyleSheet__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedsheet, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedsheet );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSStyleSheet( ___result );
		}
		unsafe public DOMCSSStyleSheet createCSSStyleSheet_media_( string sheet, string media ) {
			RuntimeObject ___occuredException;
			var ___wrappedsheet = Runtime.CreateStringProxy( sheet );
			var ___wrappedmedia = Runtime.CreateStringProxy( media );
			var ___result = NativeMethods.createCSSStyleSheet_media_( Handle, CachedSelectors.createCSSStyleSheet_media_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedsheet, ___wrappedmedia );
			Runtime.ReleaseNativeObject( ___wrappedsheet );
			Runtime.ReleaseNativeObject( ___wrappedmedia );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSStyleSheet( ___result );
		}
		unsafe public DOMDocument createDocument___( string document, string unnamedParameter, DOMDocumentType unnamedParameter2 ) {
			RuntimeObject ___occuredException;
			var ___wrappeddocument = Runtime.CreateStringProxy( document );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.createDocument___( Handle, CachedSelectors.createDocument___, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( DOMDocumentType ), ___wrappeddocument, ___wrappedunnamedParameter, unnamedParameter2 );
			Runtime.ReleaseNativeObject( ___wrappeddocument );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocument( ___result );
		}
		unsafe public DOMDocument createDocument_qualifiedName_doctype_( string document, string qualifiedName, DOMDocumentType doctype ) {
			RuntimeObject ___occuredException;
			var ___wrappeddocument = Runtime.CreateStringProxy( document );
			var ___wrappedqualifiedName = Runtime.CreateStringProxy( qualifiedName );
			var ___result = NativeMethods.createDocument_qualifiedName_doctype_( Handle, CachedSelectors.createDocument_qualifiedName_doctype_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( DOMDocumentType ), ___wrappeddocument, ___wrappedqualifiedName, doctype );
			Runtime.ReleaseNativeObject( ___wrappeddocument );
			Runtime.ReleaseNativeObject( ___wrappedqualifiedName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocument( ___result );
		}
		unsafe public DOMDocumentType createDocumentType___( string type, string unnamedParameter, string unnamedParameter2 ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___wrappedunnamedParameter2 = Runtime.CreateStringProxy( unnamedParameter2 );
			var ___result = NativeMethods.createDocumentType___( Handle, CachedSelectors.createDocumentType___, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedtype, ___wrappedunnamedParameter, ___wrappedunnamedParameter2 );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocumentType( ___result );
		}
		unsafe public DOMDocumentType createDocumentType_publicId_systemId_( string type, string publicId, string systemId ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___wrappedpublicId = Runtime.CreateStringProxy( publicId );
			var ___wrappedsystemId = Runtime.CreateStringProxy( systemId );
			var ___result = NativeMethods.createDocumentType_publicId_systemId_( Handle, CachedSelectors.createDocumentType_publicId_systemId_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedtype, ___wrappedpublicId, ___wrappedsystemId );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedpublicId );
			Runtime.ReleaseNativeObject( ___wrappedsystemId );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocumentType( ___result );
		}
		unsafe public DOMHTMLDocument createHTMLDocument_( string document ) {
			RuntimeObject ___occuredException;
			var ___wrappeddocument = Runtime.CreateStringProxy( document );
			var ___result = NativeMethods.createHTMLDocument_( Handle, CachedSelectors.createHTMLDocument_, out ___occuredException, sizeof( IntPtr ), ___wrappeddocument );
			Runtime.ReleaseNativeObject( ___wrappeddocument );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMHTMLDocument( ___result );
		}
		unsafe public bool hasFeature__( string feature, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedfeature = Runtime.CreateStringProxy( feature );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.hasFeature__( Handle, CachedSelectors.hasFeature__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedfeature, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedfeature );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool hasFeature_version_( string feature, string version ) {
			RuntimeObject ___occuredException;
			var ___wrappedfeature = Runtime.CreateStringProxy( feature );
			var ___wrappedversion = Runtime.CreateStringProxy( version );
			var ___result = NativeMethods.hasFeature_version_( Handle, CachedSelectors.hasFeature_version_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedfeature, ___wrappedversion );
			Runtime.ReleaseNativeObject( ___wrappedfeature );
			Runtime.ReleaseNativeObject( ___wrappedversion );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createCSSStyleSheet__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr sheet, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createCSSStyleSheet_media_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr sheet, IntPtr media );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createDocument___( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr document, IntPtr unnamedParameter, DOMDocumentType unnamedParameter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createDocument_qualifiedName_doctype_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr document, IntPtr qualifiedName, DOMDocumentType doctype );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createDocumentType___( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type, IntPtr unnamedParameter, IntPtr unnamedParameter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createDocumentType_publicId_systemId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type, IntPtr publicId, IntPtr systemId );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createHTMLDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasFeature__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr feature, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasFeature_version_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr feature, IntPtr version );
		}
		static internal class CachedSelectors {
			public static readonly Selector createCSSStyleSheet__ = "createCSSStyleSheet::";
			public static readonly Selector createCSSStyleSheet_media_ = "createCSSStyleSheet:media:";
			public static readonly Selector createDocument___ = "createDocument:::";
			public static readonly Selector createDocument_qualifiedName_doctype_ = "createDocument:qualifiedName:doctype:";
			public static readonly Selector createDocumentType___ = "createDocumentType:::";
			public static readonly Selector createDocumentType_publicId_systemId_ = "createDocumentType:publicId:systemId:";
			public static readonly Selector createHTMLDocument_ = "createHTMLDocument:";
			public static readonly Selector hasFeature__ = "hasFeature::";
			public static readonly Selector hasFeature_version_ = "hasFeature:version:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMUIEvent ) )]
	public struct DOMKeyboardEvent : IEquatable<DOMKeyboardEvent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMKeyboardEvent;
		public static implicit operator DOMUIEvent( DOMKeyboardEvent value ) {
			return new DOMUIEvent( value.Handle );
		}
		public static implicit operator DOMEvent( DOMKeyboardEvent value ) {
			return new DOMEvent( value.Handle );
		}
		public static implicit operator DOMObject( DOMKeyboardEvent value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMKeyboardEvent value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMKeyboardEvent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMKeyboardEvent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMKeyboardEvent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMKeyboardEvent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMKeyboardEvent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMKeyboardEvent value1, DOMKeyboardEvent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMKeyboardEvent value1, DOMKeyboardEvent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMKeyboardEvent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMKeyboardEvent alloc() {
			return new DOMKeyboardEvent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char altGraphKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.altGraphKey( Handle, CachedSelectors.altGraphKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char altKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.altKey( Handle, CachedSelectors.altKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char ctrlKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ctrlKey( Handle, CachedSelectors.ctrlKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool getModifierState_( string state ) {
			RuntimeObject ___occuredException;
			var ___wrappedstate = Runtime.CreateStringProxy( state );
			var ___result = NativeMethods.getModifierState_( Handle, CachedSelectors.getModifierState_, out ___occuredException, sizeof( IntPtr ), ___wrappedstate );
			Runtime.ReleaseNativeObject( ___wrappedstate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void initKeyboardEvent_canBubble_cancelable_view_keyIdentifier_keyLocation_ctrlKey_altKey_shiftKey_metaKey_( NObjective.RuntimeObject @event, char canBubble, char cancelable, NObjective.RuntimeObject view, NObjective.RuntimeObject keyIdentifier, uint keyLocation, char ctrlKey, char altKey, char shiftKey, char metaKey
		 ) {
			RuntimeObject ___occuredException;
			NativeMethods.initKeyboardEvent_canBubble_cancelable_view_keyIdentifier_keyLocation_ctrlKey_altKey_shiftKey_metaKey_( Handle, CachedSelectors.initKeyboardEvent_canBubble_cancelable_view_keyIdentifier_keyLocation_ctrlKey_altKey_shiftKey_metaKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), @event, canBubble, cancelable, view, keyIdentifier, keyLocation, 
			ctrlKey, altKey, shiftKey, metaKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void initKeyboardEvent_canBubble_cancelable_view_keyIdentifier_keyLocation_ctrlKey_altKey_shiftKey_metaKey_altGraphKey_( NObjective.RuntimeObject @event, char canBubble, char cancelable, NObjective.RuntimeObject view, NObjective.RuntimeObject keyIdentifier, uint keyLocation, char ctrlKey, char altKey, char shiftKey, char metaKey, 
		char altGraphKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.initKeyboardEvent_canBubble_cancelable_view_keyIdentifier_keyLocation_ctrlKey_altKey_shiftKey_metaKey_altGraphKey_( Handle, CachedSelectors.initKeyboardEvent_canBubble_cancelable_view_keyIdentifier_keyLocation_ctrlKey_altKey_shiftKey_metaKey_altGraphKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), @event, canBubble, cancelable, view, keyIdentifier, keyLocation, 
			ctrlKey, altKey, shiftKey, metaKey, altGraphKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject keyIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyIdentifier( Handle, CachedSelectors.keyIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint keyLocation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyLocation( Handle, CachedSelectors.keyLocation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public char metaKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.metaKey( Handle, CachedSelectors.metaKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char shiftKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shiftKey( Handle, CachedSelectors.shiftKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public char altKey {
				get { return _handle.altKey(); }
			}
			public int charCode {
				get { return new DOMUIEvent( _handle ).charCode(); }
			}
			public char ctrlKey {
				get { return _handle.ctrlKey(); }
			}
			public int keyCode {
				get { return new DOMUIEvent( _handle ).keyCode(); }
			}
			public NObjective.RuntimeObject keyIdentifier {
				get { return _handle.keyIdentifier(); }
			}
			public uint keyLocation {
				get { return _handle.keyLocation(); }
			}
			public char metaKey {
				get { return _handle.metaKey(); }
			}
			public char shiftKey {
				get { return _handle.shiftKey(); }
			}
			private readonly DOMKeyboardEvent _handle;
			public ObjectiveCPropertyImplementation( DOMKeyboardEvent value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char altGraphKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char altKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char ctrlKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool getModifierState_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr state );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initKeyboardEvent_canBubble_cancelable_view_keyIdentifier_keyLocation_ctrlKey_altKey_shiftKey_metaKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event, char canBubble, char cancelable, NObjective.RuntimeObject view, NObjective.RuntimeObject keyIdentifier, uint keyLocation, 
			char ctrlKey, char altKey, char shiftKey, char metaKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initKeyboardEvent_canBubble_cancelable_view_keyIdentifier_keyLocation_ctrlKey_altKey_shiftKey_metaKey_altGraphKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event, char canBubble, char cancelable, NObjective.RuntimeObject view, NObjective.RuntimeObject keyIdentifier, uint keyLocation, 
			char ctrlKey, char altKey, char shiftKey, char metaKey, char altGraphKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint keyLocation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char metaKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char shiftKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector altGraphKey = "altGraphKey";
			public static readonly Selector altKey = "altKey";
			public static readonly Selector ctrlKey = "ctrlKey";
			public static readonly Selector getModifierState_ = "getModifierState:";
			public static readonly Selector initKeyboardEvent_canBubble_cancelable_view_keyIdentifier_keyLocation_ctrlKey_altKey_shiftKey_metaKey_ = "initKeyboardEvent:canBubble:cancelable:view:keyIdentifier:keyLocation:ctrlKey:altKey:shiftKey:metaKey:";
			public static readonly Selector initKeyboardEvent_canBubble_cancelable_view_keyIdentifier_keyLocation_ctrlKey_altKey_shiftKey_metaKey_altGraphKey_ = "initKeyboardEvent:canBubble:cancelable:view:keyIdentifier:keyLocation:ctrlKey:altKey:shiftKey:metaKey:altGraphKey:";
			public static readonly Selector keyIdentifier = "keyIdentifier";
			public static readonly Selector keyLocation = "keyLocation";
			public static readonly Selector metaKey = "metaKey";
			public static readonly Selector shiftKey = "shiftKey";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMMediaList : IEquatable<DOMMediaList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMMediaList;
		public static implicit operator DOMObject( DOMMediaList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMMediaList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMMediaList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMMediaList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMMediaList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMMediaList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMMediaList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMMediaList value1, DOMMediaList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMMediaList value1, DOMMediaList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMMediaList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMMediaList alloc() {
			return new DOMMediaList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void appendMedium_( string medium ) {
			RuntimeObject ___occuredException;
			var ___wrappedmedium = Runtime.CreateStringProxy( medium );
			NativeMethods.appendMedium_( Handle, CachedSelectors.appendMedium_, out ___occuredException, sizeof( IntPtr ), ___wrappedmedium );
			Runtime.ReleaseNativeObject( ___wrappedmedium );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteMedium_( string medium ) {
			RuntimeObject ___occuredException;
			var ___wrappedmedium = Runtime.CreateStringProxy( medium );
			NativeMethods.deleteMedium_( Handle, CachedSelectors.deleteMedium_, out ___occuredException, sizeof( IntPtr ), ___wrappedmedium );
			Runtime.ReleaseNativeObject( ___wrappedmedium );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject mediaText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mediaText( Handle, CachedSelectors.mediaText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setMediaText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMediaText_( Handle, CachedSelectors.setMediaText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public uint length {
				get { return _handle.length(); }
			}
			public NObjective.RuntimeObject mediaText {
				get { return _handle.mediaText(); }
			}
			private readonly DOMMediaList _handle;
			public ObjectiveCPropertyImplementation( DOMMediaList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendMedium_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr medium );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteMedium_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr medium );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mediaText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMediaText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendMedium_ = "appendMedium:";
			public static readonly Selector deleteMedium_ = "deleteMedium:";
			public static readonly Selector item_ = "item:";
			public static readonly Selector length = "length";
			public static readonly Selector mediaText = "mediaText";
			public static readonly Selector setMediaText_ = "setMediaText:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMUIEvent ) )]
	public struct DOMMouseEvent : IEquatable<DOMMouseEvent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMMouseEvent;
		public static implicit operator DOMUIEvent( DOMMouseEvent value ) {
			return new DOMUIEvent( value.Handle );
		}
		public static implicit operator DOMEvent( DOMMouseEvent value ) {
			return new DOMEvent( value.Handle );
		}
		public static implicit operator DOMObject( DOMMouseEvent value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMMouseEvent value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMMouseEvent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMMouseEvent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMMouseEvent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMMouseEvent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMMouseEvent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMMouseEvent value1, DOMMouseEvent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMMouseEvent value1, DOMMouseEvent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMMouseEvent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMMouseEvent alloc() {
			return new DOMMouseEvent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char altKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.altKey( Handle, CachedSelectors.altKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public ushort button() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.button( Handle, CachedSelectors.button, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int clientX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clientX( Handle, CachedSelectors.clientX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int clientY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clientY( Handle, CachedSelectors.clientY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char ctrlKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ctrlKey( Handle, CachedSelectors.ctrlKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject fromElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fromElement( Handle, CachedSelectors.fromElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void initMouseEvent_______________( string @event, bool unnamedParameter, bool unnamedParameter2, DOMAbstractView unnamedParameter3, int unnamedParameter4, int unnamedParameter5, int unnamedParameter6, int unnamedParameter7, int unnamedParameter8, bool unnamedParameter9, 
		bool unnamedParameter10, bool unnamedParameter11, bool unnamedParameter12, ushort unnamedParameter13, NObjective.RuntimeObject unnamedParameter14 ) {
			RuntimeObject ___occuredException;
			var ___wrappedevent = Runtime.CreateStringProxy( @event );
			NativeMethods.initMouseEvent_______________( Handle, CachedSelectors.initMouseEvent_______________, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( bool ) + sizeof( DOMAbstractView ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( bool ) + sizeof( bool ) + sizeof( bool ) + sizeof( bool ) + sizeof( ushort ) + sizeof( NObjective.RuntimeObject ), ___wrappedevent, unnamedParameter, unnamedParameter2, unnamedParameter3, unnamedParameter4, unnamedParameter5, 
			unnamedParameter6, unnamedParameter7, unnamedParameter8, unnamedParameter9, unnamedParameter10, unnamedParameter11, unnamedParameter12, unnamedParameter13, unnamedParameter14 );
			Runtime.ReleaseNativeObject( ___wrappedevent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void initMouseEvent_canBubble_cancelable_view_detail_screenX_screenY_clientX_clientY_ctrlKey_altKey_shiftKey_metaKey_button_relatedTarget_( string @event, bool canBubble, bool cancelable, DOMAbstractView view, int detail, int screenX, int screenY, int clientX, int clientY, bool ctrlKey, 
		bool altKey, bool shiftKey, bool metaKey, ushort button, NObjective.RuntimeObject relatedTarget ) {
			RuntimeObject ___occuredException;
			var ___wrappedevent = Runtime.CreateStringProxy( @event );
			NativeMethods.initMouseEvent_canBubble_cancelable_view_detail_screenX_screenY_clientX_clientY_ctrlKey_altKey_shiftKey_metaKey_button_relatedTarget_( Handle, CachedSelectors.initMouseEvent_canBubble_cancelable_view_detail_screenX_screenY_clientX_clientY_ctrlKey_altKey_shiftKey_metaKey_button_relatedTarget_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( bool ) + sizeof( DOMAbstractView ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( bool ) + sizeof( bool ) + sizeof( bool ) + sizeof( bool ) + sizeof( ushort ) + sizeof( NObjective.RuntimeObject ), ___wrappedevent, canBubble, cancelable, view, detail, screenX, 
			screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget );
			Runtime.ReleaseNativeObject( ___wrappedevent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char metaKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.metaKey( Handle, CachedSelectors.metaKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int offsetX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offsetX( Handle, CachedSelectors.offsetX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int offsetY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offsetY( Handle, CachedSelectors.offsetY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject relatedTarget() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.relatedTarget( Handle, CachedSelectors.relatedTarget, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int screenX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.screenX( Handle, CachedSelectors.screenX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int screenY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.screenY( Handle, CachedSelectors.screenY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char shiftKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shiftKey( Handle, CachedSelectors.shiftKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject toElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.toElement( Handle, CachedSelectors.toElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public char altKey {
				get { return _handle.altKey(); }
			}
			public ushort button {
				get { return _handle.button(); }
			}
			public int clientX {
				get { return _handle.clientX(); }
			}
			public int clientY {
				get { return _handle.clientY(); }
			}
			public char ctrlKey {
				get { return _handle.ctrlKey(); }
			}
			public char metaKey {
				get { return _handle.metaKey(); }
			}
			public NObjective.RuntimeObject relatedTarget {
				get { return _handle.relatedTarget(); }
			}
			public int screenX {
				get { return _handle.screenX(); }
			}
			public int screenY {
				get { return _handle.screenY(); }
			}
			public char shiftKey {
				get { return _handle.shiftKey(); }
			}
			private readonly DOMMouseEvent _handle;
			public ObjectiveCPropertyImplementation( DOMMouseEvent value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char altKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort button( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int clientX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int clientY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char ctrlKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fromElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initMouseEvent_______________( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @event, bool unnamedParameter, bool unnamedParameter2, DOMAbstractView unnamedParameter3, int unnamedParameter4, int unnamedParameter5, 
			int unnamedParameter6, int unnamedParameter7, int unnamedParameter8, bool unnamedParameter9, bool unnamedParameter10, bool unnamedParameter11, bool unnamedParameter12, ushort unnamedParameter13, NObjective.RuntimeObject unnamedParameter14 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initMouseEvent_canBubble_cancelable_view_detail_screenX_screenY_clientX_clientY_ctrlKey_altKey_shiftKey_metaKey_button_relatedTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @event, bool canBubble, bool cancelable, DOMAbstractView view, int detail, int screenX, 
			int screenY, int clientX, int clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, ushort button, NObjective.RuntimeObject relatedTarget );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char metaKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int offsetX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int offsetY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr relatedTarget( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int screenX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int screenY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char shiftKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr toElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector altKey = "altKey";
			public static readonly Selector button = "button";
			public static readonly Selector clientX = "clientX";
			public static readonly Selector clientY = "clientY";
			public static readonly Selector ctrlKey = "ctrlKey";
			public static readonly Selector fromElement = "fromElement";
			public static readonly Selector initMouseEvent_______________ = "initMouseEvent:::::::::::::::";
			public static readonly Selector initMouseEvent_canBubble_cancelable_view_detail_screenX_screenY_clientX_clientY_ctrlKey_altKey_shiftKey_metaKey_button_relatedTarget_ = "initMouseEvent:canBubble:cancelable:view:detail:screenX:screenY:clientX:clientY:ctrlKey:altKey:shiftKey:metaKey:button:relatedTarget:";
			public static readonly Selector metaKey = "metaKey";
			public static readonly Selector offsetX = "offsetX";
			public static readonly Selector offsetY = "offsetY";
			public static readonly Selector relatedTarget = "relatedTarget";
			public static readonly Selector screenX = "screenX";
			public static readonly Selector screenY = "screenY";
			public static readonly Selector shiftKey = "shiftKey";
			public static readonly Selector toElement = "toElement";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMEvent ) )]
	public struct DOMMutationEvent : IEquatable<DOMMutationEvent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMMutationEvent;
		public static implicit operator DOMEvent( DOMMutationEvent value ) {
			return new DOMEvent( value.Handle );
		}
		public static implicit operator DOMObject( DOMMutationEvent value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMMutationEvent value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMMutationEvent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMMutationEvent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMMutationEvent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMMutationEvent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMMutationEvent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMMutationEvent value1, DOMMutationEvent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMMutationEvent value1, DOMMutationEvent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMMutationEvent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMMutationEvent alloc() {
			return new DOMMutationEvent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public ushort attrChange() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attrChange( Handle, CachedSelectors.attrChange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject attrName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attrName( Handle, CachedSelectors.attrName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void initMutationEvent________( string @event, bool unnamedParameter, bool unnamedParameter2, DOMNode unnamedParameter3, string unnamedParameter4, string unnamedParameter5, string unnamedParameter6, ushort unnamedParameter7 ) {
			RuntimeObject ___occuredException;
			var ___wrappedevent = Runtime.CreateStringProxy( @event );
			var ___wrappedunnamedParameter4 = Runtime.CreateStringProxy( unnamedParameter4 );
			var ___wrappedunnamedParameter5 = Runtime.CreateStringProxy( unnamedParameter5 );
			var ___wrappedunnamedParameter6 = Runtime.CreateStringProxy( unnamedParameter6 );
			NativeMethods.initMutationEvent________( Handle, CachedSelectors.initMutationEvent________, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( bool ) + sizeof( DOMNode ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( ushort ), ___wrappedevent, unnamedParameter, unnamedParameter2, unnamedParameter3, ___wrappedunnamedParameter4, ___wrappedunnamedParameter5, 
			___wrappedunnamedParameter6, unnamedParameter7 );
			Runtime.ReleaseNativeObject( ___wrappedevent );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter4 );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter5 );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter6 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void initMutationEvent_canBubble_cancelable_relatedNode_prevValue_newValue_attrName_attrChange_( string @event, bool canBubble, bool cancelable, DOMNode relatedNode, string prevValue, string newValue, string attrName, ushort attrChange ) {
			RuntimeObject ___occuredException;
			var ___wrappedevent = Runtime.CreateStringProxy( @event );
			var ___wrappedprevValue = Runtime.CreateStringProxy( prevValue );
			var ___wrappednewValue = Runtime.CreateStringProxy( newValue );
			var ___wrappedattrName = Runtime.CreateStringProxy( attrName );
			NativeMethods.initMutationEvent_canBubble_cancelable_relatedNode_prevValue_newValue_attrName_attrChange_( Handle, CachedSelectors.initMutationEvent_canBubble_cancelable_relatedNode_prevValue_newValue_attrName_attrChange_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( bool ) + sizeof( DOMNode ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( ushort ), ___wrappedevent, canBubble, cancelable, relatedNode, ___wrappedprevValue, ___wrappednewValue, 
			___wrappedattrName, attrChange );
			Runtime.ReleaseNativeObject( ___wrappedevent );
			Runtime.ReleaseNativeObject( ___wrappedprevValue );
			Runtime.ReleaseNativeObject( ___wrappednewValue );
			Runtime.ReleaseNativeObject( ___wrappedattrName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject newValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newValue( Handle, CachedSelectors.newValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject prevValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.prevValue( Handle, CachedSelectors.prevValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject relatedNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.relatedNode( Handle, CachedSelectors.relatedNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public ushort attrChange {
				get { return _handle.attrChange(); }
			}
			public NObjective.RuntimeObject attrName {
				get { return _handle.attrName(); }
			}
			public NObjective.RuntimeObject newValue {
				get { return _handle.newValue(); }
			}
			public NObjective.RuntimeObject prevValue {
				get { return _handle.prevValue(); }
			}
			public NObjective.RuntimeObject relatedNode {
				get { return _handle.relatedNode(); }
			}
			private readonly DOMMutationEvent _handle;
			public ObjectiveCPropertyImplementation( DOMMutationEvent value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort attrChange( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attrName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initMutationEvent________( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @event, bool unnamedParameter, bool unnamedParameter2, DOMNode unnamedParameter3, IntPtr unnamedParameter4, IntPtr unnamedParameter5, 
			IntPtr unnamedParameter6, ushort unnamedParameter7 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initMutationEvent_canBubble_cancelable_relatedNode_prevValue_newValue_attrName_attrChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @event, bool canBubble, bool cancelable, DOMNode relatedNode, IntPtr prevValue, IntPtr newValue, 
			IntPtr attrName, ushort attrChange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr prevValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr relatedNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attrChange = "attrChange";
			public static readonly Selector attrName = "attrName";
			public static readonly Selector initMutationEvent________ = "initMutationEvent::::::::";
			public static readonly Selector initMutationEvent_canBubble_cancelable_relatedNode_prevValue_newValue_attrName_attrChange_ = "initMutationEvent:canBubble:cancelable:relatedNode:prevValue:newValue:attrName:attrChange:";
			public static readonly Selector newValue = "newValue";
			public static readonly Selector prevValue = "prevValue";
			public static readonly Selector relatedNode = "relatedNode";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMNamedNodeMap : IEquatable<DOMNamedNodeMap> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMNamedNodeMap;
		public static implicit operator DOMObject( DOMNamedNodeMap value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMNamedNodeMap value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMNamedNodeMap value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMNamedNodeMap value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMNamedNodeMap value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMNamedNodeMap?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMNamedNodeMap value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMNamedNodeMap value1, DOMNamedNodeMap value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMNamedNodeMap value1, DOMNamedNodeMap value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMNamedNodeMap( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMNamedNodeMap alloc() {
			return new DOMNamedNodeMap( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMNode getNamedItem_( string item ) {
			RuntimeObject ___occuredException;
			var ___wrappeditem = Runtime.CreateStringProxy( item );
			var ___result = NativeMethods.getNamedItem_( Handle, CachedSelectors.getNamedItem_, out ___occuredException, sizeof( IntPtr ), ___wrappeditem );
			Runtime.ReleaseNativeObject( ___wrappeditem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode getNamedItemNS__( string ns, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.getNamedItemNS__( Handle, CachedSelectors.getNamedItemNS__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode getNamedItemNS_localName_( string ns, string localName ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedlocalName = Runtime.CreateStringProxy( localName );
			var ___result = NativeMethods.getNamedItemNS_localName_( Handle, CachedSelectors.getNamedItemNS_localName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedlocalName );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedlocalName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public DOMNode removeNamedItem_( string item ) {
			RuntimeObject ___occuredException;
			var ___wrappeditem = Runtime.CreateStringProxy( item );
			var ___result = NativeMethods.removeNamedItem_( Handle, CachedSelectors.removeNamedItem_, out ___occuredException, sizeof( IntPtr ), ___wrappeditem );
			Runtime.ReleaseNativeObject( ___wrappeditem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode removeNamedItemNS__( string ns, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.removeNamedItemNS__( Handle, CachedSelectors.removeNamedItemNS__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode removeNamedItemNS_localName_( string ns, string localName ) {
			RuntimeObject ___occuredException;
			var ___wrappedns = Runtime.CreateStringProxy( ns );
			var ___wrappedlocalName = Runtime.CreateStringProxy( localName );
			var ___result = NativeMethods.removeNamedItemNS_localName_( Handle, CachedSelectors.removeNamedItemNS_localName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedns, ___wrappedlocalName );
			Runtime.ReleaseNativeObject( ___wrappedns );
			Runtime.ReleaseNativeObject( ___wrappedlocalName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode setNamedItem_( DOMNode item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setNamedItem_( Handle, CachedSelectors.setNamedItem_, out ___occuredException, sizeof( DOMNode ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode setNamedItemNS_( DOMNode ns ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setNamedItemNS_( Handle, CachedSelectors.setNamedItemNS_, out ___occuredException, sizeof( DOMNode ), ns );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public uint length {
				get { return _handle.length(); }
			}
			private readonly DOMNamedNodeMap _handle;
			public ObjectiveCPropertyImplementation( DOMNamedNodeMap value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getNamedItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getNamedItemNS__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getNamedItemNS_localName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr localName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeNamedItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeNamedItemNS__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeNamedItemNS_localName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr ns, IntPtr localName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr setNamedItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr setNamedItemNS_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode ns );
		}
		static internal class CachedSelectors {
			public static readonly Selector getNamedItem_ = "getNamedItem:";
			public static readonly Selector getNamedItemNS__ = "getNamedItemNS::";
			public static readonly Selector getNamedItemNS_localName_ = "getNamedItemNS:localName:";
			public static readonly Selector item_ = "item:";
			public static readonly Selector length = "length";
			public static readonly Selector removeNamedItem_ = "removeNamedItem:";
			public static readonly Selector removeNamedItemNS__ = "removeNamedItemNS::";
			public static readonly Selector removeNamedItemNS_localName_ = "removeNamedItemNS:localName:";
			public static readonly Selector setNamedItem_ = "setNamedItem:";
			public static readonly Selector setNamedItemNS_ = "setNamedItemNS:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMNativeXPathNSResolver : IEquatable<DOMNativeXPathNSResolver> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMNativeXPathNSResolver;
		public static implicit operator DOMObject( DOMNativeXPathNSResolver value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMNativeXPathNSResolver value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMNativeXPathNSResolver value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMNativeXPathNSResolver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMNativeXPathNSResolver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMNativeXPathNSResolver?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMNativeXPathNSResolver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMNativeXPathNSResolver value1, DOMNativeXPathNSResolver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMNativeXPathNSResolver value1, DOMNativeXPathNSResolver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMNativeXPathNSResolver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMNativeXPathNSResolver alloc() {
			return new DOMNativeXPathNSResolver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject lookupNamespaceURI_( NObjective.RuntimeObject uri ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lookupNamespaceURI_( Handle, CachedSelectors.lookupNamespaceURI_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uri );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lookupNamespaceURI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uri );
		}
		static internal class CachedSelectors {
			public static readonly Selector lookupNamespaceURI_ = "lookupNamespaceURI:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMNode : IEquatable<DOMNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMNode;
		public static implicit operator DOMObject( DOMNode value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMNode value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMNode value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMNode value1, DOMNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMNode value1, DOMNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMNode alloc() {
			return new DOMNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addEventListener___( NObjective.RuntimeObject listener, NObjective.RuntimeObject unnamedParameter, char unnamedParameter2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.addEventListener___( Handle, CachedSelectors.addEventListener___, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), listener, unnamedParameter, unnamedParameter2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addEventListener_listener_useCapture_( NObjective.RuntimeObject listener, NObjective.RuntimeObject listener2, char useCapture ) {
			RuntimeObject ___occuredException;
			NativeMethods.addEventListener_listener_useCapture_( Handle, CachedSelectors.addEventListener_listener_useCapture_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), listener, listener2, useCapture );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public DOMNode appendChild_( DOMNode child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendChild_( Handle, CachedSelectors.appendChild_, out ___occuredException, sizeof( DOMNode ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public NObjective.RuntimeObject attributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributes( Handle, CachedSelectors.attributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseURI() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseURI( Handle, CachedSelectors.baseURI, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public _NSRect boundingBox() {
			_NSRect ___result;
			RuntimeObject ___occuredException;
			NativeMethods.boundingBox( out ___result, sizeof( _NSRect ), Handle, CachedSelectors.boundingBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject childNodes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childNodes( Handle, CachedSelectors.childNodes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMNode cloneNode_( bool node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cloneNode_( Handle, CachedSelectors.cloneNode_, out ___occuredException, sizeof( bool ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public char dispatchEvent_( NObjective.RuntimeObject @event ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dispatchEvent_( Handle, CachedSelectors.dispatchEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject firstChild() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstChild( Handle, CachedSelectors.firstChild, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool hasAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasAttributes( Handle, CachedSelectors.hasAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool hasChildNodes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasChildNodes( Handle, CachedSelectors.hasChildNodes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public DOMNode insertBefore__( DOMNode before, DOMNode unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertBefore__( Handle, CachedSelectors.insertBefore__, out ___occuredException, sizeof( DOMNode ) + sizeof( DOMNode ), before, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode insertBefore_refChild_( DOMNode before, DOMNode refChild ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertBefore_refChild_( Handle, CachedSelectors.insertBefore_refChild_, out ___occuredException, sizeof( DOMNode ) + sizeof( DOMNode ), before, refChild );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public bool isContentEditable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isContentEditable( Handle, CachedSelectors.isContentEditable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isDefaultNamespace_( NObjective.RuntimeObject @namespace ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDefaultNamespace_( Handle, CachedSelectors.isDefaultNamespace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @namespace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEqualNode_( DOMNode node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualNode_( Handle, CachedSelectors.isEqualNode_, out ___occuredException, sizeof( DOMNode ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSameNode_( DOMNode node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSameNode_( Handle, CachedSelectors.isSameNode_, out ___occuredException, sizeof( DOMNode ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSupported__( string supported, string unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___wrappedsupported = Runtime.CreateStringProxy( supported );
			var ___wrappedunnamedParameter = Runtime.CreateStringProxy( unnamedParameter );
			var ___result = NativeMethods.isSupported__( Handle, CachedSelectors.isSupported__, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedsupported, ___wrappedunnamedParameter );
			Runtime.ReleaseNativeObject( ___wrappedsupported );
			Runtime.ReleaseNativeObject( ___wrappedunnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSupported_version_( string supported, string version ) {
			RuntimeObject ___occuredException;
			var ___wrappedsupported = Runtime.CreateStringProxy( supported );
			var ___wrappedversion = Runtime.CreateStringProxy( version );
			var ___result = NativeMethods.isSupported_version_( Handle, CachedSelectors.isSupported_version_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedsupported, ___wrappedversion );
			Runtime.ReleaseNativeObject( ___wrappedsupported );
			Runtime.ReleaseNativeObject( ___wrappedversion );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject lastChild() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastChild( Handle, CachedSelectors.lastChild, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSArray lineBoxRects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lineBoxRects( Handle, CachedSelectors.lineBoxRects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject localName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localName( Handle, CachedSelectors.localName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lookupNamespaceURI_( NObjective.RuntimeObject uri ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lookupNamespaceURI_( Handle, CachedSelectors.lookupNamespaceURI_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uri );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lookupPrefix_( NObjective.RuntimeObject prefix ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lookupPrefix_( Handle, CachedSelectors.lookupPrefix_, out ___occuredException, sizeof( NObjective.RuntimeObject ), prefix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject namespaceURI() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.namespaceURI( Handle, CachedSelectors.namespaceURI, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextSibling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextSibling( Handle, CachedSelectors.nextSibling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nodeName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nodeName( Handle, CachedSelectors.nodeName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ushort nodeType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nodeType( Handle, CachedSelectors.nodeType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nodeValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nodeValue( Handle, CachedSelectors.nodeValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void normalize() {
			RuntimeObject ___occuredException;
			NativeMethods.normalize( Handle, CachedSelectors.normalize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject ownerDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ownerDocument( Handle, CachedSelectors.ownerDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentElement( Handle, CachedSelectors.parentElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentNode( Handle, CachedSelectors.parentNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject prefix() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.prefix( Handle, CachedSelectors.prefix, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject previousSibling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousSibling( Handle, CachedSelectors.previousSibling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMNode removeChild_( DOMNode child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeChild_( Handle, CachedSelectors.removeChild_, out ___occuredException, sizeof( DOMNode ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public void removeEventListener___( NObjective.RuntimeObject listener, NObjective.RuntimeObject unnamedParameter, char unnamedParameter2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeEventListener___( Handle, CachedSelectors.removeEventListener___, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), listener, unnamedParameter, unnamedParameter2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeEventListener_listener_useCapture_( NObjective.RuntimeObject listener, NObjective.RuntimeObject listener2, char useCapture ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeEventListener_listener_useCapture_( Handle, CachedSelectors.removeEventListener_listener_useCapture_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), listener, listener2, useCapture );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public DOMNode replaceChild__( DOMNode child, DOMNode unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replaceChild__( Handle, CachedSelectors.replaceChild__, out ___occuredException, sizeof( DOMNode ) + sizeof( DOMNode ), child, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode replaceChild_oldChild_( DOMNode child, DOMNode oldChild ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replaceChild_oldChild_( Handle, CachedSelectors.replaceChild_oldChild_, out ___occuredException, sizeof( DOMNode ) + sizeof( DOMNode ), child, oldChild );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public void setNodeValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNodeValue_( Handle, CachedSelectors.setNodeValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrefix_( NObjective.RuntimeObject prefix ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrefix_( Handle, CachedSelectors.setPrefix_, out ___occuredException, sizeof( NObjective.RuntimeObject ), prefix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextContent_( NObjective.RuntimeObject content ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextContent_( Handle, CachedSelectors.setTextContent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), content );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject textContent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textContent( Handle, CachedSelectors.textContent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject attributes {
				get { return _handle.attributes(); }
			}
			public NObjective.RuntimeObject childNodes {
				get { return _handle.childNodes(); }
			}
			public NObjective.RuntimeObject firstChild {
				get { return _handle.firstChild(); }
			}
			public NObjective.RuntimeObject lastChild {
				get { return _handle.lastChild(); }
			}
			public NObjective.RuntimeObject localName {
				get { return _handle.localName(); }
			}
			public NObjective.RuntimeObject namespaceURI {
				get { return _handle.namespaceURI(); }
			}
			public NObjective.RuntimeObject nextSibling {
				get { return _handle.nextSibling(); }
			}
			public NObjective.RuntimeObject nodeName {
				get { return _handle.nodeName(); }
			}
			public ushort nodeType {
				get { return _handle.nodeType(); }
			}
			public NObjective.RuntimeObject nodeValue {
				get { return _handle.nodeValue(); }
			}
			public NObjective.RuntimeObject ownerDocument {
				get { return _handle.ownerDocument(); }
			}
			public NObjective.RuntimeObject parentNode {
				get { return _handle.parentNode(); }
			}
			public NObjective.RuntimeObject prefix {
				get { return _handle.prefix(); }
			}
			public NObjective.RuntimeObject previousSibling {
				get { return _handle.previousSibling(); }
			}
			public NObjective.RuntimeObject textContent {
				get { return _handle.textContent(); }
			}
			private readonly DOMNode _handle;
			public ObjectiveCPropertyImplementation( DOMNode value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addEventListener___( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject listener, NObjective.RuntimeObject unnamedParameter, char unnamedParameter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addEventListener_listener_useCapture_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject listener, NObjective.RuntimeObject listener2, char useCapture );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr appendChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseURI( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void boundingBox( out _NSRect ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr childNodes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cloneNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char dispatchEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstChild( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasChildNodes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertBefore__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode before, DOMNode unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertBefore_refChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode before, DOMNode refChild );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isContentEditable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDefaultNamespace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @namespace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSameNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSupported__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr supported, IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSupported_version_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr supported, IntPtr version );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastChild( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lineBoxRects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lookupNamespaceURI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uri );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lookupPrefix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject prefix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr namespaceURI( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextSibling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nodeName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort nodeType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nodeValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void normalize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ownerDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr prefix( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr previousSibling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeEventListener___( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject listener, NObjective.RuntimeObject unnamedParameter, char unnamedParameter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeEventListener_listener_useCapture_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject listener, NObjective.RuntimeObject listener2, char useCapture );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replaceChild__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode child, DOMNode unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replaceChild_oldChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode child, DOMNode oldChild );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNodeValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPrefix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject prefix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextContent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject content );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textContent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addEventListener___ = "addEventListener:::";
			public static readonly Selector addEventListener_listener_useCapture_ = "addEventListener:listener:useCapture:";
			public static readonly Selector appendChild_ = "appendChild:";
			public static readonly Selector attributes = "attributes";
			public static readonly Selector baseURI = "baseURI";
			public static readonly Selector boundingBox = "boundingBox";
			public static readonly Selector childNodes = "childNodes";
			public static readonly Selector cloneNode_ = "cloneNode:";
			public static readonly Selector dispatchEvent_ = "dispatchEvent:";
			public static readonly Selector firstChild = "firstChild";
			public static readonly Selector hasAttributes = "hasAttributes";
			public static readonly Selector hasChildNodes = "hasChildNodes";
			public static readonly Selector insertBefore__ = "insertBefore::";
			public static readonly Selector insertBefore_refChild_ = "insertBefore:refChild:";
			public static readonly Selector isContentEditable = "isContentEditable";
			public static readonly Selector isDefaultNamespace_ = "isDefaultNamespace:";
			public static readonly Selector isEqualNode_ = "isEqualNode:";
			public static readonly Selector isSameNode_ = "isSameNode:";
			public static readonly Selector isSupported__ = "isSupported::";
			public static readonly Selector isSupported_version_ = "isSupported:version:";
			public static readonly Selector lastChild = "lastChild";
			public static readonly Selector lineBoxRects = "lineBoxRects";
			public static readonly Selector localName = "localName";
			public static readonly Selector lookupNamespaceURI_ = "lookupNamespaceURI:";
			public static readonly Selector lookupPrefix_ = "lookupPrefix:";
			public static readonly Selector namespaceURI = "namespaceURI";
			public static readonly Selector nextSibling = "nextSibling";
			public static readonly Selector nodeName = "nodeName";
			public static readonly Selector nodeType = "nodeType";
			public static readonly Selector nodeValue = "nodeValue";
			public static readonly Selector normalize = "normalize";
			public static readonly Selector ownerDocument = "ownerDocument";
			public static readonly Selector parentElement = "parentElement";
			public static readonly Selector parentNode = "parentNode";
			public static readonly Selector prefix = "prefix";
			public static readonly Selector previousSibling = "previousSibling";
			public static readonly Selector removeChild_ = "removeChild:";
			public static readonly Selector removeEventListener___ = "removeEventListener:::";
			public static readonly Selector removeEventListener_listener_useCapture_ = "removeEventListener:listener:useCapture:";
			public static readonly Selector replaceChild__ = "replaceChild::";
			public static readonly Selector replaceChild_oldChild_ = "replaceChild:oldChild:";
			public static readonly Selector setNodeValue_ = "setNodeValue:";
			public static readonly Selector setPrefix_ = "setPrefix:";
			public static readonly Selector setTextContent_ = "setTextContent:";
			public static readonly Selector textContent = "textContent";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMNodeFilter : IEquatable<DOMNodeFilter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMNodeFilter;
		public static implicit operator DOMObject( DOMNodeFilter value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMNodeFilter value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMNodeFilter value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMNodeFilter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMNodeFilter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMNodeFilter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMNodeFilter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMNodeFilter value1, DOMNodeFilter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMNodeFilter value1, DOMNodeFilter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMNodeFilter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMNodeFilter alloc() {
			return new DOMNodeFilter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public short acceptNode_( DOMNode node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.acceptNode_( Handle, CachedSelectors.acceptNode_, out ___occuredException, sizeof( DOMNode ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short acceptNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode node );
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptNode_ = "acceptNode:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMNodeIterator : IEquatable<DOMNodeIterator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMNodeIterator;
		public static implicit operator DOMObject( DOMNodeIterator value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMNodeIterator value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMNodeIterator value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMNodeIterator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMNodeIterator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMNodeIterator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMNodeIterator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMNodeIterator value1, DOMNodeIterator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMNodeIterator value1, DOMNodeIterator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMNodeIterator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMNodeIterator alloc() {
			return new DOMNodeIterator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void detach() {
			RuntimeObject ___occuredException;
			NativeMethods.detach( Handle, CachedSelectors.detach, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char expandEntityReferences() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expandEntityReferences( Handle, CachedSelectors.expandEntityReferences, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject filter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filter( Handle, CachedSelectors.filter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMNode nextNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextNode( Handle, CachedSelectors.nextNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public char pointerBeforeReferenceNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pointerBeforeReferenceNode( Handle, CachedSelectors.pointerBeforeReferenceNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public DOMNode previousNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousNode( Handle, CachedSelectors.previousNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public NObjective.RuntimeObject referenceNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.referenceNode( Handle, CachedSelectors.referenceNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject root() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.root( Handle, CachedSelectors.root, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint whatToShow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.whatToShow( Handle, CachedSelectors.whatToShow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public char expandEntityReferences {
				get { return _handle.expandEntityReferences(); }
			}
			public NObjective.RuntimeObject filter {
				get { return _handle.filter(); }
			}
			public NObjective.RuntimeObject root {
				get { return _handle.root(); }
			}
			public uint whatToShow {
				get { return _handle.whatToShow(); }
			}
			private readonly DOMNodeIterator _handle;
			public ObjectiveCPropertyImplementation( DOMNodeIterator value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detach( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char expandEntityReferences( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr filter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char pointerBeforeReferenceNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr previousNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr referenceNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr root( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint whatToShow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector detach = "detach";
			public static readonly Selector expandEntityReferences = "expandEntityReferences";
			public static readonly Selector filter = "filter";
			public static readonly Selector nextNode = "nextNode";
			public static readonly Selector pointerBeforeReferenceNode = "pointerBeforeReferenceNode";
			public static readonly Selector previousNode = "previousNode";
			public static readonly Selector referenceNode = "referenceNode";
			public static readonly Selector root = "root";
			public static readonly Selector whatToShow = "whatToShow";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMNodeList : IEquatable<DOMNodeList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMNodeList;
		public static implicit operator DOMObject( DOMNodeList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMNodeList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMNodeList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMNodeList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMNodeList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMNodeList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMNodeList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMNodeList value1, DOMNodeList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMNodeList value1, DOMNodeList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMNodeList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMNodeList alloc() {
			return new DOMNodeList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMNode item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public uint length {
				get { return _handle.length(); }
			}
			private readonly DOMNodeList _handle;
			public ObjectiveCPropertyImplementation( DOMNodeList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector item_ = "item:";
			public static readonly Selector length = "length";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMNode ) )]
	public struct DOMNotation : IEquatable<DOMNotation> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMNotation;
		public static implicit operator DOMNode( DOMNotation value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMNotation value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMNotation value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMNotation value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMNotation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMNotation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMNotation?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMNotation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMNotation value1, DOMNotation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMNotation value1, DOMNotation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMNotation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMNotation alloc() {
			return new DOMNotation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject publicId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicId( Handle, CachedSelectors.publicId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject systemId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemId( Handle, CachedSelectors.systemId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject publicId {
				get { return _handle.publicId(); }
			}
			public NObjective.RuntimeObject systemId {
				get { return _handle.systemId(); }
			}
			private readonly DOMNotation _handle;
			public ObjectiveCPropertyImplementation( DOMNotation value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr publicId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector publicId = "publicId";
			public static readonly Selector systemId = "systemId";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( WebScriptObject ) )]
	public struct DOMObject : IEquatable<DOMObject> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMObject;
		public static implicit operator WebScriptObject( DOMObject value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMObject value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMObject?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMObject value1, DOMObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMObject value1, DOMObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMObject alloc() {
			return new DOMObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject sheet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sheet( Handle, CachedSelectors.sheet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject sheet {
				get { return _handle.sheet(); }
			}
			private readonly DOMObject _handle;
			public ObjectiveCPropertyImplementation( DOMObject value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sheet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector sheet = "sheet";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMEvent ) )]
	public struct DOMOverflowEvent : IEquatable<DOMOverflowEvent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMOverflowEvent;
		public static implicit operator DOMEvent( DOMOverflowEvent value ) {
			return new DOMEvent( value.Handle );
		}
		public static implicit operator DOMObject( DOMOverflowEvent value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMOverflowEvent value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMOverflowEvent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMOverflowEvent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMOverflowEvent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMOverflowEvent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMOverflowEvent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMOverflowEvent value1, DOMOverflowEvent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMOverflowEvent value1, DOMOverflowEvent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMOverflowEvent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMOverflowEvent alloc() {
			return new DOMOverflowEvent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char horizontalOverflow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.horizontalOverflow( Handle, CachedSelectors.horizontalOverflow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void initOverflowEvent_horizontalOverflow_verticalOverflow_( ushort @event, bool horizontalOverflow, bool verticalOverflow ) {
			RuntimeObject ___occuredException;
			NativeMethods.initOverflowEvent_horizontalOverflow_verticalOverflow_( Handle, CachedSelectors.initOverflowEvent_horizontalOverflow_verticalOverflow_, out ___occuredException, sizeof( ushort ) + sizeof( bool ) + sizeof( bool ), @event, horizontalOverflow, verticalOverflow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public ushort orient() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orient( Handle, CachedSelectors.orient, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char verticalOverflow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.verticalOverflow( Handle, CachedSelectors.verticalOverflow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public char horizontalOverflow {
				get { return _handle.horizontalOverflow(); }
			}
			public ushort orient {
				get { return _handle.orient(); }
			}
			public char verticalOverflow {
				get { return _handle.verticalOverflow(); }
			}
			private readonly DOMOverflowEvent _handle;
			public ObjectiveCPropertyImplementation( DOMOverflowEvent value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char horizontalOverflow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initOverflowEvent_horizontalOverflow_verticalOverflow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort @event, bool horizontalOverflow, bool verticalOverflow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort orient( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char verticalOverflow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector horizontalOverflow = "horizontalOverflow";
			public static readonly Selector initOverflowEvent_horizontalOverflow_verticalOverflow_ = "initOverflowEvent:horizontalOverflow:verticalOverflow:";
			public static readonly Selector orient = "orient";
			public static readonly Selector verticalOverflow = "verticalOverflow";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMNode ) )]
	public struct DOMProcessingInstruction : IEquatable<DOMProcessingInstruction> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMProcessingInstruction;
		public static implicit operator DOMNode( DOMProcessingInstruction value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMProcessingInstruction value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMProcessingInstruction value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMProcessingInstruction value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMProcessingInstruction value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMProcessingInstruction value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMProcessingInstruction?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMProcessingInstruction value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMProcessingInstruction value1, DOMProcessingInstruction value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMProcessingInstruction value1, DOMProcessingInstruction value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMProcessingInstruction( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMProcessingInstruction alloc() {
			return new DOMProcessingInstruction( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.setData_( Handle, CachedSelectors.setData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject data {
				get { return _handle.data(); }
			}
			public NObjective.RuntimeObject target {
				get { return _handle.target(); }
			}
			private readonly DOMProcessingInstruction _handle;
			public ObjectiveCPropertyImplementation( DOMProcessingInstruction value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector data = "data";
			public static readonly Selector setData_ = "setData:";
			public static readonly Selector target = "target";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMRange : IEquatable<DOMRange> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMRange;
		public static implicit operator DOMObject( DOMRange value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMRange value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMRange value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMRange value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMRange value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMRange?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMRange value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMRange value1, DOMRange value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMRange value1, DOMRange value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMRange( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMRange alloc() {
			return new DOMRange( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMDocumentFragment cloneContents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cloneContents( Handle, CachedSelectors.cloneContents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocumentFragment( ___result );
		}
		unsafe public DOMRange cloneRange() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cloneRange( Handle, CachedSelectors.cloneRange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMRange( ___result );
		}
		unsafe public void collapse_( bool collapse ) {
			RuntimeObject ___occuredException;
			NativeMethods.collapse_( Handle, CachedSelectors.collapse_, out ___occuredException, sizeof( bool ), collapse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char collapsed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.collapsed( Handle, CachedSelectors.collapsed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject commonAncestorContainer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.commonAncestorContainer( Handle, CachedSelectors.commonAncestorContainer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public short compareBoundaryPoints__( ushort points, DOMRange unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareBoundaryPoints__( Handle, CachedSelectors.compareBoundaryPoints__, out ___occuredException, sizeof( ushort ) + sizeof( DOMRange ), points, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public short compareBoundaryPoints_sourceRange_( ushort points, DOMRange sourceRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareBoundaryPoints_sourceRange_( Handle, CachedSelectors.compareBoundaryPoints_sourceRange_, out ___occuredException, sizeof( ushort ) + sizeof( DOMRange ), points, sourceRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public short compareNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNode_( Handle, CachedSelectors.compareNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public short comparePoint_offset_( NObjective.RuntimeObject point, int offset ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparePoint_offset_( Handle, CachedSelectors.comparePoint_offset_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), point, offset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject createContextualFragment_( NObjective.RuntimeObject fragment ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createContextualFragment_( Handle, CachedSelectors.createContextualFragment_, out ___occuredException, sizeof( NObjective.RuntimeObject ), fragment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deleteContents() {
			RuntimeObject ___occuredException;
			NativeMethods.deleteContents( Handle, CachedSelectors.deleteContents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void detach() {
			RuntimeObject ___occuredException;
			NativeMethods.detach( Handle, CachedSelectors.detach, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject endContainer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.endContainer( Handle, CachedSelectors.endContainer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int endOffset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.endOffset( Handle, CachedSelectors.endOffset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public DOMDocumentFragment extractContents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.extractContents( Handle, CachedSelectors.extractContents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocumentFragment( ___result );
		}
		unsafe public void insertNode_( DOMNode node ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertNode_( Handle, CachedSelectors.insertNode_, out ___occuredException, sizeof( DOMNode ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char intersectsNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.intersectsNode_( Handle, CachedSelectors.intersectsNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isPointInRange_offset_( NObjective.RuntimeObject range, int offset ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPointInRange_offset_( Handle, CachedSelectors.isPointInRange_offset_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), range, offset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject lineBoxRects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lineBoxRects( Handle, CachedSelectors.lineBoxRects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void selectNode_( DOMNode node ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectNode_( Handle, CachedSelectors.selectNode_, out ___occuredException, sizeof( DOMNode ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectNodeContents_( DOMNode contents ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectNodeContents_( Handle, CachedSelectors.selectNodeContents_, out ___occuredException, sizeof( DOMNode ), contents );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEnd__( DOMNode end, int unnamedParameter ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEnd__( Handle, CachedSelectors.setEnd__, out ___occuredException, sizeof( DOMNode ) + sizeof( int ), end, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEnd_offset_( DOMNode end, int offset ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEnd_offset_( Handle, CachedSelectors.setEnd_offset_, out ___occuredException, sizeof( DOMNode ) + sizeof( int ), end, offset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEndAfter_( DOMNode after ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEndAfter_( Handle, CachedSelectors.setEndAfter_, out ___occuredException, sizeof( DOMNode ), after );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEndBefore_( DOMNode before ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEndBefore_( Handle, CachedSelectors.setEndBefore_, out ___occuredException, sizeof( DOMNode ), before );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStart__( DOMNode start, int unnamedParameter ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStart__( Handle, CachedSelectors.setStart__, out ___occuredException, sizeof( DOMNode ) + sizeof( int ), start, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStart_offset_( DOMNode start, int offset ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStart_offset_( Handle, CachedSelectors.setStart_offset_, out ___occuredException, sizeof( DOMNode ) + sizeof( int ), start, offset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStartAfter_( DOMNode after ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStartAfter_( Handle, CachedSelectors.setStartAfter_, out ___occuredException, sizeof( DOMNode ), after );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStartBefore_( DOMNode before ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStartBefore_( Handle, CachedSelectors.setStartBefore_, out ___occuredException, sizeof( DOMNode ), before );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject startContainer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startContainer( Handle, CachedSelectors.startContainer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int startOffset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startOffset( Handle, CachedSelectors.startOffset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void surroundContents_( DOMNode contents ) {
			RuntimeObject ___occuredException;
			NativeMethods.surroundContents_( Handle, CachedSelectors.surroundContents_, out ___occuredException, sizeof( DOMNode ), contents );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject text() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.text( Handle, CachedSelectors.text, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string toString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.toString( Handle, CachedSelectors.toString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public char collapsed {
				get { return _handle.collapsed(); }
			}
			public NObjective.RuntimeObject commonAncestorContainer {
				get { return _handle.commonAncestorContainer(); }
			}
			public NObjective.RuntimeObject endContainer {
				get { return _handle.endContainer(); }
			}
			public int endOffset {
				get { return _handle.endOffset(); }
			}
			public NObjective.RuntimeObject startContainer {
				get { return _handle.startContainer(); }
			}
			public int startOffset {
				get { return _handle.startOffset(); }
			}
			public NObjective.RuntimeObject text {
				get { return _handle.text(); }
			}
			private readonly DOMRange _handle;
			public ObjectiveCPropertyImplementation( DOMRange value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cloneContents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cloneRange( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void collapse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool collapse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char collapsed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commonAncestorContainer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short compareBoundaryPoints__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort points, DOMRange unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short compareBoundaryPoints_sourceRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort points, DOMRange sourceRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short compareNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short comparePoint_offset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject point, int offset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createContextualFragment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject fragment );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteContents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detach( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr endContainer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int endOffset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr extractContents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char intersectsNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPointInRange_offset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range, int offset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lineBoxRects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectNodeContents_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode contents );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEnd__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode end, int unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEnd_offset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode end, int offset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEndAfter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode after );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEndBefore_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode before );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStart__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode start, int unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStart_offset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode start, int offset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStartAfter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode after );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStartBefore_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode before );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr startContainer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int startOffset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void surroundContents_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode contents );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr text( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr toString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cloneContents = "cloneContents";
			public static readonly Selector cloneRange = "cloneRange";
			public static readonly Selector collapse_ = "collapse:";
			public static readonly Selector collapsed = "collapsed";
			public static readonly Selector commonAncestorContainer = "commonAncestorContainer";
			public static readonly Selector compareBoundaryPoints__ = "compareBoundaryPoints::";
			public static readonly Selector compareBoundaryPoints_sourceRange_ = "compareBoundaryPoints:sourceRange:";
			public static readonly Selector compareNode_ = "compareNode:";
			public static readonly Selector comparePoint_offset_ = "comparePoint:offset:";
			public static readonly Selector createContextualFragment_ = "createContextualFragment:";
			public static readonly Selector deleteContents = "deleteContents";
			public static readonly Selector detach = "detach";
			public static readonly Selector endContainer = "endContainer";
			public static readonly Selector endOffset = "endOffset";
			public static readonly Selector extractContents = "extractContents";
			public static readonly Selector insertNode_ = "insertNode:";
			public static readonly Selector intersectsNode_ = "intersectsNode:";
			public static readonly Selector isPointInRange_offset_ = "isPointInRange:offset:";
			public static readonly Selector lineBoxRects = "lineBoxRects";
			public static readonly Selector selectNode_ = "selectNode:";
			public static readonly Selector selectNodeContents_ = "selectNodeContents:";
			public static readonly Selector setEnd__ = "setEnd::";
			public static readonly Selector setEnd_offset_ = "setEnd:offset:";
			public static readonly Selector setEndAfter_ = "setEndAfter:";
			public static readonly Selector setEndBefore_ = "setEndBefore:";
			public static readonly Selector setStart__ = "setStart::";
			public static readonly Selector setStart_offset_ = "setStart:offset:";
			public static readonly Selector setStartAfter_ = "setStartAfter:";
			public static readonly Selector setStartBefore_ = "setStartBefore:";
			public static readonly Selector startContainer = "startContainer";
			public static readonly Selector startOffset = "startOffset";
			public static readonly Selector surroundContents_ = "surroundContents:";
			public static readonly Selector text = "text";
			public static readonly Selector toString = "toString";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMRect : IEquatable<DOMRect> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMRect;
		public static implicit operator DOMObject( DOMRect value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMRect value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMRect value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMRect value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMRect value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMRect?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMRect value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMRect value1, DOMRect value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMRect value1, DOMRect value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMRect( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMRect alloc() {
			return new DOMRect( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject bottom() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bottom( Handle, CachedSelectors.bottom, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject left() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.left( Handle, CachedSelectors.left, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject right() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.right( Handle, CachedSelectors.right, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject top() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.top( Handle, CachedSelectors.top, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject bottom {
				get { return _handle.bottom(); }
			}
			public NObjective.RuntimeObject left {
				get { return _handle.left(); }
			}
			public NObjective.RuntimeObject right {
				get { return _handle.right(); }
			}
			public NObjective.RuntimeObject top {
				get { return _handle.top(); }
			}
			private readonly DOMRect _handle;
			public ObjectiveCPropertyImplementation( DOMRect value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bottom( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr left( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr right( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr top( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector bottom = "bottom";
			public static readonly Selector left = "left";
			public static readonly Selector right = "right";
			public static readonly Selector top = "top";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMRGBColor : IEquatable<DOMRGBColor> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMRGBColor;
		public static implicit operator DOMObject( DOMRGBColor value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMRGBColor value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMRGBColor value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMRGBColor value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMRGBColor value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMRGBColor?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMRGBColor value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMRGBColor value1, DOMRGBColor value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMRGBColor value1, DOMRGBColor value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMRGBColor( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMRGBColor alloc() {
			return new DOMRGBColor( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject alpha() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alpha( Handle, CachedSelectors.alpha, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject blue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.blue( Handle, CachedSelectors.blue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject color() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.color( Handle, CachedSelectors.color, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject green() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.green( Handle, CachedSelectors.green, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject red() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.red( Handle, CachedSelectors.red, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject alpha {
				get { return _handle.alpha(); }
			}
			public NObjective.RuntimeObject blue {
				get { return _handle.blue(); }
			}
			public NObjective.RuntimeObject color {
				get { return _handle.color(); }
			}
			public NObjective.RuntimeObject green {
				get { return _handle.green(); }
			}
			public NObjective.RuntimeObject red {
				get { return _handle.red(); }
			}
			private readonly DOMRGBColor _handle;
			public ObjectiveCPropertyImplementation( DOMRGBColor value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alpha( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr blue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr color( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr green( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr red( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector alpha = "alpha";
			public static readonly Selector blue = "blue";
			public static readonly Selector color = "color";
			public static readonly Selector green = "green";
			public static readonly Selector red = "red";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMStyleSheet : IEquatable<DOMStyleSheet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMStyleSheet;
		public static implicit operator DOMObject( DOMStyleSheet value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMStyleSheet value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMStyleSheet value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMStyleSheet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMStyleSheet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMStyleSheet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMStyleSheet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMStyleSheet value1, DOMStyleSheet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMStyleSheet value1, DOMStyleSheet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMStyleSheet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMStyleSheet alloc() {
			return new DOMStyleSheet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char disabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabled( Handle, CachedSelectors.disabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject media() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.media( Handle, CachedSelectors.media, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject ownerNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ownerNode( Handle, CachedSelectors.ownerNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentStyleSheet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentStyleSheet( Handle, CachedSelectors.parentStyleSheet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabled_( Handle, CachedSelectors.setDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public char disabled {
				get { return _handle.disabled(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject media {
				get { return _handle.media(); }
			}
			public NObjective.RuntimeObject ownerNode {
				get { return _handle.ownerNode(); }
			}
			public NObjective.RuntimeObject parentStyleSheet {
				get { return _handle.parentStyleSheet(); }
			}
			public NObjective.RuntimeObject title {
				get { return _handle.title(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			private readonly DOMStyleSheet _handle;
			public ObjectiveCPropertyImplementation( DOMStyleSheet value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char disabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr media( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ownerNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentStyleSheet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector disabled = "disabled";
			public static readonly Selector href = "href";
			public static readonly Selector media = "media";
			public static readonly Selector ownerNode = "ownerNode";
			public static readonly Selector parentStyleSheet = "parentStyleSheet";
			public static readonly Selector setDisabled_ = "setDisabled:";
			public static readonly Selector title = "title";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMStyleSheetList : IEquatable<DOMStyleSheetList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMStyleSheetList;
		public static implicit operator DOMObject( DOMStyleSheetList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMStyleSheetList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMStyleSheetList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMStyleSheetList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMStyleSheetList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMStyleSheetList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMStyleSheetList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMStyleSheetList value1, DOMStyleSheetList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMStyleSheetList value1, DOMStyleSheetList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMStyleSheetList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMStyleSheetList alloc() {
			return new DOMStyleSheetList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMStyleSheet item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMStyleSheet( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public uint length {
				get { return _handle.length(); }
			}
			private readonly DOMStyleSheetList _handle;
			public ObjectiveCPropertyImplementation( DOMStyleSheetList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector item_ = "item:";
			public static readonly Selector length = "length";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGAElement : IEquatable<DOMSVGAElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAElement;
		public static implicit operator DOMSVGElement( DOMSVGAElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGAElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGAElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGAElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAElement value1, DOMSVGAElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAElement value1, DOMSVGAElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAElement alloc() {
			return new DOMSVGAElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject target {
				get { return _handle.target(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGAElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector href = "href";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector target = "target";
			public static readonly Selector transform = "transform";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAngle : IEquatable<DOMSVGAngle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAngle;
		public static implicit operator DOMObject( DOMSVGAngle value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAngle value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAngle value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAngle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAngle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAngle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAngle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAngle value1, DOMSVGAngle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAngle value1, DOMSVGAngle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAngle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAngle alloc() {
			return new DOMSVGAngle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void convertToSpecifiedUnits_( ushort units ) {
			RuntimeObject ___occuredException;
			NativeMethods.convertToSpecifiedUnits_( Handle, CachedSelectors.convertToSpecifiedUnits_, out ___occuredException, sizeof( ushort ), units );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void newValueSpecifiedUnits_valueInSpecifiedUnits_( ushort units, float valueInSpecifiedUnits ) {
			RuntimeObject ___occuredException;
			NativeMethods.newValueSpecifiedUnits_valueInSpecifiedUnits_( Handle, CachedSelectors.newValueSpecifiedUnits_valueInSpecifiedUnits_, out ___occuredException, sizeof( ushort ) + sizeof( float ), units, valueInSpecifiedUnits );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( float value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( float ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValueAsString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueAsString_( Handle, CachedSelectors.setValueAsString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValueInSpecifiedUnits_( float units ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueInSpecifiedUnits_( Handle, CachedSelectors.setValueInSpecifiedUnits_, out ___occuredException, sizeof( float ), units );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public ushort unitType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unitType( Handle, CachedSelectors.unitType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject valueAsString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueAsString( Handle, CachedSelectors.valueAsString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float valueInSpecifiedUnits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueInSpecifiedUnits( Handle, CachedSelectors.valueInSpecifiedUnits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public ushort unitType {
				get { return _handle.unitType(); }
			}
			public float value {
				get { return _handle.value(); }
			}
			public NObjective.RuntimeObject valueAsString {
				get { return _handle.valueAsString(); }
			}
			public float valueInSpecifiedUnits {
				get { return _handle.valueInSpecifiedUnits(); }
			}
			private readonly DOMSVGAngle _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAngle value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void convertToSpecifiedUnits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort units );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void newValueSpecifiedUnits_valueInSpecifiedUnits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort units, float valueInSpecifiedUnits );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValueAsString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValueInSpecifiedUnits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float units );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort unitType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueAsString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float valueInSpecifiedUnits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector convertToSpecifiedUnits_ = "convertToSpecifiedUnits:";
			public static readonly Selector newValueSpecifiedUnits_valueInSpecifiedUnits_ = "newValueSpecifiedUnits:valueInSpecifiedUnits:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector setValueAsString_ = "setValueAsString:";
			public static readonly Selector setValueInSpecifiedUnits_ = "setValueInSpecifiedUnits:";
			public static readonly Selector unitType = "unitType";
			public static readonly Selector value = "value";
			public static readonly Selector valueAsString = "valueAsString";
			public static readonly Selector valueInSpecifiedUnits = "valueInSpecifiedUnits";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGAnimationElement ) )]
	public struct DOMSVGAnimateColorElement : IEquatable<DOMSVGAnimateColorElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimateColorElement;
		public static implicit operator DOMSVGAnimationElement( DOMSVGAnimateColorElement value ) {
			return new DOMSVGAnimationElement( value.Handle );
		}
		public static implicit operator DOMSVGElement( DOMSVGAnimateColorElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGAnimateColorElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGAnimateColorElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGAnimateColorElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimateColorElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimateColorElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimateColorElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimateColorElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimateColorElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimateColorElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimateColorElement value1, DOMSVGAnimateColorElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimateColorElement value1, DOMSVGAnimateColorElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimateColorElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimateColorElement alloc() {
			return new DOMSVGAnimateColorElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedAngle : IEquatable<DOMSVGAnimatedAngle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedAngle;
		public static implicit operator DOMObject( DOMSVGAnimatedAngle value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedAngle value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedAngle value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedAngle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedAngle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedAngle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedAngle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedAngle value1, DOMSVGAnimatedAngle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedAngle value1, DOMSVGAnimatedAngle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedAngle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedAngle alloc() {
			return new DOMSVGAnimatedAngle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animVal {
				get { return _handle.animVal(); }
			}
			public NObjective.RuntimeObject baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedAngle _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedAngle value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedBoolean : IEquatable<DOMSVGAnimatedBoolean> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedBoolean;
		public static implicit operator DOMObject( DOMSVGAnimatedBoolean value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedBoolean value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedBoolean value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedBoolean value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedBoolean value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedBoolean?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedBoolean value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedBoolean value1, DOMSVGAnimatedBoolean value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedBoolean value1, DOMSVGAnimatedBoolean value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedBoolean( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedBoolean alloc() {
			return new DOMSVGAnimatedBoolean( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setBaseVal_( char val ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBaseVal_( Handle, CachedSelectors.setBaseVal_, out ___occuredException, sizeof( char ), val );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public char animVal {
				get { return _handle.animVal(); }
			}
			public char baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedBoolean _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedBoolean value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBaseVal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char val );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
			public static readonly Selector setBaseVal_ = "setBaseVal:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedEnumeration : IEquatable<DOMSVGAnimatedEnumeration> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedEnumeration;
		public static implicit operator DOMObject( DOMSVGAnimatedEnumeration value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedEnumeration value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedEnumeration value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedEnumeration value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedEnumeration value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedEnumeration?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedEnumeration value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedEnumeration value1, DOMSVGAnimatedEnumeration value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedEnumeration value1, DOMSVGAnimatedEnumeration value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedEnumeration( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedEnumeration alloc() {
			return new DOMSVGAnimatedEnumeration( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public ushort animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public ushort baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setBaseVal_( ushort val ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBaseVal_( Handle, CachedSelectors.setBaseVal_, out ___occuredException, sizeof( ushort ), val );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public ushort animVal {
				get { return _handle.animVal(); }
			}
			public ushort baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedEnumeration _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedEnumeration value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBaseVal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort val );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
			public static readonly Selector setBaseVal_ = "setBaseVal:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedInteger : IEquatable<DOMSVGAnimatedInteger> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedInteger;
		public static implicit operator DOMObject( DOMSVGAnimatedInteger value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedInteger value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedInteger value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedInteger value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedInteger value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedInteger?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedInteger value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedInteger value1, DOMSVGAnimatedInteger value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedInteger value1, DOMSVGAnimatedInteger value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedInteger( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedInteger alloc() {
			return new DOMSVGAnimatedInteger( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setBaseVal_( int val ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBaseVal_( Handle, CachedSelectors.setBaseVal_, out ___occuredException, sizeof( int ), val );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public int animVal {
				get { return _handle.animVal(); }
			}
			public int baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedInteger _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedInteger value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBaseVal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int val );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
			public static readonly Selector setBaseVal_ = "setBaseVal:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedLength : IEquatable<DOMSVGAnimatedLength> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedLength;
		public static implicit operator DOMObject( DOMSVGAnimatedLength value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedLength value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedLength value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedLength value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedLength value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedLength?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedLength value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedLength value1, DOMSVGAnimatedLength value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedLength value1, DOMSVGAnimatedLength value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedLength( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedLength alloc() {
			return new DOMSVGAnimatedLength( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animVal {
				get { return _handle.animVal(); }
			}
			public NObjective.RuntimeObject baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedLength _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedLength value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedLengthList : IEquatable<DOMSVGAnimatedLengthList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedLengthList;
		public static implicit operator DOMObject( DOMSVGAnimatedLengthList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedLengthList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedLengthList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedLengthList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedLengthList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedLengthList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedLengthList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedLengthList value1, DOMSVGAnimatedLengthList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedLengthList value1, DOMSVGAnimatedLengthList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedLengthList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedLengthList alloc() {
			return new DOMSVGAnimatedLengthList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animVal {
				get { return _handle.animVal(); }
			}
			public NObjective.RuntimeObject baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedLengthList _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedLengthList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedNumber : IEquatable<DOMSVGAnimatedNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedNumber;
		public static implicit operator DOMObject( DOMSVGAnimatedNumber value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedNumber value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedNumber value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedNumber value1, DOMSVGAnimatedNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedNumber value1, DOMSVGAnimatedNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedNumber alloc() {
			return new DOMSVGAnimatedNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public float animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setBaseVal_( float val ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBaseVal_( Handle, CachedSelectors.setBaseVal_, out ___occuredException, sizeof( float ), val );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public float animVal {
				get { return _handle.animVal(); }
			}
			public float baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedNumber _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedNumber value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBaseVal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float val );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
			public static readonly Selector setBaseVal_ = "setBaseVal:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedNumberList : IEquatable<DOMSVGAnimatedNumberList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedNumberList;
		public static implicit operator DOMObject( DOMSVGAnimatedNumberList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedNumberList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedNumberList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedNumberList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedNumberList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedNumberList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedNumberList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedNumberList value1, DOMSVGAnimatedNumberList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedNumberList value1, DOMSVGAnimatedNumberList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedNumberList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedNumberList alloc() {
			return new DOMSVGAnimatedNumberList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animVal {
				get { return _handle.animVal(); }
			}
			public NObjective.RuntimeObject baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedNumberList _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedNumberList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedPreserveAspectRatio : IEquatable<DOMSVGAnimatedPreserveAspectRatio> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedPreserveAspectRatio;
		public static implicit operator DOMObject( DOMSVGAnimatedPreserveAspectRatio value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedPreserveAspectRatio value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedPreserveAspectRatio value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedPreserveAspectRatio value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedPreserveAspectRatio value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedPreserveAspectRatio?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedPreserveAspectRatio value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedPreserveAspectRatio value1, DOMSVGAnimatedPreserveAspectRatio value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedPreserveAspectRatio value1, DOMSVGAnimatedPreserveAspectRatio value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedPreserveAspectRatio( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedPreserveAspectRatio alloc() {
			return new DOMSVGAnimatedPreserveAspectRatio( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animVal {
				get { return _handle.animVal(); }
			}
			public NObjective.RuntimeObject baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedPreserveAspectRatio _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedPreserveAspectRatio value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedRect : IEquatable<DOMSVGAnimatedRect> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedRect;
		public static implicit operator DOMObject( DOMSVGAnimatedRect value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedRect value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedRect value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedRect value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedRect value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedRect?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedRect value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedRect value1, DOMSVGAnimatedRect value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedRect value1, DOMSVGAnimatedRect value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedRect( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedRect alloc() {
			return new DOMSVGAnimatedRect( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animVal {
				get { return _handle.animVal(); }
			}
			public NObjective.RuntimeObject baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedRect _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedRect value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedString : IEquatable<DOMSVGAnimatedString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedString;
		public static implicit operator DOMObject( DOMSVGAnimatedString value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedString value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedString value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedString value1, DOMSVGAnimatedString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedString value1, DOMSVGAnimatedString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedString alloc() {
			return new DOMSVGAnimatedString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setBaseVal_( NObjective.RuntimeObject val ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBaseVal_( Handle, CachedSelectors.setBaseVal_, out ___occuredException, sizeof( NObjective.RuntimeObject ), val );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animVal {
				get { return _handle.animVal(); }
			}
			public NObjective.RuntimeObject baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedString _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedString value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBaseVal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject val );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
			public static readonly Selector setBaseVal_ = "setBaseVal:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGAnimatedTransformList : IEquatable<DOMSVGAnimatedTransformList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimatedTransformList;
		public static implicit operator DOMObject( DOMSVGAnimatedTransformList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimatedTransformList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimatedTransformList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimatedTransformList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimatedTransformList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimatedTransformList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimatedTransformList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimatedTransformList value1, DOMSVGAnimatedTransformList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimatedTransformList value1, DOMSVGAnimatedTransformList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimatedTransformList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimatedTransformList alloc() {
			return new DOMSVGAnimatedTransformList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animVal( Handle, CachedSelectors.animVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseVal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseVal( Handle, CachedSelectors.baseVal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animVal {
				get { return _handle.animVal(); }
			}
			public NObjective.RuntimeObject baseVal {
				get { return _handle.baseVal(); }
			}
			private readonly DOMSVGAnimatedTransformList _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimatedTransformList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseVal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animVal = "animVal";
			public static readonly Selector baseVal = "baseVal";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGAnimationElement : IEquatable<DOMSVGAnimationElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGAnimationElement;
		public static implicit operator DOMSVGElement( DOMSVGAnimationElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGAnimationElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGAnimationElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGAnimationElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGAnimationElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGAnimationElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGAnimationElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGAnimationElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGAnimationElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGAnimationElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGAnimationElement value1, DOMSVGAnimationElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGAnimationElement value1, DOMSVGAnimationElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGAnimationElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGAnimationElement alloc() {
			return new DOMSVGAnimationElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float getCurrentTime() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCurrentTime( Handle, CachedSelectors.getCurrentTime, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float getSimpleDuration() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getSimpleDuration( Handle, CachedSelectors.getSimpleDuration, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float getStartTime() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getStartTime( Handle, CachedSelectors.getStartTime, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject targetElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.targetElement( Handle, CachedSelectors.targetElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject targetElement {
				get { return _handle.targetElement(); }
			}
			private readonly DOMSVGAnimationElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGAnimationElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float getCurrentTime( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float getSimpleDuration( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float getStartTime( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr targetElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector getCurrentTime = "getCurrentTime";
			public static readonly Selector getSimpleDuration = "getSimpleDuration";
			public static readonly Selector getStartTime = "getStartTime";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector targetElement = "targetElement";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGCircleElement : IEquatable<DOMSVGCircleElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGCircleElement;
		public static implicit operator DOMSVGElement( DOMSVGCircleElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGCircleElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGCircleElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGCircleElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGCircleElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGCircleElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGCircleElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGCircleElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGCircleElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGCircleElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGCircleElement value1, DOMSVGCircleElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGCircleElement value1, DOMSVGCircleElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGCircleElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGCircleElement alloc() {
			return new DOMSVGCircleElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cx() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cx( Handle, CachedSelectors.cx, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cy( Handle, CachedSelectors.cy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject r() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.r( Handle, CachedSelectors.r, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject cx {
				get { return _handle.cx(); }
			}
			public NObjective.RuntimeObject cy {
				get { return _handle.cy(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject r {
				get { return _handle.r(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGCircleElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGCircleElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cx( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr r( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector cx = "cx";
			public static readonly Selector cy = "cy";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector r = "r";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGClipPathElement : IEquatable<DOMSVGClipPathElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGClipPathElement;
		public static implicit operator DOMSVGElement( DOMSVGClipPathElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGClipPathElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGClipPathElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGClipPathElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGClipPathElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGClipPathElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGClipPathElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGClipPathElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGClipPathElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGClipPathElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGClipPathElement value1, DOMSVGClipPathElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGClipPathElement value1, DOMSVGClipPathElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGClipPathElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGClipPathElement alloc() {
			return new DOMSVGClipPathElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject clipPathUnits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clipPathUnits( Handle, CachedSelectors.clipPathUnits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject clipPathUnits {
				get { return _handle.clipPathUnits(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGClipPathElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGClipPathElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr clipPathUnits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector clipPathUnits = "clipPathUnits";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCSSValue ) )]
	public struct DOMSVGColor : IEquatable<DOMSVGColor> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGColor;
		public static implicit operator DOMCSSValue( DOMSVGColor value ) {
			return new DOMCSSValue( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGColor value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGColor value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGColor value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGColor value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGColor value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGColor?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGColor value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGColor value1, DOMSVGColor value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGColor value1, DOMSVGColor value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGColor( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGColor alloc() {
			return new DOMSVGColor( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public ushort colorType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.colorType( Handle, CachedSelectors.colorType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject rgbColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rgbColor( Handle, CachedSelectors.rgbColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setColor_rgbColor_iccColor_( ushort color, NObjective.RuntimeObject rgbColor, NObjective.RuntimeObject iccColor ) {
			RuntimeObject ___occuredException;
			NativeMethods.setColor_rgbColor_iccColor_( Handle, CachedSelectors.setColor_rgbColor_iccColor_, out ___occuredException, sizeof( ushort ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), color, rgbColor, iccColor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRGBColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRGBColor_( Handle, CachedSelectors.setRGBColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRGBColorICCColor_iccColor_( NObjective.RuntimeObject color, NObjective.RuntimeObject iccColor ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRGBColorICCColor_iccColor_( Handle, CachedSelectors.setRGBColorICCColor_iccColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), color, iccColor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public ushort colorType {
				get { return _handle.colorType(); }
			}
			public NObjective.RuntimeObject rgbColor {
				get { return _handle.rgbColor(); }
			}
			private readonly DOMSVGColor _handle;
			public ObjectiveCPropertyImplementation( DOMSVGColor value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort colorType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rgbColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setColor_rgbColor_iccColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort color, NObjective.RuntimeObject rgbColor, NObjective.RuntimeObject iccColor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRGBColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRGBColorICCColor_iccColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color, NObjective.RuntimeObject iccColor );
		}
		static internal class CachedSelectors {
			public static readonly Selector colorType = "colorType";
			public static readonly Selector rgbColor = "rgbColor";
			public static readonly Selector setColor_rgbColor_iccColor_ = "setColor:rgbColor:iccColor:";
			public static readonly Selector setRGBColor_ = "setRGBColor:";
			public static readonly Selector setRGBColorICCColor_iccColor_ = "setRGBColorICCColor:iccColor:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGCursorElement : IEquatable<DOMSVGCursorElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGCursorElement;
		public static implicit operator DOMSVGElement( DOMSVGCursorElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGCursorElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGCursorElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGCursorElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGCursorElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGCursorElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGCursorElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGCursorElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGCursorElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGCursorElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGCursorElement value1, DOMSVGCursorElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGCursorElement value1, DOMSVGCursorElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGCursorElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGCursorElement alloc() {
			return new DOMSVGCursorElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject x {
				get { return _handle.x(); }
			}
			public NObjective.RuntimeObject y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGCursorElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGCursorElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector href = "href";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGDefinitionSrcElement : IEquatable<DOMSVGDefinitionSrcElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGDefinitionSrcElement;
		public static implicit operator DOMSVGElement( DOMSVGDefinitionSrcElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGDefinitionSrcElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGDefinitionSrcElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGDefinitionSrcElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGDefinitionSrcElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGDefinitionSrcElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGDefinitionSrcElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGDefinitionSrcElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGDefinitionSrcElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGDefinitionSrcElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGDefinitionSrcElement value1, DOMSVGDefinitionSrcElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGDefinitionSrcElement value1, DOMSVGDefinitionSrcElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGDefinitionSrcElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGDefinitionSrcElement alloc() {
			return new DOMSVGDefinitionSrcElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGDefsElement : IEquatable<DOMSVGDefsElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGDefsElement;
		public static implicit operator DOMSVGElement( DOMSVGDefsElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGDefsElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGDefsElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGDefsElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGDefsElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGDefsElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGDefsElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGDefsElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGDefsElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGDefsElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGDefsElement value1, DOMSVGDefsElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGDefsElement value1, DOMSVGDefsElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGDefsElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGDefsElement alloc() {
			return new DOMSVGDefsElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGDefsElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGDefsElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGDescElement : IEquatable<DOMSVGDescElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGDescElement;
		public static implicit operator DOMSVGElement( DOMSVGDescElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGDescElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGDescElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGDescElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGDescElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGDescElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGDescElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGDescElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGDescElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGDescElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGDescElement value1, DOMSVGDescElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGDescElement value1, DOMSVGDescElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGDescElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGDescElement alloc() {
			return new DOMSVGDescElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGDescElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGDescElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMDocument ) )]
	public struct DOMSVGDocument : IEquatable<DOMSVGDocument> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGDocument;
		public static implicit operator DOMDocument( DOMSVGDocument value ) {
			return new DOMDocument( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGDocument value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGDocument value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGDocument value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGDocument value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGDocument value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGDocument value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGDocument?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGDocument value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGDocument value1, DOMSVGDocument value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGDocument value1, DOMSVGDocument value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGDocument( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGDocument alloc() {
			return new DOMSVGDocument( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject rootElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rootElement( Handle, CachedSelectors.rootElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject rootElement {
				get { return _handle.rootElement(); }
			}
			private readonly DOMSVGDocument _handle;
			public ObjectiveCPropertyImplementation( DOMSVGDocument value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rootElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector rootElement = "rootElement";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMElement ) )]
	public struct DOMSVGElement : IEquatable<DOMSVGElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGElement;
		public static implicit operator DOMElement( DOMSVGElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGElement value1, DOMSVGElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGElement value1, DOMSVGElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGElement alloc() {
			return new DOMSVGElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject idName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.idName( Handle, CachedSelectors.idName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject ownerSVGElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ownerSVGElement( Handle, CachedSelectors.ownerSVGElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setIdName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIdName_( Handle, CachedSelectors.setIdName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlbase_( NObjective.RuntimeObject xmlbase ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlbase_( Handle, CachedSelectors.setXmlbase_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlbase );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject viewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewportElement( Handle, CachedSelectors.viewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlbase() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlbase( Handle, CachedSelectors.xmlbase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject idName {
				get { return _handle.idName(); }
			}
			public NObjective.RuntimeObject ownerSVGElement {
				get { return _handle.ownerSVGElement(); }
			}
			public NObjective.RuntimeObject viewportElement {
				get { return _handle.viewportElement(); }
			}
			public NObjective.RuntimeObject xmlbase {
				get { return _handle.xmlbase(); }
			}
			private readonly DOMSVGElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr idName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ownerSVGElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIdName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlbase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlbase );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr viewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlbase( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector idName = "idName";
			public static readonly Selector ownerSVGElement = "ownerSVGElement";
			public static readonly Selector setIdName_ = "setIdName:";
			public static readonly Selector setXmlbase_ = "setXmlbase:";
			public static readonly Selector viewportElement = "viewportElement";
			public static readonly Selector xmlbase = "xmlbase";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGElementInstance : IEquatable<DOMSVGElementInstance> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGElementInstance;
		public static implicit operator DOMObject( DOMSVGElementInstance value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGElementInstance value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGElementInstance value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGElementInstance value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGElementInstance value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGElementInstance?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGElementInstance value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGElementInstance value1, DOMSVGElementInstance value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGElementInstance value1, DOMSVGElementInstance value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGElementInstance( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGElementInstance alloc() {
			return new DOMSVGElementInstance( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject childNodes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childNodes( Handle, CachedSelectors.childNodes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject correspondingElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.correspondingElement( Handle, CachedSelectors.correspondingElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject correspondingUseElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.correspondingUseElement( Handle, CachedSelectors.correspondingUseElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject firstChild() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstChild( Handle, CachedSelectors.firstChild, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lastChild() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastChild( Handle, CachedSelectors.lastChild, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextSibling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextSibling( Handle, CachedSelectors.nextSibling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentNode( Handle, CachedSelectors.parentNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject previousSibling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousSibling( Handle, CachedSelectors.previousSibling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject childNodes {
				get { return _handle.childNodes(); }
			}
			public NObjective.RuntimeObject correspondingElement {
				get { return _handle.correspondingElement(); }
			}
			public NObjective.RuntimeObject correspondingUseElement {
				get { return _handle.correspondingUseElement(); }
			}
			public NObjective.RuntimeObject firstChild {
				get { return _handle.firstChild(); }
			}
			public NObjective.RuntimeObject lastChild {
				get { return _handle.lastChild(); }
			}
			public NObjective.RuntimeObject nextSibling {
				get { return _handle.nextSibling(); }
			}
			public NObjective.RuntimeObject parentNode {
				get { return _handle.parentNode(); }
			}
			public NObjective.RuntimeObject previousSibling {
				get { return _handle.previousSibling(); }
			}
			private readonly DOMSVGElementInstance _handle;
			public ObjectiveCPropertyImplementation( DOMSVGElementInstance value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr childNodes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr correspondingElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr correspondingUseElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstChild( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastChild( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextSibling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr previousSibling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector childNodes = "childNodes";
			public static readonly Selector correspondingElement = "correspondingElement";
			public static readonly Selector correspondingUseElement = "correspondingUseElement";
			public static readonly Selector firstChild = "firstChild";
			public static readonly Selector lastChild = "lastChild";
			public static readonly Selector nextSibling = "nextSibling";
			public static readonly Selector parentNode = "parentNode";
			public static readonly Selector previousSibling = "previousSibling";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGElementInstanceList : IEquatable<DOMSVGElementInstanceList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGElementInstanceList;
		public static implicit operator DOMObject( DOMSVGElementInstanceList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGElementInstanceList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGElementInstanceList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGElementInstanceList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGElementInstanceList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGElementInstanceList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGElementInstanceList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGElementInstanceList value1, DOMSVGElementInstanceList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGElementInstanceList value1, DOMSVGElementInstanceList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGElementInstanceList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGElementInstanceList alloc() {
			return new DOMSVGElementInstanceList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject item_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.item_( Handle, CachedSelectors.item_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public uint length {
				get { return _handle.length(); }
			}
			private readonly DOMSVGElementInstanceList _handle;
			public ObjectiveCPropertyImplementation( DOMSVGElementInstanceList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector item_ = "item:";
			public static readonly Selector length = "length";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGEllipseElement : IEquatable<DOMSVGEllipseElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGEllipseElement;
		public static implicit operator DOMSVGElement( DOMSVGEllipseElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGEllipseElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGEllipseElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGEllipseElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGEllipseElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGEllipseElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGEllipseElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGEllipseElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGEllipseElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGEllipseElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGEllipseElement value1, DOMSVGEllipseElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGEllipseElement value1, DOMSVGEllipseElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGEllipseElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGEllipseElement alloc() {
			return new DOMSVGEllipseElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cx() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cx( Handle, CachedSelectors.cx, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cy( Handle, CachedSelectors.cy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rx() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rx( Handle, CachedSelectors.rx, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject ry() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ry( Handle, CachedSelectors.ry, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject cx {
				get { return _handle.cx(); }
			}
			public NObjective.RuntimeObject cy {
				get { return _handle.cy(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject rx {
				get { return _handle.rx(); }
			}
			public NObjective.RuntimeObject ry {
				get { return _handle.ry(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGEllipseElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGEllipseElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cx( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rx( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ry( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector cx = "cx";
			public static readonly Selector cy = "cy";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector rx = "rx";
			public static readonly Selector ry = "ry";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGFontElement : IEquatable<DOMSVGFontElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGFontElement;
		public static implicit operator DOMSVGElement( DOMSVGFontElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGFontElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGFontElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGFontElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGFontElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGFontElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGFontElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGFontElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGFontElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGFontElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGFontElement value1, DOMSVGFontElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGFontElement value1, DOMSVGFontElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGFontElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGFontElement alloc() {
			return new DOMSVGFontElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGFontFaceElement : IEquatable<DOMSVGFontFaceElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGFontFaceElement;
		public static implicit operator DOMSVGElement( DOMSVGFontFaceElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGFontFaceElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGFontFaceElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGFontFaceElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGFontFaceElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGFontFaceElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGFontFaceElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGFontFaceElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGFontFaceElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGFontFaceElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGFontFaceElement value1, DOMSVGFontFaceElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGFontFaceElement value1, DOMSVGFontFaceElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGFontFaceElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGFontFaceElement alloc() {
			return new DOMSVGFontFaceElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGFontFaceFormatElement : IEquatable<DOMSVGFontFaceFormatElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGFontFaceFormatElement;
		public static implicit operator DOMSVGElement( DOMSVGFontFaceFormatElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGFontFaceFormatElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGFontFaceFormatElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGFontFaceFormatElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGFontFaceFormatElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGFontFaceFormatElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGFontFaceFormatElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGFontFaceFormatElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGFontFaceFormatElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGFontFaceFormatElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGFontFaceFormatElement value1, DOMSVGFontFaceFormatElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGFontFaceFormatElement value1, DOMSVGFontFaceFormatElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGFontFaceFormatElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGFontFaceFormatElement alloc() {
			return new DOMSVGFontFaceFormatElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGFontFaceNameElement : IEquatable<DOMSVGFontFaceNameElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGFontFaceNameElement;
		public static implicit operator DOMSVGElement( DOMSVGFontFaceNameElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGFontFaceNameElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGFontFaceNameElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGFontFaceNameElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGFontFaceNameElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGFontFaceNameElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGFontFaceNameElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGFontFaceNameElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGFontFaceNameElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGFontFaceNameElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGFontFaceNameElement value1, DOMSVGFontFaceNameElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGFontFaceNameElement value1, DOMSVGFontFaceNameElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGFontFaceNameElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGFontFaceNameElement alloc() {
			return new DOMSVGFontFaceNameElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGFontFaceSrcElement : IEquatable<DOMSVGFontFaceSrcElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGFontFaceSrcElement;
		public static implicit operator DOMSVGElement( DOMSVGFontFaceSrcElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGFontFaceSrcElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGFontFaceSrcElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGFontFaceSrcElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGFontFaceSrcElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGFontFaceSrcElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGFontFaceSrcElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGFontFaceSrcElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGFontFaceSrcElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGFontFaceSrcElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGFontFaceSrcElement value1, DOMSVGFontFaceSrcElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGFontFaceSrcElement value1, DOMSVGFontFaceSrcElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGFontFaceSrcElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGFontFaceSrcElement alloc() {
			return new DOMSVGFontFaceSrcElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGFontFaceUriElement : IEquatable<DOMSVGFontFaceUriElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGFontFaceUriElement;
		public static implicit operator DOMSVGElement( DOMSVGFontFaceUriElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGFontFaceUriElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGFontFaceUriElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGFontFaceUriElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGFontFaceUriElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGFontFaceUriElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGFontFaceUriElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGFontFaceUriElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGFontFaceUriElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGFontFaceUriElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGFontFaceUriElement value1, DOMSVGFontFaceUriElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGFontFaceUriElement value1, DOMSVGFontFaceUriElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGFontFaceUriElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGFontFaceUriElement alloc() {
			return new DOMSVGFontFaceUriElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGForeignObjectElement : IEquatable<DOMSVGForeignObjectElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGForeignObjectElement;
		public static implicit operator DOMSVGElement( DOMSVGForeignObjectElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGForeignObjectElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGForeignObjectElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGForeignObjectElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGForeignObjectElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGForeignObjectElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGForeignObjectElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGForeignObjectElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGForeignObjectElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGForeignObjectElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGForeignObjectElement value1, DOMSVGForeignObjectElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGForeignObjectElement value1, DOMSVGForeignObjectElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGForeignObjectElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGForeignObjectElement alloc() {
			return new DOMSVGForeignObjectElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			public NObjective.RuntimeObject x {
				get { return _handle.x(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			public NObjective.RuntimeObject y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGForeignObjectElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGForeignObjectElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector height = "height";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector width = "width";
			public static readonly Selector x = "x";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGGElement : IEquatable<DOMSVGGElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGGElement;
		public static implicit operator DOMSVGElement( DOMSVGGElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGGElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGGElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGGElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGGElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGGElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGGElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGGElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGGElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGGElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGGElement value1, DOMSVGGElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGGElement value1, DOMSVGGElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGGElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGGElement alloc() {
			return new DOMSVGGElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGGElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGGElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGGlyphElement : IEquatable<DOMSVGGlyphElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGGlyphElement;
		public static implicit operator DOMSVGElement( DOMSVGGlyphElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGGlyphElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGGlyphElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGGlyphElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGGlyphElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGGlyphElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGGlyphElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGGlyphElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGGlyphElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGGlyphElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGGlyphElement value1, DOMSVGGlyphElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGGlyphElement value1, DOMSVGGlyphElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGGlyphElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGGlyphElement alloc() {
			return new DOMSVGGlyphElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGGradientElement : IEquatable<DOMSVGGradientElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGGradientElement;
		public static implicit operator DOMSVGElement( DOMSVGGradientElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGGradientElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGGradientElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGGradientElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGGradientElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGGradientElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGGradientElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGGradientElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGGradientElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGGradientElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGGradientElement value1, DOMSVGGradientElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGGradientElement value1, DOMSVGGradientElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGGradientElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGGradientElement alloc() {
			return new DOMSVGGradientElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject gradientTransform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.gradientTransform( Handle, CachedSelectors.gradientTransform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject gradientUnits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.gradientUnits( Handle, CachedSelectors.gradientUnits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject spreadMethod() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.spreadMethod( Handle, CachedSelectors.spreadMethod, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject gradientTransform {
				get { return _handle.gradientTransform(); }
			}
			public NObjective.RuntimeObject gradientUnits {
				get { return _handle.gradientUnits(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject spreadMethod {
				get { return _handle.spreadMethod(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			private readonly DOMSVGGradientElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGGradientElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr gradientTransform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr gradientUnits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr spreadMethod( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector gradientTransform = "gradientTransform";
			public static readonly Selector gradientUnits = "gradientUnits";
			public static readonly Selector href = "href";
			public static readonly Selector spreadMethod = "spreadMethod";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGImageElement : IEquatable<DOMSVGImageElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGImageElement;
		public static implicit operator DOMSVGElement( DOMSVGImageElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGImageElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGImageElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGImageElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGImageElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGImageElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGImageElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGImageElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGImageElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGImageElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGImageElement value1, DOMSVGImageElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGImageElement value1, DOMSVGImageElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGImageElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGImageElement alloc() {
			return new DOMSVGImageElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject preserveAspectRatio() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preserveAspectRatio( Handle, CachedSelectors.preserveAspectRatio, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject preserveAspectRatio {
				get { return _handle.preserveAspectRatio(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			public NObjective.RuntimeObject x {
				get { return _handle.x(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			public NObjective.RuntimeObject y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGImageElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGImageElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preserveAspectRatio( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector height = "height";
			public static readonly Selector href = "href";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector preserveAspectRatio = "preserveAspectRatio";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector width = "width";
			public static readonly Selector x = "x";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGLength : IEquatable<DOMSVGLength> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGLength;
		public static implicit operator DOMObject( DOMSVGLength value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGLength value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGLength value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGLength value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGLength value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGLength?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGLength value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGLength value1, DOMSVGLength value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGLength value1, DOMSVGLength value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGLength( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGLength alloc() {
			return new DOMSVGLength( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void convertToSpecifiedUnits_( ushort units ) {
			RuntimeObject ___occuredException;
			NativeMethods.convertToSpecifiedUnits_( Handle, CachedSelectors.convertToSpecifiedUnits_, out ___occuredException, sizeof( ushort ), units );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void newValueSpecifiedUnits_valueInSpecifiedUnits_( ushort units, float valueInSpecifiedUnits ) {
			RuntimeObject ___occuredException;
			NativeMethods.newValueSpecifiedUnits_valueInSpecifiedUnits_( Handle, CachedSelectors.newValueSpecifiedUnits_valueInSpecifiedUnits_, out ___occuredException, sizeof( ushort ) + sizeof( float ), units, valueInSpecifiedUnits );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( float value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( float ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValueAsString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueAsString_( Handle, CachedSelectors.setValueAsString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValueInSpecifiedUnits_( float units ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueInSpecifiedUnits_( Handle, CachedSelectors.setValueInSpecifiedUnits_, out ___occuredException, sizeof( float ), units );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public ushort unitType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unitType( Handle, CachedSelectors.unitType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject valueAsString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueAsString( Handle, CachedSelectors.valueAsString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float valueInSpecifiedUnits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueInSpecifiedUnits( Handle, CachedSelectors.valueInSpecifiedUnits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public ushort unitType {
				get { return _handle.unitType(); }
			}
			public float value {
				get { return _handle.value(); }
			}
			public NObjective.RuntimeObject valueAsString {
				get { return _handle.valueAsString(); }
			}
			public float valueInSpecifiedUnits {
				get { return _handle.valueInSpecifiedUnits(); }
			}
			private readonly DOMSVGLength _handle;
			public ObjectiveCPropertyImplementation( DOMSVGLength value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void convertToSpecifiedUnits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort units );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void newValueSpecifiedUnits_valueInSpecifiedUnits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort units, float valueInSpecifiedUnits );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValueAsString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValueInSpecifiedUnits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float units );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort unitType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueAsString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float valueInSpecifiedUnits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector convertToSpecifiedUnits_ = "convertToSpecifiedUnits:";
			public static readonly Selector newValueSpecifiedUnits_valueInSpecifiedUnits_ = "newValueSpecifiedUnits:valueInSpecifiedUnits:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector setValueAsString_ = "setValueAsString:";
			public static readonly Selector setValueInSpecifiedUnits_ = "setValueInSpecifiedUnits:";
			public static readonly Selector unitType = "unitType";
			public static readonly Selector value = "value";
			public static readonly Selector valueAsString = "valueAsString";
			public static readonly Selector valueInSpecifiedUnits = "valueInSpecifiedUnits";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGLengthList : IEquatable<DOMSVGLengthList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGLengthList;
		public static implicit operator DOMObject( DOMSVGLengthList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGLengthList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGLengthList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGLengthList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGLengthList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGLengthList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGLengthList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGLengthList value1, DOMSVGLengthList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGLengthList value1, DOMSVGLengthList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGLengthList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGLengthList alloc() {
			return new DOMSVGLengthList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject appendItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendItem_( Handle, CachedSelectors.appendItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject getItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getItem_( Handle, CachedSelectors.getItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initialize_( NObjective.RuntimeObject initialize ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initialize_( Handle, CachedSelectors.initialize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), initialize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject insertItemBefore_index_( NObjective.RuntimeObject before, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertItemBefore_index_( Handle, CachedSelectors.insertItemBefore_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), before, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint numberOfItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItems( Handle, CachedSelectors.numberOfItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject removeItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeItem_( Handle, CachedSelectors.removeItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replaceItem_index_( NObjective.RuntimeObject item, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replaceItem_index_( Handle, CachedSelectors.replaceItem_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), item, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public uint numberOfItems {
				get { return _handle.numberOfItems(); }
			}
			private readonly DOMSVGLengthList _handle;
			public ObjectiveCPropertyImplementation( DOMSVGLengthList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr appendItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initialize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject initialize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertItemBefore_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject before, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint numberOfItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replaceItem_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item, uint index );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendItem_ = "appendItem:";
			public static readonly Selector clear = "clear";
			public static readonly Selector getItem_ = "getItem:";
			public static readonly Selector initialize_ = "initialize:";
			public static readonly Selector insertItemBefore_index_ = "insertItemBefore:index:";
			public static readonly Selector numberOfItems = "numberOfItems";
			public static readonly Selector removeItem_ = "removeItem:";
			public static readonly Selector replaceItem_index_ = "replaceItem:index:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGGradientElement ) )]
	public struct DOMSVGLinearGradientElement : IEquatable<DOMSVGLinearGradientElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGLinearGradientElement;
		public static implicit operator DOMSVGGradientElement( DOMSVGLinearGradientElement value ) {
			return new DOMSVGGradientElement( value.Handle );
		}
		public static implicit operator DOMSVGElement( DOMSVGLinearGradientElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGLinearGradientElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGLinearGradientElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGLinearGradientElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGLinearGradientElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGLinearGradientElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGLinearGradientElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGLinearGradientElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGLinearGradientElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGLinearGradientElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGLinearGradientElement value1, DOMSVGLinearGradientElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGLinearGradientElement value1, DOMSVGLinearGradientElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGLinearGradientElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGLinearGradientElement alloc() {
			return new DOMSVGLinearGradientElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject x1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x1( Handle, CachedSelectors.x1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x2( Handle, CachedSelectors.x2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y1( Handle, CachedSelectors.y1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y2( Handle, CachedSelectors.y2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject x1 {
				get { return _handle.x1(); }
			}
			public NObjective.RuntimeObject x2 {
				get { return _handle.x2(); }
			}
			public NObjective.RuntimeObject y1 {
				get { return _handle.y1(); }
			}
			public NObjective.RuntimeObject y2 {
				get { return _handle.y2(); }
			}
			private readonly DOMSVGLinearGradientElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGLinearGradientElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector x1 = "x1";
			public static readonly Selector x2 = "x2";
			public static readonly Selector y1 = "y1";
			public static readonly Selector y2 = "y2";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGLineElement : IEquatable<DOMSVGLineElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGLineElement;
		public static implicit operator DOMSVGElement( DOMSVGLineElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGLineElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGLineElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGLineElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGLineElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGLineElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGLineElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGLineElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGLineElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGLineElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGLineElement value1, DOMSVGLineElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGLineElement value1, DOMSVGLineElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGLineElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGLineElement alloc() {
			return new DOMSVGLineElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x1( Handle, CachedSelectors.x1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x2( Handle, CachedSelectors.x2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y1( Handle, CachedSelectors.y1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y2( Handle, CachedSelectors.y2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject x1 {
				get { return _handle.x1(); }
			}
			public NObjective.RuntimeObject x2 {
				get { return _handle.x2(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			public NObjective.RuntimeObject y1 {
				get { return _handle.y1(); }
			}
			public NObjective.RuntimeObject y2 {
				get { return _handle.y2(); }
			}
			private readonly DOMSVGLineElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGLineElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector x1 = "x1";
			public static readonly Selector x2 = "x2";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
			public static readonly Selector y1 = "y1";
			public static readonly Selector y2 = "y2";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGMarkerElement : IEquatable<DOMSVGMarkerElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGMarkerElement;
		public static implicit operator DOMSVGElement( DOMSVGMarkerElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGMarkerElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGMarkerElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGMarkerElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGMarkerElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGMarkerElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGMarkerElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGMarkerElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGMarkerElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGMarkerElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGMarkerElement value1, DOMSVGMarkerElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGMarkerElement value1, DOMSVGMarkerElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGMarkerElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGMarkerElement alloc() {
			return new DOMSVGMarkerElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject markerHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markerHeight( Handle, CachedSelectors.markerHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject markerUnits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markerUnits( Handle, CachedSelectors.markerUnits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject markerWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markerWidth( Handle, CachedSelectors.markerWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject orientAngle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orientAngle( Handle, CachedSelectors.orientAngle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject orientType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orientType( Handle, CachedSelectors.orientType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject preserveAspectRatio() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preserveAspectRatio( Handle, CachedSelectors.preserveAspectRatio, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject refX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.refX( Handle, CachedSelectors.refX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject refY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.refY( Handle, CachedSelectors.refY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setOrientToAngle_( NObjective.RuntimeObject angle ) {
			RuntimeObject ___occuredException;
			NativeMethods.setOrientToAngle_( Handle, CachedSelectors.setOrientToAngle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), angle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOrientToAuto() {
			RuntimeObject ___occuredException;
			NativeMethods.setOrientToAuto( Handle, CachedSelectors.setOrientToAuto, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject viewBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewBox( Handle, CachedSelectors.viewBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject markerHeight {
				get { return _handle.markerHeight(); }
			}
			public NObjective.RuntimeObject markerUnits {
				get { return _handle.markerUnits(); }
			}
			public NObjective.RuntimeObject markerWidth {
				get { return _handle.markerWidth(); }
			}
			public NObjective.RuntimeObject orientAngle {
				get { return _handle.orientAngle(); }
			}
			public NObjective.RuntimeObject orientType {
				get { return _handle.orientType(); }
			}
			public NObjective.RuntimeObject preserveAspectRatio {
				get { return _handle.preserveAspectRatio(); }
			}
			public NObjective.RuntimeObject refX {
				get { return _handle.refX(); }
			}
			public NObjective.RuntimeObject refY {
				get { return _handle.refY(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject viewBox {
				get { return _handle.viewBox(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGMarkerElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGMarkerElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr markerHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr markerUnits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr markerWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orientAngle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orientType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preserveAspectRatio( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr refX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr refY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOrientToAngle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject angle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOrientToAuto( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr viewBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector markerHeight = "markerHeight";
			public static readonly Selector markerUnits = "markerUnits";
			public static readonly Selector markerWidth = "markerWidth";
			public static readonly Selector orientAngle = "orientAngle";
			public static readonly Selector orientType = "orientType";
			public static readonly Selector preserveAspectRatio = "preserveAspectRatio";
			public static readonly Selector refX = "refX";
			public static readonly Selector refY = "refY";
			public static readonly Selector setOrientToAngle_ = "setOrientToAngle:";
			public static readonly Selector setOrientToAuto = "setOrientToAuto";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector viewBox = "viewBox";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGMaskElement : IEquatable<DOMSVGMaskElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGMaskElement;
		public static implicit operator DOMSVGElement( DOMSVGMaskElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGMaskElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGMaskElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGMaskElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGMaskElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGMaskElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGMaskElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGMaskElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGMaskElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGMaskElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGMaskElement value1, DOMSVGMaskElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGMaskElement value1, DOMSVGMaskElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGMaskElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGMaskElement alloc() {
			return new DOMSVGMaskElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject maskContentUnits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maskContentUnits( Handle, CachedSelectors.maskContentUnits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject maskUnits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maskUnits( Handle, CachedSelectors.maskUnits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public NObjective.RuntimeObject maskContentUnits {
				get { return _handle.maskContentUnits(); }
			}
			public NObjective.RuntimeObject maskUnits {
				get { return _handle.maskUnits(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			public NObjective.RuntimeObject x {
				get { return _handle.x(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			public NObjective.RuntimeObject y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGMaskElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGMaskElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr maskContentUnits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr maskUnits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector height = "height";
			public static readonly Selector maskContentUnits = "maskContentUnits";
			public static readonly Selector maskUnits = "maskUnits";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector width = "width";
			public static readonly Selector x = "x";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGMatrix : IEquatable<DOMSVGMatrix> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGMatrix;
		public static implicit operator DOMObject( DOMSVGMatrix value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGMatrix value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGMatrix value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGMatrix value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGMatrix value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGMatrix?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGMatrix value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGMatrix value1, DOMSVGMatrix value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGMatrix value1, DOMSVGMatrix value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGMatrix( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGMatrix alloc() {
			return new DOMSVGMatrix( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public double a() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.a( Handle, CachedSelectors.a, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double b() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.b( Handle, CachedSelectors.b, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double c() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.c( Handle, CachedSelectors.c, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double d() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.d( Handle, CachedSelectors.d, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double e() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.e( Handle, CachedSelectors.e, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double f() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.f( Handle, CachedSelectors.f, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject flipX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.flipX( Handle, CachedSelectors.flipX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject flipY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.flipY( Handle, CachedSelectors.flipY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject inverse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inverse( Handle, CachedSelectors.inverse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject multiply_( NObjective.RuntimeObject multiply ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.multiply_( Handle, CachedSelectors.multiply_, out ___occuredException, sizeof( NObjective.RuntimeObject ), multiply );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rotate_( float rotate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rotate_( Handle, CachedSelectors.rotate_, out ___occuredException, sizeof( float ), rotate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rotateFromVector_y_( float vector, float y ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rotateFromVector_y_( Handle, CachedSelectors.rotateFromVector_y_, out ___occuredException, sizeof( float ) + sizeof( float ), vector, y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject scale_( float scale ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scale_( Handle, CachedSelectors.scale_, out ___occuredException, sizeof( float ), scale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject scaleNonUniform_scaleFactorY_( float uniform, float scaleFactorY ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scaleNonUniform_scaleFactorY_( Handle, CachedSelectors.scaleNonUniform_scaleFactorY_, out ___occuredException, sizeof( float ) + sizeof( float ), uniform, scaleFactorY );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setA_( double a ) {
			RuntimeObject ___occuredException;
			NativeMethods.setA_( Handle, CachedSelectors.setA_, out ___occuredException, sizeof( double ), a );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setB_( double b ) {
			RuntimeObject ___occuredException;
			NativeMethods.setB_( Handle, CachedSelectors.setB_, out ___occuredException, sizeof( double ), b );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setC_( double c ) {
			RuntimeObject ___occuredException;
			NativeMethods.setC_( Handle, CachedSelectors.setC_, out ___occuredException, sizeof( double ), c );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setD_( double d ) {
			RuntimeObject ___occuredException;
			NativeMethods.setD_( Handle, CachedSelectors.setD_, out ___occuredException, sizeof( double ), d );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setE_( double e ) {
			RuntimeObject ___occuredException;
			NativeMethods.setE_( Handle, CachedSelectors.setE_, out ___occuredException, sizeof( double ), e );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setF_( double f ) {
			RuntimeObject ___occuredException;
			NativeMethods.setF_( Handle, CachedSelectors.setF_, out ___occuredException, sizeof( double ), f );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject skewX_( float x ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.skewX_( Handle, CachedSelectors.skewX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject skewY_( float y ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.skewY_( Handle, CachedSelectors.skewY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject translate_y_( float translate, float y ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.translate_y_( Handle, CachedSelectors.translate_y_, out ___occuredException, sizeof( float ) + sizeof( float ), translate, y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public double a {
				get { return _handle.a(); }
			}
			public double b {
				get { return _handle.b(); }
			}
			public double c {
				get { return _handle.c(); }
			}
			public double d {
				get { return _handle.d(); }
			}
			public double e {
				get { return _handle.e(); }
			}
			public double f {
				get { return _handle.f(); }
			}
			private readonly DOMSVGMatrix _handle;
			public ObjectiveCPropertyImplementation( DOMSVGMatrix value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double a( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double b( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double c( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double d( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double e( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double f( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr flipX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr flipY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr inverse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr multiply_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject multiply );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rotate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rotate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rotateFromVector_y_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float vector, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float scale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scaleNonUniform_scaleFactorY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float uniform, float scaleFactorY );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setA_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double a );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setB_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double b );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setC_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double c );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setD_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double d );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setE_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double e );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setF_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double f );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr skewX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr skewY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr translate_y_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float translate, float y );
		}
		static internal class CachedSelectors {
			public static readonly Selector a = "a";
			public static readonly Selector b = "b";
			public static readonly Selector c = "c";
			public static readonly Selector d = "d";
			public static readonly Selector e = "e";
			public static readonly Selector f = "f";
			public static readonly Selector flipX = "flipX";
			public static readonly Selector flipY = "flipY";
			public static readonly Selector inverse = "inverse";
			public static readonly Selector multiply_ = "multiply:";
			public static readonly Selector rotate_ = "rotate:";
			public static readonly Selector rotateFromVector_y_ = "rotateFromVector:y:";
			public static readonly Selector scale_ = "scale:";
			public static readonly Selector scaleNonUniform_scaleFactorY_ = "scaleNonUniform:scaleFactorY:";
			public static readonly Selector setA_ = "setA:";
			public static readonly Selector setB_ = "setB:";
			public static readonly Selector setC_ = "setC:";
			public static readonly Selector setD_ = "setD:";
			public static readonly Selector setE_ = "setE:";
			public static readonly Selector setF_ = "setF:";
			public static readonly Selector skewX_ = "skewX:";
			public static readonly Selector skewY_ = "skewY:";
			public static readonly Selector translate_y_ = "translate:y:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGMetadataElement : IEquatable<DOMSVGMetadataElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGMetadataElement;
		public static implicit operator DOMSVGElement( DOMSVGMetadataElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGMetadataElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGMetadataElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGMetadataElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGMetadataElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGMetadataElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGMetadataElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGMetadataElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGMetadataElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGMetadataElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGMetadataElement value1, DOMSVGMetadataElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGMetadataElement value1, DOMSVGMetadataElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGMetadataElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGMetadataElement alloc() {
			return new DOMSVGMetadataElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGMissingGlyphElement : IEquatable<DOMSVGMissingGlyphElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGMissingGlyphElement;
		public static implicit operator DOMSVGElement( DOMSVGMissingGlyphElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGMissingGlyphElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGMissingGlyphElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGMissingGlyphElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGMissingGlyphElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGMissingGlyphElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGMissingGlyphElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGMissingGlyphElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGMissingGlyphElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGMissingGlyphElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGMissingGlyphElement value1, DOMSVGMissingGlyphElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGMissingGlyphElement value1, DOMSVGMissingGlyphElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGMissingGlyphElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGMissingGlyphElement alloc() {
			return new DOMSVGMissingGlyphElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGNumber : IEquatable<DOMSVGNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGNumber;
		public static implicit operator DOMObject( DOMSVGNumber value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGNumber value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGNumber value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGNumber value1, DOMSVGNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGNumber value1, DOMSVGNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGNumber alloc() {
			return new DOMSVGNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setValue_( float value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( float ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float value {
				get { return _handle.value(); }
			}
			private readonly DOMSVGNumber _handle;
			public ObjectiveCPropertyImplementation( DOMSVGNumber value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGNumberList : IEquatable<DOMSVGNumberList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGNumberList;
		public static implicit operator DOMObject( DOMSVGNumberList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGNumberList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGNumberList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGNumberList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGNumberList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGNumberList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGNumberList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGNumberList value1, DOMSVGNumberList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGNumberList value1, DOMSVGNumberList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGNumberList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGNumberList alloc() {
			return new DOMSVGNumberList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject appendItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendItem_( Handle, CachedSelectors.appendItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject getItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getItem_( Handle, CachedSelectors.getItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initialize_( NObjective.RuntimeObject initialize ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initialize_( Handle, CachedSelectors.initialize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), initialize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject insertItemBefore_index_( NObjective.RuntimeObject before, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertItemBefore_index_( Handle, CachedSelectors.insertItemBefore_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), before, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint numberOfItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItems( Handle, CachedSelectors.numberOfItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject removeItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeItem_( Handle, CachedSelectors.removeItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replaceItem_index_( NObjective.RuntimeObject item, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replaceItem_index_( Handle, CachedSelectors.replaceItem_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), item, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public uint numberOfItems {
				get { return _handle.numberOfItems(); }
			}
			private readonly DOMSVGNumberList _handle;
			public ObjectiveCPropertyImplementation( DOMSVGNumberList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr appendItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initialize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject initialize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertItemBefore_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject before, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint numberOfItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replaceItem_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item, uint index );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendItem_ = "appendItem:";
			public static readonly Selector clear = "clear";
			public static readonly Selector getItem_ = "getItem:";
			public static readonly Selector initialize_ = "initialize:";
			public static readonly Selector insertItemBefore_index_ = "insertItemBefore:index:";
			public static readonly Selector numberOfItems = "numberOfItems";
			public static readonly Selector removeItem_ = "removeItem:";
			public static readonly Selector replaceItem_index_ = "replaceItem:index:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGColor ) )]
	public struct DOMSVGPaint : IEquatable<DOMSVGPaint> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPaint;
		public static implicit operator DOMSVGColor( DOMSVGPaint value ) {
			return new DOMSVGColor( value.Handle );
		}
		public static implicit operator DOMCSSValue( DOMSVGPaint value ) {
			return new DOMCSSValue( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPaint value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPaint value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPaint value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPaint value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPaint value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPaint?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPaint value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPaint value1, DOMSVGPaint value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPaint value1, DOMSVGPaint value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPaint( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPaint alloc() {
			return new DOMSVGPaint( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public ushort paintType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.paintType( Handle, CachedSelectors.paintType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setPaint_uri_rgbColor_iccColor_( ushort paint, NObjective.RuntimeObject uri, NObjective.RuntimeObject rgbColor, NObjective.RuntimeObject iccColor ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPaint_uri_rgbColor_iccColor_( Handle, CachedSelectors.setPaint_uri_rgbColor_iccColor_, out ___occuredException, sizeof( ushort ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), paint, uri, rgbColor, iccColor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUri_( NObjective.RuntimeObject uri ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUri_( Handle, CachedSelectors.setUri_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uri );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject uri() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uri( Handle, CachedSelectors.uri, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public ushort paintType {
				get { return _handle.paintType(); }
			}
			public NObjective.RuntimeObject uri {
				get { return _handle.uri(); }
			}
			private readonly DOMSVGPaint _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPaint value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort paintType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPaint_uri_rgbColor_iccColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort paint, NObjective.RuntimeObject uri, NObjective.RuntimeObject rgbColor, NObjective.RuntimeObject iccColor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUri_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uri );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uri( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector paintType = "paintType";
			public static readonly Selector setPaint_uri_rgbColor_iccColor_ = "setPaint:uri:rgbColor:iccColor:";
			public static readonly Selector setUri_ = "setUri:";
			public static readonly Selector uri = "uri";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGPathElement : IEquatable<DOMSVGPathElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathElement;
		public static implicit operator DOMSVGElement( DOMSVGPathElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGPathElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGPathElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathElement value1, DOMSVGPathElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathElement value1, DOMSVGPathElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathElement alloc() {
			return new DOMSVGPathElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animatedNormalizedPathSegList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animatedNormalizedPathSegList( Handle, CachedSelectors.animatedNormalizedPathSegList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject animatedPathSegList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animatedPathSegList( Handle, CachedSelectors.animatedPathSegList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegArcAbs_y_r1_r2_angle_largeArcFlag_sweepFlag_( float abs, float y, float r1, float r2, float angle, char largeArcFlag, char sweepFlag ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegArcAbs_y_r1_r2_angle_largeArcFlag_sweepFlag_( Handle, CachedSelectors.createSVGPathSegArcAbs_y_r1_r2_angle_largeArcFlag_sweepFlag_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( char ) + sizeof( char ), abs, y, r1, r2, angle, largeArcFlag, 
			sweepFlag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegArcRel_y_r1_r2_angle_largeArcFlag_sweepFlag_( float rel, float y, float r1, float r2, float angle, char largeArcFlag, char sweepFlag ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegArcRel_y_r1_r2_angle_largeArcFlag_sweepFlag_( Handle, CachedSelectors.createSVGPathSegArcRel_y_r1_r2_angle_largeArcFlag_sweepFlag_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( char ) + sizeof( char ), rel, y, r1, r2, angle, largeArcFlag, 
			sweepFlag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegClosePath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegClosePath( Handle, CachedSelectors.createSVGPathSegClosePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegCurvetoCubicAbs_y_x1_y1_x2_y2_( float abs, float y, float x1, float y1, float x2, float y2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegCurvetoCubicAbs_y_x1_y1_x2_y2_( Handle, CachedSelectors.createSVGPathSegCurvetoCubicAbs_y_x1_y1_x2_y2_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ), abs, y, x1, y1, x2, y2
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegCurvetoCubicRel_y_x1_y1_x2_y2_( float rel, float y, float x1, float y1, float x2, float y2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegCurvetoCubicRel_y_x1_y1_x2_y2_( Handle, CachedSelectors.createSVGPathSegCurvetoCubicRel_y_x1_y1_x2_y2_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ), rel, y, x1, y1, x2, y2
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegCurvetoCubicSmoothAbs_y_x2_y2_( float abs, float y, float x2, float y2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegCurvetoCubicSmoothAbs_y_x2_y2_( Handle, CachedSelectors.createSVGPathSegCurvetoCubicSmoothAbs_y_x2_y2_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ), abs, y, x2, y2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegCurvetoCubicSmoothRel_y_x2_y2_( float rel, float y, float x2, float y2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegCurvetoCubicSmoothRel_y_x2_y2_( Handle, CachedSelectors.createSVGPathSegCurvetoCubicSmoothRel_y_x2_y2_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ), rel, y, x2, y2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegCurvetoQuadraticAbs_y_x1_y1_( float abs, float y, float x1, float y1 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegCurvetoQuadraticAbs_y_x1_y1_( Handle, CachedSelectors.createSVGPathSegCurvetoQuadraticAbs_y_x1_y1_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ), abs, y, x1, y1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegCurvetoQuadraticRel_y_x1_y1_( float rel, float y, float x1, float y1 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegCurvetoQuadraticRel_y_x1_y1_( Handle, CachedSelectors.createSVGPathSegCurvetoQuadraticRel_y_x1_y1_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( float ) + sizeof( float ), rel, y, x1, y1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegCurvetoQuadraticSmoothAbs_y_( float abs, float y ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegCurvetoQuadraticSmoothAbs_y_( Handle, CachedSelectors.createSVGPathSegCurvetoQuadraticSmoothAbs_y_, out ___occuredException, sizeof( float ) + sizeof( float ), abs, y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegCurvetoQuadraticSmoothRel_y_( float rel, float y ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegCurvetoQuadraticSmoothRel_y_( Handle, CachedSelectors.createSVGPathSegCurvetoQuadraticSmoothRel_y_, out ___occuredException, sizeof( float ) + sizeof( float ), rel, y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegLinetoAbs_y_( float abs, float y ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegLinetoAbs_y_( Handle, CachedSelectors.createSVGPathSegLinetoAbs_y_, out ___occuredException, sizeof( float ) + sizeof( float ), abs, y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegLinetoHorizontalAbs_( float abs ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegLinetoHorizontalAbs_( Handle, CachedSelectors.createSVGPathSegLinetoHorizontalAbs_, out ___occuredException, sizeof( float ), abs );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegLinetoHorizontalRel_( float rel ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegLinetoHorizontalRel_( Handle, CachedSelectors.createSVGPathSegLinetoHorizontalRel_, out ___occuredException, sizeof( float ), rel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegLinetoRel_y_( float rel, float y ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegLinetoRel_y_( Handle, CachedSelectors.createSVGPathSegLinetoRel_y_, out ___occuredException, sizeof( float ) + sizeof( float ), rel, y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegLinetoVerticalAbs_( float abs ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegLinetoVerticalAbs_( Handle, CachedSelectors.createSVGPathSegLinetoVerticalAbs_, out ___occuredException, sizeof( float ), abs );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegLinetoVerticalRel_( float rel ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegLinetoVerticalRel_( Handle, CachedSelectors.createSVGPathSegLinetoVerticalRel_, out ___occuredException, sizeof( float ), rel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegMovetoAbs_y_( float abs, float y ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegMovetoAbs_y_( Handle, CachedSelectors.createSVGPathSegMovetoAbs_y_, out ___occuredException, sizeof( float ) + sizeof( float ), abs, y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPathSegMovetoRel_y_( float rel, float y ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPathSegMovetoRel_y_( Handle, CachedSelectors.createSVGPathSegMovetoRel_y_, out ___occuredException, sizeof( float ) + sizeof( float ), rel, y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint getPathSegAtLength_( float length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPathSegAtLength_( Handle, CachedSelectors.getPathSegAtLength_, out ___occuredException, sizeof( float ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject getPointAtLength_( float length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPointAtLength_( Handle, CachedSelectors.getPointAtLength_, out ___occuredException, sizeof( float ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float getTotalLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTotalLength( Handle, CachedSelectors.getTotalLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject normalizedPathSegList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.normalizedPathSegList( Handle, CachedSelectors.normalizedPathSegList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pathLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathLength( Handle, CachedSelectors.pathLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pathSegList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathSegList( Handle, CachedSelectors.pathSegList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animatedNormalizedPathSegList {
				get { return _handle.animatedNormalizedPathSegList(); }
			}
			public NObjective.RuntimeObject animatedPathSegList {
				get { return _handle.animatedPathSegList(); }
			}
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject normalizedPathSegList {
				get { return _handle.normalizedPathSegList(); }
			}
			public NObjective.RuntimeObject pathLength {
				get { return _handle.pathLength(); }
			}
			public NObjective.RuntimeObject pathSegList {
				get { return _handle.pathSegList(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGPathElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animatedNormalizedPathSegList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animatedPathSegList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegArcAbs_y_r1_r2_angle_largeArcFlag_sweepFlag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float abs, float y, float r1, float r2, float angle, char largeArcFlag, 
			char sweepFlag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegArcRel_y_r1_r2_angle_largeArcFlag_sweepFlag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rel, float y, float r1, float r2, float angle, char largeArcFlag, 
			char sweepFlag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegClosePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegCurvetoCubicAbs_y_x1_y1_x2_y2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float abs, float y, float x1, float y1, float x2, float y2
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegCurvetoCubicRel_y_x1_y1_x2_y2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rel, float y, float x1, float y1, float x2, float y2
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegCurvetoCubicSmoothAbs_y_x2_y2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float abs, float y, float x2, float y2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegCurvetoCubicSmoothRel_y_x2_y2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rel, float y, float x2, float y2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegCurvetoQuadraticAbs_y_x1_y1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float abs, float y, float x1, float y1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegCurvetoQuadraticRel_y_x1_y1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rel, float y, float x1, float y1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegCurvetoQuadraticSmoothAbs_y_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float abs, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegCurvetoQuadraticSmoothRel_y_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rel, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegLinetoAbs_y_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float abs, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegLinetoHorizontalAbs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float abs );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegLinetoHorizontalRel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegLinetoRel_y_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rel, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegLinetoVerticalAbs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float abs );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegLinetoVerticalRel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegMovetoAbs_y_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float abs, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPathSegMovetoRel_y_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rel, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint getPathSegAtLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPointAtLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float getTotalLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr normalizedPathSegList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathSegList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animatedNormalizedPathSegList = "animatedNormalizedPathSegList";
			public static readonly Selector animatedPathSegList = "animatedPathSegList";
			public static readonly Selector className = "className";
			public static readonly Selector createSVGPathSegArcAbs_y_r1_r2_angle_largeArcFlag_sweepFlag_ = "createSVGPathSegArcAbs:y:r1:r2:angle:largeArcFlag:sweepFlag:";
			public static readonly Selector createSVGPathSegArcRel_y_r1_r2_angle_largeArcFlag_sweepFlag_ = "createSVGPathSegArcRel:y:r1:r2:angle:largeArcFlag:sweepFlag:";
			public static readonly Selector createSVGPathSegClosePath = "createSVGPathSegClosePath";
			public static readonly Selector createSVGPathSegCurvetoCubicAbs_y_x1_y1_x2_y2_ = "createSVGPathSegCurvetoCubicAbs:y:x1:y1:x2:y2:";
			public static readonly Selector createSVGPathSegCurvetoCubicRel_y_x1_y1_x2_y2_ = "createSVGPathSegCurvetoCubicRel:y:x1:y1:x2:y2:";
			public static readonly Selector createSVGPathSegCurvetoCubicSmoothAbs_y_x2_y2_ = "createSVGPathSegCurvetoCubicSmoothAbs:y:x2:y2:";
			public static readonly Selector createSVGPathSegCurvetoCubicSmoothRel_y_x2_y2_ = "createSVGPathSegCurvetoCubicSmoothRel:y:x2:y2:";
			public static readonly Selector createSVGPathSegCurvetoQuadraticAbs_y_x1_y1_ = "createSVGPathSegCurvetoQuadraticAbs:y:x1:y1:";
			public static readonly Selector createSVGPathSegCurvetoQuadraticRel_y_x1_y1_ = "createSVGPathSegCurvetoQuadraticRel:y:x1:y1:";
			public static readonly Selector createSVGPathSegCurvetoQuadraticSmoothAbs_y_ = "createSVGPathSegCurvetoQuadraticSmoothAbs:y:";
			public static readonly Selector createSVGPathSegCurvetoQuadraticSmoothRel_y_ = "createSVGPathSegCurvetoQuadraticSmoothRel:y:";
			public static readonly Selector createSVGPathSegLinetoAbs_y_ = "createSVGPathSegLinetoAbs:y:";
			public static readonly Selector createSVGPathSegLinetoHorizontalAbs_ = "createSVGPathSegLinetoHorizontalAbs:";
			public static readonly Selector createSVGPathSegLinetoHorizontalRel_ = "createSVGPathSegLinetoHorizontalRel:";
			public static readonly Selector createSVGPathSegLinetoRel_y_ = "createSVGPathSegLinetoRel:y:";
			public static readonly Selector createSVGPathSegLinetoVerticalAbs_ = "createSVGPathSegLinetoVerticalAbs:";
			public static readonly Selector createSVGPathSegLinetoVerticalRel_ = "createSVGPathSegLinetoVerticalRel:";
			public static readonly Selector createSVGPathSegMovetoAbs_y_ = "createSVGPathSegMovetoAbs:y:";
			public static readonly Selector createSVGPathSegMovetoRel_y_ = "createSVGPathSegMovetoRel:y:";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPathSegAtLength_ = "getPathSegAtLength:";
			public static readonly Selector getPointAtLength_ = "getPointAtLength:";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTotalLength = "getTotalLength";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector normalizedPathSegList = "normalizedPathSegList";
			public static readonly Selector pathLength = "pathLength";
			public static readonly Selector pathSegList = "pathSegList";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGPathSeg : IEquatable<DOMSVGPathSeg> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSeg;
		public static implicit operator DOMObject( DOMSVGPathSeg value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSeg value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSeg value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSeg value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSeg value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSeg?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSeg value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSeg value1, DOMSVGPathSeg value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSeg value1, DOMSVGPathSeg value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSeg( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSeg alloc() {
			return new DOMSVGPathSeg( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public ushort pathSegType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathSegType( Handle, CachedSelectors.pathSegType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject pathSegTypeAsLetter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathSegTypeAsLetter( Handle, CachedSelectors.pathSegTypeAsLetter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public ushort pathSegType {
				get { return _handle.pathSegType(); }
			}
			public NObjective.RuntimeObject pathSegTypeAsLetter {
				get { return _handle.pathSegTypeAsLetter(); }
			}
			private readonly DOMSVGPathSeg _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSeg value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort pathSegType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathSegTypeAsLetter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector pathSegType = "pathSegType";
			public static readonly Selector pathSegTypeAsLetter = "pathSegTypeAsLetter";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegArcAbs : IEquatable<DOMSVGPathSegArcAbs> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegArcAbs;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegArcAbs value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegArcAbs value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegArcAbs value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegArcAbs value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegArcAbs value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegArcAbs value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegArcAbs?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegArcAbs value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegArcAbs value1, DOMSVGPathSegArcAbs value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegArcAbs value1, DOMSVGPathSegArcAbs value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegArcAbs( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegArcAbs alloc() {
			return new DOMSVGPathSegArcAbs( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public float angle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.angle( Handle, CachedSelectors.angle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char largeArcFlag() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.largeArcFlag( Handle, CachedSelectors.largeArcFlag, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float r1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.r1( Handle, CachedSelectors.r1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float r2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.r2( Handle, CachedSelectors.r2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAngle_( float angle ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAngle_( Handle, CachedSelectors.setAngle_, out ___occuredException, sizeof( float ), angle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLargeArcFlag_( char flag ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLargeArcFlag_( Handle, CachedSelectors.setLargeArcFlag_, out ___occuredException, sizeof( char ), flag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setR1_( float r1 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setR1_( Handle, CachedSelectors.setR1_, out ___occuredException, sizeof( float ), r1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setR2_( float r2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setR2_( Handle, CachedSelectors.setR2_, out ___occuredException, sizeof( float ), r2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSweepFlag_( char flag ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSweepFlag_( Handle, CachedSelectors.setSweepFlag_, out ___occuredException, sizeof( char ), flag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char sweepFlag() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sweepFlag( Handle, CachedSelectors.sweepFlag, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float angle {
				get { return _handle.angle(); }
			}
			public char largeArcFlag {
				get { return _handle.largeArcFlag(); }
			}
			public float r1 {
				get { return _handle.r1(); }
			}
			public float r2 {
				get { return _handle.r2(); }
			}
			public char sweepFlag {
				get { return _handle.sweepFlag(); }
			}
			public float x {
				get { return _handle.x(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPathSegArcAbs _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegArcAbs value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float angle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char largeArcFlag( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float r1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float r2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAngle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float angle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLargeArcFlag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char flag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setR1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float r1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setR2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float r2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSweepFlag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char flag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sweepFlag( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector angle = "angle";
			public static readonly Selector largeArcFlag = "largeArcFlag";
			public static readonly Selector r1 = "r1";
			public static readonly Selector r2 = "r2";
			public static readonly Selector setAngle_ = "setAngle:";
			public static readonly Selector setLargeArcFlag_ = "setLargeArcFlag:";
			public static readonly Selector setR1_ = "setR1:";
			public static readonly Selector setR2_ = "setR2:";
			public static readonly Selector setSweepFlag_ = "setSweepFlag:";
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector sweepFlag = "sweepFlag";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegArcRel : IEquatable<DOMSVGPathSegArcRel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegArcRel;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegArcRel value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegArcRel value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegArcRel value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegArcRel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegArcRel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegArcRel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegArcRel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegArcRel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegArcRel value1, DOMSVGPathSegArcRel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegArcRel value1, DOMSVGPathSegArcRel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegArcRel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegArcRel alloc() {
			return new DOMSVGPathSegArcRel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public float angle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.angle( Handle, CachedSelectors.angle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char largeArcFlag() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.largeArcFlag( Handle, CachedSelectors.largeArcFlag, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float r1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.r1( Handle, CachedSelectors.r1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float r2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.r2( Handle, CachedSelectors.r2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAngle_( float angle ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAngle_( Handle, CachedSelectors.setAngle_, out ___occuredException, sizeof( float ), angle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLargeArcFlag_( char flag ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLargeArcFlag_( Handle, CachedSelectors.setLargeArcFlag_, out ___occuredException, sizeof( char ), flag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setR1_( float r1 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setR1_( Handle, CachedSelectors.setR1_, out ___occuredException, sizeof( float ), r1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setR2_( float r2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setR2_( Handle, CachedSelectors.setR2_, out ___occuredException, sizeof( float ), r2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSweepFlag_( char flag ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSweepFlag_( Handle, CachedSelectors.setSweepFlag_, out ___occuredException, sizeof( char ), flag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char sweepFlag() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sweepFlag( Handle, CachedSelectors.sweepFlag, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float angle {
				get { return _handle.angle(); }
			}
			public char largeArcFlag {
				get { return _handle.largeArcFlag(); }
			}
			public float r1 {
				get { return _handle.r1(); }
			}
			public float r2 {
				get { return _handle.r2(); }
			}
			public char sweepFlag {
				get { return _handle.sweepFlag(); }
			}
			public float x {
				get { return _handle.x(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPathSegArcRel _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegArcRel value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float angle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char largeArcFlag( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float r1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float r2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAngle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float angle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLargeArcFlag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char flag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setR1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float r1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setR2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float r2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSweepFlag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char flag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sweepFlag( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector angle = "angle";
			public static readonly Selector largeArcFlag = "largeArcFlag";
			public static readonly Selector r1 = "r1";
			public static readonly Selector r2 = "r2";
			public static readonly Selector setAngle_ = "setAngle:";
			public static readonly Selector setLargeArcFlag_ = "setLargeArcFlag:";
			public static readonly Selector setR1_ = "setR1:";
			public static readonly Selector setR2_ = "setR2:";
			public static readonly Selector setSweepFlag_ = "setSweepFlag:";
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector sweepFlag = "sweepFlag";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegClosePath : IEquatable<DOMSVGPathSegClosePath> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegClosePath;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegClosePath value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegClosePath value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegClosePath value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegClosePath value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegClosePath value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegClosePath value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegClosePath?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegClosePath value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegClosePath value1, DOMSVGPathSegClosePath value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegClosePath value1, DOMSVGPathSegClosePath value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegClosePath( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegClosePath alloc() {
			return new DOMSVGPathSegClosePath( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegCurvetoCubicAbs : IEquatable<DOMSVGPathSegCurvetoCubicAbs> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegCurvetoCubicAbs;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegCurvetoCubicAbs value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegCurvetoCubicAbs value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegCurvetoCubicAbs value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegCurvetoCubicAbs value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegCurvetoCubicAbs value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegCurvetoCubicAbs value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegCurvetoCubicAbs?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegCurvetoCubicAbs value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegCurvetoCubicAbs value1, DOMSVGPathSegCurvetoCubicAbs value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegCurvetoCubicAbs value1, DOMSVGPathSegCurvetoCubicAbs value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegCurvetoCubicAbs( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegCurvetoCubicAbs alloc() {
			return new DOMSVGPathSegCurvetoCubicAbs( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX1_( float x1 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX1_( Handle, CachedSelectors.setX1_, out ___occuredException, sizeof( float ), x1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX2_( float x2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX2_( Handle, CachedSelectors.setX2_, out ___occuredException, sizeof( float ), x2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY1_( float y1 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY1_( Handle, CachedSelectors.setY1_, out ___occuredException, sizeof( float ), y1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY2_( float y2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY2_( Handle, CachedSelectors.setY2_, out ___occuredException, sizeof( float ), y2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x1( Handle, CachedSelectors.x1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x2( Handle, CachedSelectors.x2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y1( Handle, CachedSelectors.y1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y2( Handle, CachedSelectors.y2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float x1 {
				get { return _handle.x1(); }
			}
			public float x2 {
				get { return _handle.x2(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			public float y1 {
				get { return _handle.y1(); }
			}
			public float y2 {
				get { return _handle.y2(); }
			}
			private readonly DOMSVGPathSegCurvetoCubicAbs _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegCurvetoCubicAbs value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setX1_ = "setX1:";
			public static readonly Selector setX2_ = "setX2:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector setY1_ = "setY1:";
			public static readonly Selector setY2_ = "setY2:";
			public static readonly Selector x = "x";
			public static readonly Selector x1 = "x1";
			public static readonly Selector x2 = "x2";
			public static readonly Selector y = "y";
			public static readonly Selector y1 = "y1";
			public static readonly Selector y2 = "y2";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegCurvetoCubicRel : IEquatable<DOMSVGPathSegCurvetoCubicRel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegCurvetoCubicRel;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegCurvetoCubicRel value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegCurvetoCubicRel value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegCurvetoCubicRel value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegCurvetoCubicRel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegCurvetoCubicRel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegCurvetoCubicRel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegCurvetoCubicRel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegCurvetoCubicRel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegCurvetoCubicRel value1, DOMSVGPathSegCurvetoCubicRel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegCurvetoCubicRel value1, DOMSVGPathSegCurvetoCubicRel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegCurvetoCubicRel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegCurvetoCubicRel alloc() {
			return new DOMSVGPathSegCurvetoCubicRel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX1_( float x1 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX1_( Handle, CachedSelectors.setX1_, out ___occuredException, sizeof( float ), x1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX2_( float x2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX2_( Handle, CachedSelectors.setX2_, out ___occuredException, sizeof( float ), x2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY1_( float y1 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY1_( Handle, CachedSelectors.setY1_, out ___occuredException, sizeof( float ), y1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY2_( float y2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY2_( Handle, CachedSelectors.setY2_, out ___occuredException, sizeof( float ), y2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x1( Handle, CachedSelectors.x1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x2( Handle, CachedSelectors.x2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y1( Handle, CachedSelectors.y1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y2( Handle, CachedSelectors.y2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float x1 {
				get { return _handle.x1(); }
			}
			public float x2 {
				get { return _handle.x2(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			public float y1 {
				get { return _handle.y1(); }
			}
			public float y2 {
				get { return _handle.y2(); }
			}
			private readonly DOMSVGPathSegCurvetoCubicRel _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegCurvetoCubicRel value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setX1_ = "setX1:";
			public static readonly Selector setX2_ = "setX2:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector setY1_ = "setY1:";
			public static readonly Selector setY2_ = "setY2:";
			public static readonly Selector x = "x";
			public static readonly Selector x1 = "x1";
			public static readonly Selector x2 = "x2";
			public static readonly Selector y = "y";
			public static readonly Selector y1 = "y1";
			public static readonly Selector y2 = "y2";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegCurvetoCubicSmoothAbs : IEquatable<DOMSVGPathSegCurvetoCubicSmoothAbs> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegCurvetoCubicSmoothAbs;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegCurvetoCubicSmoothAbs value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegCurvetoCubicSmoothAbs value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegCurvetoCubicSmoothAbs value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegCurvetoCubicSmoothAbs value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegCurvetoCubicSmoothAbs value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegCurvetoCubicSmoothAbs value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegCurvetoCubicSmoothAbs?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegCurvetoCubicSmoothAbs value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegCurvetoCubicSmoothAbs value1, DOMSVGPathSegCurvetoCubicSmoothAbs value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegCurvetoCubicSmoothAbs value1, DOMSVGPathSegCurvetoCubicSmoothAbs value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegCurvetoCubicSmoothAbs( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegCurvetoCubicSmoothAbs alloc() {
			return new DOMSVGPathSegCurvetoCubicSmoothAbs( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX2_( float x2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX2_( Handle, CachedSelectors.setX2_, out ___occuredException, sizeof( float ), x2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY2_( float y2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY2_( Handle, CachedSelectors.setY2_, out ___occuredException, sizeof( float ), y2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x2( Handle, CachedSelectors.x2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y2( Handle, CachedSelectors.y2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float x2 {
				get { return _handle.x2(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			public float y2 {
				get { return _handle.y2(); }
			}
			private readonly DOMSVGPathSegCurvetoCubicSmoothAbs _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegCurvetoCubicSmoothAbs value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setX2_ = "setX2:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector setY2_ = "setY2:";
			public static readonly Selector x = "x";
			public static readonly Selector x2 = "x2";
			public static readonly Selector y = "y";
			public static readonly Selector y2 = "y2";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegCurvetoCubicSmoothRel : IEquatable<DOMSVGPathSegCurvetoCubicSmoothRel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegCurvetoCubicSmoothRel;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegCurvetoCubicSmoothRel value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegCurvetoCubicSmoothRel value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegCurvetoCubicSmoothRel value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegCurvetoCubicSmoothRel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegCurvetoCubicSmoothRel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegCurvetoCubicSmoothRel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegCurvetoCubicSmoothRel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegCurvetoCubicSmoothRel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegCurvetoCubicSmoothRel value1, DOMSVGPathSegCurvetoCubicSmoothRel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegCurvetoCubicSmoothRel value1, DOMSVGPathSegCurvetoCubicSmoothRel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegCurvetoCubicSmoothRel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegCurvetoCubicSmoothRel alloc() {
			return new DOMSVGPathSegCurvetoCubicSmoothRel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX2_( float x2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX2_( Handle, CachedSelectors.setX2_, out ___occuredException, sizeof( float ), x2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY2_( float y2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY2_( Handle, CachedSelectors.setY2_, out ___occuredException, sizeof( float ), y2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x2( Handle, CachedSelectors.x2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y2( Handle, CachedSelectors.y2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float x2 {
				get { return _handle.x2(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			public float y2 {
				get { return _handle.y2(); }
			}
			private readonly DOMSVGPathSegCurvetoCubicSmoothRel _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegCurvetoCubicSmoothRel value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setX2_ = "setX2:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector setY2_ = "setY2:";
			public static readonly Selector x = "x";
			public static readonly Selector x2 = "x2";
			public static readonly Selector y = "y";
			public static readonly Selector y2 = "y2";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegCurvetoQuadraticAbs : IEquatable<DOMSVGPathSegCurvetoQuadraticAbs> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegCurvetoQuadraticAbs;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegCurvetoQuadraticAbs value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegCurvetoQuadraticAbs value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegCurvetoQuadraticAbs value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegCurvetoQuadraticAbs value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegCurvetoQuadraticAbs value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegCurvetoQuadraticAbs value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegCurvetoQuadraticAbs?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegCurvetoQuadraticAbs value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegCurvetoQuadraticAbs value1, DOMSVGPathSegCurvetoQuadraticAbs value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegCurvetoQuadraticAbs value1, DOMSVGPathSegCurvetoQuadraticAbs value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegCurvetoQuadraticAbs( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegCurvetoQuadraticAbs alloc() {
			return new DOMSVGPathSegCurvetoQuadraticAbs( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX1_( float x1 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX1_( Handle, CachedSelectors.setX1_, out ___occuredException, sizeof( float ), x1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY1_( float y1 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY1_( Handle, CachedSelectors.setY1_, out ___occuredException, sizeof( float ), y1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x1( Handle, CachedSelectors.x1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y1( Handle, CachedSelectors.y1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float x1 {
				get { return _handle.x1(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			public float y1 {
				get { return _handle.y1(); }
			}
			private readonly DOMSVGPathSegCurvetoQuadraticAbs _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegCurvetoQuadraticAbs value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setX1_ = "setX1:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector setY1_ = "setY1:";
			public static readonly Selector x = "x";
			public static readonly Selector x1 = "x1";
			public static readonly Selector y = "y";
			public static readonly Selector y1 = "y1";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegCurvetoQuadraticRel : IEquatable<DOMSVGPathSegCurvetoQuadraticRel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegCurvetoQuadraticRel;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegCurvetoQuadraticRel value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegCurvetoQuadraticRel value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegCurvetoQuadraticRel value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegCurvetoQuadraticRel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegCurvetoQuadraticRel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegCurvetoQuadraticRel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegCurvetoQuadraticRel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegCurvetoQuadraticRel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegCurvetoQuadraticRel value1, DOMSVGPathSegCurvetoQuadraticRel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegCurvetoQuadraticRel value1, DOMSVGPathSegCurvetoQuadraticRel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegCurvetoQuadraticRel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegCurvetoQuadraticRel alloc() {
			return new DOMSVGPathSegCurvetoQuadraticRel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX1_( float x1 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX1_( Handle, CachedSelectors.setX1_, out ___occuredException, sizeof( float ), x1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY1_( float y1 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY1_( Handle, CachedSelectors.setY1_, out ___occuredException, sizeof( float ), y1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x1( Handle, CachedSelectors.x1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y1( Handle, CachedSelectors.y1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float x1 {
				get { return _handle.x1(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			public float y1 {
				get { return _handle.y1(); }
			}
			private readonly DOMSVGPathSegCurvetoQuadraticRel _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegCurvetoQuadraticRel value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setX1_ = "setX1:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector setY1_ = "setY1:";
			public static readonly Selector x = "x";
			public static readonly Selector x1 = "x1";
			public static readonly Selector y = "y";
			public static readonly Selector y1 = "y1";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegCurvetoQuadraticSmoothAbs : IEquatable<DOMSVGPathSegCurvetoQuadraticSmoothAbs> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegCurvetoQuadraticSmoothAbs;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegCurvetoQuadraticSmoothAbs value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegCurvetoQuadraticSmoothAbs value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegCurvetoQuadraticSmoothAbs value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegCurvetoQuadraticSmoothAbs value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegCurvetoQuadraticSmoothAbs value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegCurvetoQuadraticSmoothAbs value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegCurvetoQuadraticSmoothAbs?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegCurvetoQuadraticSmoothAbs value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegCurvetoQuadraticSmoothAbs value1, DOMSVGPathSegCurvetoQuadraticSmoothAbs value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegCurvetoQuadraticSmoothAbs value1, DOMSVGPathSegCurvetoQuadraticSmoothAbs value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegCurvetoQuadraticSmoothAbs( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegCurvetoQuadraticSmoothAbs alloc() {
			return new DOMSVGPathSegCurvetoQuadraticSmoothAbs( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPathSegCurvetoQuadraticSmoothAbs _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegCurvetoQuadraticSmoothAbs value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegCurvetoQuadraticSmoothRel : IEquatable<DOMSVGPathSegCurvetoQuadraticSmoothRel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegCurvetoQuadraticSmoothRel;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegCurvetoQuadraticSmoothRel value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegCurvetoQuadraticSmoothRel value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegCurvetoQuadraticSmoothRel value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegCurvetoQuadraticSmoothRel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegCurvetoQuadraticSmoothRel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegCurvetoQuadraticSmoothRel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegCurvetoQuadraticSmoothRel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegCurvetoQuadraticSmoothRel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegCurvetoQuadraticSmoothRel value1, DOMSVGPathSegCurvetoQuadraticSmoothRel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegCurvetoQuadraticSmoothRel value1, DOMSVGPathSegCurvetoQuadraticSmoothRel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegCurvetoQuadraticSmoothRel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegCurvetoQuadraticSmoothRel alloc() {
			return new DOMSVGPathSegCurvetoQuadraticSmoothRel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPathSegCurvetoQuadraticSmoothRel _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegCurvetoQuadraticSmoothRel value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegLinetoAbs : IEquatable<DOMSVGPathSegLinetoAbs> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegLinetoAbs;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegLinetoAbs value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegLinetoAbs value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegLinetoAbs value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegLinetoAbs value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegLinetoAbs value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegLinetoAbs value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegLinetoAbs?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegLinetoAbs value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegLinetoAbs value1, DOMSVGPathSegLinetoAbs value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegLinetoAbs value1, DOMSVGPathSegLinetoAbs value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegLinetoAbs( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegLinetoAbs alloc() {
			return new DOMSVGPathSegLinetoAbs( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPathSegLinetoAbs _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegLinetoAbs value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegLinetoHorizontalAbs : IEquatable<DOMSVGPathSegLinetoHorizontalAbs> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegLinetoHorizontalAbs;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegLinetoHorizontalAbs value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegLinetoHorizontalAbs value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegLinetoHorizontalAbs value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegLinetoHorizontalAbs value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegLinetoHorizontalAbs value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegLinetoHorizontalAbs value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegLinetoHorizontalAbs?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegLinetoHorizontalAbs value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegLinetoHorizontalAbs value1, DOMSVGPathSegLinetoHorizontalAbs value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegLinetoHorizontalAbs value1, DOMSVGPathSegLinetoHorizontalAbs value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegLinetoHorizontalAbs( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegLinetoHorizontalAbs alloc() {
			return new DOMSVGPathSegLinetoHorizontalAbs( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			private readonly DOMSVGPathSegLinetoHorizontalAbs _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegLinetoHorizontalAbs value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector x = "x";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegLinetoHorizontalRel : IEquatable<DOMSVGPathSegLinetoHorizontalRel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegLinetoHorizontalRel;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegLinetoHorizontalRel value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegLinetoHorizontalRel value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegLinetoHorizontalRel value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegLinetoHorizontalRel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegLinetoHorizontalRel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegLinetoHorizontalRel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegLinetoHorizontalRel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegLinetoHorizontalRel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegLinetoHorizontalRel value1, DOMSVGPathSegLinetoHorizontalRel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegLinetoHorizontalRel value1, DOMSVGPathSegLinetoHorizontalRel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegLinetoHorizontalRel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegLinetoHorizontalRel alloc() {
			return new DOMSVGPathSegLinetoHorizontalRel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			private readonly DOMSVGPathSegLinetoHorizontalRel _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegLinetoHorizontalRel value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector x = "x";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegLinetoRel : IEquatable<DOMSVGPathSegLinetoRel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegLinetoRel;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegLinetoRel value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegLinetoRel value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegLinetoRel value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegLinetoRel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegLinetoRel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegLinetoRel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegLinetoRel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegLinetoRel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegLinetoRel value1, DOMSVGPathSegLinetoRel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegLinetoRel value1, DOMSVGPathSegLinetoRel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegLinetoRel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegLinetoRel alloc() {
			return new DOMSVGPathSegLinetoRel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPathSegLinetoRel _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegLinetoRel value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegLinetoVerticalAbs : IEquatable<DOMSVGPathSegLinetoVerticalAbs> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegLinetoVerticalAbs;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegLinetoVerticalAbs value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegLinetoVerticalAbs value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegLinetoVerticalAbs value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegLinetoVerticalAbs value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegLinetoVerticalAbs value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegLinetoVerticalAbs value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegLinetoVerticalAbs?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegLinetoVerticalAbs value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegLinetoVerticalAbs value1, DOMSVGPathSegLinetoVerticalAbs value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegLinetoVerticalAbs value1, DOMSVGPathSegLinetoVerticalAbs value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegLinetoVerticalAbs( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegLinetoVerticalAbs alloc() {
			return new DOMSVGPathSegLinetoVerticalAbs( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPathSegLinetoVerticalAbs _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegLinetoVerticalAbs value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegLinetoVerticalRel : IEquatable<DOMSVGPathSegLinetoVerticalRel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegLinetoVerticalRel;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegLinetoVerticalRel value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegLinetoVerticalRel value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegLinetoVerticalRel value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegLinetoVerticalRel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegLinetoVerticalRel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegLinetoVerticalRel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegLinetoVerticalRel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegLinetoVerticalRel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegLinetoVerticalRel value1, DOMSVGPathSegLinetoVerticalRel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegLinetoVerticalRel value1, DOMSVGPathSegLinetoVerticalRel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegLinetoVerticalRel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegLinetoVerticalRel alloc() {
			return new DOMSVGPathSegLinetoVerticalRel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPathSegLinetoVerticalRel _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegLinetoVerticalRel value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGPathSegList : IEquatable<DOMSVGPathSegList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegList;
		public static implicit operator DOMObject( DOMSVGPathSegList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegList value1, DOMSVGPathSegList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegList value1, DOMSVGPathSegList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegList alloc() {
			return new DOMSVGPathSegList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject appendItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendItem_( Handle, CachedSelectors.appendItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject getItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getItem_( Handle, CachedSelectors.getItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initialize_( NObjective.RuntimeObject initialize ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initialize_( Handle, CachedSelectors.initialize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), initialize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject insertItemBefore_index_( NObjective.RuntimeObject before, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertItemBefore_index_( Handle, CachedSelectors.insertItemBefore_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), before, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint numberOfItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItems( Handle, CachedSelectors.numberOfItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject removeItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeItem_( Handle, CachedSelectors.removeItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replaceItem_index_( NObjective.RuntimeObject item, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replaceItem_index_( Handle, CachedSelectors.replaceItem_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), item, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public uint numberOfItems {
				get { return _handle.numberOfItems(); }
			}
			private readonly DOMSVGPathSegList _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr appendItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initialize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject initialize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertItemBefore_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject before, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint numberOfItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replaceItem_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item, uint index );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendItem_ = "appendItem:";
			public static readonly Selector clear = "clear";
			public static readonly Selector getItem_ = "getItem:";
			public static readonly Selector initialize_ = "initialize:";
			public static readonly Selector insertItemBefore_index_ = "insertItemBefore:index:";
			public static readonly Selector numberOfItems = "numberOfItems";
			public static readonly Selector removeItem_ = "removeItem:";
			public static readonly Selector replaceItem_index_ = "replaceItem:index:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegMovetoAbs : IEquatable<DOMSVGPathSegMovetoAbs> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegMovetoAbs;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegMovetoAbs value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegMovetoAbs value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegMovetoAbs value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegMovetoAbs value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegMovetoAbs value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegMovetoAbs value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegMovetoAbs?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegMovetoAbs value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegMovetoAbs value1, DOMSVGPathSegMovetoAbs value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegMovetoAbs value1, DOMSVGPathSegMovetoAbs value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegMovetoAbs( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegMovetoAbs alloc() {
			return new DOMSVGPathSegMovetoAbs( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPathSegMovetoAbs _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegMovetoAbs value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGPathSeg ) )]
	public struct DOMSVGPathSegMovetoRel : IEquatable<DOMSVGPathSegMovetoRel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPathSegMovetoRel;
		public static implicit operator DOMSVGPathSeg( DOMSVGPathSegMovetoRel value ) {
			return new DOMSVGPathSeg( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPathSegMovetoRel value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPathSegMovetoRel value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPathSegMovetoRel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPathSegMovetoRel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPathSegMovetoRel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPathSegMovetoRel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPathSegMovetoRel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPathSegMovetoRel value1, DOMSVGPathSegMovetoRel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPathSegMovetoRel value1, DOMSVGPathSegMovetoRel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPathSegMovetoRel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPathSegMovetoRel alloc() {
			return new DOMSVGPathSegMovetoRel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPathSegMovetoRel _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPathSegMovetoRel value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGPatternElement : IEquatable<DOMSVGPatternElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPatternElement;
		public static implicit operator DOMSVGElement( DOMSVGPatternElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGPatternElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGPatternElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPatternElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPatternElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPatternElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPatternElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPatternElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPatternElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPatternElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPatternElement value1, DOMSVGPatternElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPatternElement value1, DOMSVGPatternElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPatternElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPatternElement alloc() {
			return new DOMSVGPatternElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject patternContentUnits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.patternContentUnits( Handle, CachedSelectors.patternContentUnits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject patternTransform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.patternTransform( Handle, CachedSelectors.patternTransform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject patternUnits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.patternUnits( Handle, CachedSelectors.patternUnits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject preserveAspectRatio() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preserveAspectRatio( Handle, CachedSelectors.preserveAspectRatio, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject viewBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewBox( Handle, CachedSelectors.viewBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject patternContentUnits {
				get { return _handle.patternContentUnits(); }
			}
			public NObjective.RuntimeObject patternTransform {
				get { return _handle.patternTransform(); }
			}
			public NObjective.RuntimeObject patternUnits {
				get { return _handle.patternUnits(); }
			}
			public NObjective.RuntimeObject preserveAspectRatio {
				get { return _handle.preserveAspectRatio(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject viewBox {
				get { return _handle.viewBox(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			public NObjective.RuntimeObject x {
				get { return _handle.x(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			public NObjective.RuntimeObject y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPatternElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPatternElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr patternContentUnits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr patternTransform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr patternUnits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preserveAspectRatio( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr viewBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector height = "height";
			public static readonly Selector href = "href";
			public static readonly Selector patternContentUnits = "patternContentUnits";
			public static readonly Selector patternTransform = "patternTransform";
			public static readonly Selector patternUnits = "patternUnits";
			public static readonly Selector preserveAspectRatio = "preserveAspectRatio";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector viewBox = "viewBox";
			public static readonly Selector width = "width";
			public static readonly Selector x = "x";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGPoint : IEquatable<DOMSVGPoint> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPoint;
		public static implicit operator DOMObject( DOMSVGPoint value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPoint value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPoint value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPoint value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPoint value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPoint?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPoint value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPoint value1, DOMSVGPoint value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPoint value1, DOMSVGPoint value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPoint( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPoint alloc() {
			return new DOMSVGPoint( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject matrixTransform_( NObjective.RuntimeObject transform ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matrixTransform_( Handle, CachedSelectors.matrixTransform_, out ___occuredException, sizeof( NObjective.RuntimeObject ), transform );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float x {
				get { return _handle.x(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGPoint _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPoint value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr matrixTransform_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject transform );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector matrixTransform_ = "matrixTransform:";
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGPointList : IEquatable<DOMSVGPointList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPointList;
		public static implicit operator DOMObject( DOMSVGPointList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPointList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPointList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPointList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPointList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPointList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPointList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPointList value1, DOMSVGPointList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPointList value1, DOMSVGPointList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPointList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPointList alloc() {
			return new DOMSVGPointList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject appendItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendItem_( Handle, CachedSelectors.appendItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject getItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getItem_( Handle, CachedSelectors.getItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initialize_( NObjective.RuntimeObject initialize ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initialize_( Handle, CachedSelectors.initialize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), initialize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject insertItemBefore_index_( NObjective.RuntimeObject before, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertItemBefore_index_( Handle, CachedSelectors.insertItemBefore_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), before, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint numberOfItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItems( Handle, CachedSelectors.numberOfItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject removeItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeItem_( Handle, CachedSelectors.removeItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replaceItem_index_( NObjective.RuntimeObject item, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replaceItem_index_( Handle, CachedSelectors.replaceItem_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), item, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public uint numberOfItems {
				get { return _handle.numberOfItems(); }
			}
			private readonly DOMSVGPointList _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPointList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr appendItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initialize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject initialize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertItemBefore_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject before, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint numberOfItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replaceItem_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item, uint index );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendItem_ = "appendItem:";
			public static readonly Selector clear = "clear";
			public static readonly Selector getItem_ = "getItem:";
			public static readonly Selector initialize_ = "initialize:";
			public static readonly Selector insertItemBefore_index_ = "insertItemBefore:index:";
			public static readonly Selector numberOfItems = "numberOfItems";
			public static readonly Selector removeItem_ = "removeItem:";
			public static readonly Selector replaceItem_index_ = "replaceItem:index:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGPolygonElement : IEquatable<DOMSVGPolygonElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPolygonElement;
		public static implicit operator DOMSVGElement( DOMSVGPolygonElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGPolygonElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGPolygonElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPolygonElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPolygonElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPolygonElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPolygonElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPolygonElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPolygonElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPolygonElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPolygonElement value1, DOMSVGPolygonElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPolygonElement value1, DOMSVGPolygonElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPolygonElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPolygonElement alloc() {
			return new DOMSVGPolygonElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animatedPoints() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animatedPoints( Handle, CachedSelectors.animatedPoints, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject points() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.points( Handle, CachedSelectors.points, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animatedPoints {
				get { return _handle.animatedPoints(); }
			}
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject points {
				get { return _handle.points(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGPolygonElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPolygonElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animatedPoints( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr points( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animatedPoints = "animatedPoints";
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector points = "points";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGPolylineElement : IEquatable<DOMSVGPolylineElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPolylineElement;
		public static implicit operator DOMSVGElement( DOMSVGPolylineElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGPolylineElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGPolylineElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGPolylineElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPolylineElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPolylineElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPolylineElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPolylineElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPolylineElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPolylineElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPolylineElement value1, DOMSVGPolylineElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPolylineElement value1, DOMSVGPolylineElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPolylineElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPolylineElement alloc() {
			return new DOMSVGPolylineElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animatedPoints() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animatedPoints( Handle, CachedSelectors.animatedPoints, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject points() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.points( Handle, CachedSelectors.points, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animatedPoints {
				get { return _handle.animatedPoints(); }
			}
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject points {
				get { return _handle.points(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGPolylineElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPolylineElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animatedPoints( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr points( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animatedPoints = "animatedPoints";
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector points = "points";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGPreserveAspectRatio : IEquatable<DOMSVGPreserveAspectRatio> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGPreserveAspectRatio;
		public static implicit operator DOMObject( DOMSVGPreserveAspectRatio value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGPreserveAspectRatio value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGPreserveAspectRatio value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGPreserveAspectRatio value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGPreserveAspectRatio value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGPreserveAspectRatio?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGPreserveAspectRatio value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGPreserveAspectRatio value1, DOMSVGPreserveAspectRatio value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGPreserveAspectRatio value1, DOMSVGPreserveAspectRatio value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGPreserveAspectRatio( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGPreserveAspectRatio alloc() {
			return new DOMSVGPreserveAspectRatio( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public ushort align() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.align( Handle, CachedSelectors.align, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public ushort meetOrSlice() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.meetOrSlice( Handle, CachedSelectors.meetOrSlice, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAlign_( ushort align ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlign_( Handle, CachedSelectors.setAlign_, out ___occuredException, sizeof( ushort ), align );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMeetOrSlice_( ushort slice ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMeetOrSlice_( Handle, CachedSelectors.setMeetOrSlice_, out ___occuredException, sizeof( ushort ), slice );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public ushort align {
				get { return _handle.align(); }
			}
			public ushort meetOrSlice {
				get { return _handle.meetOrSlice(); }
			}
			private readonly DOMSVGPreserveAspectRatio _handle;
			public ObjectiveCPropertyImplementation( DOMSVGPreserveAspectRatio value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort align( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort meetOrSlice( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort align );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMeetOrSlice_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort slice );
		}
		static internal class CachedSelectors {
			public static readonly Selector align = "align";
			public static readonly Selector meetOrSlice = "meetOrSlice";
			public static readonly Selector setAlign_ = "setAlign:";
			public static readonly Selector setMeetOrSlice_ = "setMeetOrSlice:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGGradientElement ) )]
	public struct DOMSVGRadialGradientElement : IEquatable<DOMSVGRadialGradientElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGRadialGradientElement;
		public static implicit operator DOMSVGGradientElement( DOMSVGRadialGradientElement value ) {
			return new DOMSVGGradientElement( value.Handle );
		}
		public static implicit operator DOMSVGElement( DOMSVGRadialGradientElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGRadialGradientElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGRadialGradientElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGRadialGradientElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGRadialGradientElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGRadialGradientElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGRadialGradientElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGRadialGradientElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGRadialGradientElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGRadialGradientElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGRadialGradientElement value1, DOMSVGRadialGradientElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGRadialGradientElement value1, DOMSVGRadialGradientElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGRadialGradientElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGRadialGradientElement alloc() {
			return new DOMSVGRadialGradientElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cx() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cx( Handle, CachedSelectors.cx, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cy( Handle, CachedSelectors.cy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject fx() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fx( Handle, CachedSelectors.fx, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject fy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fy( Handle, CachedSelectors.fy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject r() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.r( Handle, CachedSelectors.r, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject cx {
				get { return _handle.cx(); }
			}
			public NObjective.RuntimeObject cy {
				get { return _handle.cy(); }
			}
			public NObjective.RuntimeObject fx {
				get { return _handle.fx(); }
			}
			public NObjective.RuntimeObject fy {
				get { return _handle.fy(); }
			}
			public NObjective.RuntimeObject r {
				get { return _handle.r(); }
			}
			private readonly DOMSVGRadialGradientElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGRadialGradientElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cx( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fx( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr r( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cx = "cx";
			public static readonly Selector cy = "cy";
			public static readonly Selector fx = "fx";
			public static readonly Selector fy = "fy";
			public static readonly Selector r = "r";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGRect : IEquatable<DOMSVGRect> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGRect;
		public static implicit operator DOMObject( DOMSVGRect value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGRect value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGRect value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGRect value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGRect value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGRect?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGRect value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGRect value1, DOMSVGRect value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGRect value1, DOMSVGRect value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGRect( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGRect alloc() {
			return new DOMSVGRect( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public float height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setHeight_( float height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHeight_( Handle, CachedSelectors.setHeight_, out ___occuredException, sizeof( float ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidth_( float width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidth_( Handle, CachedSelectors.setWidth_, out ___occuredException, sizeof( float ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setX_( Handle, CachedSelectors.setX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setY_( Handle, CachedSelectors.setY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float height {
				get { return _handle.height(); }
			}
			public float width {
				get { return _handle.width(); }
			}
			public float x {
				get { return _handle.x(); }
			}
			public float y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGRect _handle;
			public ObjectiveCPropertyImplementation( DOMSVGRect value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector height = "height";
			public static readonly Selector setHeight_ = "setHeight:";
			public static readonly Selector setWidth_ = "setWidth:";
			public static readonly Selector setX_ = "setX:";
			public static readonly Selector setY_ = "setY:";
			public static readonly Selector width = "width";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGRectElement : IEquatable<DOMSVGRectElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGRectElement;
		public static implicit operator DOMSVGElement( DOMSVGRectElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGRectElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGRectElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGRectElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGRectElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGRectElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGRectElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGRectElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGRectElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGRectElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGRectElement value1, DOMSVGRectElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGRectElement value1, DOMSVGRectElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGRectElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGRectElement alloc() {
			return new DOMSVGRectElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rx() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rx( Handle, CachedSelectors.rx, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject ry() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ry( Handle, CachedSelectors.ry, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject rx {
				get { return _handle.rx(); }
			}
			public NObjective.RuntimeObject ry {
				get { return _handle.ry(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			public NObjective.RuntimeObject x {
				get { return _handle.x(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			public NObjective.RuntimeObject y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGRectElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGRectElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rx( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ry( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector height = "height";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector rx = "rx";
			public static readonly Selector ry = "ry";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector width = "width";
			public static readonly Selector x = "x";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGRenderingIntent : IEquatable<DOMSVGRenderingIntent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGRenderingIntent;
		public static implicit operator DOMObject( DOMSVGRenderingIntent value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGRenderingIntent value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGRenderingIntent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGRenderingIntent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGRenderingIntent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGRenderingIntent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGRenderingIntent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGRenderingIntent value1, DOMSVGRenderingIntent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGRenderingIntent value1, DOMSVGRenderingIntent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGRenderingIntent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGRenderingIntent alloc() {
			return new DOMSVGRenderingIntent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGScriptElement : IEquatable<DOMSVGScriptElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGScriptElement;
		public static implicit operator DOMSVGElement( DOMSVGScriptElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGScriptElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGScriptElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGScriptElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGScriptElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGScriptElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGScriptElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGScriptElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGScriptElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGScriptElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGScriptElement value1, DOMSVGScriptElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGScriptElement value1, DOMSVGScriptElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGScriptElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGScriptElement alloc() {
			return new DOMSVGScriptElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			private readonly DOMSVGScriptElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGScriptElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector href = "href";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGAnimationElement ) )]
	public struct DOMSVGSetElement : IEquatable<DOMSVGSetElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGSetElement;
		public static implicit operator DOMSVGAnimationElement( DOMSVGSetElement value ) {
			return new DOMSVGAnimationElement( value.Handle );
		}
		public static implicit operator DOMSVGElement( DOMSVGSetElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGSetElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGSetElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGSetElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGSetElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGSetElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGSetElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGSetElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGSetElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGSetElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGSetElement value1, DOMSVGSetElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGSetElement value1, DOMSVGSetElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGSetElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGSetElement alloc() {
			return new DOMSVGSetElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGStopElement : IEquatable<DOMSVGStopElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGStopElement;
		public static implicit operator DOMSVGElement( DOMSVGStopElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGStopElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGStopElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGStopElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGStopElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGStopElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGStopElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGStopElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGStopElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGStopElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGStopElement value1, DOMSVGStopElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGStopElement value1, DOMSVGStopElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGStopElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGStopElement alloc() {
			return new DOMSVGStopElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject offset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offset( Handle, CachedSelectors.offset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject offset {
				get { return _handle.offset(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			private readonly DOMSVGStopElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGStopElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr offset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector offset = "offset";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGStringList : IEquatable<DOMSVGStringList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGStringList;
		public static implicit operator DOMObject( DOMSVGStringList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGStringList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGStringList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGStringList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGStringList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGStringList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGStringList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGStringList value1, DOMSVGStringList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGStringList value1, DOMSVGStringList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGStringList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGStringList alloc() {
			return new DOMSVGStringList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject appendItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendItem_( Handle, CachedSelectors.appendItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject getItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getItem_( Handle, CachedSelectors.getItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initialize_( NObjective.RuntimeObject initialize ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initialize_( Handle, CachedSelectors.initialize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), initialize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject insertItemBefore_index_( NObjective.RuntimeObject before, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertItemBefore_index_( Handle, CachedSelectors.insertItemBefore_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), before, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint numberOfItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItems( Handle, CachedSelectors.numberOfItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject removeItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeItem_( Handle, CachedSelectors.removeItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replaceItem_index_( NObjective.RuntimeObject item, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replaceItem_index_( Handle, CachedSelectors.replaceItem_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), item, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public uint numberOfItems {
				get { return _handle.numberOfItems(); }
			}
			private readonly DOMSVGStringList _handle;
			public ObjectiveCPropertyImplementation( DOMSVGStringList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr appendItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initialize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject initialize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertItemBefore_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject before, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint numberOfItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replaceItem_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item, uint index );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendItem_ = "appendItem:";
			public static readonly Selector clear = "clear";
			public static readonly Selector getItem_ = "getItem:";
			public static readonly Selector initialize_ = "initialize:";
			public static readonly Selector insertItemBefore_index_ = "insertItemBefore:index:";
			public static readonly Selector numberOfItems = "numberOfItems";
			public static readonly Selector removeItem_ = "removeItem:";
			public static readonly Selector replaceItem_index_ = "replaceItem:index:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGStyleElement : IEquatable<DOMSVGStyleElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGStyleElement;
		public static implicit operator DOMSVGElement( DOMSVGStyleElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGStyleElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGStyleElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGStyleElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGStyleElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGStyleElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGStyleElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGStyleElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGStyleElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGStyleElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGStyleElement value1, DOMSVGStyleElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGStyleElement value1, DOMSVGStyleElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGStyleElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGStyleElement alloc() {
			return new DOMSVGStyleElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject media() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.media( Handle, CachedSelectors.media, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setMedia_( NObjective.RuntimeObject media ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMedia_( Handle, CachedSelectors.setMedia_, out ___occuredException, sizeof( NObjective.RuntimeObject ), media );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitle_( Handle, CachedSelectors.setTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject media {
				get { return _handle.media(); }
			}
			public NObjective.RuntimeObject title {
				get { return _handle.title(); }
			}
			public NObjective.RuntimeObject type {
				get { return _handle.type(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGStyleElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGStyleElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr media( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMedia_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject media );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector media = "media";
			public static readonly Selector setMedia_ = "setMedia:";
			public static readonly Selector setTitle_ = "setTitle:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector title = "title";
			public static readonly Selector type = "type";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGSVGElement : IEquatable<DOMSVGSVGElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGSVGElement;
		public static implicit operator DOMSVGElement( DOMSVGSVGElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGSVGElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGSVGElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGSVGElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGSVGElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGSVGElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGSVGElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGSVGElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGSVGElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGSVGElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGSVGElement value1, DOMSVGSVGElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGSVGElement value1, DOMSVGSVGElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGSVGElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGSVGElement alloc() {
			return new DOMSVGSVGElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char animationsPaused() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animationsPaused( Handle, CachedSelectors.animationsPaused, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char checkEnclosure_rect_( NObjective.RuntimeObject enclosure, NObjective.RuntimeObject rect ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.checkEnclosure_rect_( Handle, CachedSelectors.checkEnclosure_rect_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), enclosure, rect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char checkIntersection_rect_( NObjective.RuntimeObject intersection, NObjective.RuntimeObject rect ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.checkIntersection_rect_( Handle, CachedSelectors.checkIntersection_rect_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), intersection, rect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contentScriptType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentScriptType( Handle, CachedSelectors.contentScriptType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contentStyleType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentStyleType( Handle, CachedSelectors.contentStyleType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGAngle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGAngle( Handle, CachedSelectors.createSVGAngle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGLength( Handle, CachedSelectors.createSVGLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGMatrix() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGMatrix( Handle, CachedSelectors.createSVGMatrix, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGNumber( Handle, CachedSelectors.createSVGNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGPoint() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGPoint( Handle, CachedSelectors.createSVGPoint, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGRect() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGRect( Handle, CachedSelectors.createSVGRect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGTransform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGTransform( Handle, CachedSelectors.createSVGTransform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGTransformFromMatrix_( NObjective.RuntimeObject matrix ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGTransformFromMatrix_( Handle, CachedSelectors.createSVGTransformFromMatrix_, out ___occuredException, sizeof( NObjective.RuntimeObject ), matrix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float currentScale() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentScale( Handle, CachedSelectors.currentScale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject currentTranslate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentTranslate( Handle, CachedSelectors.currentTranslate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deselectAll() {
			RuntimeObject ___occuredException;
			NativeMethods.deselectAll( Handle, CachedSelectors.deselectAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void forceRedraw() {
			RuntimeObject ___occuredException;
			NativeMethods.forceRedraw( Handle, CachedSelectors.forceRedraw, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float getCurrentTime() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCurrentTime( Handle, CachedSelectors.getCurrentTime, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject getEnclosureList_referenceElement_( NObjective.RuntimeObject list, NObjective.RuntimeObject referenceElement ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getEnclosureList_referenceElement_( Handle, CachedSelectors.getEnclosureList_referenceElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), list, referenceElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getIntersectionList_referenceElement_( NObjective.RuntimeObject list, NObjective.RuntimeObject referenceElement ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getIntersectionList_referenceElement_( Handle, CachedSelectors.getIntersectionList_referenceElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), list, referenceElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void pauseAnimations() {
			RuntimeObject ___occuredException;
			NativeMethods.pauseAnimations( Handle, CachedSelectors.pauseAnimations, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float pixelUnitToMillimeterX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pixelUnitToMillimeterX( Handle, CachedSelectors.pixelUnitToMillimeterX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float pixelUnitToMillimeterY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pixelUnitToMillimeterY( Handle, CachedSelectors.pixelUnitToMillimeterY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject preserveAspectRatio() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preserveAspectRatio( Handle, CachedSelectors.preserveAspectRatio, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float screenPixelToMillimeterX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.screenPixelToMillimeterX( Handle, CachedSelectors.screenPixelToMillimeterX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float screenPixelToMillimeterY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.screenPixelToMillimeterY( Handle, CachedSelectors.screenPixelToMillimeterY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setContentScriptType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContentScriptType_( Handle, CachedSelectors.setContentScriptType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setContentStyleType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContentStyleType_( Handle, CachedSelectors.setContentStyleType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCurrentScale_( float scale ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCurrentScale_( Handle, CachedSelectors.setCurrentScale_, out ___occuredException, sizeof( float ), scale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCurrentTime_( float time ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCurrentTime_( Handle, CachedSelectors.setCurrentTime_, out ___occuredException, sizeof( float ), time );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUseCurrentView_( char view ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUseCurrentView_( Handle, CachedSelectors.setUseCurrentView_, out ___occuredException, sizeof( char ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setZoomAndPan_( ushort pan ) {
			RuntimeObject ___occuredException;
			NativeMethods.setZoomAndPan_( Handle, CachedSelectors.setZoomAndPan_, out ___occuredException, sizeof( ushort ), pan );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint suspendRedraw_( uint redraw ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suspendRedraw_( Handle, CachedSelectors.suspendRedraw_, out ___occuredException, sizeof( uint ), redraw );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void unpauseAnimations() {
			RuntimeObject ___occuredException;
			NativeMethods.unpauseAnimations( Handle, CachedSelectors.unpauseAnimations, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unsuspendRedraw_( uint redraw ) {
			RuntimeObject ___occuredException;
			NativeMethods.unsuspendRedraw_( Handle, CachedSelectors.unsuspendRedraw_, out ___occuredException, sizeof( uint ), redraw );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unsuspendRedrawAll() {
			RuntimeObject ___occuredException;
			NativeMethods.unsuspendRedrawAll( Handle, CachedSelectors.unsuspendRedrawAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char useCurrentView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useCurrentView( Handle, CachedSelectors.useCurrentView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject viewBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewBox( Handle, CachedSelectors.viewBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject viewport() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewport( Handle, CachedSelectors.viewport, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ushort zoomAndPan() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.zoomAndPan( Handle, CachedSelectors.zoomAndPan, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject contentScriptType {
				get { return _handle.contentScriptType(); }
			}
			public NObjective.RuntimeObject contentStyleType {
				get { return _handle.contentStyleType(); }
			}
			public float currentScale {
				get { return _handle.currentScale(); }
			}
			public NObjective.RuntimeObject currentTranslate {
				get { return _handle.currentTranslate(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public float pixelUnitToMillimeterX {
				get { return _handle.pixelUnitToMillimeterX(); }
			}
			public float pixelUnitToMillimeterY {
				get { return _handle.pixelUnitToMillimeterY(); }
			}
			public NObjective.RuntimeObject preserveAspectRatio {
				get { return _handle.preserveAspectRatio(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public float screenPixelToMillimeterX {
				get { return _handle.screenPixelToMillimeterX(); }
			}
			public float screenPixelToMillimeterY {
				get { return _handle.screenPixelToMillimeterY(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public char useCurrentView {
				get { return _handle.useCurrentView(); }
			}
			public NObjective.RuntimeObject viewBox {
				get { return _handle.viewBox(); }
			}
			public NObjective.RuntimeObject viewport {
				get { return _handle.viewport(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			public NObjective.RuntimeObject x {
				get { return _handle.x(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			public NObjective.RuntimeObject y {
				get { return _handle.y(); }
			}
			public ushort zoomAndPan {
				get { return _handle.zoomAndPan(); }
			}
			private readonly DOMSVGSVGElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGSVGElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char animationsPaused( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char checkEnclosure_rect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject enclosure, NObjective.RuntimeObject rect );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char checkIntersection_rect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject intersection, NObjective.RuntimeObject rect );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentScriptType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentStyleType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGAngle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGMatrix( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGPoint( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGRect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGTransform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGTransformFromMatrix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matrix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float currentScale( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentTranslate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void forceRedraw( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float getCurrentTime( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getEnclosureList_referenceElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list, NObjective.RuntimeObject referenceElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getIntersectionList_referenceElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list, NObjective.RuntimeObject referenceElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pauseAnimations( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float pixelUnitToMillimeterX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float pixelUnitToMillimeterY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preserveAspectRatio( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float screenPixelToMillimeterX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float screenPixelToMillimeterY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContentScriptType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContentStyleType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrentScale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float scale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrentTime_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float time );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUseCurrentView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setZoomAndPan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort pan );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint suspendRedraw_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint redraw );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unpauseAnimations( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unsuspendRedraw_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint redraw );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unsuspendRedrawAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char useCurrentView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr viewBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr viewport( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort zoomAndPan( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animationsPaused = "animationsPaused";
			public static readonly Selector checkEnclosure_rect_ = "checkEnclosure:rect:";
			public static readonly Selector checkIntersection_rect_ = "checkIntersection:rect:";
			public static readonly Selector className = "className";
			public static readonly Selector contentScriptType = "contentScriptType";
			public static readonly Selector contentStyleType = "contentStyleType";
			public static readonly Selector createSVGAngle = "createSVGAngle";
			public static readonly Selector createSVGLength = "createSVGLength";
			public static readonly Selector createSVGMatrix = "createSVGMatrix";
			public static readonly Selector createSVGNumber = "createSVGNumber";
			public static readonly Selector createSVGPoint = "createSVGPoint";
			public static readonly Selector createSVGRect = "createSVGRect";
			public static readonly Selector createSVGTransform = "createSVGTransform";
			public static readonly Selector createSVGTransformFromMatrix_ = "createSVGTransformFromMatrix:";
			public static readonly Selector currentScale = "currentScale";
			public static readonly Selector currentTranslate = "currentTranslate";
			public static readonly Selector deselectAll = "deselectAll";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector forceRedraw = "forceRedraw";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getCurrentTime = "getCurrentTime";
			public static readonly Selector getEnclosureList_referenceElement_ = "getEnclosureList:referenceElement:";
			public static readonly Selector getIntersectionList_referenceElement_ = "getIntersectionList:referenceElement:";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector height = "height";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector pauseAnimations = "pauseAnimations";
			public static readonly Selector pixelUnitToMillimeterX = "pixelUnitToMillimeterX";
			public static readonly Selector pixelUnitToMillimeterY = "pixelUnitToMillimeterY";
			public static readonly Selector preserveAspectRatio = "preserveAspectRatio";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector screenPixelToMillimeterX = "screenPixelToMillimeterX";
			public static readonly Selector screenPixelToMillimeterY = "screenPixelToMillimeterY";
			public static readonly Selector setContentScriptType_ = "setContentScriptType:";
			public static readonly Selector setContentStyleType_ = "setContentStyleType:";
			public static readonly Selector setCurrentScale_ = "setCurrentScale:";
			public static readonly Selector setCurrentTime_ = "setCurrentTime:";
			public static readonly Selector setUseCurrentView_ = "setUseCurrentView:";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector setZoomAndPan_ = "setZoomAndPan:";
			public static readonly Selector suspendRedraw_ = "suspendRedraw:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector unpauseAnimations = "unpauseAnimations";
			public static readonly Selector unsuspendRedraw_ = "unsuspendRedraw:";
			public static readonly Selector unsuspendRedrawAll = "unsuspendRedrawAll";
			public static readonly Selector useCurrentView = "useCurrentView";
			public static readonly Selector viewBox = "viewBox";
			public static readonly Selector viewport = "viewport";
			public static readonly Selector width = "width";
			public static readonly Selector x = "x";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
			public static readonly Selector y = "y";
			public static readonly Selector zoomAndPan = "zoomAndPan";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGSwitchElement : IEquatable<DOMSVGSwitchElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGSwitchElement;
		public static implicit operator DOMSVGElement( DOMSVGSwitchElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGSwitchElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGSwitchElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGSwitchElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGSwitchElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGSwitchElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGSwitchElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGSwitchElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGSwitchElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGSwitchElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGSwitchElement value1, DOMSVGSwitchElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGSwitchElement value1, DOMSVGSwitchElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGSwitchElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGSwitchElement alloc() {
			return new DOMSVGSwitchElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGSwitchElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGSwitchElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGSymbolElement : IEquatable<DOMSVGSymbolElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGSymbolElement;
		public static implicit operator DOMSVGElement( DOMSVGSymbolElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGSymbolElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGSymbolElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGSymbolElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGSymbolElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGSymbolElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGSymbolElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGSymbolElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGSymbolElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGSymbolElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGSymbolElement value1, DOMSVGSymbolElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGSymbolElement value1, DOMSVGSymbolElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGSymbolElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGSymbolElement alloc() {
			return new DOMSVGSymbolElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject preserveAspectRatio() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preserveAspectRatio( Handle, CachedSelectors.preserveAspectRatio, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject viewBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewBox( Handle, CachedSelectors.viewBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject preserveAspectRatio {
				get { return _handle.preserveAspectRatio(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject viewBox {
				get { return _handle.viewBox(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGSymbolElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGSymbolElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preserveAspectRatio( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr viewBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector preserveAspectRatio = "preserveAspectRatio";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector viewBox = "viewBox";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGTextContentElement : IEquatable<DOMSVGTextContentElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGTextContentElement;
		public static implicit operator DOMSVGElement( DOMSVGTextContentElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGTextContentElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGTextContentElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGTextContentElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGTextContentElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGTextContentElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGTextContentElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGTextContentElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGTextContentElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGTextContentElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGTextContentElement value1, DOMSVGTextContentElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGTextContentElement value1, DOMSVGTextContentElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGTextContentElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGTextContentElement alloc() {
			return new DOMSVGTextContentElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int getCharNumAtPosition_( NObjective.RuntimeObject position ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCharNumAtPosition_( Handle, CachedSelectors.getCharNumAtPosition_, out ___occuredException, sizeof( NObjective.RuntimeObject ), position );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float getComputedTextLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getComputedTextLength( Handle, CachedSelectors.getComputedTextLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject getEndPositionOfChar_( uint @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getEndPositionOfChar_( Handle, CachedSelectors.getEndPositionOfChar_, out ___occuredException, sizeof( uint ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getExtentOfChar_( uint @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getExtentOfChar_( Handle, CachedSelectors.getExtentOfChar_, out ___occuredException, sizeof( uint ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int getNumberOfChars() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getNumberOfChars( Handle, CachedSelectors.getNumberOfChars, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float getRotationOfChar_( uint @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getRotationOfChar_( Handle, CachedSelectors.getRotationOfChar_, out ___occuredException, sizeof( uint ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject getStartPositionOfChar_( uint @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getStartPositionOfChar_( Handle, CachedSelectors.getStartPositionOfChar_, out ___occuredException, sizeof( uint ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float getSubStringLength_length_( uint length, uint length2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getSubStringLength_length_( Handle, CachedSelectors.getSubStringLength_length_, out ___occuredException, sizeof( uint ) + sizeof( uint ), length, length2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject lengthAdjust() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lengthAdjust( Handle, CachedSelectors.lengthAdjust, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void selectSubString_length_( uint @string, uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectSubString_length_( Handle, CachedSelectors.selectSubString_length_, out ___occuredException, sizeof( uint ) + sizeof( uint ), @string, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject textLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textLength( Handle, CachedSelectors.textLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject lengthAdjust {
				get { return _handle.lengthAdjust(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject textLength {
				get { return _handle.textLength(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGTextContentElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGTextContentElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int getCharNumAtPosition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject position );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float getComputedTextLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getEndPositionOfChar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getExtentOfChar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int getNumberOfChars( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float getRotationOfChar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getStartPositionOfChar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float getSubStringLength_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint length, uint length2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lengthAdjust( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectSubString_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @string, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector getCharNumAtPosition_ = "getCharNumAtPosition:";
			public static readonly Selector getComputedTextLength = "getComputedTextLength";
			public static readonly Selector getEndPositionOfChar_ = "getEndPositionOfChar:";
			public static readonly Selector getExtentOfChar_ = "getExtentOfChar:";
			public static readonly Selector getNumberOfChars = "getNumberOfChars";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getRotationOfChar_ = "getRotationOfChar:";
			public static readonly Selector getStartPositionOfChar_ = "getStartPositionOfChar:";
			public static readonly Selector getSubStringLength_length_ = "getSubStringLength:length:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector lengthAdjust = "lengthAdjust";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector selectSubString_length_ = "selectSubString:length:";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector textLength = "textLength";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGTextPositioningElement ) )]
	public struct DOMSVGTextElement : IEquatable<DOMSVGTextElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGTextElement;
		public static implicit operator DOMSVGTextPositioningElement( DOMSVGTextElement value ) {
			return new DOMSVGTextPositioningElement( value.Handle );
		}
		public static implicit operator DOMSVGTextContentElement( DOMSVGTextElement value ) {
			return new DOMSVGTextContentElement( value.Handle );
		}
		public static implicit operator DOMSVGElement( DOMSVGTextElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGTextElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGTextElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGTextElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGTextElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGTextElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGTextElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGTextElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGTextElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGTextElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGTextElement value1, DOMSVGTextElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGTextElement value1, DOMSVGTextElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGTextElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGTextElement alloc() {
			return new DOMSVGTextElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			private readonly DOMSVGTextElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGTextElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector transform = "transform";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGTextContentElement ) )]
	public struct DOMSVGTextPathElement : IEquatable<DOMSVGTextPathElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGTextPathElement;
		public static implicit operator DOMSVGTextContentElement( DOMSVGTextPathElement value ) {
			return new DOMSVGTextContentElement( value.Handle );
		}
		public static implicit operator DOMSVGElement( DOMSVGTextPathElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGTextPathElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGTextPathElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGTextPathElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGTextPathElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGTextPathElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGTextPathElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGTextPathElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGTextPathElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGTextPathElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGTextPathElement value1, DOMSVGTextPathElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGTextPathElement value1, DOMSVGTextPathElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGTextPathElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGTextPathElement alloc() {
			return new DOMSVGTextPathElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject method() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.method( Handle, CachedSelectors.method, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject spacing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.spacing( Handle, CachedSelectors.spacing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject startOffset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startOffset( Handle, CachedSelectors.startOffset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject method {
				get { return _handle.method(); }
			}
			public NObjective.RuntimeObject spacing {
				get { return _handle.spacing(); }
			}
			public NObjective.RuntimeObject startOffset {
				get { return _handle.startOffset(); }
			}
			private readonly DOMSVGTextPathElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGTextPathElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr method( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr spacing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr startOffset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector href = "href";
			public static readonly Selector method = "method";
			public static readonly Selector spacing = "spacing";
			public static readonly Selector startOffset = "startOffset";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGTextContentElement ) )]
	public struct DOMSVGTextPositioningElement : IEquatable<DOMSVGTextPositioningElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGTextPositioningElement;
		public static implicit operator DOMSVGTextContentElement( DOMSVGTextPositioningElement value ) {
			return new DOMSVGTextContentElement( value.Handle );
		}
		public static implicit operator DOMSVGElement( DOMSVGTextPositioningElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGTextPositioningElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGTextPositioningElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGTextPositioningElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGTextPositioningElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGTextPositioningElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGTextPositioningElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGTextPositioningElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGTextPositioningElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGTextPositioningElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGTextPositioningElement value1, DOMSVGTextPositioningElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGTextPositioningElement value1, DOMSVGTextPositioningElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGTextPositioningElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGTextPositioningElement alloc() {
			return new DOMSVGTextPositioningElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject dx() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dx( Handle, CachedSelectors.dx, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dy( Handle, CachedSelectors.dy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rotate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rotate( Handle, CachedSelectors.rotate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject dx {
				get { return _handle.dx(); }
			}
			public NObjective.RuntimeObject dy {
				get { return _handle.dy(); }
			}
			public NObjective.RuntimeObject rotate {
				get { return _handle.rotate(); }
			}
			public NObjective.RuntimeObject x {
				get { return _handle.x(); }
			}
			public NObjective.RuntimeObject y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGTextPositioningElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGTextPositioningElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dx( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rotate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector dx = "dx";
			public static readonly Selector dy = "dy";
			public static readonly Selector rotate = "rotate";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGTitleElement : IEquatable<DOMSVGTitleElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGTitleElement;
		public static implicit operator DOMSVGElement( DOMSVGTitleElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGTitleElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGTitleElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGTitleElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGTitleElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGTitleElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGTitleElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGTitleElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGTitleElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGTitleElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGTitleElement value1, DOMSVGTitleElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGTitleElement value1, DOMSVGTitleElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGTitleElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGTitleElement alloc() {
			return new DOMSVGTitleElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			private readonly DOMSVGTitleElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGTitleElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector className = "className";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGTransform : IEquatable<DOMSVGTransform> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGTransform;
		public static implicit operator DOMObject( DOMSVGTransform value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGTransform value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGTransform value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGTransform value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGTransform value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGTransform?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGTransform value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGTransform value1, DOMSVGTransform value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGTransform value1, DOMSVGTransform value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGTransform( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGTransform alloc() {
			return new DOMSVGTransform( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public float angle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.angle( Handle, CachedSelectors.angle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject matrix() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matrix( Handle, CachedSelectors.matrix, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setMatrix_( NObjective.RuntimeObject matrix ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMatrix_( Handle, CachedSelectors.setMatrix_, out ___occuredException, sizeof( NObjective.RuntimeObject ), matrix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRotate_cx_cy_( float rotate, float cx, float cy ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRotate_cx_cy_( Handle, CachedSelectors.setRotate_cx_cy_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( float ), rotate, cx, cy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScale_sy_( float scale, float sy ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScale_sy_( Handle, CachedSelectors.setScale_sy_, out ___occuredException, sizeof( float ) + sizeof( float ), scale, sy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSkewX_( float x ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSkewX_( Handle, CachedSelectors.setSkewX_, out ___occuredException, sizeof( float ), x );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSkewY_( float y ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSkewY_( Handle, CachedSelectors.setSkewY_, out ___occuredException, sizeof( float ), y );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTranslate_ty_( float translate, float ty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTranslate_ty_( Handle, CachedSelectors.setTranslate_ty_, out ___occuredException, sizeof( float ) + sizeof( float ), translate, ty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public ushort type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public float angle {
				get { return _handle.angle(); }
			}
			public NObjective.RuntimeObject matrix {
				get { return _handle.matrix(); }
			}
			public ushort type {
				get { return _handle.type(); }
			}
			private readonly DOMSVGTransform _handle;
			public ObjectiveCPropertyImplementation( DOMSVGTransform value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float angle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr matrix( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMatrix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matrix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRotate_cx_cy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float rotate, float cx, float cy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScale_sy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float scale, float sy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSkewX_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float x );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSkewY_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float y );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTranslate_ty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float translate, float ty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector angle = "angle";
			public static readonly Selector matrix = "matrix";
			public static readonly Selector setMatrix_ = "setMatrix:";
			public static readonly Selector setRotate_cx_cy_ = "setRotate:cx:cy:";
			public static readonly Selector setScale_sy_ = "setScale:sy:";
			public static readonly Selector setSkewX_ = "setSkewX:";
			public static readonly Selector setSkewY_ = "setSkewY:";
			public static readonly Selector setTranslate_ty_ = "setTranslate:ty:";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGTransformList : IEquatable<DOMSVGTransformList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGTransformList;
		public static implicit operator DOMObject( DOMSVGTransformList value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGTransformList value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGTransformList value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGTransformList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGTransformList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGTransformList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGTransformList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGTransformList value1, DOMSVGTransformList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGTransformList value1, DOMSVGTransformList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGTransformList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGTransformList alloc() {
			return new DOMSVGTransformList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject appendItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendItem_( Handle, CachedSelectors.appendItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject consolidate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.consolidate( Handle, CachedSelectors.consolidate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createSVGTransformFromMatrix_( NObjective.RuntimeObject matrix ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createSVGTransformFromMatrix_( Handle, CachedSelectors.createSVGTransformFromMatrix_, out ___occuredException, sizeof( NObjective.RuntimeObject ), matrix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getItem_( Handle, CachedSelectors.getItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initialize_( NObjective.RuntimeObject initialize ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initialize_( Handle, CachedSelectors.initialize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), initialize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject insertItemBefore_index_( NObjective.RuntimeObject before, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertItemBefore_index_( Handle, CachedSelectors.insertItemBefore_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), before, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint numberOfItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItems( Handle, CachedSelectors.numberOfItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject removeItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeItem_( Handle, CachedSelectors.removeItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replaceItem_index_( NObjective.RuntimeObject item, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replaceItem_index_( Handle, CachedSelectors.replaceItem_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), item, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public uint numberOfItems {
				get { return _handle.numberOfItems(); }
			}
			private readonly DOMSVGTransformList _handle;
			public ObjectiveCPropertyImplementation( DOMSVGTransformList value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr appendItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr consolidate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createSVGTransformFromMatrix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matrix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initialize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject initialize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertItemBefore_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject before, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint numberOfItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replaceItem_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item, uint index );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendItem_ = "appendItem:";
			public static readonly Selector clear = "clear";
			public static readonly Selector consolidate = "consolidate";
			public static readonly Selector createSVGTransformFromMatrix_ = "createSVGTransformFromMatrix:";
			public static readonly Selector getItem_ = "getItem:";
			public static readonly Selector initialize_ = "initialize:";
			public static readonly Selector insertItemBefore_index_ = "insertItemBefore:index:";
			public static readonly Selector numberOfItems = "numberOfItems";
			public static readonly Selector removeItem_ = "removeItem:";
			public static readonly Selector replaceItem_index_ = "replaceItem:index:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGTextPositioningElement ) )]
	public struct DOMSVGTRefElement : IEquatable<DOMSVGTRefElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGTRefElement;
		public static implicit operator DOMSVGTextPositioningElement( DOMSVGTRefElement value ) {
			return new DOMSVGTextPositioningElement( value.Handle );
		}
		public static implicit operator DOMSVGTextContentElement( DOMSVGTRefElement value ) {
			return new DOMSVGTextContentElement( value.Handle );
		}
		public static implicit operator DOMSVGElement( DOMSVGTRefElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGTRefElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGTRefElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGTRefElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGTRefElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGTRefElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGTRefElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGTRefElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGTRefElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGTRefElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGTRefElement value1, DOMSVGTRefElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGTRefElement value1, DOMSVGTRefElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGTRefElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGTRefElement alloc() {
			return new DOMSVGTRefElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			private readonly DOMSVGTRefElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGTRefElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector href = "href";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGTextPositioningElement ) )]
	public struct DOMSVGTSpanElement : IEquatable<DOMSVGTSpanElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGTSpanElement;
		public static implicit operator DOMSVGTextPositioningElement( DOMSVGTSpanElement value ) {
			return new DOMSVGTextPositioningElement( value.Handle );
		}
		public static implicit operator DOMSVGTextContentElement( DOMSVGTSpanElement value ) {
			return new DOMSVGTextContentElement( value.Handle );
		}
		public static implicit operator DOMSVGElement( DOMSVGTSpanElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGTSpanElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGTSpanElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGTSpanElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGTSpanElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGTSpanElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGTSpanElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGTSpanElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGTSpanElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGTSpanElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGTSpanElement value1, DOMSVGTSpanElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGTSpanElement value1, DOMSVGTSpanElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGTSpanElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGTSpanElement alloc() {
			return new DOMSVGTSpanElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMSVGUnitTypes : IEquatable<DOMSVGUnitTypes> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGUnitTypes;
		public static implicit operator DOMObject( DOMSVGUnitTypes value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGUnitTypes value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGUnitTypes value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGUnitTypes value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGUnitTypes value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGUnitTypes?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGUnitTypes value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGUnitTypes value1, DOMSVGUnitTypes value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGUnitTypes value1, DOMSVGUnitTypes value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGUnitTypes( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGUnitTypes alloc() {
			return new DOMSVGUnitTypes( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGUseElement : IEquatable<DOMSVGUseElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGUseElement;
		public static implicit operator DOMSVGElement( DOMSVGUseElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGUseElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGUseElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGUseElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGUseElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGUseElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGUseElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGUseElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGUseElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGUseElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGUseElement value1, DOMSVGUseElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGUseElement value1, DOMSVGUseElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGUseElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGUseElement alloc() {
			return new DOMSVGUseElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject animatedInstanceRoot() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.animatedInstanceRoot( Handle, CachedSelectors.animatedInstanceRoot, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject farthestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.farthestViewportElement( Handle, CachedSelectors.farthestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getBBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBBox( Handle, CachedSelectors.getBBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCTM( Handle, CachedSelectors.getCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getPresentationAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPresentationAttribute_( Handle, CachedSelectors.getPresentationAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getScreenCTM() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getScreenCTM( Handle, CachedSelectors.getScreenCTM, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject getTransformToElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getTransformToElement_( Handle, CachedSelectors.getTransformToElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasExtension_( Handle, CachedSelectors.hasExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject height() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.height( Handle, CachedSelectors.height, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject href() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.href( Handle, CachedSelectors.href, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject instanceRoot() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.instanceRoot( Handle, CachedSelectors.instanceRoot, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nearestViewportElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nearestViewportElement( Handle, CachedSelectors.nearestViewportElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredExtensions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredExtensions( Handle, CachedSelectors.requiredExtensions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requiredFeatures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiredFeatures( Handle, CachedSelectors.requiredFeatures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setXmllang_( NObjective.RuntimeObject xmllang ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmllang_( Handle, CachedSelectors.setXmllang_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmllang );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setXmlspace_( NObjective.RuntimeObject xmlspace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setXmlspace_( Handle, CachedSelectors.setXmlspace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), xmlspace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject systemLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguage( Handle, CachedSelectors.systemLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( Handle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject width() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.width( Handle, CachedSelectors.width, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmllang() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmllang( Handle, CachedSelectors.xmllang, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject xmlspace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.xmlspace( Handle, CachedSelectors.xmlspace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject animatedInstanceRoot {
				get { return _handle.animatedInstanceRoot(); }
			}
			public NObjective.RuntimeObject className {
				get { return _handle.className(); }
			}
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject farthestViewportElement {
				get { return _handle.farthestViewportElement(); }
			}
			public NObjective.RuntimeObject height {
				get { return _handle.height(); }
			}
			public NObjective.RuntimeObject href {
				get { return _handle.href(); }
			}
			public NObjective.RuntimeObject instanceRoot {
				get { return _handle.instanceRoot(); }
			}
			public NObjective.RuntimeObject nearestViewportElement {
				get { return _handle.nearestViewportElement(); }
			}
			public NObjective.RuntimeObject requiredExtensions {
				get { return _handle.requiredExtensions(); }
			}
			public NObjective.RuntimeObject requiredFeatures {
				get { return _handle.requiredFeatures(); }
			}
			public NObjective.RuntimeObject style {
				get { return new DOMElement( _handle ).style(); }
			}
			public NObjective.RuntimeObject systemLanguage {
				get { return _handle.systemLanguage(); }
			}
			public NObjective.RuntimeObject transform {
				get { return _handle.transform(); }
			}
			public NObjective.RuntimeObject width {
				get { return _handle.width(); }
			}
			public NObjective.RuntimeObject x {
				get { return _handle.x(); }
			}
			public NObjective.RuntimeObject xmllang {
				get { return _handle.xmllang(); }
			}
			public NObjective.RuntimeObject xmlspace {
				get { return _handle.xmlspace(); }
			}
			public NObjective.RuntimeObject y {
				get { return _handle.y(); }
			}
			private readonly DOMSVGUseElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGUseElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr animatedInstanceRoot( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr farthestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getBBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPresentationAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getScreenCTM( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getTransformToElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr height( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr href( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr instanceRoot( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nearestViewportElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredExtensions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requiredFeatures( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmllang_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmllang );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setXmlspace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xmlspace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr width( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmllang( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr xmlspace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animatedInstanceRoot = "animatedInstanceRoot";
			public static readonly Selector className = "className";
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector farthestViewportElement = "farthestViewportElement";
			public static readonly Selector getBBox = "getBBox";
			public static readonly Selector getCTM = "getCTM";
			public static readonly Selector getPresentationAttribute_ = "getPresentationAttribute:";
			public static readonly Selector getScreenCTM = "getScreenCTM";
			public static readonly Selector getTransformToElement_ = "getTransformToElement:";
			public static readonly Selector hasExtension_ = "hasExtension:";
			public static readonly Selector height = "height";
			public static readonly Selector href = "href";
			public static readonly Selector instanceRoot = "instanceRoot";
			public static readonly Selector nearestViewportElement = "nearestViewportElement";
			public static readonly Selector requiredExtensions = "requiredExtensions";
			public static readonly Selector requiredFeatures = "requiredFeatures";
			public static readonly Selector setXmllang_ = "setXmllang:";
			public static readonly Selector setXmlspace_ = "setXmlspace:";
			public static readonly Selector systemLanguage = "systemLanguage";
			public static readonly Selector transform = "transform";
			public static readonly Selector width = "width";
			public static readonly Selector x = "x";
			public static readonly Selector xmllang = "xmllang";
			public static readonly Selector xmlspace = "xmlspace";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMSVGElement ) )]
	public struct DOMSVGViewElement : IEquatable<DOMSVGViewElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGViewElement;
		public static implicit operator DOMSVGElement( DOMSVGViewElement value ) {
			return new DOMSVGElement( value.Handle );
		}
		public static implicit operator DOMElement( DOMSVGViewElement value ) {
			return new DOMElement( value.Handle );
		}
		public static implicit operator DOMNode( DOMSVGViewElement value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGViewElement value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGViewElement value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGViewElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGViewElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGViewElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGViewElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGViewElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGViewElement value1, DOMSVGViewElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGViewElement value1, DOMSVGViewElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGViewElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGViewElement alloc() {
			return new DOMSVGViewElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject externalResourcesRequired() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.externalResourcesRequired( Handle, CachedSelectors.externalResourcesRequired, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject preserveAspectRatio() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preserveAspectRatio( Handle, CachedSelectors.preserveAspectRatio, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setZoomAndPan_( ushort pan ) {
			RuntimeObject ___occuredException;
			NativeMethods.setZoomAndPan_( Handle, CachedSelectors.setZoomAndPan_, out ___occuredException, sizeof( ushort ), pan );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject viewBox() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewBox( Handle, CachedSelectors.viewBox, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject viewTarget() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewTarget( Handle, CachedSelectors.viewTarget, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ushort zoomAndPan() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.zoomAndPan( Handle, CachedSelectors.zoomAndPan, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject externalResourcesRequired {
				get { return _handle.externalResourcesRequired(); }
			}
			public NObjective.RuntimeObject preserveAspectRatio {
				get { return _handle.preserveAspectRatio(); }
			}
			public NObjective.RuntimeObject viewBox {
				get { return _handle.viewBox(); }
			}
			public NObjective.RuntimeObject viewTarget {
				get { return _handle.viewTarget(); }
			}
			public ushort zoomAndPan {
				get { return _handle.zoomAndPan(); }
			}
			private readonly DOMSVGViewElement _handle;
			public ObjectiveCPropertyImplementation( DOMSVGViewElement value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr externalResourcesRequired( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preserveAspectRatio( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setZoomAndPan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort pan );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr viewBox( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr viewTarget( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort zoomAndPan( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector externalResourcesRequired = "externalResourcesRequired";
			public static readonly Selector preserveAspectRatio = "preserveAspectRatio";
			public static readonly Selector setZoomAndPan_ = "setZoomAndPan:";
			public static readonly Selector viewBox = "viewBox";
			public static readonly Selector viewTarget = "viewTarget";
			public static readonly Selector zoomAndPan = "zoomAndPan";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMUIEvent ) )]
	public struct DOMSVGZoomEvent : IEquatable<DOMSVGZoomEvent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMSVGZoomEvent;
		public static implicit operator DOMUIEvent( DOMSVGZoomEvent value ) {
			return new DOMUIEvent( value.Handle );
		}
		public static implicit operator DOMEvent( DOMSVGZoomEvent value ) {
			return new DOMEvent( value.Handle );
		}
		public static implicit operator DOMObject( DOMSVGZoomEvent value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMSVGZoomEvent value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMSVGZoomEvent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMSVGZoomEvent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMSVGZoomEvent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMSVGZoomEvent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMSVGZoomEvent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMSVGZoomEvent value1, DOMSVGZoomEvent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMSVGZoomEvent value1, DOMSVGZoomEvent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMSVGZoomEvent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMSVGZoomEvent alloc() {
			return new DOMSVGZoomEvent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public float newScale() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newScale( Handle, CachedSelectors.newScale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject newTranslate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newTranslate( Handle, CachedSelectors.newTranslate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float previousScale() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousScale( Handle, CachedSelectors.previousScale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject previousTranslate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousTranslate( Handle, CachedSelectors.previousTranslate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject zoomRectScreen() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.zoomRectScreen( Handle, CachedSelectors.zoomRectScreen, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public float newScale {
				get { return _handle.newScale(); }
			}
			public NObjective.RuntimeObject newTranslate {
				get { return _handle.newTranslate(); }
			}
			public float previousScale {
				get { return _handle.previousScale(); }
			}
			public NObjective.RuntimeObject previousTranslate {
				get { return _handle.previousTranslate(); }
			}
			public NObjective.RuntimeObject zoomRectScreen {
				get { return _handle.zoomRectScreen(); }
			}
			private readonly DOMSVGZoomEvent _handle;
			public ObjectiveCPropertyImplementation( DOMSVGZoomEvent value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float newScale( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newTranslate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float previousScale( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr previousTranslate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr zoomRectScreen( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector newScale = "newScale";
			public static readonly Selector newTranslate = "newTranslate";
			public static readonly Selector previousScale = "previousScale";
			public static readonly Selector previousTranslate = "previousTranslate";
			public static readonly Selector zoomRectScreen = "zoomRectScreen";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMCharacterData ) )]
	public struct DOMText : IEquatable<DOMText> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMText;
		public static implicit operator DOMCharacterData( DOMText value ) {
			return new DOMCharacterData( value.Handle );
		}
		public static implicit operator DOMNode( DOMText value ) {
			return new DOMNode( value.Handle );
		}
		public static implicit operator DOMObject( DOMText value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMText value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMText value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMText value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMText value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMText?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMText value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMText value1, DOMText value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMText value1, DOMText value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMText( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMText alloc() {
			return new DOMText( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMText splitText_( uint text ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitText_( Handle, CachedSelectors.splitText_, out ___occuredException, sizeof( uint ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMText( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr splitText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint text );
		}
		static internal class CachedSelectors {
			public static readonly Selector splitText_ = "splitText:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMUIEvent ) )]
	public struct DOMTextEvent : IEquatable<DOMTextEvent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMTextEvent;
		public static implicit operator DOMUIEvent( DOMTextEvent value ) {
			return new DOMUIEvent( value.Handle );
		}
		public static implicit operator DOMEvent( DOMTextEvent value ) {
			return new DOMEvent( value.Handle );
		}
		public static implicit operator DOMObject( DOMTextEvent value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMTextEvent value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMTextEvent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMTextEvent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMTextEvent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMTextEvent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMTextEvent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMTextEvent value1, DOMTextEvent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMTextEvent value1, DOMTextEvent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMTextEvent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMTextEvent alloc() {
			return new DOMTextEvent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void initTextEvent_canBubbleArg_cancelableArg_viewArg_dataArg_( NObjective.RuntimeObject @event, char canBubbleArg, char cancelableArg, NObjective.RuntimeObject viewArg, NObjective.RuntimeObject dataArg ) {
			RuntimeObject ___occuredException;
			NativeMethods.initTextEvent_canBubbleArg_cancelableArg_viewArg_dataArg_( Handle, CachedSelectors.initTextEvent_canBubbleArg_cancelableArg_viewArg_dataArg_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @event, canBubbleArg, cancelableArg, viewArg, dataArg );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject data {
				get { return _handle.data(); }
			}
			private readonly DOMTextEvent _handle;
			public ObjectiveCPropertyImplementation( DOMTextEvent value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initTextEvent_canBubbleArg_cancelableArg_viewArg_dataArg_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event, char canBubbleArg, char cancelableArg, NObjective.RuntimeObject viewArg, NObjective.RuntimeObject dataArg );
		}
		static internal class CachedSelectors {
			public static readonly Selector data = "data";
			public static readonly Selector initTextEvent_canBubbleArg_cancelableArg_viewArg_dataArg_ = "initTextEvent:canBubbleArg:cancelableArg:viewArg:dataArg:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMTreeWalker : IEquatable<DOMTreeWalker> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMTreeWalker;
		public static implicit operator DOMObject( DOMTreeWalker value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMTreeWalker value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMTreeWalker value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMTreeWalker value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMTreeWalker value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMTreeWalker?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMTreeWalker value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMTreeWalker value1, DOMTreeWalker value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMTreeWalker value1, DOMTreeWalker value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMTreeWalker( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMTreeWalker alloc() {
			return new DOMTreeWalker( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject currentNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentNode( Handle, CachedSelectors.currentNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char expandEntityReferences() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expandEntityReferences( Handle, CachedSelectors.expandEntityReferences, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject filter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filter( Handle, CachedSelectors.filter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMNode firstChild() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstChild( Handle, CachedSelectors.firstChild, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode lastChild() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastChild( Handle, CachedSelectors.lastChild, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode nextNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextNode( Handle, CachedSelectors.nextNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode nextSibling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextSibling( Handle, CachedSelectors.nextSibling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode parentNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentNode( Handle, CachedSelectors.parentNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode previousNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousNode( Handle, CachedSelectors.previousNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public DOMNode previousSibling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousSibling( Handle, CachedSelectors.previousSibling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public NObjective.RuntimeObject root() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.root( Handle, CachedSelectors.root, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setCurrentNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCurrentNode_( Handle, CachedSelectors.setCurrentNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint whatToShow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.whatToShow( Handle, CachedSelectors.whatToShow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public NObjective.RuntimeObject currentNode {
				get { return _handle.currentNode(); }
			}
			public char expandEntityReferences {
				get { return _handle.expandEntityReferences(); }
			}
			public NObjective.RuntimeObject filter {
				get { return _handle.filter(); }
			}
			public NObjective.RuntimeObject root {
				get { return _handle.root(); }
			}
			public uint whatToShow {
				get { return _handle.whatToShow(); }
			}
			private readonly DOMTreeWalker _handle;
			public ObjectiveCPropertyImplementation( DOMTreeWalker value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char expandEntityReferences( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr filter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstChild( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastChild( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextSibling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr previousNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr previousSibling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr root( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrentNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint whatToShow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector currentNode = "currentNode";
			public static readonly Selector expandEntityReferences = "expandEntityReferences";
			public static readonly Selector filter = "filter";
			public static readonly Selector firstChild = "firstChild";
			public static readonly Selector lastChild = "lastChild";
			public static readonly Selector nextNode = "nextNode";
			public static readonly Selector nextSibling = "nextSibling";
			public static readonly Selector parentNode = "parentNode";
			public static readonly Selector previousNode = "previousNode";
			public static readonly Selector previousSibling = "previousSibling";
			public static readonly Selector root = "root";
			public static readonly Selector setCurrentNode_ = "setCurrentNode:";
			public static readonly Selector whatToShow = "whatToShow";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMEvent ) )]
	public struct DOMUIEvent : IEquatable<DOMUIEvent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMUIEvent;
		public static implicit operator DOMEvent( DOMUIEvent value ) {
			return new DOMEvent( value.Handle );
		}
		public static implicit operator DOMObject( DOMUIEvent value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMUIEvent value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMUIEvent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMUIEvent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMUIEvent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMUIEvent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMUIEvent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMUIEvent value1, DOMUIEvent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMUIEvent value1, DOMUIEvent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMUIEvent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMUIEvent alloc() {
			return new DOMUIEvent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int charCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.charCode( Handle, CachedSelectors.charCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int detail() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.detail( Handle, CachedSelectors.detail, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void initUIEvent_____( string @event, bool unnamedParameter, bool unnamedParameter2, DOMAbstractView unnamedParameter3, int unnamedParameter4 ) {
			RuntimeObject ___occuredException;
			var ___wrappedevent = Runtime.CreateStringProxy( @event );
			NativeMethods.initUIEvent_____( Handle, CachedSelectors.initUIEvent_____, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( bool ) + sizeof( DOMAbstractView ) + sizeof( int ), ___wrappedevent, unnamedParameter, unnamedParameter2, unnamedParameter3, unnamedParameter4 );
			Runtime.ReleaseNativeObject( ___wrappedevent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void initUIEvent_canBubble_cancelable_view_detail_( string @event, bool canBubble, bool cancelable, DOMAbstractView view, int detail ) {
			RuntimeObject ___occuredException;
			var ___wrappedevent = Runtime.CreateStringProxy( @event );
			NativeMethods.initUIEvent_canBubble_cancelable_view_detail_( Handle, CachedSelectors.initUIEvent_canBubble_cancelable_view_detail_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( bool ) + sizeof( DOMAbstractView ) + sizeof( int ), ___wrappedevent, canBubble, cancelable, view, detail );
			Runtime.ReleaseNativeObject( ___wrappedevent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int keyCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyCode( Handle, CachedSelectors.keyCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int layerX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.layerX( Handle, CachedSelectors.layerX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int layerY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.layerY( Handle, CachedSelectors.layerY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int pageX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pageX( Handle, CachedSelectors.pageX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int pageY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pageY( Handle, CachedSelectors.pageY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject view() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.view( Handle, CachedSelectors.view, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int which() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.which( Handle, CachedSelectors.which, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public int detail {
				get { return _handle.detail(); }
			}
			public NObjective.RuntimeObject view {
				get { return _handle.view(); }
			}
			private readonly DOMUIEvent _handle;
			public ObjectiveCPropertyImplementation( DOMUIEvent value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int charCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int detail( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initUIEvent_____( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @event, bool unnamedParameter, bool unnamedParameter2, DOMAbstractView unnamedParameter3, int unnamedParameter4 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initUIEvent_canBubble_cancelable_view_detail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @event, bool canBubble, bool cancelable, DOMAbstractView view, int detail );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int keyCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int layerX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int layerY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int pageX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int pageY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr view( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int which( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector charCode = "charCode";
			public static readonly Selector detail = "detail";
			public static readonly Selector initUIEvent_____ = "initUIEvent:::::";
			public static readonly Selector initUIEvent_canBubble_cancelable_view_detail_ = "initUIEvent:canBubble:cancelable:view:detail:";
			public static readonly Selector keyCode = "keyCode";
			public static readonly Selector layerX = "layerX";
			public static readonly Selector layerY = "layerY";
			public static readonly Selector pageX = "pageX";
			public static readonly Selector pageY = "pageY";
			public static readonly Selector view = "view";
			public static readonly Selector which = "which";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMUIEvent ) )]
	public struct DOMWheelEvent : IEquatable<DOMWheelEvent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMWheelEvent;
		public static implicit operator DOMUIEvent( DOMWheelEvent value ) {
			return new DOMUIEvent( value.Handle );
		}
		public static implicit operator DOMEvent( DOMWheelEvent value ) {
			return new DOMEvent( value.Handle );
		}
		public static implicit operator DOMObject( DOMWheelEvent value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMWheelEvent value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMWheelEvent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMWheelEvent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMWheelEvent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMWheelEvent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMWheelEvent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMWheelEvent value1, DOMWheelEvent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMWheelEvent value1, DOMWheelEvent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMWheelEvent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMWheelEvent alloc() {
			return new DOMWheelEvent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char altKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.altKey( Handle, CachedSelectors.altKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int clientX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clientX( Handle, CachedSelectors.clientX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int clientY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clientY( Handle, CachedSelectors.clientY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char ctrlKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ctrlKey( Handle, CachedSelectors.ctrlKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void initWheelEvent_wheelDeltaY_view_screenX_screenY_clientX_clientY_ctrlKey_altKey_shiftKey_metaKey_( int @event, int wheelDeltaY, NObjective.RuntimeObject view, int screenX, int screenY, int clientX, int clientY, char ctrlKey, char altKey, char shiftKey, 
		char metaKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.initWheelEvent_wheelDeltaY_view_screenX_screenY_clientX_clientY_ctrlKey_altKey_shiftKey_metaKey_( Handle, CachedSelectors.initWheelEvent_wheelDeltaY_view_screenX_screenY_clientX_clientY_ctrlKey_altKey_shiftKey_metaKey_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), @event, wheelDeltaY, view, screenX, screenY, clientX, 
			clientY, ctrlKey, altKey, shiftKey, metaKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isHorizontal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isHorizontal( Handle, CachedSelectors.isHorizontal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char metaKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.metaKey( Handle, CachedSelectors.metaKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int offsetX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offsetX( Handle, CachedSelectors.offsetX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int offsetY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offsetY( Handle, CachedSelectors.offsetY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int screenX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.screenX( Handle, CachedSelectors.screenX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int screenY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.screenY( Handle, CachedSelectors.screenY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char shiftKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shiftKey( Handle, CachedSelectors.shiftKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int wheelDelta() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wheelDelta( Handle, CachedSelectors.wheelDelta, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int wheelDeltaX() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wheelDeltaX( Handle, CachedSelectors.wheelDeltaX, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int wheelDeltaY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wheelDeltaY( Handle, CachedSelectors.wheelDeltaY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int x() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.x( Handle, CachedSelectors.x, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int y() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.y( Handle, CachedSelectors.y, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		public struct ObjectiveCPropertyImplementation {
			public char altKey {
				get { return _handle.altKey(); }
			}
			public int clientX {
				get { return _handle.clientX(); }
			}
			public int clientY {
				get { return _handle.clientY(); }
			}
			public char ctrlKey {
				get { return _handle.ctrlKey(); }
			}
			public bool isHorizontal {
				get { return _handle.isHorizontal(); }
			}
			public char metaKey {
				get { return _handle.metaKey(); }
			}
			public int screenX {
				get { return _handle.screenX(); }
			}
			public int screenY {
				get { return _handle.screenY(); }
			}
			public char shiftKey {
				get { return _handle.shiftKey(); }
			}
			public int wheelDelta {
				get { return _handle.wheelDelta(); }
			}
			private readonly DOMWheelEvent _handle;
			public ObjectiveCPropertyImplementation( DOMWheelEvent value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char altKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int clientX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int clientY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char ctrlKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initWheelEvent_wheelDeltaY_view_screenX_screenY_clientX_clientY_ctrlKey_altKey_shiftKey_metaKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @event, int wheelDeltaY, NObjective.RuntimeObject view, int screenX, int screenY, int clientX, 
			int clientY, char ctrlKey, char altKey, char shiftKey, char metaKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isHorizontal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char metaKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int offsetX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int offsetY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int screenX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int screenY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char shiftKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int wheelDelta( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int wheelDeltaX( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int wheelDeltaY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int x( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int y( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector altKey = "altKey";
			public static readonly Selector clientX = "clientX";
			public static readonly Selector clientY = "clientY";
			public static readonly Selector ctrlKey = "ctrlKey";
			public static readonly Selector initWheelEvent_wheelDeltaY_view_screenX_screenY_clientX_clientY_ctrlKey_altKey_shiftKey_metaKey_ = "initWheelEvent:wheelDeltaY:view:screenX:screenY:clientX:clientY:ctrlKey:altKey:shiftKey:metaKey:";
			public static readonly Selector isHorizontal = "isHorizontal";
			public static readonly Selector metaKey = "metaKey";
			public static readonly Selector offsetX = "offsetX";
			public static readonly Selector offsetY = "offsetY";
			public static readonly Selector screenX = "screenX";
			public static readonly Selector screenY = "screenY";
			public static readonly Selector shiftKey = "shiftKey";
			public static readonly Selector wheelDelta = "wheelDelta";
			public static readonly Selector wheelDeltaX = "wheelDeltaX";
			public static readonly Selector wheelDeltaY = "wheelDeltaY";
			public static readonly Selector x = "x";
			public static readonly Selector y = "y";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMXPathExpression : IEquatable<DOMXPathExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMXPathExpression;
		public static implicit operator DOMObject( DOMXPathExpression value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMXPathExpression value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMXPathExpression value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMXPathExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMXPathExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMXPathExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMXPathExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMXPathExpression value1, DOMXPathExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMXPathExpression value1, DOMXPathExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMXPathExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMXPathExpression alloc() {
			return new DOMXPathExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public DOMXPathResult evaluate___( DOMNode evaluate, ushort unnamedParameter, DOMXPathResult unnamedParameter2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluate___( Handle, CachedSelectors.evaluate___, out ___occuredException, sizeof( DOMNode ) + sizeof( ushort ) + sizeof( DOMXPathResult ), evaluate, unnamedParameter, unnamedParameter2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMXPathResult( ___result );
		}
		unsafe public DOMXPathResult evaluate_type_inResult_( DOMNode evaluate, ushort type, DOMXPathResult inResult ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluate_type_inResult_( Handle, CachedSelectors.evaluate_type_inResult_, out ___occuredException, sizeof( DOMNode ) + sizeof( ushort ) + sizeof( DOMXPathResult ), evaluate, type, inResult );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMXPathResult( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr evaluate___( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode evaluate, ushort unnamedParameter, DOMXPathResult unnamedParameter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr evaluate_type_inResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode evaluate, ushort type, DOMXPathResult inResult );
		}
		static internal class CachedSelectors {
			public static readonly Selector evaluate___ = "evaluate:::";
			public static readonly Selector evaluate_type_inResult_ = "evaluate:type:inResult:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( DOMObject ) )]
	public struct DOMXPathResult : IEquatable<DOMXPathResult> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.DOMXPathResult;
		public static implicit operator DOMObject( DOMXPathResult value ) {
			return new DOMObject( value.Handle );
		}
		public static implicit operator WebScriptObject( DOMXPathResult value ) {
			return new WebScriptObject( value.Handle );
		}
		public static implicit operator NSObject( DOMXPathResult value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( DOMXPathResult value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( DOMXPathResult value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as DOMXPathResult?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( DOMXPathResult value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( DOMXPathResult value1, DOMXPathResult value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( DOMXPathResult value1, DOMXPathResult value2 ) {
			return value1.Handle != value2.Handle;
		}
		public DOMXPathResult( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static DOMXPathResult alloc() {
			return new DOMXPathResult( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char booleanValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.booleanValue( Handle, CachedSelectors.booleanValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char invalidIteratorState() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.invalidIteratorState( Handle, CachedSelectors.invalidIteratorState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public DOMNode iterateNext() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iterateNext( Handle, CachedSelectors.iterateNext, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public double numberValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberValue( Handle, CachedSelectors.numberValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public ushort resultType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resultType( Handle, CachedSelectors.resultType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject singleNodeValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.singleNodeValue( Handle, CachedSelectors.singleNodeValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public DOMNode snapshotItem_( uint item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.snapshotItem_( Handle, CachedSelectors.snapshotItem_, out ___occuredException, sizeof( uint ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMNode( ___result );
		}
		unsafe public uint snapshotLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.snapshotLength( Handle, CachedSelectors.snapshotLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string stringValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringValue( Handle, CachedSelectors.stringValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		public struct ObjectiveCPropertyImplementation {
			public char booleanValue {
				get { return _handle.booleanValue(); }
			}
			public char invalidIteratorState {
				get { return _handle.invalidIteratorState(); }
			}
			public double numberValue {
				get { return _handle.numberValue(); }
			}
			public ushort resultType {
				get { return _handle.resultType(); }
			}
			public NObjective.RuntimeObject singleNodeValue {
				get { return _handle.singleNodeValue(); }
			}
			public uint snapshotLength {
				get { return _handle.snapshotLength(); }
			}
			public string stringValue {
				get { return _handle.stringValue(); }
			}
			private readonly DOMXPathResult _handle;
			public ObjectiveCPropertyImplementation( DOMXPathResult value ) {
				_handle = value;
			}
		}
		public ObjectiveCPropertyImplementation Properties {
			get { return new ObjectiveCPropertyImplementation( this ); }
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char booleanValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char invalidIteratorState( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr iterateNext( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double numberValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort resultType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr singleNodeValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr snapshotItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint snapshotLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector booleanValue = "booleanValue";
			public static readonly Selector invalidIteratorState = "invalidIteratorState";
			public static readonly Selector iterateNext = "iterateNext";
			public static readonly Selector numberValue = "numberValue";
			public static readonly Selector resultType = "resultType";
			public static readonly Selector singleNodeValue = "singleNodeValue";
			public static readonly Selector snapshotItem_ = "snapshotItem:";
			public static readonly Selector snapshotLength = "snapshotLength";
			public static readonly Selector stringValue = "stringValue";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreAXObject : IEquatable<WebCoreAXObject> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreAXObject;
		public static implicit operator NSObject( WebCoreAXObject value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreAXObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreAXObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreAXObject?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreAXObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreAXObject value1, WebCoreAXObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreAXObject value1, WebCoreAXObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreAXObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreAXObject alloc() {
			return new WebCoreAXObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject accessibilityActionDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityActionDescription_( Handle, CachedSelectors.accessibilityActionDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityActionNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityActionNames( Handle, CachedSelectors.accessibilityActionNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeNames( Handle, CachedSelectors.accessibilityAttributeNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeValue_( Handle, CachedSelectors.accessibilityAttributeValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeValue_forParameter_( NObjective.RuntimeObject value, NObjective.RuntimeObject forParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeValue_forParameter_( Handle, CachedSelectors.accessibilityAttributeValue_forParameter_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityDescription( Handle, CachedSelectors.accessibilityDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityFocusedUIElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityFocusedUIElement( Handle, CachedSelectors.accessibilityFocusedUIElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char accessibilityIsAttributeSettable_( NObjective.RuntimeObject settable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsAttributeSettable_( Handle, CachedSelectors.accessibilityIsAttributeSettable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), settable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsIgnored() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsIgnored( Handle, CachedSelectors.accessibilityIsIgnored, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject accessibilityParameterizedAttributeNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityParameterizedAttributeNames( Handle, CachedSelectors.accessibilityParameterizedAttributeNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void accessibilityPerformAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilityPerformAction_( Handle, CachedSelectors.accessibilityPerformAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void accessibilitySetValue_forAttribute_( NObjective.RuntimeObject value, NObjective.RuntimeObject forAttribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilitySetValue_forAttribute_( Handle, CachedSelectors.accessibilitySetValue_forAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forAttribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char accessibilityShouldUseUniqueId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityShouldUseUniqueId( Handle, CachedSelectors.accessibilityShouldUseUniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void addChildrenToArray_( NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			NativeMethods.addChildrenToArray_( Handle, CachedSelectors.addChildrenToArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject attachmentView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attachmentView( Handle, CachedSelectors.attachmentView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint axObjectID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.axObjectID( Handle, CachedSelectors.axObjectID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public char canSetFocusAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canSetFocusAttribute( Handle, CachedSelectors.canSetFocusAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char canSetTextRangeAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canSetTextRangeAttributes( Handle, CachedSelectors.canSetTextRangeAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char canSetValueAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canSetValueAttribute( Handle, CachedSelectors.canSetValueAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void childrenChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.childrenChanged( Handle, CachedSelectors.childrenChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearChildren() {
			RuntimeObject ___occuredException;
			NativeMethods.clearChildren( Handle, CachedSelectors.clearChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void detach() {
			RuntimeObject ___occuredException;
			NativeMethods.detach( Handle, CachedSelectors.detach, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char detached() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.detached( Handle, CachedSelectors.detached, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject doAXAttributedStringForTextMarkerRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXAttributedStringForTextMarkerRange_( Handle, CachedSelectors.doAXAttributedStringForTextMarkerRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXBoundsForTextMarkerRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXBoundsForTextMarkerRange_( Handle, CachedSelectors.doAXBoundsForTextMarkerRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXLeftLineTextMarkerRangeForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXLeftLineTextMarkerRangeForTextMarker_( Handle, CachedSelectors.doAXLeftLineTextMarkerRangeForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXLeftWordTextMarkerRangeForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXLeftWordTextMarkerRangeForTextMarker_( Handle, CachedSelectors.doAXLeftWordTextMarkerRangeForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXLengthForTextMarkerRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXLengthForTextMarkerRange_( Handle, CachedSelectors.doAXLengthForTextMarkerRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXLineForIndex_( NObjective.RuntimeObject index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXLineForIndex_( Handle, CachedSelectors.doAXLineForIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXLineForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXLineForTextMarker_( Handle, CachedSelectors.doAXLineForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXNextLineEndTextMarkerForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXNextLineEndTextMarkerForTextMarker_( Handle, CachedSelectors.doAXNextLineEndTextMarkerForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXNextParagraphEndTextMarkerForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXNextParagraphEndTextMarkerForTextMarker_( Handle, CachedSelectors.doAXNextParagraphEndTextMarkerForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXNextSentenceEndTextMarkerForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXNextSentenceEndTextMarkerForTextMarker_( Handle, CachedSelectors.doAXNextSentenceEndTextMarkerForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXNextTextMarkerForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXNextTextMarkerForTextMarker_( Handle, CachedSelectors.doAXNextTextMarkerForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXNextWordEndTextMarkerForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXNextWordEndTextMarkerForTextMarker_( Handle, CachedSelectors.doAXNextWordEndTextMarkerForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXParagraphTextMarkerRangeForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXParagraphTextMarkerRangeForTextMarker_( Handle, CachedSelectors.doAXParagraphTextMarkerRangeForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXPreviousLineStartTextMarkerForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXPreviousLineStartTextMarkerForTextMarker_( Handle, CachedSelectors.doAXPreviousLineStartTextMarkerForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXPreviousParagraphStartTextMarkerForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXPreviousParagraphStartTextMarkerForTextMarker_( Handle, CachedSelectors.doAXPreviousParagraphStartTextMarkerForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXPreviousSentenceStartTextMarkerForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXPreviousSentenceStartTextMarkerForTextMarker_( Handle, CachedSelectors.doAXPreviousSentenceStartTextMarkerForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXPreviousTextMarkerForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXPreviousTextMarkerForTextMarker_( Handle, CachedSelectors.doAXPreviousTextMarkerForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXPreviousWordStartTextMarkerForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXPreviousWordStartTextMarkerForTextMarker_( Handle, CachedSelectors.doAXPreviousWordStartTextMarkerForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXRangeForIndex_( NObjective.RuntimeObject index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXRangeForIndex_( Handle, CachedSelectors.doAXRangeForIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXRangeForLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXRangeForLine_( Handle, CachedSelectors.doAXRangeForLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXRightLineTextMarkerRangeForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXRightLineTextMarkerRangeForTextMarker_( Handle, CachedSelectors.doAXRightLineTextMarkerRangeForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXRightWordTextMarkerRangeForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXRightWordTextMarkerRangeForTextMarker_( Handle, CachedSelectors.doAXRightWordTextMarkerRangeForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXSentenceTextMarkerRangeForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXSentenceTextMarkerRangeForTextMarker_( Handle, CachedSelectors.doAXSentenceTextMarkerRangeForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXStringForTextMarkerRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXStringForTextMarkerRange_( Handle, CachedSelectors.doAXStringForTextMarkerRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXStyleRangeForIndex_( NObjective.RuntimeObject index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXStyleRangeForIndex_( Handle, CachedSelectors.doAXStyleRangeForIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXStyleTextMarkerRangeForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXStyleTextMarkerRangeForTextMarker_( Handle, CachedSelectors.doAXStyleTextMarkerRangeForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXTextMarkerRangeForLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXTextMarkerRangeForLine_( Handle, CachedSelectors.doAXTextMarkerRangeForLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXTextMarkerRangeForUIElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXTextMarkerRangeForUIElement_( Handle, CachedSelectors.doAXTextMarkerRangeForUIElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXTextMarkerRangeForUnorderedTextMarkers_( NObjective.RuntimeObject markers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXTextMarkerRangeForUnorderedTextMarkers_( Handle, CachedSelectors.doAXTextMarkerRangeForUnorderedTextMarkers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), markers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject doAXUIElementForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doAXUIElementForTextMarker_( Handle, CachedSelectors.doAXUIElementForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void doSetAXSelectedTextMarkerRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSetAXSelectedTextMarkerRange_( Handle, CachedSelectors.doSetAXSelectedTextMarkerRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject firstChild() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstChild( Handle, CachedSelectors.firstChild, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int headingLevel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.headingLevel( Handle, CachedSelectors.headingLevel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject helpText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.helpText( Handle, CachedSelectors.helpText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject indexForTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexForTextMarker_( Handle, CachedSelectors.indexForTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isAnchor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAnchor( Handle, CachedSelectors.isAnchor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isAttachment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAttachment( Handle, CachedSelectors.isAttachment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isHeading() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isHeading( Handle, CachedSelectors.isHeading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isImageButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isImageButton( Handle, CachedSelectors.isImageButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isPasswordField() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPasswordField( Handle, CachedSelectors.isPasswordField, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isTextControl() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isTextControl( Handle, CachedSelectors.isTextControl, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isWebArea() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isWebArea( Handle, CachedSelectors.isWebArea, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject lastChild() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastChild( Handle, CachedSelectors.lastChild, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextSibling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextSibling( Handle, CachedSelectors.nextSibling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject observableObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.observableObject( Handle, CachedSelectors.observableObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentObject( Handle, CachedSelectors.parentObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentObjectUnignored() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentObjectUnignored( Handle, CachedSelectors.parentObjectUnignored, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject position() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.position( Handle, CachedSelectors.position, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject previousSibling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousSibling( Handle, CachedSelectors.previousSibling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rangeForTextMarkerRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rangeForTextMarkerRange_( Handle, CachedSelectors.rangeForTextMarkerRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAXObjectID() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAXObjectID( Handle, CachedSelectors.removeAXObjectID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject role() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.role( Handle, CachedSelectors.role, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject roleDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.roleDescription( Handle, CachedSelectors.roleDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAXObjectID_( uint id ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAXObjectID_( Handle, CachedSelectors.setAXObjectID_, out ___occuredException, sizeof( uint ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.setData_( Handle, CachedSelectors.setData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject size() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.size( Handle, CachedSelectors.size, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subrole() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrole( Handle, CachedSelectors.subrole, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject textMarkerForIndex_lastIndexOK_( NObjective.RuntimeObject index, char lastIndexOK ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textMarkerForIndex_lastIndexOK_( Handle, CachedSelectors.textMarkerForIndex_lastIndexOK_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), index, lastIndexOK );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject textMarkerRange() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textMarkerRange( Handle, CachedSelectors.textMarkerRange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject textMarkerRangeFromMarkers_andEndMarker_( NObjective.RuntimeObject markers, NObjective.RuntimeObject andEndMarker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textMarkerRangeFromMarkers_andEndMarker_( Handle, CachedSelectors.textMarkerRangeFromMarkers_andEndMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), markers, andEndMarker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject textUnderElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textUnderElement( Handle, CachedSelectors.textUnderElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityActionDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityActionNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityAttributeNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityAttributeValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityAttributeValue_forParameter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityFocusedUIElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsAttributeSettable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject settable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsIgnored( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityParameterizedAttributeNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void accessibilityPerformAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void accessibilitySetValue_forAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forAttribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityShouldUseUniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addChildrenToArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attachmentView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint axObjectID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canSetFocusAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canSetTextRangeAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canSetValueAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void childrenChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detach( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char detached( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXAttributedStringForTextMarkerRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXBoundsForTextMarkerRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXLeftLineTextMarkerRangeForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXLeftWordTextMarkerRangeForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXLengthForTextMarkerRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXLineForIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXLineForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXNextLineEndTextMarkerForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXNextParagraphEndTextMarkerForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXNextSentenceEndTextMarkerForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXNextTextMarkerForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXNextWordEndTextMarkerForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXParagraphTextMarkerRangeForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXPreviousLineStartTextMarkerForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXPreviousParagraphStartTextMarkerForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXPreviousSentenceStartTextMarkerForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXPreviousTextMarkerForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXPreviousWordStartTextMarkerForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXRangeForIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXRangeForLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXRightLineTextMarkerRangeForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXRightWordTextMarkerRangeForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXSentenceTextMarkerRangeForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXStringForTextMarkerRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXStyleRangeForIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXStyleTextMarkerRangeForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXTextMarkerRangeForLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXTextMarkerRangeForUIElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXTextMarkerRangeForUnorderedTextMarkers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject markers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr doAXUIElementForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doSetAXSelectedTextMarkerRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstChild( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int headingLevel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr helpText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr indexForTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAnchor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAttachment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isHeading( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isImageButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPasswordField( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isTextControl( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isWebArea( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastChild( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextSibling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr observableObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentObjectUnignored( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr position( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr previousSibling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rangeForTextMarkerRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAXObjectID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr role( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr roleDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAXObjectID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr size( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subrole( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textMarkerForIndex_lastIndexOK_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject index, char lastIndexOK );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textMarkerRange( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textMarkerRangeFromMarkers_andEndMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject markers, NObjective.RuntimeObject andEndMarker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textUnderElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityActionDescription_ = "accessibilityActionDescription:";
			public static readonly Selector accessibilityActionNames = "accessibilityActionNames";
			public static readonly Selector accessibilityAttributeNames = "accessibilityAttributeNames";
			public static readonly Selector accessibilityAttributeValue_ = "accessibilityAttributeValue:";
			public static readonly Selector accessibilityAttributeValue_forParameter_ = "accessibilityAttributeValue:forParameter:";
			public static readonly Selector accessibilityDescription = "accessibilityDescription";
			public static readonly Selector accessibilityFocusedUIElement = "accessibilityFocusedUIElement";
			public static readonly Selector accessibilityIsAttributeSettable_ = "accessibilityIsAttributeSettable:";
			public static readonly Selector accessibilityIsIgnored = "accessibilityIsIgnored";
			public static readonly Selector accessibilityParameterizedAttributeNames = "accessibilityParameterizedAttributeNames";
			public static readonly Selector accessibilityPerformAction_ = "accessibilityPerformAction:";
			public static readonly Selector accessibilitySetValue_forAttribute_ = "accessibilitySetValue:forAttribute:";
			public static readonly Selector accessibilityShouldUseUniqueId = "accessibilityShouldUseUniqueId";
			public static readonly Selector addChildrenToArray_ = "addChildrenToArray:";
			public static readonly Selector attachmentView = "attachmentView";
			public static readonly Selector axObjectID = "axObjectID";
			public static readonly Selector canSetFocusAttribute = "canSetFocusAttribute";
			public static readonly Selector canSetTextRangeAttributes = "canSetTextRangeAttributes";
			public static readonly Selector canSetValueAttribute = "canSetValueAttribute";
			public static readonly Selector childrenChanged = "childrenChanged";
			public static readonly Selector clearChildren = "clearChildren";
			public static readonly Selector data = "data";
			public static readonly Selector detach = "detach";
			public static readonly Selector detached = "detached";
			public static readonly Selector doAXAttributedStringForTextMarkerRange_ = "doAXAttributedStringForTextMarkerRange:";
			public static readonly Selector doAXBoundsForTextMarkerRange_ = "doAXBoundsForTextMarkerRange:";
			public static readonly Selector doAXLeftLineTextMarkerRangeForTextMarker_ = "doAXLeftLineTextMarkerRangeForTextMarker:";
			public static readonly Selector doAXLeftWordTextMarkerRangeForTextMarker_ = "doAXLeftWordTextMarkerRangeForTextMarker:";
			public static readonly Selector doAXLengthForTextMarkerRange_ = "doAXLengthForTextMarkerRange:";
			public static readonly Selector doAXLineForIndex_ = "doAXLineForIndex:";
			public static readonly Selector doAXLineForTextMarker_ = "doAXLineForTextMarker:";
			public static readonly Selector doAXNextLineEndTextMarkerForTextMarker_ = "doAXNextLineEndTextMarkerForTextMarker:";
			public static readonly Selector doAXNextParagraphEndTextMarkerForTextMarker_ = "doAXNextParagraphEndTextMarkerForTextMarker:";
			public static readonly Selector doAXNextSentenceEndTextMarkerForTextMarker_ = "doAXNextSentenceEndTextMarkerForTextMarker:";
			public static readonly Selector doAXNextTextMarkerForTextMarker_ = "doAXNextTextMarkerForTextMarker:";
			public static readonly Selector doAXNextWordEndTextMarkerForTextMarker_ = "doAXNextWordEndTextMarkerForTextMarker:";
			public static readonly Selector doAXParagraphTextMarkerRangeForTextMarker_ = "doAXParagraphTextMarkerRangeForTextMarker:";
			public static readonly Selector doAXPreviousLineStartTextMarkerForTextMarker_ = "doAXPreviousLineStartTextMarkerForTextMarker:";
			public static readonly Selector doAXPreviousParagraphStartTextMarkerForTextMarker_ = "doAXPreviousParagraphStartTextMarkerForTextMarker:";
			public static readonly Selector doAXPreviousSentenceStartTextMarkerForTextMarker_ = "doAXPreviousSentenceStartTextMarkerForTextMarker:";
			public static readonly Selector doAXPreviousTextMarkerForTextMarker_ = "doAXPreviousTextMarkerForTextMarker:";
			public static readonly Selector doAXPreviousWordStartTextMarkerForTextMarker_ = "doAXPreviousWordStartTextMarkerForTextMarker:";
			public static readonly Selector doAXRangeForIndex_ = "doAXRangeForIndex:";
			public static readonly Selector doAXRangeForLine_ = "doAXRangeForLine:";
			public static readonly Selector doAXRightLineTextMarkerRangeForTextMarker_ = "doAXRightLineTextMarkerRangeForTextMarker:";
			public static readonly Selector doAXRightWordTextMarkerRangeForTextMarker_ = "doAXRightWordTextMarkerRangeForTextMarker:";
			public static readonly Selector doAXSentenceTextMarkerRangeForTextMarker_ = "doAXSentenceTextMarkerRangeForTextMarker:";
			public static readonly Selector doAXStringForTextMarkerRange_ = "doAXStringForTextMarkerRange:";
			public static readonly Selector doAXStyleRangeForIndex_ = "doAXStyleRangeForIndex:";
			public static readonly Selector doAXStyleTextMarkerRangeForTextMarker_ = "doAXStyleTextMarkerRangeForTextMarker:";
			public static readonly Selector doAXTextMarkerRangeForLine_ = "doAXTextMarkerRangeForLine:";
			public static readonly Selector doAXTextMarkerRangeForUIElement_ = "doAXTextMarkerRangeForUIElement:";
			public static readonly Selector doAXTextMarkerRangeForUnorderedTextMarkers_ = "doAXTextMarkerRangeForUnorderedTextMarkers:";
			public static readonly Selector doAXUIElementForTextMarker_ = "doAXUIElementForTextMarker:";
			public static readonly Selector doSetAXSelectedTextMarkerRange_ = "doSetAXSelectedTextMarkerRange:";
			public static readonly Selector firstChild = "firstChild";
			public static readonly Selector headingLevel = "headingLevel";
			public static readonly Selector helpText = "helpText";
			public static readonly Selector indexForTextMarker_ = "indexForTextMarker:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector isAnchor = "isAnchor";
			public static readonly Selector isAttachment = "isAttachment";
			public static readonly Selector isHeading = "isHeading";
			public static readonly Selector isImageButton = "isImageButton";
			public static readonly Selector isPasswordField = "isPasswordField";
			public static readonly Selector isTextControl = "isTextControl";
			public static readonly Selector isWebArea = "isWebArea";
			public static readonly Selector lastChild = "lastChild";
			public static readonly Selector nextSibling = "nextSibling";
			public static readonly Selector observableObject = "observableObject";
			public static readonly Selector parentObject = "parentObject";
			public static readonly Selector parentObjectUnignored = "parentObjectUnignored";
			public static readonly Selector position = "position";
			public static readonly Selector previousSibling = "previousSibling";
			public static readonly Selector rangeForTextMarkerRange_ = "rangeForTextMarkerRange:";
			public static readonly Selector removeAXObjectID = "removeAXObjectID";
			public static readonly Selector role = "role";
			public static readonly Selector roleDescription = "roleDescription";
			public static readonly Selector setAXObjectID_ = "setAXObjectID:";
			public static readonly Selector setData_ = "setData:";
			public static readonly Selector size = "size";
			public static readonly Selector subrole = "subrole";
			public static readonly Selector textMarkerForIndex_lastIndexOK_ = "textMarkerForIndex:lastIndexOK:";
			public static readonly Selector textMarkerRange = "textMarkerRange";
			public static readonly Selector textMarkerRangeFromMarkers_andEndMarker_ = "textMarkerRangeFromMarkers:andEndMarker:";
			public static readonly Selector textUnderElement = "textUnderElement";
			public static readonly Selector title = "title";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreControlTintObserver : IEquatable<WebCoreControlTintObserver> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreControlTintObserver;
		public static implicit operator NSObject( WebCoreControlTintObserver value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreControlTintObserver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreControlTintObserver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreControlTintObserver?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreControlTintObserver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreControlTintObserver value1, WebCoreControlTintObserver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreControlTintObserver value1, WebCoreControlTintObserver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreControlTintObserver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreControlTintObserver alloc() {
			return new WebCoreControlTintObserver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void controlTintDidChange() {
			RuntimeObject ___occuredException;
			NativeMethods.controlTintDidChange( ClassHandle, CachedSelectors.controlTintDidChange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void controlTintDidChange( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector controlTintDidChange = "controlTintDidChange";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreCursorBundle : IEquatable<WebCoreCursorBundle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreCursorBundle;
		public static implicit operator NSObject( WebCoreCursorBundle value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreCursorBundle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreCursorBundle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreCursorBundle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreCursorBundle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreCursorBundle value1, WebCoreCursorBundle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreCursorBundle value1, WebCoreCursorBundle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreCursorBundle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreCursorBundle alloc() {
			return new WebCoreCursorBundle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreFrameBridge : IEquatable<WebCoreFrameBridge> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreFrameBridge;
		public static implicit operator NSObject( WebCoreFrameBridge value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreFrameBridge value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreFrameBridge value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreFrameBridge?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreFrameBridge value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreFrameBridge value1, WebCoreFrameBridge value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreFrameBridge value1, WebCoreFrameBridge value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreFrameBridge( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreFrameBridge alloc() {
			return new WebCoreFrameBridge( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject bridgeForDOMDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bridgeForDOMDocument_( ClassHandle, CachedSelectors.bridgeForDOMDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject stringWithData_textEncodingName_( NObjective.RuntimeObject data, NObjective.RuntimeObject textEncodingName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithData_textEncodingName_( ClassHandle, CachedSelectors.stringWithData_textEncodingName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), data, textEncodingName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityTree() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityTree( Handle, CachedSelectors.accessibilityTree, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.addData_( Handle, CachedSelectors.addData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void adjustPageHeightNew_top_bottom_limit_( System.IntPtr @new, float top, float bottom, float limit ) {
			RuntimeObject ___occuredException;
			NativeMethods.adjustPageHeightNew_top_bottom_limit_( Handle, CachedSelectors.adjustPageHeightNew_top_bottom_limit_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( float ) + sizeof( float ) + sizeof( float ), @new, top, bottom, limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject aeDescByEvaluatingJavaScriptFromString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.aeDescByEvaluatingJavaScriptFromString_( Handle, CachedSelectors.aeDescByEvaluatingJavaScriptFromString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseURL( Handle, CachedSelectors.baseURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char canProvideDocumentSource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canProvideDocumentSource( Handle, CachedSelectors.canProvideDocumentSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char canSaveAsWebArchive() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canSaveAsWebArchive( Handle, CachedSelectors.canSaveAsWebArchive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void clearFrame() {
			RuntimeObject ___occuredException;
			NativeMethods.clearFrame( Handle, CachedSelectors.clearFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void close() {
			RuntimeObject ___occuredException;
			NativeMethods.close( Handle, CachedSelectors.close, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject computePageRectsWithPrintWidthScaleFactor_printHeight_( float factor, float printHeight ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.computePageRectsWithPrintWidthScaleFactor_printHeight_( Handle, CachedSelectors.computePageRectsWithPrintWidthScaleFactor_printHeight_, out ___occuredException, sizeof( float ) + sizeof( float ), factor, printHeight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject controlsInForm_( NObjective.RuntimeObject form ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.controlsInForm_( Handle, CachedSelectors.controlsInForm_, out ___occuredException, sizeof( NObjective.RuntimeObject ), form );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject copyRenderTree_( NObjective.RuntimeObject tree ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.copyRenderTree_( Handle, CachedSelectors.copyRenderTree_, out ___occuredException, sizeof( NObjective.RuntimeObject ), tree );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void createFrameViewWithNSView_marginWidth_marginHeight_( NObjective.RuntimeObject view, int marginWidth, int marginHeight ) {
			RuntimeObject ___occuredException;
			NativeMethods.createFrameViewWithNSView_marginWidth_marginHeight_( Handle, CachedSelectors.createFrameViewWithNSView_marginWidth_marginHeight_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ), view, marginWidth, marginHeight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject currentForm() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentForm( Handle, CachedSelectors.currentForm, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject documentFragmentWithMarkupString_baseURLString_( NObjective.RuntimeObject @string, NObjective.RuntimeObject baseURLString ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentFragmentWithMarkupString_baseURLString_( Handle, CachedSelectors.documentFragmentWithMarkupString_baseURLString_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, baseURLString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject documentFragmentWithNodesAsParagraphs_( NObjective.RuntimeObject paragraphs ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentFragmentWithNodesAsParagraphs_( Handle, CachedSelectors.documentFragmentWithNodesAsParagraphs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraphs );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject documentFragmentWithText_inContext_( NObjective.RuntimeObject text, NObjective.RuntimeObject inContext ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentFragmentWithText_inContext_( Handle, CachedSelectors.documentFragmentWithText_inContext_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), text, inContext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject domain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.domain( Handle, CachedSelectors.domain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char elementDoesAutoComplete_( NObjective.RuntimeObject complete ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementDoesAutoComplete_( Handle, CachedSelectors.elementDoesAutoComplete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), complete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char elementIsPassword_( NObjective.RuntimeObject password ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementIsPassword_( Handle, CachedSelectors.elementIsPassword_, out ___occuredException, sizeof( NObjective.RuntimeObject ), password );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject elementWithName_inForm_( NObjective.RuntimeObject name, NObjective.RuntimeObject inForm ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementWithName_inForm_( Handle, CachedSelectors.elementWithName_inForm_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, inForm );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject fontForSelection_( System.IntPtr selection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fontForSelection_( Handle, CachedSelectors.fontForSelection_, out ___occuredException, sizeof( System.IntPtr ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void forceLayoutAdjustingViewSize_( char size ) {
			RuntimeObject ___occuredException;
			NativeMethods.forceLayoutAdjustingViewSize_( Handle, CachedSelectors.forceLayoutAdjustingViewSize_, out ___occuredException, sizeof( char ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void forceLayoutWithMinimumPageWidth_maximumPageWidth_adjustingViewSize_( float width, float maximumPageWidth, char adjustingViewSize ) {
			RuntimeObject ___occuredException;
			NativeMethods.forceLayoutWithMinimumPageWidth_maximumPageWidth_adjustingViewSize_( Handle, CachedSelectors.forceLayoutWithMinimumPageWidth_maximumPageWidth_adjustingViewSize_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( char ), width, maximumPageWidth, adjustingViewSize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject formForElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formForElement_( Handle, CachedSelectors.formForElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void getAllResourceDatas_andResponses_( System.IntPtr datas, System.IntPtr andResponses ) {
			RuntimeObject ___occuredException;
			NativeMethods.getAllResourceDatas_andResponses_( Handle, CachedSelectors.getAllResourceDatas_andResponses_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ), datas, andResponses );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char getData_andResponse_forURL_( System.IntPtr data, System.IntPtr andResponse, NObjective.RuntimeObject forURL ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getData_andResponse_forURL_( Handle, CachedSelectors.getData_andResponse_forURL_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ), data, andResponse, forURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void insertParagraphSeparatorInQuotedContent() {
			RuntimeObject ___occuredException;
			NativeMethods.insertParagraphSeparatorInQuotedContent( Handle, CachedSelectors.insertParagraphSeparatorInQuotedContent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void installInFrame_( NObjective.RuntimeObject frame ) {
			RuntimeObject ___occuredException;
			NativeMethods.installInFrame_( Handle, CachedSelectors.installInFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ), frame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint markAllMatchesForText_caseSensitive_limit_( NObjective.RuntimeObject text, char caseSensitive, uint limit ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markAllMatchesForText_caseSensitive_limit_( Handle, CachedSelectors.markAllMatchesForText_caseSensitive_limit_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( uint ), text, caseSensitive, limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject markDOMRange() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markDOMRange( Handle, CachedSelectors.markDOMRange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char markedTextMatchesAreHighlighted() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markedTextMatchesAreHighlighted( Handle, CachedSelectors.markedTextMatchesAreHighlighted, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject markupStringFromNode_nodes_( NObjective.RuntimeObject node, System.IntPtr nodes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markupStringFromNode_nodes_( Handle, CachedSelectors.markupStringFromNode_nodes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), node, nodes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject markupStringFromRange_nodes_( NObjective.RuntimeObject range, System.IntPtr nodes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markupStringFromRange_nodes_( Handle, CachedSelectors.markupStringFromRange_nodes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), range, nodes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject matchLabels_againstElement_( NObjective.RuntimeObject labels, NObjective.RuntimeObject againstElement ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchLabels_againstElement_( Handle, CachedSelectors.matchLabels_againstElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), labels, againstElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char needsLayout() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.needsLayout( Handle, CachedSelectors.needsLayout, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject rangeByAlteringCurrentSelection_direction_granularity_( int selection, int direction, int granularity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rangeByAlteringCurrentSelection_direction_granularity_( Handle, CachedSelectors.rangeByAlteringCurrentSelection_direction_granularity_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( int ), selection, direction, granularity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reapplyStylesForDeviceType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.reapplyStylesForDeviceType_( Handle, CachedSelectors.reapplyStylesForDeviceType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void receivedData_textEncodingName_( NObjective.RuntimeObject data, NObjective.RuntimeObject textEncodingName ) {
			RuntimeObject ___occuredException;
			NativeMethods.receivedData_textEncodingName_( Handle, CachedSelectors.receivedData_textEncodingName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), data, textEncodingName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject rectsForTextMatches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rectsForTextMatches( Handle, CachedSelectors.rectsForTextMatches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject renderTreeAsExternalRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.renderTreeAsExternalRepresentation( Handle, CachedSelectors.renderTreeAsExternalRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void replaceSelectionWithFragment_selectReplacement_smartReplace_matchStyle_( NObjective.RuntimeObject fragment, char selectReplacement, char smartReplace, char matchStyle ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceSelectionWithFragment_selectReplacement_smartReplace_matchStyle_( Handle, CachedSelectors.replaceSelectionWithFragment_selectReplacement_smartReplace_matchStyle_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ), fragment, selectReplacement, smartReplace, matchStyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceSelectionWithMarkupString_baseURLString_selectReplacement_smartReplace_( NObjective.RuntimeObject @string, NObjective.RuntimeObject baseURLString, char selectReplacement, char smartReplace ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceSelectionWithMarkupString_baseURLString_selectReplacement_smartReplace_( Handle, CachedSelectors.replaceSelectionWithMarkupString_baseURLString_selectReplacement_smartReplace_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), @string, baseURLString, selectReplacement, smartReplace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceSelectionWithNode_selectReplacement_smartReplace_matchStyle_( NObjective.RuntimeObject node, char selectReplacement, char smartReplace, char matchStyle ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceSelectionWithNode_selectReplacement_smartReplace_matchStyle_( Handle, CachedSelectors.replaceSelectionWithNode_selectReplacement_smartReplace_matchStyle_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ), node, selectReplacement, smartReplace, matchStyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceSelectionWithText_selectReplacement_smartReplace_( NObjective.RuntimeObject text, char selectReplacement, char smartReplace ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceSelectionWithText_selectReplacement_smartReplace_( Handle, CachedSelectors.replaceSelectionWithText_selectReplacement_smartReplace_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), text, selectReplacement, smartReplace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollDOMRangeToVisible_( NObjective.RuntimeObject visible ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollDOMRangeToVisible_( Handle, CachedSelectors.scrollDOMRangeToVisible_, out ___occuredException, sizeof( NObjective.RuntimeObject ), visible );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char scrollOverflowInDirection_granularity_( int direction, int granularity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrollOverflowInDirection_granularity_( Handle, CachedSelectors.scrollOverflowInDirection_granularity_, out ___occuredException, sizeof( int ) + sizeof( int ), direction, granularity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char searchFor_direction_caseSensitive_wrap_startInSelection_( NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap, char startInSelection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchFor_direction_caseSensitive_wrap_startInSelection_( Handle, CachedSelectors.searchFor_direction_caseSensitive_wrap_startInSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), @for, direction, caseSensitive, wrap, startInSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject searchForLabels_beforeElement_( NObjective.RuntimeObject labels, NObjective.RuntimeObject beforeElement ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchForLabels_beforeElement_( Handle, CachedSelectors.searchForLabels_beforeElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), labels, beforeElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedString( Handle, CachedSelectors.selectedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int selectionGranularity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionGranularity( Handle, CachedSelectors.selectionGranularity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void sendScrollEvent() {
			RuntimeObject ___occuredException;
			NativeMethods.sendScrollEvent( Handle, CachedSelectors.sendScrollEvent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBaseBackgroundColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBaseBackgroundColor_( Handle, CachedSelectors.setBaseBackgroundColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDrawsBackground_( char background ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDrawsBackground_( Handle, CachedSelectors.setDrawsBackground_, out ___occuredException, sizeof( char ), background );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarkedTextMatchesAreHighlighted_( char highlighted ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMarkedTextMatchesAreHighlighted_( Handle, CachedSelectors.setMarkedTextMatchesAreHighlighted_, out ___occuredException, sizeof( char ), highlighted );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldCreateRenderers_( char renderers ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldCreateRenderers_( Handle, CachedSelectors.setShouldCreateRenderers_, out ___occuredException, sizeof( char ), renderers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextSizeMultiplier_( float multiplier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextSizeMultiplier_( Handle, CachedSelectors.setTextSizeMultiplier_, out ___occuredException, sizeof( float ), multiplier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTypingStyle_withUndoAction_( NObjective.RuntimeObject style, int withUndoAction ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTypingStyle_withUndoAction_( Handle, CachedSelectors.setTypingStyle_withUndoAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), style, withUndoAction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject smartDeleteRangeForProposedRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smartDeleteRangeForProposedRange_( Handle, CachedSelectors.smartDeleteRangeForProposedRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void smartInsertForString_replacingRange_beforeString_afterString_( NObjective.RuntimeObject @string, NObjective.RuntimeObject replacingRange, System.IntPtr beforeString, System.IntPtr afterString ) {
			RuntimeObject ___occuredException;
			NativeMethods.smartInsertForString_replacingRange_beforeString_afterString_( Handle, CachedSelectors.smartInsertForString_replacingRange_beforeString_afterString_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), @string, replacingRange, beforeString, afterString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject stringByEvaluatingJavaScriptFromString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByEvaluatingJavaScriptFromString_( Handle, CachedSelectors.stringByEvaluatingJavaScriptFromString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringByEvaluatingJavaScriptFromString_forceUserGesture_( NObjective.RuntimeObject @string, char forceUserGesture ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByEvaluatingJavaScriptFromString_forceUserGesture_( Handle, CachedSelectors.stringByEvaluatingJavaScriptFromString_forceUserGesture_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), @string, forceUserGesture );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringForRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringForRange_( Handle, CachedSelectors.stringForRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringWithData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithData_( Handle, CachedSelectors.stringWithData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject typingStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typingStyle( Handle, CachedSelectors.typingStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void unmarkAllTextMatches() {
			RuntimeObject ___occuredException;
			NativeMethods.unmarkAllTextMatches( Handle, CachedSelectors.unmarkAllTextMatches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject URLWithAttributeString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLWithAttributeString_( Handle, CachedSelectors.URLWithAttributeString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityTree( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void adjustPageHeightNew_top_bottom_limit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr @new, float top, float bottom, float limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr aeDescByEvaluatingJavaScriptFromString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bridgeForDOMDocument_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canProvideDocumentSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canSaveAsWebArchive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void close( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr computePageRectsWithPrintWidthScaleFactor_printHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float factor, float printHeight );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr controlsInForm_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject form );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr copyRenderTree_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject tree );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void createFrameViewWithNSView_marginWidth_marginHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int marginWidth, int marginHeight );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentForm( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr documentFragmentWithMarkupString_baseURLString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject baseURLString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr documentFragmentWithNodesAsParagraphs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraphs );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr documentFragmentWithText_inContext_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text, NObjective.RuntimeObject inContext );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr domain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char elementDoesAutoComplete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject complete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char elementIsPassword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject password );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementWithName_inForm_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject inForm );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fontForSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void forceLayoutAdjustingViewSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void forceLayoutWithMinimumPageWidth_maximumPageWidth_adjustingViewSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float width, float maximumPageWidth, char adjustingViewSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr formForElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getAllResourceDatas_andResponses_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr datas, System.IntPtr andResponses );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char getData_andResponse_forURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr data, System.IntPtr andResponse, NObjective.RuntimeObject forURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertParagraphSeparatorInQuotedContent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void installInFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint markAllMatchesForText_caseSensitive_limit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text, char caseSensitive, uint limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr markDOMRange( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char markedTextMatchesAreHighlighted( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr markupStringFromNode_nodes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node, System.IntPtr nodes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr markupStringFromRange_nodes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range, System.IntPtr nodes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr matchLabels_againstElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject labels, NObjective.RuntimeObject againstElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char needsLayout( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rangeByAlteringCurrentSelection_direction_granularity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int selection, int direction, int granularity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reapplyStylesForDeviceType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void receivedData_textEncodingName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, NObjective.RuntimeObject textEncodingName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rectsForTextMatches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr renderTreeAsExternalRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceSelectionWithFragment_selectReplacement_smartReplace_matchStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject fragment, char selectReplacement, char smartReplace, char matchStyle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceSelectionWithMarkupString_baseURLString_selectReplacement_smartReplace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject baseURLString, char selectReplacement, char smartReplace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceSelectionWithNode_selectReplacement_smartReplace_matchStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node, char selectReplacement, char smartReplace, char matchStyle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceSelectionWithText_selectReplacement_smartReplace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text, char selectReplacement, char smartReplace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollDOMRangeToVisible_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visible );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scrollOverflowInDirection_granularity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int direction, int granularity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char searchFor_direction_caseSensitive_wrap_startInSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap, char startInSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchForLabels_beforeElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject labels, NObjective.RuntimeObject beforeElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int selectionGranularity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendScrollEvent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBaseBackgroundColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDrawsBackground_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char background );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarkedTextMatchesAreHighlighted_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char highlighted );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldCreateRenderers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char renderers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextSizeMultiplier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float multiplier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTypingStyle_withUndoAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject style, int withUndoAction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr smartDeleteRangeForProposedRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void smartInsertForString_replacingRange_beforeString_afterString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject replacingRange, System.IntPtr beforeString, System.IntPtr afterString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByEvaluatingJavaScriptFromString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByEvaluatingJavaScriptFromString_forceUserGesture_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, char forceUserGesture );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringForRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithData_textEncodingName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, NObjective.RuntimeObject textEncodingName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr typingStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unmarkAllTextMatches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLWithAttributeString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityTree = "accessibilityTree";
			public static readonly Selector addData_ = "addData:";
			public static readonly Selector adjustPageHeightNew_top_bottom_limit_ = "adjustPageHeightNew:top:bottom:limit:";
			public static readonly Selector aeDescByEvaluatingJavaScriptFromString_ = "aeDescByEvaluatingJavaScriptFromString:";
			public static readonly Selector baseURL = "baseURL";
			public static readonly Selector bridgeForDOMDocument_ = "bridgeForDOMDocument:";
			public static readonly Selector canProvideDocumentSource = "canProvideDocumentSource";
			public static readonly Selector canSaveAsWebArchive = "canSaveAsWebArchive";
			public static readonly Selector clearFrame = "clearFrame";
			public static readonly Selector close = "close";
			public static readonly Selector computePageRectsWithPrintWidthScaleFactor_printHeight_ = "computePageRectsWithPrintWidthScaleFactor:printHeight:";
			public static readonly Selector controlsInForm_ = "controlsInForm:";
			public static readonly Selector copyRenderTree_ = "copyRenderTree:";
			public static readonly Selector createFrameViewWithNSView_marginWidth_marginHeight_ = "createFrameViewWithNSView:marginWidth:marginHeight:";
			public static readonly Selector currentForm = "currentForm";
			public static readonly Selector documentFragmentWithMarkupString_baseURLString_ = "documentFragmentWithMarkupString:baseURLString:";
			public static readonly Selector documentFragmentWithNodesAsParagraphs_ = "documentFragmentWithNodesAsParagraphs:";
			public static readonly Selector documentFragmentWithText_inContext_ = "documentFragmentWithText:inContext:";
			public static readonly Selector domain = "domain";
			public static readonly Selector elementDoesAutoComplete_ = "elementDoesAutoComplete:";
			public static readonly Selector elementIsPassword_ = "elementIsPassword:";
			public static readonly Selector elementWithName_inForm_ = "elementWithName:inForm:";
			public static readonly Selector fontForSelection_ = "fontForSelection:";
			public static readonly Selector forceLayoutAdjustingViewSize_ = "forceLayoutAdjustingViewSize:";
			public static readonly Selector forceLayoutWithMinimumPageWidth_maximumPageWidth_adjustingViewSize_ = "forceLayoutWithMinimumPageWidth:maximumPageWidth:adjustingViewSize:";
			public static readonly Selector formForElement_ = "formForElement:";
			public static readonly Selector getAllResourceDatas_andResponses_ = "getAllResourceDatas:andResponses:";
			public static readonly Selector getData_andResponse_forURL_ = "getData:andResponse:forURL:";
			public static readonly Selector insertParagraphSeparatorInQuotedContent = "insertParagraphSeparatorInQuotedContent";
			public static readonly Selector installInFrame_ = "installInFrame:";
			public static readonly Selector markAllMatchesForText_caseSensitive_limit_ = "markAllMatchesForText:caseSensitive:limit:";
			public static readonly Selector markDOMRange = "markDOMRange";
			public static readonly Selector markedTextMatchesAreHighlighted = "markedTextMatchesAreHighlighted";
			public static readonly Selector markupStringFromNode_nodes_ = "markupStringFromNode:nodes:";
			public static readonly Selector markupStringFromRange_nodes_ = "markupStringFromRange:nodes:";
			public static readonly Selector matchLabels_againstElement_ = "matchLabels:againstElement:";
			public static readonly Selector needsLayout = "needsLayout";
			public static readonly Selector rangeByAlteringCurrentSelection_direction_granularity_ = "rangeByAlteringCurrentSelection:direction:granularity:";
			public static readonly Selector reapplyStylesForDeviceType_ = "reapplyStylesForDeviceType:";
			public static readonly Selector receivedData_textEncodingName_ = "receivedData:textEncodingName:";
			public static readonly Selector rectsForTextMatches = "rectsForTextMatches";
			public static readonly Selector renderTreeAsExternalRepresentation = "renderTreeAsExternalRepresentation";
			public static readonly Selector replaceSelectionWithFragment_selectReplacement_smartReplace_matchStyle_ = "replaceSelectionWithFragment:selectReplacement:smartReplace:matchStyle:";
			public static readonly Selector replaceSelectionWithMarkupString_baseURLString_selectReplacement_smartReplace_ = "replaceSelectionWithMarkupString:baseURLString:selectReplacement:smartReplace:";
			public static readonly Selector replaceSelectionWithNode_selectReplacement_smartReplace_matchStyle_ = "replaceSelectionWithNode:selectReplacement:smartReplace:matchStyle:";
			public static readonly Selector replaceSelectionWithText_selectReplacement_smartReplace_ = "replaceSelectionWithText:selectReplacement:smartReplace:";
			public static readonly Selector scrollDOMRangeToVisible_ = "scrollDOMRangeToVisible:";
			public static readonly Selector scrollOverflowInDirection_granularity_ = "scrollOverflowInDirection:granularity:";
			public static readonly Selector searchFor_direction_caseSensitive_wrap_startInSelection_ = "searchFor:direction:caseSensitive:wrap:startInSelection:";
			public static readonly Selector searchForLabels_beforeElement_ = "searchForLabels:beforeElement:";
			public static readonly Selector selectedString = "selectedString";
			public static readonly Selector selectionGranularity = "selectionGranularity";
			public static readonly Selector sendScrollEvent = "sendScrollEvent";
			public static readonly Selector setBaseBackgroundColor_ = "setBaseBackgroundColor:";
			public static readonly Selector setDrawsBackground_ = "setDrawsBackground:";
			public static readonly Selector setMarkedTextMatchesAreHighlighted_ = "setMarkedTextMatchesAreHighlighted:";
			public static readonly Selector setShouldCreateRenderers_ = "setShouldCreateRenderers:";
			public static readonly Selector setTextSizeMultiplier_ = "setTextSizeMultiplier:";
			public static readonly Selector setTypingStyle_withUndoAction_ = "setTypingStyle:withUndoAction:";
			public static readonly Selector smartDeleteRangeForProposedRange_ = "smartDeleteRangeForProposedRange:";
			public static readonly Selector smartInsertForString_replacingRange_beforeString_afterString_ = "smartInsertForString:replacingRange:beforeString:afterString:";
			public static readonly Selector stringByEvaluatingJavaScriptFromString_ = "stringByEvaluatingJavaScriptFromString:";
			public static readonly Selector stringByEvaluatingJavaScriptFromString_forceUserGesture_ = "stringByEvaluatingJavaScriptFromString:forceUserGesture:";
			public static readonly Selector stringForRange_ = "stringForRange:";
			public static readonly Selector stringWithData_ = "stringWithData:";
			public static readonly Selector stringWithData_textEncodingName_ = "stringWithData:textEncodingName:";
			public static readonly Selector typingStyle = "typingStyle";
			public static readonly Selector unmarkAllTextMatches = "unmarkAllTextMatches";
			public static readonly Selector URLWithAttributeString_ = "URLWithAttributeString:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreFunctionWrapper : IEquatable<WebCoreFunctionWrapper> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreFunctionWrapper;
		public static implicit operator NSObject( WebCoreFunctionWrapper value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreFunctionWrapper value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreFunctionWrapper value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreFunctionWrapper?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreFunctionWrapper value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreFunctionWrapper value1, WebCoreFunctionWrapper value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreFunctionWrapper value1, WebCoreFunctionWrapper value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreFunctionWrapper( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreFunctionWrapper alloc() {
			return new WebCoreFunctionWrapper( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void invoke() {
			RuntimeObject ___occuredException;
			NativeMethods.invoke( Handle, CachedSelectors.invoke, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invoke( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector invoke = "invoke";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreHistory : IEquatable<WebCoreHistory> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreHistory;
		public static implicit operator NSObject( WebCoreHistory value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreHistory value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreHistory value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreHistory?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreHistory value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreHistory value1, WebCoreHistory value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreHistory value1, WebCoreHistory value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreHistory( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreHistory alloc() {
			return new WebCoreHistory( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject historyProvider() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.historyProvider( ClassHandle, CachedSelectors.historyProvider, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void setHistoryProvider_( NObjective.RuntimeObject provider ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHistoryProvider_( ClassHandle, CachedSelectors.setHistoryProvider_, out ___occuredException, sizeof( NObjective.RuntimeObject ), provider );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr historyProvider( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHistoryProvider_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject provider );
		}
		static internal class CachedSelectors {
			public static readonly Selector historyProvider = "historyProvider";
			public static readonly Selector setHistoryProvider_ = "setHistoryProvider:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreKeyGenerator : IEquatable<WebCoreKeyGenerator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreKeyGenerator;
		public static implicit operator NSObject( WebCoreKeyGenerator value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreKeyGenerator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreKeyGenerator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreKeyGenerator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreKeyGenerator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreKeyGenerator value1, WebCoreKeyGenerator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreKeyGenerator value1, WebCoreKeyGenerator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreKeyGenerator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreKeyGenerator alloc() {
			return new WebCoreKeyGenerator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedGenerator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedGenerator( ClassHandle, CachedSelectors.sharedGenerator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject signedPublicKeyAndChallengeStringWithStrengthIndex_challenge_pageURL_( uint index, NObjective.RuntimeObject challenge, NObjective.RuntimeObject pageURL ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.signedPublicKeyAndChallengeStringWithStrengthIndex_challenge_pageURL_( Handle, CachedSelectors.signedPublicKeyAndChallengeStringWithStrengthIndex_challenge_pageURL_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), index, challenge, pageURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject strengthMenuItemTitles() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.strengthMenuItemTitles( Handle, CachedSelectors.strengthMenuItemTitles, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedGenerator( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr signedPublicKeyAndChallengeStringWithStrengthIndex_challenge_pageURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject challenge, NObjective.RuntimeObject pageURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr strengthMenuItemTitles( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector sharedGenerator = "sharedGenerator";
			public static readonly Selector signedPublicKeyAndChallengeStringWithStrengthIndex_challenge_pageURL_ = "signedPublicKeyAndChallengeStringWithStrengthIndex:challenge:pageURL:";
			public static readonly Selector strengthMenuItemTitles = "strengthMenuItemTitles";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreMenuTarget : IEquatable<WebCoreMenuTarget> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreMenuTarget;
		public static implicit operator NSObject( WebCoreMenuTarget value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreMenuTarget value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreMenuTarget value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreMenuTarget?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreMenuTarget value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreMenuTarget value1, WebCoreMenuTarget value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreMenuTarget value1, WebCoreMenuTarget value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreMenuTarget( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreMenuTarget alloc() {
			return new WebCoreMenuTarget( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedMenuTarget() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedMenuTarget( ClassHandle, CachedSelectors.sharedMenuTarget, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void forwardContextMenuAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.forwardContextMenuAction_( Handle, CachedSelectors.forwardContextMenuAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void forwardContextMenuAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedMenuTarget( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
		}
		static internal class CachedSelectors {
			public static readonly Selector forwardContextMenuAction_ = "forwardContextMenuAction:";
			public static readonly Selector sharedMenuTarget = "sharedMenuTarget";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreMovieObserver : IEquatable<WebCoreMovieObserver> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreMovieObserver;
		public static implicit operator NSObject( WebCoreMovieObserver value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreMovieObserver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreMovieObserver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreMovieObserver?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreMovieObserver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreMovieObserver value1, WebCoreMovieObserver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreMovieObserver value1, WebCoreMovieObserver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreMovieObserver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreMovieObserver alloc() {
			return new WebCoreMovieObserver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void didEnd_( NObjective.RuntimeObject end ) {
			RuntimeObject ___occuredException;
			NativeMethods.didEnd_( Handle, CachedSelectors.didEnd_, out ___occuredException, sizeof( NObjective.RuntimeObject ), end );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void disconnect() {
			RuntimeObject ___occuredException;
			NativeMethods.disconnect( Handle, CachedSelectors.disconnect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void loadStateChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.loadStateChanged_( Handle, CachedSelectors.loadStateChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void rateChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.rateChanged_( Handle, CachedSelectors.rateChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void repaint() {
			RuntimeObject ___occuredException;
			NativeMethods.repaint( Handle, CachedSelectors.repaint, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelayCallbacks_( char callbacks ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelayCallbacks_( Handle, CachedSelectors.setDelayCallbacks_, out ___occuredException, sizeof( char ), callbacks );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sizeChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.sizeChanged_( Handle, CachedSelectors.sizeChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void timeChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.timeChanged_( Handle, CachedSelectors.timeChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didEnd_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void disconnect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadStateChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void rateChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void repaint( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelayCallbacks_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char callbacks );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sizeChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void timeChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
		}
		static internal class CachedSelectors {
			public static readonly Selector didEnd_ = "didEnd:";
			public static readonly Selector disconnect = "disconnect";
			public static readonly Selector loadStateChanged_ = "loadStateChanged:";
			public static readonly Selector rateChanged_ = "rateChanged:";
			public static readonly Selector repaint = "repaint";
			public static readonly Selector setDelayCallbacks_ = "setDelayCallbacks:";
			public static readonly Selector sizeChanged_ = "sizeChanged:";
			public static readonly Selector timeChanged_ = "timeChanged:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreOpenPanelController : IEquatable<WebCoreOpenPanelController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreOpenPanelController;
		public static implicit operator NSObject( WebCoreOpenPanelController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreOpenPanelController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreOpenPanelController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreOpenPanelController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreOpenPanelController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreOpenPanelController value1, WebCoreOpenPanelController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreOpenPanelController value1, WebCoreOpenPanelController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreOpenPanelController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreOpenPanelController alloc() {
			return new WebCoreOpenPanelController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void cancel() {
			RuntimeObject ___occuredException;
			NativeMethods.cancel( Handle, CachedSelectors.cancel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void chooseFilename_( NObjective.RuntimeObject filename ) {
			RuntimeObject ___occuredException;
			NativeMethods.chooseFilename_( Handle, CachedSelectors.chooseFilename_, out ___occuredException, sizeof( NObjective.RuntimeObject ), filename );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void disconnectFileChooser() {
			RuntimeObject ___occuredException;
			NativeMethods.disconnectFileChooser( Handle, CachedSelectors.disconnectFileChooser, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void chooseFilename_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filename );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void disconnectFileChooser( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancel = "cancel";
			public static readonly Selector chooseFilename_ = "chooseFilename:";
			public static readonly Selector disconnectFileChooser = "disconnectFileChooser";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCorePowerNotifier : IEquatable<WebCorePowerNotifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCorePowerNotifier;
		public static implicit operator NSObject( WebCorePowerNotifier value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCorePowerNotifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCorePowerNotifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCorePowerNotifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCorePowerNotifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCorePowerNotifier value1, WebCorePowerNotifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCorePowerNotifier value1, WebCorePowerNotifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCorePowerNotifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCorePowerNotifier alloc() {
			return new WebCorePowerNotifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void didWake_( NObjective.RuntimeObject wake ) {
			RuntimeObject ___occuredException;
			NativeMethods.didWake_( Handle, CachedSelectors.didWake_, out ___occuredException, sizeof( NObjective.RuntimeObject ), wake );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didWake_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject wake );
		}
		static internal class CachedSelectors {
			public static readonly Selector didWake_ = "didWake:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreRenderThemeNotificationObserver : IEquatable<WebCoreRenderThemeNotificationObserver> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreRenderThemeNotificationObserver;
		public static implicit operator NSObject( WebCoreRenderThemeNotificationObserver value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreRenderThemeNotificationObserver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreRenderThemeNotificationObserver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreRenderThemeNotificationObserver?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreRenderThemeNotificationObserver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreRenderThemeNotificationObserver value1, WebCoreRenderThemeNotificationObserver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreRenderThemeNotificationObserver value1, WebCoreRenderThemeNotificationObserver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreRenderThemeNotificationObserver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreRenderThemeNotificationObserver alloc() {
			return new WebCoreRenderThemeNotificationObserver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void systemColorsDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.systemColorsDidChange_( Handle, CachedSelectors.systemColorsDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void systemColorsDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
		}
		static internal class CachedSelectors {
			public static readonly Selector systemColorsDidChange_ = "systemColorsDidChange:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreResourceHandleAsDelegate : IEquatable<WebCoreResourceHandleAsDelegate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreResourceHandleAsDelegate;
		public static implicit operator NSObject( WebCoreResourceHandleAsDelegate value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreResourceHandleAsDelegate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreResourceHandleAsDelegate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreResourceHandleAsDelegate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreResourceHandleAsDelegate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreResourceHandleAsDelegate value1, WebCoreResourceHandleAsDelegate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreResourceHandleAsDelegate value1, WebCoreResourceHandleAsDelegate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreResourceHandleAsDelegate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreResourceHandleAsDelegate alloc() {
			return new WebCoreResourceHandleAsDelegate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void cancelAuthenticationChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelAuthenticationChallenge_( Handle, CachedSelectors.cancelAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didCancelAuthenticationChallenge_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didCancelAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didCancelAuthenticationChallenge_( Handle, CachedSelectors.connection_didCancelAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didCancelAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didFailWithError_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didFailWithError_( Handle, CachedSelectors.connection_didFailWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didFailWithError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveAuthenticationChallenge_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveAuthenticationChallenge_( Handle, CachedSelectors.connection_didReceiveAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveData_lengthReceived_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData, long lengthReceived ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveData_lengthReceived_( Handle, CachedSelectors.connection_didReceiveData_lengthReceived_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( long ), connection, didReceiveData, lengthReceived );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveResponse ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveResponse_( Handle, CachedSelectors.connection_didReceiveResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject connection_willCacheResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willCacheResponse ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connection_willCacheResponse_( Handle, CachedSelectors.connection_willCacheResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willCacheResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject connection_willSendRequest_redirectResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connection_willSendRequest_redirectResponse_( Handle, CachedSelectors.connection_willSendRequest_redirectResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willSendRequest, redirectResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void connection_willStopBufferingData_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willStopBufferingData ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_willStopBufferingData_( Handle, CachedSelectors.connection_willStopBufferingData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willStopBufferingData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connectionDidFinishLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectionDidFinishLoading_( Handle, CachedSelectors.connectionDidFinishLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void continueWithoutCredentialForAuthenticationChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.continueWithoutCredentialForAuthenticationChallenge_( Handle, CachedSelectors.continueWithoutCredentialForAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void detachHandle() {
			RuntimeObject ___occuredException;
			NativeMethods.detachHandle( Handle, CachedSelectors.detachHandle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void useCredential_forAuthenticationChallenge_( NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.useCredential_forAuthenticationChallenge_( Handle, CachedSelectors.useCredential_forAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), credential, forAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didCancelAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didCancelAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didFailWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveData_lengthReceived_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData, long lengthReceived );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connection_willCacheResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willCacheResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connection_willSendRequest_redirectResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_willStopBufferingData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willStopBufferingData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connectionDidFinishLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueWithoutCredentialForAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detachHandle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void useCredential_forAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancelAuthenticationChallenge_ = "cancelAuthenticationChallenge:";
			public static readonly Selector connection_didCancelAuthenticationChallenge_ = "connection:didCancelAuthenticationChallenge:";
			public static readonly Selector connection_didFailWithError_ = "connection:didFailWithError:";
			public static readonly Selector connection_didReceiveAuthenticationChallenge_ = "connection:didReceiveAuthenticationChallenge:";
			public static readonly Selector connection_didReceiveData_lengthReceived_ = "connection:didReceiveData:lengthReceived:";
			public static readonly Selector connection_didReceiveResponse_ = "connection:didReceiveResponse:";
			public static readonly Selector connection_willCacheResponse_ = "connection:willCacheResponse:";
			public static readonly Selector connection_willSendRequest_redirectResponse_ = "connection:willSendRequest:redirectResponse:";
			public static readonly Selector connection_willStopBufferingData_ = "connection:willStopBufferingData:";
			public static readonly Selector connectionDidFinishLoading_ = "connectionDidFinishLoading:";
			public static readonly Selector continueWithoutCredentialForAuthenticationChallenge_ = "continueWithoutCredentialForAuthenticationChallenge:";
			public static readonly Selector detachHandle = "detachHandle";
			public static readonly Selector useCredential_forAuthenticationChallenge_ = "useCredential:forAuthenticationChallenge:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreScriptCallFrame : IEquatable<WebCoreScriptCallFrame> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreScriptCallFrame;
		public static implicit operator NSObject( WebCoreScriptCallFrame value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreScriptCallFrame value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreScriptCallFrame value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreScriptCallFrame?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreScriptCallFrame value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreScriptCallFrame value1, WebCoreScriptCallFrame value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreScriptCallFrame value1, WebCoreScriptCallFrame value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreScriptCallFrame( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreScriptCallFrame alloc() {
			return new WebCoreScriptCallFrame( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject caller() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.caller( Handle, CachedSelectors.caller, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject evaluateWebScript_( NObjective.RuntimeObject script ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluateWebScript_( Handle, CachedSelectors.evaluateWebScript_, out ___occuredException, sizeof( NObjective.RuntimeObject ), script );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject exception() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.exception( Handle, CachedSelectors.exception, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject functionName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.functionName( Handle, CachedSelectors.functionName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject scopeChain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scopeChain( Handle, CachedSelectors.scopeChain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject wrapper() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wrapper( Handle, CachedSelectors.wrapper, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr caller( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr evaluateWebScript_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject script );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr exception( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr functionName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scopeChain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr wrapper( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector caller = "caller";
			public static readonly Selector evaluateWebScript_ = "evaluateWebScript:";
			public static readonly Selector exception = "exception";
			public static readonly Selector functionName = "functionName";
			public static readonly Selector scopeChain = "scopeChain";
			public static readonly Selector wrapper = "wrapper";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreScriptDebugger : IEquatable<WebCoreScriptDebugger> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreScriptDebugger;
		public static implicit operator NSObject( WebCoreScriptDebugger value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreScriptDebugger value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreScriptDebugger value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreScriptDebugger?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreScriptDebugger value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreScriptDebugger value1, WebCoreScriptDebugger value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreScriptDebugger value1, WebCoreScriptDebugger value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreScriptDebugger( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreScriptDebugger alloc() {
			return new WebCoreScriptDebugger( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDelegate_( Handle, CachedSelectors.initWithDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
		}
		static internal class CachedSelectors {
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector initWithDelegate_ = "initWithDelegate:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScroller ) )]
	public struct WebCoreScrollBar : IEquatable<WebCoreScrollBar> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreScrollBar;
		public static implicit operator NSScroller( WebCoreScrollBar value ) {
			return new NSScroller( value.Handle );
		}
		public static implicit operator NSControl( WebCoreScrollBar value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( WebCoreScrollBar value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( WebCoreScrollBar value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( WebCoreScrollBar value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreScrollBar value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreScrollBar value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreScrollBar?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreScrollBar value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreScrollBar value1, WebCoreScrollBar value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreScrollBar value1, WebCoreScrollBar value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreScrollBar( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreScrollBar alloc() {
			return new WebCoreScrollBar( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void detachPlatformScrollbar() {
			RuntimeObject ___occuredException;
			NativeMethods.detachPlatformScrollbar( Handle, CachedSelectors.detachPlatformScrollbar, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scroll_( NObjective.RuntimeObject scroll ) {
			RuntimeObject ___occuredException;
			NativeMethods.scroll_( Handle, CachedSelectors.scroll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), scroll );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detachPlatformScrollbar( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scroll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject scroll );
		}
		static internal class CachedSelectors {
			public static readonly Selector detachPlatformScrollbar = "detachPlatformScrollbar";
			public static readonly Selector scroll_ = "scroll:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSData ) )]
	public struct WebCoreSharedBufferData : IEquatable<WebCoreSharedBufferData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreSharedBufferData;
		public static implicit operator NSData( WebCoreSharedBufferData value ) {
			return new NSData( value.Handle );
		}
		public static implicit operator NSObject( WebCoreSharedBufferData value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreSharedBufferData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreSharedBufferData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreSharedBufferData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreSharedBufferData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreSharedBufferData value1, WebCoreSharedBufferData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreSharedBufferData value1, WebCoreSharedBufferData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreSharedBufferData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreSharedBufferData alloc() {
			return new WebCoreSharedBufferData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public System.IntPtr bytes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bytes( Handle, CachedSelectors.bytes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr bytes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector bytes = "bytes";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector length = "length";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreSynchronousLoader : IEquatable<WebCoreSynchronousLoader> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreSynchronousLoader;
		public static implicit operator NSObject( WebCoreSynchronousLoader value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreSynchronousLoader value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreSynchronousLoader value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreSynchronousLoader?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreSynchronousLoader value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreSynchronousLoader value1, WebCoreSynchronousLoader value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreSynchronousLoader value1, WebCoreSynchronousLoader value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreSynchronousLoader( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreSynchronousLoader alloc() {
			return new WebCoreSynchronousLoader( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject loadRequest_returningResponse_error_( NObjective.RuntimeObject request, System.IntPtr returningResponse, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.loadRequest_returningResponse_error_( ClassHandle, CachedSelectors.loadRequest_returningResponse_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), request, returningResponse, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void connection_didFailWithError_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didFailWithError_( Handle, CachedSelectors.connection_didFailWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didFailWithError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveAuthenticationChallenge_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveAuthenticationChallenge_( Handle, CachedSelectors.connection_didReceiveAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveData_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveData_( Handle, CachedSelectors.connection_didReceiveData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveResponse ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveResponse_( Handle, CachedSelectors.connection_didReceiveResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject connection_willSendRequest_redirectResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connection_willSendRequest_redirectResponse_( Handle, CachedSelectors.connection_willSendRequest_redirectResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willSendRequest, redirectResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void connectionDidFinishLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectionDidFinishLoading_( Handle, CachedSelectors.connectionDidFinishLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didFailWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connection_willSendRequest_redirectResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connectionDidFinishLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr loadRequest_returningResponse_error_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request, System.IntPtr returningResponse, System.IntPtr error );
		}
		static internal class CachedSelectors {
			public static readonly Selector connection_didFailWithError_ = "connection:didFailWithError:";
			public static readonly Selector connection_didReceiveAuthenticationChallenge_ = "connection:didReceiveAuthenticationChallenge:";
			public static readonly Selector connection_didReceiveData_ = "connection:didReceiveData:";
			public static readonly Selector connection_didReceiveResponse_ = "connection:didReceiveResponse:";
			public static readonly Selector connection_willSendRequest_redirectResponse_ = "connection:willSendRequest:redirectResponse:";
			public static readonly Selector connectionDidFinishLoading_ = "connectionDidFinishLoading:";
			public static readonly Selector loadRequest_returningResponse_error_ = "loadRequest:returningResponse:error:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreViewFactory : IEquatable<WebCoreViewFactory> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebCoreViewFactory;
		public static implicit operator NSObject( WebCoreViewFactory value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebCoreViewFactory value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreViewFactory value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreViewFactory?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreViewFactory value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreViewFactory value1, WebCoreViewFactory value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreViewFactory value1, WebCoreViewFactory value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreViewFactory( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreViewFactory alloc() {
			return new WebCoreViewFactory( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedFactory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedFactory( ClassHandle, CachedSelectors.sharedFactory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedFactory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector sharedFactory = "sharedFactory";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebDashboardRegion : IEquatable<WebDashboardRegion> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebDashboardRegion;
		public static implicit operator NSObject( WebDashboardRegion value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebDashboardRegion value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDashboardRegion value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDashboardRegion?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDashboardRegion value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDashboardRegion value1, WebDashboardRegion value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDashboardRegion value1, WebDashboardRegion value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDashboardRegion( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDashboardRegion alloc() {
			return new WebDashboardRegion( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int dashboardRegionType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dashboardRegionType( Handle, CachedSelectors.dashboardRegionType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int dashboardRegionType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector dashboardRegionType = "dashboardRegionType";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebFontCache : IEquatable<WebFontCache> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebFontCache;
		public static implicit operator NSObject( WebFontCache value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebFontCache value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebFontCache value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebFontCache?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebFontCache value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebFontCache value1, WebFontCache value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebFontCache value1, WebFontCache value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebFontCache( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebFontCache alloc() {
			return new WebFontCache( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject fontWithFamily_traits_size_( NObjective.RuntimeObject family, uint traits, float size ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fontWithFamily_traits_size_( ClassHandle, CachedSelectors.fontWithFamily_traits_size_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( float ), family, traits, size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject internalFontWithFamily_traits_size_( NObjective.RuntimeObject family, uint traits, float size ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.internalFontWithFamily_traits_size_( ClassHandle, CachedSelectors.internalFontWithFamily_traits_size_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( float ), family, traits, size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fontWithFamily_traits_size_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject family, uint traits, float size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr internalFontWithFamily_traits_size_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject family, uint traits, float size );
		}
		static internal class CachedSelectors {
			public static readonly Selector fontWithFamily_traits_size_ = "fontWithFamily:traits:size:";
			public static readonly Selector internalFontWithFamily_traits_size_ = "internalFontWithFamily:traits:size:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebScriptObject : IEquatable<WebScriptObject> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebScriptObject;
		public static implicit operator NSObject( WebScriptObject value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebScriptObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebScriptObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebScriptObject?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebScriptObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebScriptObject value1, WebScriptObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebScriptObject value1, WebScriptObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebScriptObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebScriptObject alloc() {
			return new WebScriptObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static bool throwException_( string exception ) {
			RuntimeObject ___occuredException;
			var ___wrappedexception = Runtime.CreateStringProxy( exception );
			var ___result = NativeMethods.throwException_( ClassHandle, CachedSelectors.throwException_, out ___occuredException, sizeof( IntPtr ), ___wrappedexception );
			Runtime.ReleaseNativeObject( ___wrappedexception );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject callWebScriptMethod_withArguments_( string method, NSArray withArguments ) {
			RuntimeObject ___occuredException;
			var ___wrappedmethod = Runtime.CreateStringProxy( method );
			var ___result = NativeMethods.callWebScriptMethod_withArguments_( Handle, CachedSelectors.callWebScriptMethod_withArguments_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSArray ), ___wrappedmethod, withArguments );
			Runtime.ReleaseNativeObject( ___wrappedmethod );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject evaluateWebScript_( string script ) {
			RuntimeObject ___occuredException;
			var ___wrappedscript = Runtime.CreateStringProxy( script );
			var ___result = NativeMethods.evaluateWebScript_( Handle, CachedSelectors.evaluateWebScript_, out ___occuredException, sizeof( IntPtr ), ___wrappedscript );
			Runtime.ReleaseNativeObject( ___wrappedscript );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectAtIndex_( Handle, CachedSelectors.objectAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeWebScriptKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.removeWebScriptKey_( Handle, CachedSelectors.removeWebScriptKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setException_( string exception ) {
			RuntimeObject ___occuredException;
			var ___wrappedexception = Runtime.CreateStringProxy( exception );
			NativeMethods.setException_( Handle, CachedSelectors.setException_, out ___occuredException, sizeof( IntPtr ), ___wrappedexception );
			Runtime.ReleaseNativeObject( ___wrappedexception );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_forKey_( NObjective.RuntimeObject value, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_forKey_( Handle, CachedSelectors.setValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWebScriptValueAtIndex_value_( uint index, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWebScriptValueAtIndex_value_( Handle, CachedSelectors.setWebScriptValueAtIndex_value_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), index, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string stringRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringRepresentation( Handle, CachedSelectors.stringRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForKey_( Handle, CachedSelectors.valueForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject webScriptValueAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webScriptValueAtIndex_( Handle, CachedSelectors.webScriptValueAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr callWebScriptMethod_withArguments_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr method, NSArray withArguments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr evaluateWebScript_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr script );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeWebScriptKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setException_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr exception );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWebScriptValueAtIndex_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool throwException_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr exception );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webScriptValueAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
		}
		static internal class CachedSelectors {
			public static readonly Selector callWebScriptMethod_withArguments_ = "callWebScriptMethod:withArguments:";
			public static readonly Selector evaluateWebScript_ = "evaluateWebScript:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector objectAtIndex_ = "objectAtIndex:";
			public static readonly Selector removeWebScriptKey_ = "removeWebScriptKey:";
			public static readonly Selector setException_ = "setException:";
			public static readonly Selector setValue_forKey_ = "setValue:forKey:";
			public static readonly Selector setWebScriptValueAtIndex_value_ = "setWebScriptValueAtIndex:value:";
			public static readonly Selector stringRepresentation = "stringRepresentation";
			public static readonly Selector throwException_ = "throwException:";
			public static readonly Selector valueForKey_ = "valueForKey:";
			public static readonly Selector webScriptValueAtIndex_ = "webScriptValueAtIndex:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebScriptObjectPrivate : IEquatable<WebScriptObjectPrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebScriptObjectPrivate;
		public static implicit operator NSObject( WebScriptObjectPrivate value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebScriptObjectPrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebScriptObjectPrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebScriptObjectPrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebScriptObjectPrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebScriptObjectPrivate value1, WebScriptObjectPrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebScriptObjectPrivate value1, WebScriptObjectPrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebScriptObjectPrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebScriptObjectPrivate alloc() {
			return new WebScriptObjectPrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebUndefined : IEquatable<WebUndefined> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebCoreCachedClasses.WebUndefined;
		public static implicit operator NSObject( WebUndefined value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( WebUndefined value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebUndefined value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebUndefined?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebUndefined value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebUndefined value1, WebUndefined value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebUndefined value1, WebUndefined value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebUndefined( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebUndefined alloc() {
			return new WebUndefined( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static WebUndefined undefined() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.undefined( ClassHandle, CachedSelectors.undefined, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebUndefined( ___result );
		}
		unsafe public NObjective.RuntimeObject autorelease() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autorelease( Handle, CachedSelectors.autorelease, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr autorelease( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr undefined( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector autorelease = "autorelease";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector release = "release";
			public static readonly Selector undefined = "undefined";
		}
	}
	static internal class WebCoreCachedClasses {
		static internal int ___lazyLoad = Platform.NativeMethods.dlopen( "/System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore" );
		public static readonly RuntimeClass DOMAbstractView = "DOMAbstractView";
		public static readonly RuntimeClass DOMAttr = "DOMAttr";
		public static readonly RuntimeClass DOMCDATASection = "DOMCDATASection";
		public static readonly RuntimeClass DOMCharacterData = "DOMCharacterData";
		public static readonly RuntimeClass DOMComment = "DOMComment";
		public static readonly RuntimeClass DOMCounter = "DOMCounter";
		public static readonly RuntimeClass DOMCSSCharsetRule = "DOMCSSCharsetRule";
		public static readonly RuntimeClass DOMCSSFontFaceRule = "DOMCSSFontFaceRule";
		public static readonly RuntimeClass DOMCSSImportRule = "DOMCSSImportRule";
		public static readonly RuntimeClass DOMCSSMediaRule = "DOMCSSMediaRule";
		public static readonly RuntimeClass DOMCSSPageRule = "DOMCSSPageRule";
		public static readonly RuntimeClass DOMCSSPrimitiveValue = "DOMCSSPrimitiveValue";
		public static readonly RuntimeClass DOMCSSRule = "DOMCSSRule";
		public static readonly RuntimeClass DOMCSSRuleList = "DOMCSSRuleList";
		public static readonly RuntimeClass DOMCSSStyleDeclaration = "DOMCSSStyleDeclaration";
		public static readonly RuntimeClass DOMCSSStyleRule = "DOMCSSStyleRule";
		public static readonly RuntimeClass DOMCSSStyleSheet = "DOMCSSStyleSheet";
		public static readonly RuntimeClass DOMCSSUnknownRule = "DOMCSSUnknownRule";
		public static readonly RuntimeClass DOMCSSValue = "DOMCSSValue";
		public static readonly RuntimeClass DOMCSSValueList = "DOMCSSValueList";
		public static readonly RuntimeClass DOMDocument = "DOMDocument";
		public static readonly RuntimeClass DOMDocumentFragment = "DOMDocumentFragment";
		public static readonly RuntimeClass DOMDocumentType = "DOMDocumentType";
		public static readonly RuntimeClass DOMElement = "DOMElement";
		public static readonly RuntimeClass DOMEntity = "DOMEntity";
		public static readonly RuntimeClass DOMEntityReference = "DOMEntityReference";
		public static readonly RuntimeClass DOMEvent = "DOMEvent";
		public static readonly RuntimeClass DOMHTMLAnchorElement = "DOMHTMLAnchorElement";
		public static readonly RuntimeClass DOMHTMLAppletElement = "DOMHTMLAppletElement";
		public static readonly RuntimeClass DOMHTMLAreaElement = "DOMHTMLAreaElement";
		public static readonly RuntimeClass DOMHTMLBaseElement = "DOMHTMLBaseElement";
		public static readonly RuntimeClass DOMHTMLBaseFontElement = "DOMHTMLBaseFontElement";
		public static readonly RuntimeClass DOMHTMLBodyElement = "DOMHTMLBodyElement";
		public static readonly RuntimeClass DOMHTMLBRElement = "DOMHTMLBRElement";
		public static readonly RuntimeClass DOMHTMLButtonElement = "DOMHTMLButtonElement";
		public static readonly RuntimeClass DOMHTMLCanvasElement = "DOMHTMLCanvasElement";
		public static readonly RuntimeClass DOMHTMLCollection = "DOMHTMLCollection";
		public static readonly RuntimeClass DOMHTMLDirectoryElement = "DOMHTMLDirectoryElement";
		public static readonly RuntimeClass DOMHTMLDivElement = "DOMHTMLDivElement";
		public static readonly RuntimeClass DOMHTMLDListElement = "DOMHTMLDListElement";
		public static readonly RuntimeClass DOMHTMLDocument = "DOMHTMLDocument";
		public static readonly RuntimeClass DOMHTMLElement = "DOMHTMLElement";
		public static readonly RuntimeClass DOMHTMLEmbedElement = "DOMHTMLEmbedElement";
		public static readonly RuntimeClass DOMHTMLFieldSetElement = "DOMHTMLFieldSetElement";
		public static readonly RuntimeClass DOMHTMLFontElement = "DOMHTMLFontElement";
		public static readonly RuntimeClass DOMHTMLFormElement = "DOMHTMLFormElement";
		public static readonly RuntimeClass DOMHTMLFrameElement = "DOMHTMLFrameElement";
		public static readonly RuntimeClass DOMHTMLFrameSetElement = "DOMHTMLFrameSetElement";
		public static readonly RuntimeClass DOMHTMLHeadElement = "DOMHTMLHeadElement";
		public static readonly RuntimeClass DOMHTMLHeadingElement = "DOMHTMLHeadingElement";
		public static readonly RuntimeClass DOMHTMLHRElement = "DOMHTMLHRElement";
		public static readonly RuntimeClass DOMHTMLHtmlElement = "DOMHTMLHtmlElement";
		public static readonly RuntimeClass DOMHTMLIFrameElement = "DOMHTMLIFrameElement";
		public static readonly RuntimeClass DOMHTMLImageElement = "DOMHTMLImageElement";
		public static readonly RuntimeClass DOMHTMLInputElement = "DOMHTMLInputElement";
		public static readonly RuntimeClass DOMHTMLIsIndexElement = "DOMHTMLIsIndexElement";
		public static readonly RuntimeClass DOMHTMLLabelElement = "DOMHTMLLabelElement";
		public static readonly RuntimeClass DOMHTMLLegendElement = "DOMHTMLLegendElement";
		public static readonly RuntimeClass DOMHTMLLIElement = "DOMHTMLLIElement";
		public static readonly RuntimeClass DOMHTMLLinkElement = "DOMHTMLLinkElement";
		public static readonly RuntimeClass DOMHTMLMapElement = "DOMHTMLMapElement";
		public static readonly RuntimeClass DOMHTMLMarqueeElement = "DOMHTMLMarqueeElement";
		public static readonly RuntimeClass DOMHTMLMenuElement = "DOMHTMLMenuElement";
		public static readonly RuntimeClass DOMHTMLMetaElement = "DOMHTMLMetaElement";
		public static readonly RuntimeClass DOMHTMLModElement = "DOMHTMLModElement";
		public static readonly RuntimeClass DOMHTMLObjectElement = "DOMHTMLObjectElement";
		public static readonly RuntimeClass DOMHTMLOListElement = "DOMHTMLOListElement";
		public static readonly RuntimeClass DOMHTMLOptGroupElement = "DOMHTMLOptGroupElement";
		public static readonly RuntimeClass DOMHTMLOptionElement = "DOMHTMLOptionElement";
		public static readonly RuntimeClass DOMHTMLOptionsCollection = "DOMHTMLOptionsCollection";
		public static readonly RuntimeClass DOMHTMLParagraphElement = "DOMHTMLParagraphElement";
		public static readonly RuntimeClass DOMHTMLParamElement = "DOMHTMLParamElement";
		public static readonly RuntimeClass DOMHTMLPreElement = "DOMHTMLPreElement";
		public static readonly RuntimeClass DOMHTMLQuoteElement = "DOMHTMLQuoteElement";
		public static readonly RuntimeClass DOMHTMLScriptElement = "DOMHTMLScriptElement";
		public static readonly RuntimeClass DOMHTMLSelectElement = "DOMHTMLSelectElement";
		public static readonly RuntimeClass DOMHTMLStyleElement = "DOMHTMLStyleElement";
		public static readonly RuntimeClass DOMHTMLTableCaptionElement = "DOMHTMLTableCaptionElement";
		public static readonly RuntimeClass DOMHTMLTableCellElement = "DOMHTMLTableCellElement";
		public static readonly RuntimeClass DOMHTMLTableColElement = "DOMHTMLTableColElement";
		public static readonly RuntimeClass DOMHTMLTableElement = "DOMHTMLTableElement";
		public static readonly RuntimeClass DOMHTMLTableRowElement = "DOMHTMLTableRowElement";
		public static readonly RuntimeClass DOMHTMLTableSectionElement = "DOMHTMLTableSectionElement";
		public static readonly RuntimeClass DOMHTMLTextAreaElement = "DOMHTMLTextAreaElement";
		public static readonly RuntimeClass DOMHTMLTitleElement = "DOMHTMLTitleElement";
		public static readonly RuntimeClass DOMHTMLUListElement = "DOMHTMLUListElement";
		public static readonly RuntimeClass DOMImplementation = "DOMImplementation";
		public static readonly RuntimeClass DOMKeyboardEvent = "DOMKeyboardEvent";
		public static readonly RuntimeClass DOMMediaList = "DOMMediaList";
		public static readonly RuntimeClass DOMMouseEvent = "DOMMouseEvent";
		public static readonly RuntimeClass DOMMutationEvent = "DOMMutationEvent";
		public static readonly RuntimeClass DOMNamedNodeMap = "DOMNamedNodeMap";
		public static readonly RuntimeClass DOMNativeXPathNSResolver = "DOMNativeXPathNSResolver";
		public static readonly RuntimeClass DOMNode = "DOMNode";
		public static readonly RuntimeClass DOMNodeFilter = "DOMNodeFilter";
		public static readonly RuntimeClass DOMNodeIterator = "DOMNodeIterator";
		public static readonly RuntimeClass DOMNodeList = "DOMNodeList";
		public static readonly RuntimeClass DOMNotation = "DOMNotation";
		public static readonly RuntimeClass DOMObject = "DOMObject";
		public static readonly RuntimeClass DOMOverflowEvent = "DOMOverflowEvent";
		public static readonly RuntimeClass DOMProcessingInstruction = "DOMProcessingInstruction";
		public static readonly RuntimeClass DOMRange = "DOMRange";
		public static readonly RuntimeClass DOMRect = "DOMRect";
		public static readonly RuntimeClass DOMRGBColor = "DOMRGBColor";
		public static readonly RuntimeClass DOMStyleSheet = "DOMStyleSheet";
		public static readonly RuntimeClass DOMStyleSheetList = "DOMStyleSheetList";
		public static readonly RuntimeClass DOMSVGAElement = "DOMSVGAElement";
		public static readonly RuntimeClass DOMSVGAngle = "DOMSVGAngle";
		public static readonly RuntimeClass DOMSVGAnimateColorElement = "DOMSVGAnimateColorElement";
		public static readonly RuntimeClass DOMSVGAnimatedAngle = "DOMSVGAnimatedAngle";
		public static readonly RuntimeClass DOMSVGAnimatedBoolean = "DOMSVGAnimatedBoolean";
		public static readonly RuntimeClass DOMSVGAnimatedEnumeration = "DOMSVGAnimatedEnumeration";
		public static readonly RuntimeClass DOMSVGAnimatedInteger = "DOMSVGAnimatedInteger";
		public static readonly RuntimeClass DOMSVGAnimatedLength = "DOMSVGAnimatedLength";
		public static readonly RuntimeClass DOMSVGAnimatedLengthList = "DOMSVGAnimatedLengthList";
		public static readonly RuntimeClass DOMSVGAnimatedNumber = "DOMSVGAnimatedNumber";
		public static readonly RuntimeClass DOMSVGAnimatedNumberList = "DOMSVGAnimatedNumberList";
		public static readonly RuntimeClass DOMSVGAnimatedPreserveAspectRatio = "DOMSVGAnimatedPreserveAspectRatio";
		public static readonly RuntimeClass DOMSVGAnimatedRect = "DOMSVGAnimatedRect";
		public static readonly RuntimeClass DOMSVGAnimatedString = "DOMSVGAnimatedString";
		public static readonly RuntimeClass DOMSVGAnimatedTransformList = "DOMSVGAnimatedTransformList";
		public static readonly RuntimeClass DOMSVGAnimationElement = "DOMSVGAnimationElement";
		public static readonly RuntimeClass DOMSVGCircleElement = "DOMSVGCircleElement";
		public static readonly RuntimeClass DOMSVGClipPathElement = "DOMSVGClipPathElement";
		public static readonly RuntimeClass DOMSVGColor = "DOMSVGColor";
		public static readonly RuntimeClass DOMSVGCursorElement = "DOMSVGCursorElement";
		public static readonly RuntimeClass DOMSVGDefinitionSrcElement = "DOMSVGDefinitionSrcElement";
		public static readonly RuntimeClass DOMSVGDefsElement = "DOMSVGDefsElement";
		public static readonly RuntimeClass DOMSVGDescElement = "DOMSVGDescElement";
		public static readonly RuntimeClass DOMSVGDocument = "DOMSVGDocument";
		public static readonly RuntimeClass DOMSVGElement = "DOMSVGElement";
		public static readonly RuntimeClass DOMSVGElementInstance = "DOMSVGElementInstance";
		public static readonly RuntimeClass DOMSVGElementInstanceList = "DOMSVGElementInstanceList";
		public static readonly RuntimeClass DOMSVGEllipseElement = "DOMSVGEllipseElement";
		public static readonly RuntimeClass DOMSVGFontElement = "DOMSVGFontElement";
		public static readonly RuntimeClass DOMSVGFontFaceElement = "DOMSVGFontFaceElement";
		public static readonly RuntimeClass DOMSVGFontFaceFormatElement = "DOMSVGFontFaceFormatElement";
		public static readonly RuntimeClass DOMSVGFontFaceNameElement = "DOMSVGFontFaceNameElement";
		public static readonly RuntimeClass DOMSVGFontFaceSrcElement = "DOMSVGFontFaceSrcElement";
		public static readonly RuntimeClass DOMSVGFontFaceUriElement = "DOMSVGFontFaceUriElement";
		public static readonly RuntimeClass DOMSVGForeignObjectElement = "DOMSVGForeignObjectElement";
		public static readonly RuntimeClass DOMSVGGElement = "DOMSVGGElement";
		public static readonly RuntimeClass DOMSVGGlyphElement = "DOMSVGGlyphElement";
		public static readonly RuntimeClass DOMSVGGradientElement = "DOMSVGGradientElement";
		public static readonly RuntimeClass DOMSVGImageElement = "DOMSVGImageElement";
		public static readonly RuntimeClass DOMSVGLength = "DOMSVGLength";
		public static readonly RuntimeClass DOMSVGLengthList = "DOMSVGLengthList";
		public static readonly RuntimeClass DOMSVGLinearGradientElement = "DOMSVGLinearGradientElement";
		public static readonly RuntimeClass DOMSVGLineElement = "DOMSVGLineElement";
		public static readonly RuntimeClass DOMSVGMarkerElement = "DOMSVGMarkerElement";
		public static readonly RuntimeClass DOMSVGMaskElement = "DOMSVGMaskElement";
		public static readonly RuntimeClass DOMSVGMatrix = "DOMSVGMatrix";
		public static readonly RuntimeClass DOMSVGMetadataElement = "DOMSVGMetadataElement";
		public static readonly RuntimeClass DOMSVGMissingGlyphElement = "DOMSVGMissingGlyphElement";
		public static readonly RuntimeClass DOMSVGNumber = "DOMSVGNumber";
		public static readonly RuntimeClass DOMSVGNumberList = "DOMSVGNumberList";
		public static readonly RuntimeClass DOMSVGPaint = "DOMSVGPaint";
		public static readonly RuntimeClass DOMSVGPathElement = "DOMSVGPathElement";
		public static readonly RuntimeClass DOMSVGPathSeg = "DOMSVGPathSeg";
		public static readonly RuntimeClass DOMSVGPathSegArcAbs = "DOMSVGPathSegArcAbs";
		public static readonly RuntimeClass DOMSVGPathSegArcRel = "DOMSVGPathSegArcRel";
		public static readonly RuntimeClass DOMSVGPathSegClosePath = "DOMSVGPathSegClosePath";
		public static readonly RuntimeClass DOMSVGPathSegCurvetoCubicAbs = "DOMSVGPathSegCurvetoCubicAbs";
		public static readonly RuntimeClass DOMSVGPathSegCurvetoCubicRel = "DOMSVGPathSegCurvetoCubicRel";
		public static readonly RuntimeClass DOMSVGPathSegCurvetoCubicSmoothAbs = "DOMSVGPathSegCurvetoCubicSmoothAbs";
		public static readonly RuntimeClass DOMSVGPathSegCurvetoCubicSmoothRel = "DOMSVGPathSegCurvetoCubicSmoothRel";
		public static readonly RuntimeClass DOMSVGPathSegCurvetoQuadraticAbs = "DOMSVGPathSegCurvetoQuadraticAbs";
		public static readonly RuntimeClass DOMSVGPathSegCurvetoQuadraticRel = "DOMSVGPathSegCurvetoQuadraticRel";
		public static readonly RuntimeClass DOMSVGPathSegCurvetoQuadraticSmoothAbs = "DOMSVGPathSegCurvetoQuadraticSmoothAbs";
		public static readonly RuntimeClass DOMSVGPathSegCurvetoQuadraticSmoothRel = "DOMSVGPathSegCurvetoQuadraticSmoothRel";
		public static readonly RuntimeClass DOMSVGPathSegLinetoAbs = "DOMSVGPathSegLinetoAbs";
		public static readonly RuntimeClass DOMSVGPathSegLinetoHorizontalAbs = "DOMSVGPathSegLinetoHorizontalAbs";
		public static readonly RuntimeClass DOMSVGPathSegLinetoHorizontalRel = "DOMSVGPathSegLinetoHorizontalRel";
		public static readonly RuntimeClass DOMSVGPathSegLinetoRel = "DOMSVGPathSegLinetoRel";
		public static readonly RuntimeClass DOMSVGPathSegLinetoVerticalAbs = "DOMSVGPathSegLinetoVerticalAbs";
		public static readonly RuntimeClass DOMSVGPathSegLinetoVerticalRel = "DOMSVGPathSegLinetoVerticalRel";
		public static readonly RuntimeClass DOMSVGPathSegList = "DOMSVGPathSegList";
		public static readonly RuntimeClass DOMSVGPathSegMovetoAbs = "DOMSVGPathSegMovetoAbs";
		public static readonly RuntimeClass DOMSVGPathSegMovetoRel = "DOMSVGPathSegMovetoRel";
		public static readonly RuntimeClass DOMSVGPatternElement = "DOMSVGPatternElement";
		public static readonly RuntimeClass DOMSVGPoint = "DOMSVGPoint";
		public static readonly RuntimeClass DOMSVGPointList = "DOMSVGPointList";
		public static readonly RuntimeClass DOMSVGPolygonElement = "DOMSVGPolygonElement";
		public static readonly RuntimeClass DOMSVGPolylineElement = "DOMSVGPolylineElement";
		public static readonly RuntimeClass DOMSVGPreserveAspectRatio = "DOMSVGPreserveAspectRatio";
		public static readonly RuntimeClass DOMSVGRadialGradientElement = "DOMSVGRadialGradientElement";
		public static readonly RuntimeClass DOMSVGRect = "DOMSVGRect";
		public static readonly RuntimeClass DOMSVGRectElement = "DOMSVGRectElement";
		public static readonly RuntimeClass DOMSVGRenderingIntent = "DOMSVGRenderingIntent";
		public static readonly RuntimeClass DOMSVGScriptElement = "DOMSVGScriptElement";
		public static readonly RuntimeClass DOMSVGSetElement = "DOMSVGSetElement";
		public static readonly RuntimeClass DOMSVGStopElement = "DOMSVGStopElement";
		public static readonly RuntimeClass DOMSVGStringList = "DOMSVGStringList";
		public static readonly RuntimeClass DOMSVGStyleElement = "DOMSVGStyleElement";
		public static readonly RuntimeClass DOMSVGSVGElement = "DOMSVGSVGElement";
		public static readonly RuntimeClass DOMSVGSwitchElement = "DOMSVGSwitchElement";
		public static readonly RuntimeClass DOMSVGSymbolElement = "DOMSVGSymbolElement";
		public static readonly RuntimeClass DOMSVGTextContentElement = "DOMSVGTextContentElement";
		public static readonly RuntimeClass DOMSVGTextElement = "DOMSVGTextElement";
		public static readonly RuntimeClass DOMSVGTextPathElement = "DOMSVGTextPathElement";
		public static readonly RuntimeClass DOMSVGTextPositioningElement = "DOMSVGTextPositioningElement";
		public static readonly RuntimeClass DOMSVGTitleElement = "DOMSVGTitleElement";
		public static readonly RuntimeClass DOMSVGTransform = "DOMSVGTransform";
		public static readonly RuntimeClass DOMSVGTransformList = "DOMSVGTransformList";
		public static readonly RuntimeClass DOMSVGTRefElement = "DOMSVGTRefElement";
		public static readonly RuntimeClass DOMSVGTSpanElement = "DOMSVGTSpanElement";
		public static readonly RuntimeClass DOMSVGUnitTypes = "DOMSVGUnitTypes";
		public static readonly RuntimeClass DOMSVGUseElement = "DOMSVGUseElement";
		public static readonly RuntimeClass DOMSVGViewElement = "DOMSVGViewElement";
		public static readonly RuntimeClass DOMSVGZoomEvent = "DOMSVGZoomEvent";
		public static readonly RuntimeClass DOMText = "DOMText";
		public static readonly RuntimeClass DOMTextEvent = "DOMTextEvent";
		public static readonly RuntimeClass DOMTreeWalker = "DOMTreeWalker";
		public static readonly RuntimeClass DOMUIEvent = "DOMUIEvent";
		public static readonly RuntimeClass DOMWheelEvent = "DOMWheelEvent";
		public static readonly RuntimeClass DOMXPathExpression = "DOMXPathExpression";
		public static readonly RuntimeClass DOMXPathResult = "DOMXPathResult";
		public static readonly RuntimeClass WebCoreAXObject = "WebCoreAXObject";
		public static readonly RuntimeClass WebCoreControlTintObserver = "WebCoreControlTintObserver";
		public static readonly RuntimeClass WebCoreCursorBundle = "WebCoreCursorBundle";
		public static readonly RuntimeClass WebCoreFrameBridge = "WebCoreFrameBridge";
		public static readonly RuntimeClass WebCoreFunctionWrapper = "WebCoreFunctionWrapper";
		public static readonly RuntimeClass WebCoreHistory = "WebCoreHistory";
		public static readonly RuntimeClass WebCoreKeyGenerator = "WebCoreKeyGenerator";
		public static readonly RuntimeClass WebCoreMenuTarget = "WebCoreMenuTarget";
		public static readonly RuntimeClass WebCoreMovieObserver = "WebCoreMovieObserver";
		public static readonly RuntimeClass WebCoreOpenPanelController = "WebCoreOpenPanelController";
		public static readonly RuntimeClass WebCorePowerNotifier = "WebCorePowerNotifier";
		public static readonly RuntimeClass WebCoreRenderThemeNotificationObserver = "WebCoreRenderThemeNotificationObserver";
		public static readonly RuntimeClass WebCoreResourceHandleAsDelegate = "WebCoreResourceHandleAsDelegate";
		public static readonly RuntimeClass WebCoreScriptCallFrame = "WebCoreScriptCallFrame";
		public static readonly RuntimeClass WebCoreScriptDebugger = "WebCoreScriptDebugger";
		public static readonly RuntimeClass WebCoreScrollBar = "WebCoreScrollBar";
		public static readonly RuntimeClass WebCoreSharedBufferData = "WebCoreSharedBufferData";
		public static readonly RuntimeClass WebCoreSynchronousLoader = "WebCoreSynchronousLoader";
		public static readonly RuntimeClass WebCoreViewFactory = "WebCoreViewFactory";
		public static readonly RuntimeClass WebDashboardRegion = "WebDashboardRegion";
		public static readonly RuntimeClass WebFontCache = "WebFontCache";
		public static readonly RuntimeClass WebScriptObject = "WebScriptObject";
		public static readonly RuntimeClass WebScriptObjectPrivate = "WebScriptObjectPrivate";
		public static readonly RuntimeClass WebUndefined = "WebUndefined";
	}
}
