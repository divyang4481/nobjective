//
// Copyright (C) 2009 Eugeny Grishul
//
// See license in License.txt
//

namespace NObjective.Proxies {
	using System;
	using System.Runtime.InteropServices;
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableArray ) )]
	public struct _NSCFArray : IEquatable<_NSCFArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFArray;
		public static implicit operator IntPtr( _NSCFArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFArray value1, _NSCFArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFArray value1, _NSCFArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFArray alloc() {
			return new _NSCFArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableAttributedString ) )]
	public struct _NSCFAttributedString : IEquatable<_NSCFAttributedString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFAttributedString;
		public static implicit operator IntPtr( _NSCFAttributedString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFAttributedString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFAttributedString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFAttributedString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFAttributedString value1, _NSCFAttributedString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFAttributedString value1, _NSCFAttributedString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFAttributedString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFAttributedString alloc() {
			return new _NSCFAttributedString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSNumber ) )]
	public struct _NSCFBoolean : IEquatable<_NSCFBoolean> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFBoolean;
		public static implicit operator IntPtr( _NSCFBoolean value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFBoolean value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFBoolean?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFBoolean value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFBoolean value1, _NSCFBoolean value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFBoolean value1, _NSCFBoolean value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFBoolean( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFBoolean alloc() {
			return new _NSCFBoolean( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCalendar ) )]
	public struct _NSCFCalendar : IEquatable<_NSCFCalendar> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFCalendar;
		public static implicit operator IntPtr( _NSCFCalendar value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFCalendar value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFCalendar?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFCalendar value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFCalendar value1, _NSCFCalendar value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFCalendar value1, _NSCFCalendar value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFCalendar( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFCalendar alloc() {
			return new _NSCFCalendar( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableCharacterSet ) )]
	public struct _NSCFCharacterSet : IEquatable<_NSCFCharacterSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFCharacterSet;
		public static implicit operator IntPtr( _NSCFCharacterSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFCharacterSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFCharacterSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFCharacterSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFCharacterSet value1, _NSCFCharacterSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFCharacterSet value1, _NSCFCharacterSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFCharacterSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFCharacterSet alloc() {
			return new _NSCFCharacterSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void makeCharacterSetCompact() {
			RuntimeObject ___occuredException;
			NativeMethods.makeCharacterSetCompact( Handle, CachedSelectors.makeCharacterSetCompact, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeCharacterSetFast() {
			RuntimeObject ___occuredException;
			NativeMethods.makeCharacterSetFast( Handle, CachedSelectors.makeCharacterSetFast, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeCharacterSetCompact( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeCharacterSetFast( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector makeCharacterSetCompact = "makeCharacterSetCompact";
			public static readonly Selector makeCharacterSetFast = "makeCharacterSetFast";
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableData ) )]
	public struct _NSCFData : IEquatable<_NSCFData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFData;
		public static implicit operator IntPtr( _NSCFData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFData value1, _NSCFData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFData value1, _NSCFData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFData alloc() {
			return new _NSCFData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDate ) )]
	public struct _NSCFDate : IEquatable<_NSCFDate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFDate;
		public static implicit operator IntPtr( _NSCFDate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFDate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFDate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFDate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFDate value1, _NSCFDate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFDate value1, _NSCFDate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFDate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFDate alloc() {
			return new _NSCFDate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableDictionary ) )]
	public struct _NSCFDictionary : IEquatable<_NSCFDictionary> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFDictionary;
		public static implicit operator IntPtr( _NSCFDictionary value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFDictionary value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFDictionary?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFDictionary value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFDictionary value1, _NSCFDictionary value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFDictionary value1, _NSCFDictionary value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFDictionary( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFDictionary alloc() {
			return new _NSCFDictionary( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSInputStream ) )]
	public struct _NSCFInputStream : IEquatable<_NSCFInputStream> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFInputStream;
		public static implicit operator IntPtr( _NSCFInputStream value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFInputStream value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFInputStream?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFInputStream value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFInputStream value1, _NSCFInputStream value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFInputStream value1, _NSCFInputStream value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFInputStream( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFInputStream alloc() {
			return new _NSCFInputStream( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_( Handle, CachedSelectors.initWithData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithFileAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithFileAtPath_( Handle, CachedSelectors.initWithFileAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithFileAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithData_ = "initWithData:";
			public static readonly Selector initWithFileAtPath_ = "initWithFileAtPath:";
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSLocale ) )]
	public struct _NSCFLocale : IEquatable<_NSCFLocale> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFLocale;
		public static implicit operator IntPtr( _NSCFLocale value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFLocale value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFLocale?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFLocale value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFLocale value1, _NSCFLocale value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFLocale value1, _NSCFLocale value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFLocale( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFLocale alloc() {
			return new _NSCFLocale( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSNumber ) )]
	public struct _NSCFNumber : IEquatable<_NSCFNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFNumber;
		public static implicit operator IntPtr( _NSCFNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFNumber value1, _NSCFNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFNumber value1, _NSCFNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFNumber alloc() {
			return new _NSCFNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSOutputStream ) )]
	public struct _NSCFOutputStream : IEquatable<_NSCFOutputStream> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFOutputStream;
		public static implicit operator IntPtr( _NSCFOutputStream value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFOutputStream value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFOutputStream?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFOutputStream value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFOutputStream value1, _NSCFOutputStream value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFOutputStream value1, _NSCFOutputStream value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFOutputStream( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFOutputStream alloc() {
			return new _NSCFOutputStream( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initToBuffer_capacity_( System.IntPtr buffer, uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initToBuffer_capacity_( Handle, CachedSelectors.initToBuffer_capacity_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), buffer, capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initToFileAtPath_append_( NObjective.RuntimeObject path, char append ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initToFileAtPath_append_( Handle, CachedSelectors.initToFileAtPath_append_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), path, append );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initToMemory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initToMemory( Handle, CachedSelectors.initToMemory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initToBuffer_capacity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr buffer, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initToFileAtPath_append_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, char append );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initToMemory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initToBuffer_capacity_ = "initToBuffer:capacity:";
			public static readonly Selector initToFileAtPath_append_ = "initToFileAtPath:append:";
			public static readonly Selector initToMemory = "initToMemory";
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableSet ) )]
	public struct _NSCFSet : IEquatable<_NSCFSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFSet;
		public static implicit operator IntPtr( _NSCFSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFSet value1, _NSCFSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFSet value1, _NSCFSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFSet alloc() {
			return new _NSCFSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableString ) )]
	public struct _NSCFString : IEquatable<_NSCFString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFString;
		public static implicit operator IntPtr( _NSCFString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFString value1, _NSCFString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFString value1, _NSCFString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFString alloc() {
			return new _NSCFString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTimer ) )]
	public struct _NSCFTimer : IEquatable<_NSCFTimer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFTimer;
		public static implicit operator IntPtr( _NSCFTimer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFTimer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFTimer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFTimer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFTimer value1, _NSCFTimer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFTimer value1, _NSCFTimer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFTimer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFTimer alloc() {
			return new _NSCFTimer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTimeZone ) )]
	public struct _NSCFTimeZone : IEquatable<_NSCFTimeZone> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFTimeZone;
		public static implicit operator IntPtr( _NSCFTimeZone value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFTimeZone value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFTimeZone?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFTimeZone value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFTimeZone value1, _NSCFTimeZone value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFTimeZone value1, _NSCFTimeZone value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFTimeZone( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFTimeZone alloc() {
			return new _NSCFTimeZone( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSCFType : IEquatable<_NSCFType> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCFType;
		public static implicit operator IntPtr( _NSCFType value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCFType value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCFType?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCFType value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCFType value1, _NSCFType value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCFType value1, _NSCFType value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCFType( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCFType alloc() {
			return new _NSCFType( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPort ) )]
	public struct _NSMachPort : IEquatable<_NSMachPort> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSMachPort;
		public static implicit operator IntPtr( _NSMachPort value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSMachPort value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSMachPort?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSMachPort value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSMachPort value1, _NSMachPort value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSMachPort value1, _NSMachPort value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSMachPort( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSMachPort alloc() {
			return new _NSMachPort( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void parseMachMessage_localPort_remotePort_msgid_components_( System.IntPtr message, System.IntPtr localPort, System.IntPtr remotePort, System.IntPtr msgid, System.IntPtr components ) {
			RuntimeObject ___occuredException;
			NativeMethods.parseMachMessage_localPort_remotePort_msgid_components_( ClassHandle, CachedSelectors.parseMachMessage_localPort_remotePort_msgid_components_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), message, localPort, remotePort, msgid, components );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void resetAllPorts() {
			RuntimeObject ___occuredException;
			NativeMethods.resetAllPorts( ClassHandle, CachedSelectors.resetAllPorts, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static char sendBeforeTime_streamData_components_to_from_msgid_reserved_( double time, NObjective.RuntimeObject streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject to, NObjective.RuntimeObject @from, uint msgid, uint reserved ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendBeforeTime_streamData_components_to_from_msgid_reserved_( ClassHandle, CachedSelectors.sendBeforeTime_streamData_components_to_from_msgid_reserved_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( uint ), time, streamData, components, to, @from, msgid, 
			reserved );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void handlePortMessage_( NObjective.RuntimeObject message ) {
			RuntimeObject ___occuredException;
			NativeMethods.handlePortMessage_( Handle, CachedSelectors.handlePortMessage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), message );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char sendBeforeTime_streamData_components_from_msgid_( double time, System.IntPtr streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject @from, uint msgid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendBeforeTime_streamData_components_from_msgid_( Handle, CachedSelectors.sendBeforeTime_streamData_components_from_msgid_, out ___occuredException, sizeof( double ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), time, streamData, components, @from, msgid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handlePortMessage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject message );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void parseMachMessage_localPort_remotePort_msgid_components_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr message, System.IntPtr localPort, System.IntPtr remotePort, System.IntPtr msgid, System.IntPtr components );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetAllPorts( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sendBeforeTime_streamData_components_from_msgid_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double time, System.IntPtr streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject @from, uint msgid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sendBeforeTime_streamData_components_to_from_msgid_reserved_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double time, NObjective.RuntimeObject streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject to, NObjective.RuntimeObject @from, uint msgid, 
			uint reserved );
		}
		static internal class CachedSelectors {
			public static readonly Selector handlePortMessage_ = "handlePortMessage:";
			public static readonly Selector parseMachMessage_localPort_remotePort_msgid_components_ = "parseMachMessage:localPort:remotePort:msgid:components:";
			public static readonly Selector resetAllPorts = "resetAllPorts";
			public static readonly Selector sendBeforeTime_streamData_components_from_msgid_ = "sendBeforeTime:streamData:components:from:msgid:";
			public static readonly Selector sendBeforeTime_streamData_components_to_from_msgid_reserved_ = "sendBeforeTime:streamData:components:to:from:msgid:reserved:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSNull : IEquatable<_NSNull> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSNull;
		public static implicit operator IntPtr( _NSNull value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSNull value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSNull?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSNull value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSNull value1, _NSNull value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSNull value1, _NSNull value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSNull( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSNull alloc() {
			return new _NSNull( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject @null() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@null( ClassHandle, CachedSelectors.@null, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @null( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector @null = "null";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSURL : IEquatable<_NSURL> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSURL;
		public static implicit operator IntPtr( _NSURL value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSURL value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSURL?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSURL value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSURL value1, _NSURL value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSURL value1, _NSURL value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSURL( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSURL alloc() {
			return new _NSURL( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject fileURLWithPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileURLWithPath_( ClassHandle, CachedSelectors.fileURLWithPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject URLWithString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLWithString_( ClassHandle, CachedSelectors.URLWithString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject URLWithString_relativeToURL_( NObjective.RuntimeObject @string, NObjective.RuntimeObject relativeToURL ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLWithString_relativeToURL_( ClassHandle, CachedSelectors.URLWithString_relativeToURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, relativeToURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject absoluteString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.absoluteString( Handle, CachedSelectors.absoluteString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject absoluteURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.absoluteURL( Handle, CachedSelectors.absoluteURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseURL( Handle, CachedSelectors.baseURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void connection_didFailWithError_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didFailWithError_( Handle, CachedSelectors.connection_didFailWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didFailWithError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveData_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveData_( Handle, CachedSelectors.connection_didReceiveData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connectionDidFinishLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectionDidFinishLoading_( Handle, CachedSelectors.connectionDidFinishLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject fragment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fragment( Handle, CachedSelectors.fragment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject host() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.host( Handle, CachedSelectors.host, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initFileURLWithPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initFileURLWithPath_( Handle, CachedSelectors.initFileURLWithPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithScheme_host_path_( NObjective.RuntimeObject scheme, NObjective.RuntimeObject host, NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithScheme_host_path_( Handle, CachedSelectors.initWithScheme_host_path_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), scheme, host, path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_( Handle, CachedSelectors.initWithString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithString_relativeToURL_( NObjective.RuntimeObject @string, NObjective.RuntimeObject relativeToURL ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_relativeToURL_( Handle, CachedSelectors.initWithString_relativeToURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, relativeToURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isFileURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFileURL( Handle, CachedSelectors.isFileURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void loadResourceDataNotifyingClient_usingCache_( NObjective.RuntimeObject client, char usingCache ) {
			RuntimeObject ___occuredException;
			NativeMethods.loadResourceDataNotifyingClient_usingCache_( Handle, CachedSelectors.loadResourceDataNotifyingClient_usingCache_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), client, usingCache );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject parameterString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parameterString( Handle, CachedSelectors.parameterString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject password() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.password( Handle, CachedSelectors.password, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject path() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.path( Handle, CachedSelectors.path, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject port() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.port( Handle, CachedSelectors.port, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyForKey_( Handle, CachedSelectors.propertyForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject query() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.query( Handle, CachedSelectors.query, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject relativePath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.relativePath( Handle, CachedSelectors.relativePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject relativeString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.relativeString( Handle, CachedSelectors.relativeString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject resourceDataUsingCache_( char cache ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resourceDataUsingCache_( Handle, CachedSelectors.resourceDataUsingCache_, out ___occuredException, sizeof( char ), cache );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject resourceSpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resourceSpecifier( Handle, CachedSelectors.resourceSpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject scheme() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scheme( Handle, CachedSelectors.scheme, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char setProperty_forKey_( NObjective.RuntimeObject property, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setProperty_forKey_( Handle, CachedSelectors.setProperty_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setResourceData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setResourceData_( Handle, CachedSelectors.setResourceData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject standardizedURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.standardizedURL( Handle, CachedSelectors.standardizedURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void URLHandle_resourceDataDidBecomeAvailable_( NObjective.RuntimeObject handle, NObjective.RuntimeObject resourceDataDidBecomeAvailable ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLHandle_resourceDataDidBecomeAvailable_( Handle, CachedSelectors.URLHandle_resourceDataDidBecomeAvailable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), handle, resourceDataDidBecomeAvailable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLHandle_resourceDidFailLoadingWithReason_( NObjective.RuntimeObject handle, NObjective.RuntimeObject resourceDidFailLoadingWithReason ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLHandle_resourceDidFailLoadingWithReason_( Handle, CachedSelectors.URLHandle_resourceDidFailLoadingWithReason_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), handle, resourceDidFailLoadingWithReason );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLHandleResourceDidBeginLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLHandleResourceDidBeginLoading_( Handle, CachedSelectors.URLHandleResourceDidBeginLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLHandleResourceDidCancelLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLHandleResourceDidCancelLoading_( Handle, CachedSelectors.URLHandleResourceDidCancelLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLHandleResourceDidFinishLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLHandleResourceDidFinishLoading_( Handle, CachedSelectors.URLHandleResourceDidFinishLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject URLHandleUsingCache_( char cache ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLHandleUsingCache_( Handle, CachedSelectors.URLHandleUsingCache_, out ___occuredException, sizeof( char ), cache );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject user() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.user( Handle, CachedSelectors.user, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr absoluteString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr absoluteURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didFailWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connectionDidFinishLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileURLWithPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fragment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr host( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initFileURLWithPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithScheme_host_path_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject scheme, NObjective.RuntimeObject host, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_relativeToURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject relativeToURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isFileURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadResourceDataNotifyingClient_usingCache_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject client, char usingCache );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parameterString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr password( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr path( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr port( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr query( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr relativePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr relativeString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resourceDataUsingCache_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char cache );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resourceSpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scheme( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char setProperty_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char setResourceData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr standardizedURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLHandle_resourceDataDidBecomeAvailable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject handle, NObjective.RuntimeObject resourceDataDidBecomeAvailable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLHandle_resourceDidFailLoadingWithReason_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject handle, NObjective.RuntimeObject resourceDidFailLoadingWithReason );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLHandleResourceDidBeginLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLHandleResourceDidCancelLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLHandleResourceDidFinishLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLHandleUsingCache_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char cache );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLWithString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLWithString_relativeToURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject relativeToURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr user( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector absoluteString = "absoluteString";
			public static readonly Selector absoluteURL = "absoluteURL";
			public static readonly Selector baseURL = "baseURL";
			public static readonly Selector connection_didFailWithError_ = "connection:didFailWithError:";
			public static readonly Selector connection_didReceiveData_ = "connection:didReceiveData:";
			public static readonly Selector connectionDidFinishLoading_ = "connectionDidFinishLoading:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector fileURLWithPath_ = "fileURLWithPath:";
			public static readonly Selector fragment = "fragment";
			public static readonly Selector host = "host";
			public static readonly Selector initFileURLWithPath_ = "initFileURLWithPath:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithScheme_host_path_ = "initWithScheme:host:path:";
			public static readonly Selector initWithString_ = "initWithString:";
			public static readonly Selector initWithString_relativeToURL_ = "initWithString:relativeToURL:";
			public static readonly Selector isFileURL = "isFileURL";
			public static readonly Selector loadResourceDataNotifyingClient_usingCache_ = "loadResourceDataNotifyingClient:usingCache:";
			public static readonly Selector parameterString = "parameterString";
			public static readonly Selector password = "password";
			public static readonly Selector path = "path";
			public static readonly Selector port = "port";
			public static readonly Selector propertyForKey_ = "propertyForKey:";
			public static readonly Selector query = "query";
			public static readonly Selector relativePath = "relativePath";
			public static readonly Selector relativeString = "relativeString";
			public static readonly Selector release = "release";
			public static readonly Selector resourceDataUsingCache_ = "resourceDataUsingCache:";
			public static readonly Selector resourceSpecifier = "resourceSpecifier";
			public static readonly Selector scheme = "scheme";
			public static readonly Selector setProperty_forKey_ = "setProperty:forKey:";
			public static readonly Selector setResourceData_ = "setResourceData:";
			public static readonly Selector standardizedURL = "standardizedURL";
			public static readonly Selector URLHandle_resourceDataDidBecomeAvailable_ = "URLHandle:resourceDataDidBecomeAvailable:";
			public static readonly Selector URLHandle_resourceDidFailLoadingWithReason_ = "URLHandle:resourceDidFailLoadingWithReason:";
			public static readonly Selector URLHandleResourceDidBeginLoading_ = "URLHandleResourceDidBeginLoading:";
			public static readonly Selector URLHandleResourceDidCancelLoading_ = "URLHandleResourceDidCancelLoading:";
			public static readonly Selector URLHandleResourceDidFinishLoading_ = "URLHandleResourceDidFinishLoading:";
			public static readonly Selector URLHandleUsingCache_ = "URLHandleUsingCache:";
			public static readonly Selector URLWithString_ = "URLWithString:";
			public static readonly Selector URLWithString_relativeToURL_ = "URLWithString:relativeToURL:";
			public static readonly Selector user = "user";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSAECoercerData : IEquatable<_NSAECoercerData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSAECoercerData;
		public static implicit operator IntPtr( _NSAECoercerData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSAECoercerData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSAECoercerData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSAECoercerData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSAECoercerData value1, _NSAECoercerData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSAECoercerData value1, _NSAECoercerData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSAECoercerData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSAECoercerData alloc() {
			return new _NSAECoercerData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithCoercer_selector_( NObjective.RuntimeObject coercer, NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoercer_selector_( Handle, CachedSelectors.initWithCoercer_selector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), coercer, selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoercer_selector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coercer, NObjective.Selector selector );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithCoercer_selector_ = "initWithCoercer:selector:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSAETranslatorData : IEquatable<_NSAETranslatorData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSAETranslatorData;
		public static implicit operator IntPtr( _NSAETranslatorData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSAETranslatorData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSAETranslatorData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSAETranslatorData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSAETranslatorData value1, _NSAETranslatorData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSAETranslatorData value1, _NSAETranslatorData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSAETranslatorData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSAETranslatorData alloc() {
			return new _NSAETranslatorData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithTranslator_selector_( NObjective.RuntimeObject translator, NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTranslator_selector_( Handle, CachedSelectors.initWithTranslator_selector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), translator, selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTranslator_selector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject translator, NObjective.Selector selector );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithTranslator_selector_ = "initWithTranslator:selector:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSCDBinderMaps : IEquatable<_NSCDBinderMaps> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCDBinderMaps;
		public static implicit operator IntPtr( _NSCDBinderMaps value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCDBinderMaps value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCDBinderMaps?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCDBinderMaps value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCDBinderMaps value1, _NSCDBinderMaps value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCDBinderMaps value1, _NSCDBinderMaps value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCDBinderMaps( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCDBinderMaps alloc() {
			return new _NSCDBinderMaps( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSClassToBinderMaps : IEquatable<_NSClassToBinderMaps> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSClassToBinderMaps;
		public static implicit operator IntPtr( _NSClassToBinderMaps value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSClassToBinderMaps value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSClassToBinderMaps?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSClassToBinderMaps value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSClassToBinderMaps value1, _NSClassToBinderMaps value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSClassToBinderMaps value1, _NSClassToBinderMaps value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSClassToBinderMaps( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSClassToBinderMaps alloc() {
			return new _NSClassToBinderMaps( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject mapForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mapForClass_( Handle, CachedSelectors.mapForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mapForClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
		}
		static internal class CachedSelectors {
			public static readonly Selector mapForClass_ = "mapForClass:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSCreateCommandInstanceVariables : IEquatable<_NSCreateCommandInstanceVariables> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSCreateCommandInstanceVariables;
		public static implicit operator IntPtr( _NSCreateCommandInstanceVariables value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSCreateCommandInstanceVariables value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSCreateCommandInstanceVariables?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSCreateCommandInstanceVariables value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSCreateCommandInstanceVariables value1, _NSCreateCommandInstanceVariables value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSCreateCommandInstanceVariables value1, _NSCreateCommandInstanceVariables value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSCreateCommandInstanceVariables( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSCreateCommandInstanceVariables alloc() {
			return new _NSCreateCommandInstanceVariables( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSHTTPBodyStreamWrapper : IEquatable<_NSHTTPBodyStreamWrapper> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSHTTPBodyStreamWrapper;
		public static implicit operator IntPtr( _NSHTTPBodyStreamWrapper value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSHTTPBodyStreamWrapper value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSHTTPBodyStreamWrapper?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSHTTPBodyStreamWrapper value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSHTTPBodyStreamWrapper value1, _NSHTTPBodyStreamWrapper value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSHTTPBodyStreamWrapper value1, _NSHTTPBodyStreamWrapper value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSHTTPBodyStreamWrapper( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSHTTPBodyStreamWrapper alloc() {
			return new _NSHTTPBodyStreamWrapper( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void completedSpoolToFile() {
			RuntimeObject ___occuredException;
			NativeMethods.completedSpoolToFile( Handle, CachedSelectors.completedSpoolToFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithStream_( NObjective.RuntimeObject stream ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithStream_( Handle, CachedSelectors.initWithStream_, out ___occuredException, sizeof( NObjective.RuntimeObject ), stream );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject originalBodyStream() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.originalBodyStream( Handle, CachedSelectors.originalBodyStream, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject requestStreamForTransmission() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requestStreamForTransmission( Handle, CachedSelectors.requestStreamForTransmission, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setSpoolPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSpoolPath_( Handle, CachedSelectors.setSpoolPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject spoolPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.spoolPath( Handle, CachedSelectors.spoolPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void completedSpoolToFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithStream_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject stream );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr originalBodyStream( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requestStreamForTransmission( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSpoolPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr spoolPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector completedSpoolToFile = "completedSpoolToFile";
			public static readonly Selector initWithStream_ = "initWithStream:";
			public static readonly Selector originalBodyStream = "originalBodyStream";
			public static readonly Selector requestStreamForTransmission = "requestStreamForTransmission";
			public static readonly Selector setSpoolPath_ = "setSpoolPath:";
			public static readonly Selector spoolPath = "spoolPath";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSIndexPathUniqueTree : IEquatable<_NSIndexPathUniqueTree> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSIndexPathUniqueTree;
		public static implicit operator IntPtr( _NSIndexPathUniqueTree value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSIndexPathUniqueTree value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSIndexPathUniqueTree?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSIndexPathUniqueTree value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSIndexPathUniqueTree value1, _NSIndexPathUniqueTree value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSIndexPathUniqueTree value1, _NSIndexPathUniqueTree value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSIndexPathUniqueTree( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSIndexPathUniqueTree alloc() {
			return new _NSIndexPathUniqueTree( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject uniqueNodeForIndexes_count_indexPath_( System.IntPtr indexes, uint count, NObjective.RuntimeObject indexPath ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueNodeForIndexes_count_indexPath_( Handle, CachedSelectors.uniqueNodeForIndexes_count_indexPath_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ), indexes, count, indexPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uniqueNodeForIndexes_count_indexPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr indexes, uint count, NObjective.RuntimeObject indexPath );
		}
		static internal class CachedSelectors {
			public static readonly Selector uniqueNodeForIndexes_count_indexPath_ = "uniqueNodeForIndexes:count:indexPath:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSIndexPathUniqueTreeNode : IEquatable<_NSIndexPathUniqueTreeNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSIndexPathUniqueTreeNode;
		public static implicit operator IntPtr( _NSIndexPathUniqueTreeNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSIndexPathUniqueTreeNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSIndexPathUniqueTreeNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSIndexPathUniqueTreeNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSIndexPathUniqueTreeNode value1, _NSIndexPathUniqueTreeNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSIndexPathUniqueTreeNode value1, _NSIndexPathUniqueTreeNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSIndexPathUniqueTreeNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSIndexPathUniqueTreeNode alloc() {
			return new _NSIndexPathUniqueTreeNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject newNodeWithIndex_belowIndexPath_firstChild_sibling_( uint index, NObjective.RuntimeObject belowIndexPath, NObjective.RuntimeObject firstChild, NObjective.RuntimeObject sibling ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newNodeWithIndex_belowIndexPath_firstChild_sibling_( ClassHandle, CachedSelectors.newNodeWithIndex_belowIndexPath_firstChild_sibling_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), index, belowIndexPath, firstChild, sibling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject indexPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexPath( Handle, CachedSelectors.indexPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr indexPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newNodeWithIndex_belowIndexPath_firstChild_sibling_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject belowIndexPath, NObjective.RuntimeObject firstChild, NObjective.RuntimeObject sibling );
		}
		static internal class CachedSelectors {
			public static readonly Selector indexPath = "indexPath";
			public static readonly Selector newNodeWithIndex_belowIndexPath_firstChild_sibling_ = "newNodeWithIndex:belowIndexPath:firstChild:sibling:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSEnumerator ) )]
	public struct _NSIndexSetEnumerator : IEquatable<_NSIndexSetEnumerator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSIndexSetEnumerator;
		public static implicit operator IntPtr( _NSIndexSetEnumerator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSIndexSetEnumerator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSIndexSetEnumerator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSIndexSetEnumerator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSIndexSetEnumerator value1, _NSIndexSetEnumerator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSIndexSetEnumerator value1, _NSIndexSetEnumerator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSIndexSetEnumerator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSIndexSetEnumerator alloc() {
			return new _NSIndexSetEnumerator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithIndexSet_( NObjective.RuntimeObject @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithIndexSet_( Handle, CachedSelectors.initWithIndexSet_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithIndexSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @set );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithIndexSet_ = "initWithIndexSet:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSNegateBooleanTransformer ) )]
	public struct _NSIsNilTransformer : IEquatable<_NSIsNilTransformer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSIsNilTransformer;
		public static implicit operator IntPtr( _NSIsNilTransformer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSIsNilTransformer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSIsNilTransformer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSIsNilTransformer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSIsNilTransformer value1, _NSIsNilTransformer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSIsNilTransformer value1, _NSIsNilTransformer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSIsNilTransformer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSIsNilTransformer alloc() {
			return new _NSIsNilTransformer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char supportsReverseTransformation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportsReverseTransformation( ClassHandle, CachedSelectors.supportsReverseTransformation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char supportsReverseTransformation( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector supportsReverseTransformation = "supportsReverseTransformation";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSNegateBooleanTransformer ) )]
	public struct _NSIsNotNilTransformer : IEquatable<_NSIsNotNilTransformer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSIsNotNilTransformer;
		public static implicit operator IntPtr( _NSIsNotNilTransformer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSIsNotNilTransformer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSIsNotNilTransformer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSIsNotNilTransformer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSIsNotNilTransformer value1, _NSIsNotNilTransformer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSIsNotNilTransformer value1, _NSIsNotNilTransformer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSIsNotNilTransformer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSIsNotNilTransformer alloc() {
			return new _NSIsNotNilTransformer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char supportsReverseTransformation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportsReverseTransformation( ClassHandle, CachedSelectors.supportsReverseTransformation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char supportsReverseTransformation( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector supportsReverseTransformation = "supportsReverseTransformation";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSKeyedCoderOldStyleArray : IEquatable<_NSKeyedCoderOldStyleArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSKeyedCoderOldStyleArray;
		public static implicit operator IntPtr( _NSKeyedCoderOldStyleArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSKeyedCoderOldStyleArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSKeyedCoderOldStyleArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSKeyedCoderOldStyleArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSKeyedCoderOldStyleArray value1, _NSKeyedCoderOldStyleArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSKeyedCoderOldStyleArray value1, _NSKeyedCoderOldStyleArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSKeyedCoderOldStyleArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSKeyedCoderOldStyleArray alloc() {
			return new _NSKeyedCoderOldStyleArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void fillObjCType_count_at_( char type, uint count, System.IntPtr at ) {
			RuntimeObject ___occuredException;
			NativeMethods.fillObjCType_count_at_( Handle, CachedSelectors.fillObjCType_count_at_, out ___occuredException, sizeof( char ) + sizeof( uint ) + sizeof( System.IntPtr ), type, count, at );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithObjCType_count_at_( char type, uint count, System.IntPtr at ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObjCType_count_at_( Handle, CachedSelectors.initWithObjCType_count_at_, out ___occuredException, sizeof( char ) + sizeof( uint ) + sizeof( System.IntPtr ), type, count, at );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void fillObjCType_count_at_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char type, uint count, System.IntPtr at );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObjCType_count_at_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char type, uint count, System.IntPtr at );
		}
		static internal class CachedSelectors {
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector fillObjCType_count_at_ = "fillObjCType:count:at:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithObjCType_count_at_ = "initWithObjCType:count:at:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyGetBinding ) )]
	public struct _NSKeyForwardingGetBinding : IEquatable<_NSKeyForwardingGetBinding> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSKeyForwardingGetBinding;
		public static implicit operator IntPtr( _NSKeyForwardingGetBinding value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSKeyForwardingGetBinding value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSKeyForwardingGetBinding?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSKeyForwardingGetBinding value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSKeyForwardingGetBinding value1, _NSKeyForwardingGetBinding value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSKeyForwardingGetBinding value1, _NSKeyForwardingGetBinding value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSKeyForwardingGetBinding( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSKeyForwardingGetBinding alloc() {
			return new _NSKeyForwardingGetBinding( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithKey_isStored_( NObjective.RuntimeObject key, char isStored ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_isStored_( Handle, CachedSelectors.initWithKey_isStored_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), key, isStored );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_isStored_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, char isStored );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithKey_isStored_ = "initWithKey:isStored:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeySetBinding ) )]
	public struct _NSKeyForwardingSetBinding : IEquatable<_NSKeyForwardingSetBinding> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSKeyForwardingSetBinding;
		public static implicit operator IntPtr( _NSKeyForwardingSetBinding value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSKeyForwardingSetBinding value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSKeyForwardingSetBinding?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSKeyForwardingSetBinding value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSKeyForwardingSetBinding value1, _NSKeyForwardingSetBinding value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSKeyForwardingSetBinding value1, _NSKeyForwardingSetBinding value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSKeyForwardingSetBinding( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSKeyForwardingSetBinding alloc() {
			return new _NSKeyForwardingSetBinding( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithKey_isStored_( NObjective.RuntimeObject key, char isStored ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_isStored_( Handle, CachedSelectors.initWithKey_isStored_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), key, isStored );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_isStored_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, char isStored );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithKey_isStored_ = "initWithKey:isStored:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyGetBinding ) )]
	public struct _NSKVCPIvarGetBinding : IEquatable<_NSKVCPIvarGetBinding> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSKVCPIvarGetBinding;
		public static implicit operator IntPtr( _NSKVCPIvarGetBinding value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSKVCPIvarGetBinding value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSKVCPIvarGetBinding?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSKVCPIvarGetBinding value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSKVCPIvarGetBinding value1, _NSKVCPIvarGetBinding value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSKVCPIvarGetBinding value1, _NSKVCPIvarGetBinding value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSKVCPIvarGetBinding( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSKVCPIvarGetBinding alloc() {
			return new _NSKVCPIvarGetBinding( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeySetBinding ) )]
	public struct _NSKVCPIvarSetBinding : IEquatable<_NSKVCPIvarSetBinding> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSKVCPIvarSetBinding;
		public static implicit operator IntPtr( _NSKVCPIvarSetBinding value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSKVCPIvarSetBinding value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSKVCPIvarSetBinding?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSKVCPIvarSetBinding value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSKVCPIvarSetBinding value1, _NSKVCPIvarSetBinding value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSKVCPIvarSetBinding value1, _NSKVCPIvarSetBinding value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSKVCPIvarSetBinding( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSKVCPIvarSetBinding alloc() {
			return new _NSKVCPIvarSetBinding( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDistributedNotificationCenter ) )]
	public struct _NSLocalNotificationCenter : IEquatable<_NSLocalNotificationCenter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSLocalNotificationCenter;
		public static implicit operator IntPtr( _NSLocalNotificationCenter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSLocalNotificationCenter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSLocalNotificationCenter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSLocalNotificationCenter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSLocalNotificationCenter value1, _NSLocalNotificationCenter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSLocalNotificationCenter value1, _NSLocalNotificationCenter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSLocalNotificationCenter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSLocalNotificationCenter alloc() {
			return new _NSLocalNotificationCenter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSArray ) )]
	public struct _NSMetadataQueryResultArray : IEquatable<_NSMetadataQueryResultArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSMetadataQueryResultArray;
		public static implicit operator IntPtr( _NSMetadataQueryResultArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSMetadataQueryResultArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSMetadataQueryResultArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSMetadataQueryResultArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSMetadataQueryResultArray value1, _NSMetadataQueryResultArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSMetadataQueryResultArray value1, _NSMetadataQueryResultArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSMetadataQueryResultArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSMetadataQueryResultArray alloc() {
			return new _NSMetadataQueryResultArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSArray ) )]
	public struct _NSMetadataQueryResultGroupArray : IEquatable<_NSMetadataQueryResultGroupArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSMetadataQueryResultGroupArray;
		public static implicit operator IntPtr( _NSMetadataQueryResultGroupArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSMetadataQueryResultGroupArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSMetadataQueryResultGroupArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSMetadataQueryResultGroupArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSMetadataQueryResultGroupArray value1, _NSMetadataQueryResultGroupArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSMetadataQueryResultGroupArray value1, _NSMetadataQueryResultGroupArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSMetadataQueryResultGroupArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSMetadataQueryResultGroupArray alloc() {
			return new _NSMetadataQueryResultGroupArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSMetadataQuerySortingPseudoItem : IEquatable<_NSMetadataQuerySortingPseudoItem> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSMetadataQuerySortingPseudoItem;
		public static implicit operator IntPtr( _NSMetadataQuerySortingPseudoItem value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSMetadataQuerySortingPseudoItem value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSMetadataQuerySortingPseudoItem?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSMetadataQuerySortingPseudoItem value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSMetadataQuerySortingPseudoItem value1, _NSMetadataQuerySortingPseudoItem value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSMetadataQuerySortingPseudoItem value1, _NSMetadataQuerySortingPseudoItem value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSMetadataQuerySortingPseudoItem( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSMetadataQuerySortingPseudoItem alloc() {
			return new _NSMetadataQuerySortingPseudoItem( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSSharedValueTransformer ) )]
	public struct _NSNegateBooleanTransformer : IEquatable<_NSNegateBooleanTransformer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSNegateBooleanTransformer;
		public static implicit operator IntPtr( _NSNegateBooleanTransformer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSNegateBooleanTransformer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSNegateBooleanTransformer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSNegateBooleanTransformer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSNegateBooleanTransformer value1, _NSNegateBooleanTransformer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSNegateBooleanTransformer value1, _NSNegateBooleanTransformer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSNegateBooleanTransformer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSNegateBooleanTransformer alloc() {
			return new _NSNegateBooleanTransformer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableDictionary ) )]
	public struct _NSNestedDictionary : IEquatable<_NSNestedDictionary> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSNestedDictionary;
		public static implicit operator IntPtr( _NSNestedDictionary value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSNestedDictionary value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSNestedDictionary?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSNestedDictionary value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSNestedDictionary value1, _NSNestedDictionary value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSNestedDictionary value1, _NSNestedDictionary value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSNestedDictionary( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSNestedDictionary alloc() {
			return new _NSNestedDictionary( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject dictionaryNesting_( NObjective.RuntimeObject nesting ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryNesting_( ClassHandle, CachedSelectors.dictionaryNesting_, out ___occuredException, sizeof( NObjective.RuntimeObject ), nesting );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithNestedDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithNestedDictionary_( Handle, CachedSelectors.initWithNestedDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryNesting_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject nesting );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithNestedDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
		}
		static internal class CachedSelectors {
			public static readonly Selector dictionaryNesting_ = "dictionaryNesting:";
			public static readonly Selector initWithNestedDictionary_ = "initWithNestedDictionary:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSParserSyntaxNode : IEquatable<_NSParserSyntaxNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSParserSyntaxNode;
		public static implicit operator IntPtr( _NSParserSyntaxNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSParserSyntaxNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSParserSyntaxNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSParserSyntaxNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSParserSyntaxNode value1, _NSParserSyntaxNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSParserSyntaxNode value1, _NSParserSyntaxNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSParserSyntaxNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSParserSyntaxNode alloc() {
			return new _NSParserSyntaxNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithType_arg_( int type, NObjective.RuntimeObject arg ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithType_arg_( Handle, CachedSelectors.initWithType_arg_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), type, arg );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithType_arg_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, NObjective.RuntimeObject arg );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithType_arg_ = "initWithType:arg:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSPositionalSpecifierAdditionalIVars : IEquatable<_NSPositionalSpecifierAdditionalIVars> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSPositionalSpecifierAdditionalIVars;
		public static implicit operator IntPtr( _NSPositionalSpecifierAdditionalIVars value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSPositionalSpecifierAdditionalIVars value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSPositionalSpecifierAdditionalIVars?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSPositionalSpecifierAdditionalIVars value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSPositionalSpecifierAdditionalIVars value1, _NSPositionalSpecifierAdditionalIVars value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSPositionalSpecifierAdditionalIVars value1, _NSPositionalSpecifierAdditionalIVars value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSPositionalSpecifierAdditionalIVars( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSPositionalSpecifierAdditionalIVars alloc() {
			return new _NSPositionalSpecifierAdditionalIVars( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSPredicateOperatorUtilities : IEquatable<_NSPredicateOperatorUtilities> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSPredicateOperatorUtilities;
		public static implicit operator IntPtr( _NSPredicateOperatorUtilities value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSPredicateOperatorUtilities value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSPredicateOperatorUtilities?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSPredicateOperatorUtilities value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSPredicateOperatorUtilities value1, _NSPredicateOperatorUtilities value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSPredicateOperatorUtilities value1, _NSPredicateOperatorUtilities value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSPredicateOperatorUtilities( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSPredicateOperatorUtilities alloc() {
			return new _NSPredicateOperatorUtilities( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static System.IntPtr convertStringToUChar_( NObjective.RuntimeObject @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.convertStringToUChar_( ClassHandle, CachedSelectors.convertStringToUChar_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int doCaseFoldingForString_length_output_( System.IntPtr @string, int length, System.IntPtr output ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doCaseFoldingForString_length_output_( ClassHandle, CachedSelectors.doCaseFoldingForString_length_output_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( int ) + sizeof( System.IntPtr ), @string, length, output );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char doRegexForString_pattern_flags_( NObjective.RuntimeObject @string, NObjective.RuntimeObject pattern, uint flags ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doRegexForString_pattern_flags_( ClassHandle, CachedSelectors.doRegexForString_pattern_flags_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @string, pattern, flags );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject makeRegexFindSafe_( NObjective.RuntimeObject safe ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.makeRegexFindSafe_( ClassHandle, CachedSelectors.makeRegexFindSafe_, out ___occuredException, sizeof( NObjective.RuntimeObject ), safe );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static int normalizeString_length_output_( System.IntPtr @string, int length, System.IntPtr output ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.normalizeString_length_output_( ClassHandle, CachedSelectors.normalizeString_length_output_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( int ) + sizeof( System.IntPtr ), @string, length, output );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int stripDiacriticsFromString_length_output_( System.IntPtr @string, int length, System.IntPtr output ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stripDiacriticsFromString_length_output_( ClassHandle, CachedSelectors.stripDiacriticsFromString_length_output_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( int ) + sizeof( System.IntPtr ), @string, length, output );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char useTurkishRules() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useTurkishRules( ClassHandle, CachedSelectors.useTurkishRules, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr convertStringToUChar_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int doCaseFoldingForString_length_output_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr @string, int length, System.IntPtr output );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char doRegexForString_pattern_flags_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject pattern, uint flags );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr makeRegexFindSafe_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject safe );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int normalizeString_length_output_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr @string, int length, System.IntPtr output );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int stripDiacriticsFromString_length_output_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr @string, int length, System.IntPtr output );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char useTurkishRules( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector convertStringToUChar_ = "convertStringToUChar:";
			public static readonly Selector doCaseFoldingForString_length_output_ = "doCaseFoldingForString:length:output:";
			public static readonly Selector doRegexForString_pattern_flags_ = "doRegexForString:pattern:flags:";
			public static readonly Selector makeRegexFindSafe_ = "makeRegexFindSafe:";
			public static readonly Selector normalizeString_length_output_ = "normalizeString:length:output:";
			public static readonly Selector stripDiacriticsFromString_length_output_ = "stripDiacriticsFromString:length:output:";
			public static readonly Selector useTurkishRules = "useTurkishRules";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSPredicateUtilities : IEquatable<_NSPredicateUtilities> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSPredicateUtilities;
		public static implicit operator IntPtr( _NSPredicateUtilities value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSPredicateUtilities value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSPredicateUtilities?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSPredicateUtilities value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSPredicateUtilities value1, _NSPredicateUtilities value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSPredicateUtilities value1, _NSPredicateUtilities value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSPredicateUtilities( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSPredicateUtilities alloc() {
			return new _NSPredicateUtilities( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject abs_( NObjective.RuntimeObject abs ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abs_( ClassHandle, CachedSelectors.abs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), abs );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject add_to_( NObjective.RuntimeObject @add, NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.add_to_( ClassHandle, CachedSelectors.add_to_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @add, to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject average_( NObjective.RuntimeObject average ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.average_( ClassHandle, CachedSelectors.average_, out ___occuredException, sizeof( NObjective.RuntimeObject ), average );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject castObject_toType_( NObjective.RuntimeObject @object, NObjective.RuntimeObject toType ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.castObject_toType_( ClassHandle, CachedSelectors.castObject_toType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, toType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject ceiling_( NObjective.RuntimeObject ceiling ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ceiling_( ClassHandle, CachedSelectors.ceiling_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ceiling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject count_( NObjective.RuntimeObject count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count_( ClassHandle, CachedSelectors.count_, out ___occuredException, sizeof( NObjective.RuntimeObject ), count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject divide_by_( NObjective.RuntimeObject divide, NObjective.RuntimeObject @by ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.divide_by_( ClassHandle, CachedSelectors.divide_by_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), divide, @by );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject exp_( NObjective.RuntimeObject exp ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.exp_( ClassHandle, CachedSelectors.exp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), exp );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject floor_( NObjective.RuntimeObject floor ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.floor_( ClassHandle, CachedSelectors.floor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), floor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject from_subtract_( NObjective.RuntimeObject @from, NObjective.RuntimeObject subtract ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.from_subtract_( ClassHandle, CachedSelectors.from_subtract_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @from, subtract );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject ln_( NObjective.RuntimeObject ln ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ln_( ClassHandle, CachedSelectors.ln_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ln );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject log_( NObjective.RuntimeObject log ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.log_( ClassHandle, CachedSelectors.log_, out ___occuredException, sizeof( NObjective.RuntimeObject ), log );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject max_( NObjective.RuntimeObject max ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.max_( ClassHandle, CachedSelectors.max_, out ___occuredException, sizeof( NObjective.RuntimeObject ), max );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject median_( NObjective.RuntimeObject median ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.median_( ClassHandle, CachedSelectors.median_, out ___occuredException, sizeof( NObjective.RuntimeObject ), median );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject min_( NObjective.RuntimeObject min ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.min_( ClassHandle, CachedSelectors.min_, out ___occuredException, sizeof( NObjective.RuntimeObject ), min );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject mode_( NObjective.RuntimeObject mode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mode_( ClassHandle, CachedSelectors.mode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject modulus_by_( NObjective.RuntimeObject modulus, NObjective.RuntimeObject @by ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modulus_by_( ClassHandle, CachedSelectors.modulus_by_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), modulus, @by );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject multiply_by_( NObjective.RuntimeObject multiply, NObjective.RuntimeObject @by ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.multiply_by_( ClassHandle, CachedSelectors.multiply_by_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), multiply, @by );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject now() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.now( ClassHandle, CachedSelectors.now, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject objectFrom_withIndex_( NObjective.RuntimeObject @from, NObjective.RuntimeObject withIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectFrom_withIndex_( ClassHandle, CachedSelectors.objectFrom_withIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @from, withIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject raise_toPower_( NObjective.RuntimeObject raise, NObjective.RuntimeObject toPower ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.raise_toPower_( ClassHandle, CachedSelectors.raise_toPower_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), raise, toPower );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject random() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.random( ClassHandle, CachedSelectors.random, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject randomn_( NObjective.RuntimeObject randomn ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.randomn_( ClassHandle, CachedSelectors.randomn_, out ___occuredException, sizeof( NObjective.RuntimeObject ), randomn );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sqrt_( NObjective.RuntimeObject sqrt ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sqrt_( ClassHandle, CachedSelectors.sqrt_, out ___occuredException, sizeof( NObjective.RuntimeObject ), sqrt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject stddev_( NObjective.RuntimeObject stddev ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stddev_( ClassHandle, CachedSelectors.stddev_, out ___occuredException, sizeof( NObjective.RuntimeObject ), stddev );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sum_( NObjective.RuntimeObject sum ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sum_( ClassHandle, CachedSelectors.sum_, out ___occuredException, sizeof( NObjective.RuntimeObject ), sum );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject trunc_( NObjective.RuntimeObject trunc ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.trunc_( ClassHandle, CachedSelectors.trunc_, out ___occuredException, sizeof( NObjective.RuntimeObject ), trunc );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abs_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject abs );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr add_to_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @add, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr average_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject average );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr castObject_toType_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject toType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ceiling_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ceiling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr count_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr divide_by_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject divide, NObjective.RuntimeObject @by );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr exp_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exp );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr floor_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject floor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr from_subtract_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @from, NObjective.RuntimeObject subtract );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ln_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ln );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr log_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject log );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr max_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject max );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr median_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject median );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr min_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject min );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mode_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr modulus_by_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject modulus, NObjective.RuntimeObject @by );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr multiply_by_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject multiply, NObjective.RuntimeObject @by );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr now( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectFrom_withIndex_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @from, NObjective.RuntimeObject withIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr raise_toPower_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject raise, NObjective.RuntimeObject toPower );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr random( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr randomn_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject randomn );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sqrt_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject sqrt );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stddev_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject stddev );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sum_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject sum );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr trunc_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject trunc );
		}
		static internal class CachedSelectors {
			public static readonly Selector abs_ = "abs:";
			public static readonly Selector add_to_ = "add:to:";
			public static readonly Selector average_ = "average:";
			public static readonly Selector castObject_toType_ = "castObject:toType:";
			public static readonly Selector ceiling_ = "ceiling:";
			public static readonly Selector count_ = "count:";
			public static readonly Selector divide_by_ = "divide:by:";
			public static readonly Selector exp_ = "exp:";
			public static readonly Selector floor_ = "floor:";
			public static readonly Selector from_subtract_ = "from:subtract:";
			public static readonly Selector ln_ = "ln:";
			public static readonly Selector log_ = "log:";
			public static readonly Selector max_ = "max:";
			public static readonly Selector median_ = "median:";
			public static readonly Selector min_ = "min:";
			public static readonly Selector mode_ = "mode:";
			public static readonly Selector modulus_by_ = "modulus:by:";
			public static readonly Selector multiply_by_ = "multiply:by:";
			public static readonly Selector now = "now";
			public static readonly Selector objectFrom_withIndex_ = "objectFrom:withIndex:";
			public static readonly Selector raise_toPower_ = "raise:toPower:";
			public static readonly Selector random = "random";
			public static readonly Selector randomn_ = "randomn:";
			public static readonly Selector sqrt_ = "sqrt:";
			public static readonly Selector stddev_ = "stddev:";
			public static readonly Selector sum_ = "sum:";
			public static readonly Selector trunc_ = "trunc:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSScriptClassDescriptionAdditionalInstanceVariables : IEquatable<_NSScriptClassDescriptionAdditionalInstanceVariables> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSScriptClassDescriptionAdditionalInstanceVariables;
		public static implicit operator IntPtr( _NSScriptClassDescriptionAdditionalInstanceVariables value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSScriptClassDescriptionAdditionalInstanceVariables value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSScriptClassDescriptionAdditionalInstanceVariables?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSScriptClassDescriptionAdditionalInstanceVariables value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSScriptClassDescriptionAdditionalInstanceVariables value1, _NSScriptClassDescriptionAdditionalInstanceVariables value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSScriptClassDescriptionAdditionalInstanceVariables value1, _NSScriptClassDescriptionAdditionalInstanceVariables value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSScriptClassDescriptionAdditionalInstanceVariables( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSScriptClassDescriptionAdditionalInstanceVariables alloc() {
			return new _NSScriptClassDescriptionAdditionalInstanceVariables( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSScriptCommandAdditionalIVars : IEquatable<_NSScriptCommandAdditionalIVars> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSScriptCommandAdditionalIVars;
		public static implicit operator IntPtr( _NSScriptCommandAdditionalIVars value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSScriptCommandAdditionalIVars value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSScriptCommandAdditionalIVars?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSScriptCommandAdditionalIVars value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSScriptCommandAdditionalIVars value1, _NSScriptCommandAdditionalIVars value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSScriptCommandAdditionalIVars value1, _NSScriptCommandAdditionalIVars value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSScriptCommandAdditionalIVars( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSScriptCommandAdditionalIVars alloc() {
			return new _NSScriptCommandAdditionalIVars( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSScriptCommandDescriptionAdditionalInstanceVariables : IEquatable<_NSScriptCommandDescriptionAdditionalInstanceVariables> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSScriptCommandDescriptionAdditionalInstanceVariables;
		public static implicit operator IntPtr( _NSScriptCommandDescriptionAdditionalInstanceVariables value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSScriptCommandDescriptionAdditionalInstanceVariables value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSScriptCommandDescriptionAdditionalInstanceVariables?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSScriptCommandDescriptionAdditionalInstanceVariables value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSScriptCommandDescriptionAdditionalInstanceVariables value1, _NSScriptCommandDescriptionAdditionalInstanceVariables value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSScriptCommandDescriptionAdditionalInstanceVariables value1, _NSScriptCommandDescriptionAdditionalInstanceVariables value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSScriptCommandDescriptionAdditionalInstanceVariables( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSScriptCommandDescriptionAdditionalInstanceVariables alloc() {
			return new _NSScriptCommandDescriptionAdditionalInstanceVariables( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyGetBinding ) )]
	public struct _NSSelectorGetBinding : IEquatable<_NSSelectorGetBinding> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSSelectorGetBinding;
		public static implicit operator IntPtr( _NSSelectorGetBinding value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSSelectorGetBinding value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSSelectorGetBinding?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSSelectorGetBinding value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSSelectorGetBinding value1, _NSSelectorGetBinding value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSSelectorGetBinding value1, _NSSelectorGetBinding value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSSelectorGetBinding( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSSelectorGetBinding alloc() {
			return new _NSSelectorGetBinding( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeySetBinding ) )]
	public struct _NSSelectorSetBinding : IEquatable<_NSSelectorSetBinding> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSSelectorSetBinding;
		public static implicit operator IntPtr( _NSSelectorSetBinding value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSSelectorSetBinding value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSSelectorSetBinding?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSSelectorSetBinding value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSSelectorSetBinding value1, _NSSelectorSetBinding value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSSelectorSetBinding value1, _NSSelectorSetBinding value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSSelectorSetBinding( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSSelectorSetBinding alloc() {
			return new _NSSelectorSetBinding( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSValueTransformer ) )]
	public struct _NSSharedValueTransformer : IEquatable<_NSSharedValueTransformer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSSharedValueTransformer;
		public static implicit operator IntPtr( _NSSharedValueTransformer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSSharedValueTransformer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSSharedValueTransformer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSSharedValueTransformer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSSharedValueTransformer value1, _NSSharedValueTransformer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSSharedValueTransformer value1, _NSSharedValueTransformer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSSharedValueTransformer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSSharedValueTransformer alloc() {
			return new _NSSharedValueTransformer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSSharedValueTransformer ) )]
	public struct _NSUnarchiveFromDataTransformer : IEquatable<_NSUnarchiveFromDataTransformer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSUnarchiveFromDataTransformer;
		public static implicit operator IntPtr( _NSUnarchiveFromDataTransformer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSUnarchiveFromDataTransformer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSUnarchiveFromDataTransformer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSUnarchiveFromDataTransformer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSUnarchiveFromDataTransformer value1, _NSUnarchiveFromDataTransformer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSUnarchiveFromDataTransformer value1, _NSUnarchiveFromDataTransformer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSUnarchiveFromDataTransformer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSUnarchiveFromDataTransformer alloc() {
			return new _NSUnarchiveFromDataTransformer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSUndoObject ) )]
	public struct _NSUndoBeginMark : IEquatable<_NSUndoBeginMark> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSUndoBeginMark;
		public static implicit operator IntPtr( _NSUndoBeginMark value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSUndoBeginMark value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSUndoBeginMark?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSUndoBeginMark value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSUndoBeginMark value1, _NSUndoBeginMark value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSUndoBeginMark value1, _NSUndoBeginMark value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSUndoBeginMark( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSUndoBeginMark alloc() {
			return new _NSUndoBeginMark( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject groupIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupIdentifier( Handle, CachedSelectors.groupIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setGroupIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroupIdentifier_( Handle, CachedSelectors.setGroupIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGroupIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
		}
		static internal class CachedSelectors {
			public static readonly Selector groupIdentifier = "groupIdentifier";
			public static readonly Selector setGroupIdentifier_ = "setGroupIdentifier:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSUndoObject ) )]
	public struct _NSUndoEndMark : IEquatable<_NSUndoEndMark> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSUndoEndMark;
		public static implicit operator IntPtr( _NSUndoEndMark value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSUndoEndMark value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSUndoEndMark?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSUndoEndMark value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSUndoEndMark value1, _NSUndoEndMark value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSUndoEndMark value1, _NSUndoEndMark value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSUndoEndMark( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSUndoEndMark alloc() {
			return new _NSUndoEndMark( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSUndoObject ) )]
	public struct _NSUndoInvocation : IEquatable<_NSUndoInvocation> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSUndoInvocation;
		public static implicit operator IntPtr( _NSUndoInvocation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSUndoInvocation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSUndoInvocation?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSUndoInvocation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSUndoInvocation value1, _NSUndoInvocation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSUndoInvocation value1, _NSUndoInvocation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSUndoInvocation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSUndoInvocation alloc() {
			return new _NSUndoInvocation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithTarget_invocation_( NObjective.RuntimeObject target, NObjective.RuntimeObject invocation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTarget_invocation_( Handle, CachedSelectors.initWithTarget_invocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), target, invocation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTarget_invocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.RuntimeObject invocation );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithTarget_invocation_ = "initWithTarget:invocation:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSUndoObject ) )]
	public struct _NSUndoLightInvocation : IEquatable<_NSUndoLightInvocation> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSUndoLightInvocation;
		public static implicit operator IntPtr( _NSUndoLightInvocation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSUndoLightInvocation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSUndoLightInvocation?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSUndoLightInvocation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSUndoLightInvocation value1, _NSUndoLightInvocation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSUndoLightInvocation value1, _NSUndoLightInvocation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSUndoLightInvocation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSUndoLightInvocation alloc() {
			return new _NSUndoLightInvocation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithTarget_selector_object_( NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTarget_selector_object_( Handle, CachedSelectors.initWithTarget_selector_object_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), target, selector, @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTarget_selector_object_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithTarget_selector_object_ = "initWithTarget:selector:object:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSUndoObject : IEquatable<_NSUndoObject> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSUndoObject;
		public static implicit operator IntPtr( _NSUndoObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSUndoObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSUndoObject?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSUndoObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSUndoObject value1, _NSUndoObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSUndoObject value1, _NSUndoObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSUndoObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSUndoObject alloc() {
			return new _NSUndoObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTarget_( Handle, CachedSelectors.initWithTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void invoke() {
			RuntimeObject ___occuredException;
			NativeMethods.invoke( Handle, CachedSelectors.invoke, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isBeginMark() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isBeginMark( Handle, CachedSelectors.isBeginMark, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEndMark() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEndMark( Handle, CachedSelectors.isEndMark, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invoke( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isBeginMark( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEndMark( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithTarget_ = "initWithTarget:";
			public static readonly Selector invoke = "invoke";
			public static readonly Selector isBeginMark = "isBeginMark";
			public static readonly Selector isEndMark = "isEndMark";
			public static readonly Selector target = "target";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSUndoStack : IEquatable<_NSUndoStack> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSUndoStack;
		public static implicit operator IntPtr( _NSUndoStack value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSUndoStack value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSUndoStack?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSUndoStack value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSUndoStack value1, _NSUndoStack value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSUndoStack value1, _NSUndoStack value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSUndoStack( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSUndoStack alloc() {
			return new _NSUndoStack( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject groupIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupIdentifier( Handle, CachedSelectors.groupIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void markBegin() {
			RuntimeObject ___occuredException;
			NativeMethods.markBegin( Handle, CachedSelectors.markBegin, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void markEnd() {
			RuntimeObject ___occuredException;
			NativeMethods.markEnd( Handle, CachedSelectors.markEnd, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint max() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.max( Handle, CachedSelectors.max, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint nestingLevel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nestingLevel( Handle, CachedSelectors.nestingLevel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public char popAndInvoke() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.popAndInvoke( Handle, CachedSelectors.popAndInvoke, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject popUndoObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.popUndoObject( Handle, CachedSelectors.popUndoObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void push_( NObjective.RuntimeObject push ) {
			RuntimeObject ___occuredException;
			NativeMethods.push_( Handle, CachedSelectors.push_, out ___occuredException, sizeof( NObjective.RuntimeObject ), push );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllObjects() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllObjects( Handle, CachedSelectors.removeAllObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllObjectsWithTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllObjectsWithTarget_( Handle, CachedSelectors.removeAllObjectsWithTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObject_( Handle, CachedSelectors.removeObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroupIdentifier_( Handle, CachedSelectors.setGroupIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMax_( uint max ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMax_( Handle, CachedSelectors.setMax_, out ___occuredException, sizeof( uint ), max );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject topUndoObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.topUndoObject( Handle, CachedSelectors.topUndoObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void markBegin( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void markEnd( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint max( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint nestingLevel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char popAndInvoke( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr popUndoObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void push_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject push );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllObjects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllObjectsWithTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGroupIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMax_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint max );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr topUndoObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector count = "count";
			public static readonly Selector groupIdentifier = "groupIdentifier";
			public static readonly Selector markBegin = "markBegin";
			public static readonly Selector markEnd = "markEnd";
			public static readonly Selector max = "max";
			public static readonly Selector nestingLevel = "nestingLevel";
			public static readonly Selector popAndInvoke = "popAndInvoke";
			public static readonly Selector popUndoObject = "popUndoObject";
			public static readonly Selector push_ = "push:";
			public static readonly Selector removeAllObjects = "removeAllObjects";
			public static readonly Selector removeAllObjectsWithTarget_ = "removeAllObjectsWithTarget:";
			public static readonly Selector removeObject_ = "removeObject:";
			public static readonly Selector setGroupIdentifier_ = "setGroupIdentifier:";
			public static readonly Selector setMax_ = "setMax:";
			public static readonly Selector topUndoObject = "topUndoObject";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _NSXMLParserInfo : IEquatable<_NSXMLParserInfo> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSXMLParserInfo;
		public static implicit operator IntPtr( _NSXMLParserInfo value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSXMLParserInfo value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSXMLParserInfo?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSXMLParserInfo value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSXMLParserInfo value1, _NSXMLParserInfo value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSXMLParserInfo value1, _NSXMLParserInfo value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSXMLParserInfo( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSXMLParserInfo alloc() {
			return new _NSXMLParserInfo( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public struct _NSZombie : IEquatable<_NSZombie> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses._NSZombie;
		public override int GetHashCode() {
			return Handle.GetHashCode();
		}
		public static implicit operator IntPtr( _NSZombie value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _NSZombie value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _NSZombie?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _NSZombie value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _NSZombie value1, _NSZombie value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _NSZombie value1, _NSZombie value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _NSZombie( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _NSZombie alloc() {
			return new _NSZombie( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		public override string ToString() {
			return Handle.InvokeString( Selectors.description );
		}
		unsafe public static NObjective.RuntimeClass __class() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__class( ClassHandle, CachedSelectors.__class, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static char __isFault() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__isFault( ClassHandle, CachedSelectors.__isFault, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char __isProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__isProxy( ClassHandle, CachedSelectors.__isProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject __self() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__self( ClassHandle, CachedSelectors.__self, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeClass __superclass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__superclass( ClassHandle, CachedSelectors.__superclass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void appendFormat_( NObjective.RuntimeObject format ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendFormat_( Handle, CachedSelectors.appendFormat_, out ___occuredException, sizeof( NObjective.RuntimeObject ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject autorelease() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autorelease( Handle, CachedSelectors.autorelease, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeClass @class() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@class( Handle, CachedSelectors.@class, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void doesNotRecognizeSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.doesNotRecognizeSelector_( Handle, CachedSelectors.doesNotRecognizeSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject forward__( NObjective.Selector forward, System.IntPtr unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.forward__( Handle, CachedSelectors.forward__, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( System.IntPtr ), forward, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void forwardInvocation_( NObjective.RuntimeObject invocation ) {
			RuntimeObject ___occuredException;
			NativeMethods.forwardInvocation_( Handle, CachedSelectors.forwardInvocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), invocation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isFault() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFault( Handle, CachedSelectors.isFault, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isProxy( Handle, CachedSelectors.isProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject methodSignatureForSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.methodSignatureForSelector_( Handle, CachedSelectors.methodSignatureForSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char respondsToSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.respondsToSelector_( Handle, CachedSelectors.respondsToSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject retain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.retain( Handle, CachedSelectors.retain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint retainCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.retainCount( Handle, CachedSelectors.retainCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject self() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.self( Handle, CachedSelectors.self, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringByAppendingFormat_( NObjective.RuntimeObject format ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByAppendingFormat_( Handle, CachedSelectors.stringByAppendingFormat_, out ___occuredException, sizeof( NObjective.RuntimeObject ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeClass superclass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.superclass( Handle, CachedSelectors.superclass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass __class( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __isFault( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __isProxy( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __self( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass __superclass( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr autorelease( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass @class( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doesNotRecognizeSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr forward__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector forward, System.IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void forwardInvocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject invocation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isFault( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isProxy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr methodSignatureForSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char respondsToSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr retain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint retainCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr self( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByAppendingFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass superclass( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector __class = "__class";
			public static readonly Selector __isFault = "__isFault";
			public static readonly Selector __isProxy = "__isProxy";
			public static readonly Selector __self = "__self";
			public static readonly Selector __superclass = "__superclass";
			public static readonly Selector appendFormat_ = "appendFormat:";
			public static readonly Selector autorelease = "autorelease";
			public static readonly Selector @class = "class";
			public static readonly Selector doesNotRecognizeSelector_ = "doesNotRecognizeSelector:";
			public static readonly Selector forward__ = "forward::";
			public static readonly Selector forwardInvocation_ = "forwardInvocation:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector isFault = "isFault";
			public static readonly Selector isProxy = "isProxy";
			public static readonly Selector methodSignatureForSelector_ = "methodSignatureForSelector:";
			public static readonly Selector release = "release";
			public static readonly Selector respondsToSelector_ = "respondsToSelector:";
			public static readonly Selector retain = "retain";
			public static readonly Selector retainCount = "retainCount";
			public static readonly Selector self = "self";
			public static readonly Selector stringByAppendingFormat_ = "stringByAppendingFormat:";
			public static readonly Selector superclass = "superclass";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLProtocol ) )]
	public struct NSAboutURLProtocol : IEquatable<NSAboutURLProtocol> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAboutURLProtocol;
		public static implicit operator IntPtr( NSAboutURLProtocol value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAboutURLProtocol value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAboutURLProtocol?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAboutURLProtocol value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAboutURLProtocol value1, NSAboutURLProtocol value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAboutURLProtocol value1, NSAboutURLProtocol value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAboutURLProtocol( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAboutURLProtocol alloc() {
			return new NSAboutURLProtocol( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSAEDescriptorTranslator : IEquatable<NSAEDescriptorTranslator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAEDescriptorTranslator;
		public static implicit operator IntPtr( NSAEDescriptorTranslator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAEDescriptorTranslator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAEDescriptorTranslator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAEDescriptorTranslator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAEDescriptorTranslator value1, NSAEDescriptorTranslator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAEDescriptorTranslator value1, NSAEDescriptorTranslator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAEDescriptorTranslator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAEDescriptorTranslator alloc() {
			return new NSAEDescriptorTranslator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedAEDescriptorTranslator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedAEDescriptorTranslator( ClassHandle, CachedSelectors.sharedAEDescriptorTranslator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject descriptorByTranslatingObject_ofType_inSuite_( NObjective.RuntimeObject @object, NObjective.RuntimeObject ofType, NObjective.RuntimeObject inSuite ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptorByTranslatingObject_ofType_inSuite_( Handle, CachedSelectors.descriptorByTranslatingObject_ofType_inSuite_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, ofType, inSuite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectByTranslatingDescriptor_toType_inSuite_( NObjective.RuntimeObject descriptor, NObjective.RuntimeObject toType, NObjective.RuntimeObject inSuite ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectByTranslatingDescriptor_toType_inSuite_( Handle, CachedSelectors.objectByTranslatingDescriptor_toType_inSuite_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), descriptor, toType, inSuite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void registerTranslator_selector_toTranslateFromClass_( NObjective.RuntimeObject translator, NObjective.Selector selector, NObjective.RuntimeClass toTranslateFromClass ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerTranslator_selector_toTranslateFromClass_( Handle, CachedSelectors.registerTranslator_selector_toTranslateFromClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeClass ), translator, selector, toTranslateFromClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void registerTranslator_selector_toTranslateFromDescriptorType_( NObjective.RuntimeObject translator, NObjective.Selector selector, uint toTranslateFromDescriptorType ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerTranslator_selector_toTranslateFromDescriptorType_( Handle, CachedSelectors.registerTranslator_selector_toTranslateFromDescriptorType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( uint ), translator, selector, toTranslateFromDescriptorType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptorByTranslatingObject_ofType_inSuite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject ofType, NObjective.RuntimeObject inSuite );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectByTranslatingDescriptor_toType_inSuite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject descriptor, NObjective.RuntimeObject toType, NObjective.RuntimeObject inSuite );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerTranslator_selector_toTranslateFromClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject translator, NObjective.Selector selector, NObjective.RuntimeClass toTranslateFromClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerTranslator_selector_toTranslateFromDescriptorType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject translator, NObjective.Selector selector, uint toTranslateFromDescriptorType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedAEDescriptorTranslator( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector descriptorByTranslatingObject_ofType_inSuite_ = "descriptorByTranslatingObject:ofType:inSuite:";
			public static readonly Selector objectByTranslatingDescriptor_toType_inSuite_ = "objectByTranslatingDescriptor:toType:inSuite:";
			public static readonly Selector registerTranslator_selector_toTranslateFromClass_ = "registerTranslator:selector:toTranslateFromClass:";
			public static readonly Selector registerTranslator_selector_toTranslateFromDescriptorType_ = "registerTranslator:selector:toTranslateFromDescriptorType:";
			public static readonly Selector sharedAEDescriptorTranslator = "sharedAEDescriptorTranslator";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSAffineTransform : IEquatable<NSAffineTransform> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAffineTransform;
		public static implicit operator IntPtr( NSAffineTransform value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAffineTransform value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAffineTransform?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAffineTransform value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAffineTransform value1, NSAffineTransform value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAffineTransform value1, NSAffineTransform value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAffineTransform( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAffineTransform alloc() {
			return new NSAffineTransform( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSAffineTransform transform() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transform( ClassHandle, CachedSelectors.transform, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAffineTransform( ___result );
		}
		unsafe public void appendTransform_( NSAffineTransform transform ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendTransform_( Handle, CachedSelectors.appendTransform_, out ___occuredException, sizeof( NSAffineTransform ), transform );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSAffineTransform initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAffineTransform( ___result );
		}
		unsafe public NSAffineTransform initWithTransform_( NSAffineTransform transform ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTransform_( Handle, CachedSelectors.initWithTransform_, out ___occuredException, sizeof( NSAffineTransform ), transform );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAffineTransform( ___result );
		}
		unsafe public void invert() {
			RuntimeObject ___occuredException;
			NativeMethods.invert( Handle, CachedSelectors.invert, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void prependTransform_( NSAffineTransform transform ) {
			RuntimeObject ___occuredException;
			NativeMethods.prependTransform_( Handle, CachedSelectors.prependTransform_, out ___occuredException, sizeof( NSAffineTransform ), transform );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void rotateByDegrees_( float degrees ) {
			RuntimeObject ___occuredException;
			NativeMethods.rotateByDegrees_( Handle, CachedSelectors.rotateByDegrees_, out ___occuredException, sizeof( float ), degrees );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void rotateByRadians_( float radians ) {
			RuntimeObject ___occuredException;
			NativeMethods.rotateByRadians_( Handle, CachedSelectors.rotateByRadians_, out ___occuredException, sizeof( float ), radians );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scaleBy_( float @by ) {
			RuntimeObject ___occuredException;
			NativeMethods.scaleBy_( Handle, CachedSelectors.scaleBy_, out ___occuredException, sizeof( float ), @by );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scaleXBy_yBy_( float @by, float yBy ) {
			RuntimeObject ___occuredException;
			NativeMethods.scaleXBy_yBy_( Handle, CachedSelectors.scaleXBy_yBy_, out ___occuredException, sizeof( float ) + sizeof( float ), @by, yBy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTransformStruct_( _NSAffineTransformStruct @struct ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTransformStruct_( Handle, CachedSelectors.setTransformStruct_, out ___occuredException, sizeof( _NSAffineTransformStruct ), @struct );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public _NSPoint transformPoint_( _NSPoint point ) {
			_NSPoint ___result;
			RuntimeObject ___occuredException;
			NativeMethods.transformPoint_( out ___result, sizeof( _NSPoint ), Handle, CachedSelectors.transformPoint_, out ___occuredException, sizeof( _NSPoint ), point );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSSize transformSize_( _NSSize size ) {
			_NSSize ___result;
			RuntimeObject ___occuredException;
			NativeMethods.transformSize_( out ___result, sizeof( _NSSize ), Handle, CachedSelectors.transformSize_, out ___occuredException, sizeof( _NSSize ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSAffineTransformStruct transformStruct() {
			_NSAffineTransformStruct ___result;
			RuntimeObject ___occuredException;
			NativeMethods.transformStruct( out ___result, sizeof( _NSAffineTransformStruct ), Handle, CachedSelectors.transformStruct, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void translateXBy_yBy_( float @by, float yBy ) {
			RuntimeObject ___occuredException;
			NativeMethods.translateXBy_yBy_( Handle, CachedSelectors.translateXBy_yBy_, out ___occuredException, sizeof( float ) + sizeof( float ), @by, yBy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendTransform_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAffineTransform transform );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTransform_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAffineTransform transform );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invert( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void prependTransform_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAffineTransform transform );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void rotateByDegrees_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float degrees );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void rotateByRadians_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float radians );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scaleBy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @by );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scaleXBy_yBy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @by, float yBy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTransformStruct_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSAffineTransformStruct @struct );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transform( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void transformPoint_( out _NSPoint ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSPoint point );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void transformSize_( out _NSSize ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSSize size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void transformStruct( out _NSAffineTransformStruct ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void translateXBy_yBy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @by, float yBy );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendTransform_ = "appendTransform:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithTransform_ = "initWithTransform:";
			public static readonly Selector invert = "invert";
			public static readonly Selector prependTransform_ = "prependTransform:";
			public static readonly Selector rotateByDegrees_ = "rotateByDegrees:";
			public static readonly Selector rotateByRadians_ = "rotateByRadians:";
			public static readonly Selector scaleBy_ = "scaleBy:";
			public static readonly Selector scaleXBy_yBy_ = "scaleXBy:yBy:";
			public static readonly Selector setTransformStruct_ = "setTransformStruct:";
			public static readonly Selector transform = "transform";
			public static readonly Selector transformPoint_ = "transformPoint:";
			public static readonly Selector transformSize_ = "transformSize:";
			public static readonly Selector transformStruct = "transformStruct";
			public static readonly Selector translateXBy_yBy_ = "translateXBy:yBy:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSExpression ) )]
	public struct NSAggregateExpression : IEquatable<NSAggregateExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAggregateExpression;
		public static implicit operator IntPtr( NSAggregateExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAggregateExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAggregateExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAggregateExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAggregateExpression value1, NSAggregateExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAggregateExpression value1, NSAggregateExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAggregateExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAggregateExpression alloc() {
			return new NSAggregateExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSAggregateExpression initWithCollection_( NObjective.RuntimeObject collection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCollection_( Handle, CachedSelectors.initWithCollection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), collection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAggregateExpression( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCollection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject collection );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithCollection_ = "initWithCollection:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDirectoryEnumerator ) )]
	public struct NSAllDescendantPathsEnumerator : IEquatable<NSAllDescendantPathsEnumerator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAllDescendantPathsEnumerator;
		public static implicit operator IntPtr( NSAllDescendantPathsEnumerator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAllDescendantPathsEnumerator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAllDescendantPathsEnumerator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAllDescendantPathsEnumerator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAllDescendantPathsEnumerator value1, NSAllDescendantPathsEnumerator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAllDescendantPathsEnumerator value1, NSAllDescendantPathsEnumerator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAllDescendantPathsEnumerator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAllDescendantPathsEnumerator alloc() {
			return new NSAllDescendantPathsEnumerator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject newWithPath_prepend_attributes_cross_( NObjective.RuntimeObject path, NObjective.RuntimeObject prepend, NObjective.RuntimeObject attributes, char cross ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newWithPath_prepend_attributes_cross_( ClassHandle, CachedSelectors.newWithPath_prepend_attributes_cross_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), path, prepend, attributes, cross );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject currentSubdirectoryAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentSubdirectoryAttributes( Handle, CachedSelectors.currentSubdirectoryAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentSubdirectoryAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newWithPath_prepend_attributes_cross_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, NObjective.RuntimeObject prepend, NObjective.RuntimeObject attributes, char cross );
		}
		static internal class CachedSelectors {
			public static readonly Selector currentSubdirectoryAttributes = "currentSubdirectoryAttributes";
			public static readonly Selector newWithPath_prepend_attributes_cross_ = "newWithPath:prepend:attributes:cross:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSExpression ) )]
	public struct NSAnyKeyExpression : IEquatable<NSAnyKeyExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAnyKeyExpression;
		public static implicit operator IntPtr( NSAnyKeyExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAnyKeyExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAnyKeyExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAnyKeyExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAnyKeyExpression value1, NSAnyKeyExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAnyKeyExpression value1, NSAnyKeyExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAnyKeyExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAnyKeyExpression alloc() {
			return new NSAnyKeyExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSAppleEventDescriptor : IEquatable<NSAppleEventDescriptor> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAppleEventDescriptor;
		public static implicit operator IntPtr( NSAppleEventDescriptor value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAppleEventDescriptor value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAppleEventDescriptor?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAppleEventDescriptor value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAppleEventDescriptor value1, NSAppleEventDescriptor value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAppleEventDescriptor value1, NSAppleEventDescriptor value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAppleEventDescriptor( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAppleEventDescriptor alloc() {
			return new NSAppleEventDescriptor( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSAppleEventDescriptor appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_( uint @class, uint eventID, NSAppleEventDescriptor targetDescriptor, short returnID, int transactionID ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_( ClassHandle, CachedSelectors.appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_, out ___occuredException, sizeof( uint ) + sizeof( uint ) + sizeof( NSAppleEventDescriptor ) + sizeof( short ) + sizeof( int ), @class, eventID, targetDescriptor, returnID, transactionID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public static NSAppleEventDescriptor descriptorWithBoolean_( char boolean ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptorWithBoolean_( ClassHandle, CachedSelectors.descriptorWithBoolean_, out ___occuredException, sizeof( char ), boolean );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public static NSAppleEventDescriptor descriptorWithDescriptorType_bytes_length_( uint type, IntPtr bytes, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptorWithDescriptorType_bytes_length_( ClassHandle, CachedSelectors.descriptorWithDescriptorType_bytes_length_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ) + sizeof( uint ), type, bytes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public static NSAppleEventDescriptor descriptorWithDescriptorType_data_( uint type, NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptorWithDescriptorType_data_( ClassHandle, CachedSelectors.descriptorWithDescriptorType_data_, out ___occuredException, sizeof( uint ) + sizeof( NSData ), type, data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public static NSAppleEventDescriptor descriptorWithEnumCode_( uint code ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptorWithEnumCode_( ClassHandle, CachedSelectors.descriptorWithEnumCode_, out ___occuredException, sizeof( uint ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public static NSAppleEventDescriptor descriptorWithInt32_( int int32 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptorWithInt32_( ClassHandle, CachedSelectors.descriptorWithInt32_, out ___occuredException, sizeof( int ), int32 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public static NSAppleEventDescriptor descriptorWithString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.descriptorWithString_( ClassHandle, CachedSelectors.descriptorWithString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public static NSAppleEventDescriptor descriptorWithTypeCode_( uint code ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptorWithTypeCode_( ClassHandle, CachedSelectors.descriptorWithTypeCode_, out ___occuredException, sizeof( uint ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public static NSAppleEventDescriptor listDescriptor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.listDescriptor( ClassHandle, CachedSelectors.listDescriptor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public static NSAppleEventDescriptor nullDescriptor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nullDescriptor( ClassHandle, CachedSelectors.nullDescriptor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public static NSAppleEventDescriptor recordDescriptor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordDescriptor( ClassHandle, CachedSelectors.recordDescriptor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleEventDescriptor attributeDescriptorForKeyword_( uint keyword ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributeDescriptorForKeyword_( Handle, CachedSelectors.attributeDescriptorForKeyword_, out ___occuredException, sizeof( uint ), keyword );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public char booleanValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.booleanValue( Handle, CachedSelectors.booleanValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSAppleEventDescriptor coerceToDescriptorType_( uint type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.coerceToDescriptorType_( Handle, CachedSelectors.coerceToDescriptorType_, out ___occuredException, sizeof( uint ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSData data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSAppleEventDescriptor descriptorAtIndex_( int index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptorAtIndex_( Handle, CachedSelectors.descriptorAtIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleEventDescriptor descriptorForKeyword_( uint keyword ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptorForKeyword_( Handle, CachedSelectors.descriptorForKeyword_, out ___occuredException, sizeof( uint ), keyword );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public uint descriptorType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptorType( Handle, CachedSelectors.descriptorType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint enumCodeValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enumCodeValue( Handle, CachedSelectors.enumCodeValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint eventClass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.eventClass( Handle, CachedSelectors.eventClass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint eventID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.eventID( Handle, CachedSelectors.eventID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSAppleEventDescriptor initListDescriptor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initListDescriptor( Handle, CachedSelectors.initListDescriptor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleEventDescriptor initRecordDescriptor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initRecordDescriptor( Handle, CachedSelectors.initRecordDescriptor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleEventDescriptor initWithAEDescNoCopy_( AEDesc[] copy ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAEDescNoCopy_( Handle, CachedSelectors.initWithAEDescNoCopy_, out ___occuredException, sizeof( IntPtr ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleEventDescriptor initWithDescriptorType_bytes_length_( uint type, IntPtr bytes, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDescriptorType_bytes_length_( Handle, CachedSelectors.initWithDescriptorType_bytes_length_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ) + sizeof( uint ), type, bytes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleEventDescriptor initWithDescriptorType_data_( uint type, NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDescriptorType_data_( Handle, CachedSelectors.initWithDescriptorType_data_, out ___occuredException, sizeof( uint ) + sizeof( NSData ), type, data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleEventDescriptor initWithEventClass_eventID_targetDescriptor_returnID_transactionID_( uint @class, uint eventID, NSAppleEventDescriptor targetDescriptor, short returnID, int transactionID ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithEventClass_eventID_targetDescriptor_returnID_transactionID_( Handle, CachedSelectors.initWithEventClass_eventID_targetDescriptor_returnID_transactionID_, out ___occuredException, sizeof( uint ) + sizeof( uint ) + sizeof( NSAppleEventDescriptor ) + sizeof( short ) + sizeof( int ), @class, eventID, targetDescriptor, returnID, transactionID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public void insertDescriptor_atIndex_( NSAppleEventDescriptor descriptor, int atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertDescriptor_atIndex_( Handle, CachedSelectors.insertDescriptor_atIndex_, out ___occuredException, sizeof( NSAppleEventDescriptor ) + sizeof( int ), descriptor, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int int32Value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.int32Value( Handle, CachedSelectors.int32Value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint keywordForDescriptorAtIndex_( int index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keywordForDescriptorAtIndex_( Handle, CachedSelectors.keywordForDescriptorAtIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public int numberOfItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItems( Handle, CachedSelectors.numberOfItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSAppleEventDescriptor paramDescriptorForKeyword_( uint keyword ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.paramDescriptorForKeyword_( Handle, CachedSelectors.paramDescriptorForKeyword_, out ___occuredException, sizeof( uint ), keyword );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public void removeDecriptorAtIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeDecriptorAtIndex_( Handle, CachedSelectors.removeDecriptorAtIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeDescriptorAtIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeDescriptorAtIndex_( Handle, CachedSelectors.removeDescriptorAtIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeDescriptorWithKeyword_( uint keyword ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeDescriptorWithKeyword_( Handle, CachedSelectors.removeDescriptorWithKeyword_, out ___occuredException, sizeof( uint ), keyword );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeParamDescriptorWithKeyword_( uint keyword ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeParamDescriptorWithKeyword_( Handle, CachedSelectors.removeParamDescriptorWithKeyword_, out ___occuredException, sizeof( uint ), keyword );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public short returnID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.returnID( Handle, CachedSelectors.returnID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAttributeDescriptor_forKeyword_( NSAppleEventDescriptor descriptor, uint forKeyword ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttributeDescriptor_forKeyword_( Handle, CachedSelectors.setAttributeDescriptor_forKeyword_, out ___occuredException, sizeof( NSAppleEventDescriptor ) + sizeof( uint ), descriptor, forKeyword );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDescriptor_forKeyword_( NSAppleEventDescriptor descriptor, uint forKeyword ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDescriptor_forKeyword_( Handle, CachedSelectors.setDescriptor_forKeyword_, out ___occuredException, sizeof( NSAppleEventDescriptor ) + sizeof( uint ), descriptor, forKeyword );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setParamDescriptor_forKeyword_( NSAppleEventDescriptor descriptor, uint forKeyword ) {
			RuntimeObject ___occuredException;
			NativeMethods.setParamDescriptor_forKeyword_( Handle, CachedSelectors.setParamDescriptor_forKeyword_, out ___occuredException, sizeof( NSAppleEventDescriptor ) + sizeof( uint ), descriptor, forKeyword );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string stringValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringValue( Handle, CachedSelectors.stringValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int transactionID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transactionID( Handle, CachedSelectors.transactionID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint typeCodeValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeCodeValue( Handle, CachedSelectors.typeCodeValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @class, uint eventID, NSAppleEventDescriptor targetDescriptor, short returnID, int transactionID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributeDescriptorForKeyword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint keyword );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char booleanValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr coerceToDescriptorType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptorAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptorForKeyword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint keyword );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint descriptorType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptorWithBoolean_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char boolean );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptorWithDescriptorType_bytes_length_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint type, IntPtr bytes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptorWithDescriptorType_data_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint type, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptorWithEnumCode_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptorWithInt32_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int int32 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptorWithString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptorWithTypeCode_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint enumCodeValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint eventClass( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint eventID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initListDescriptor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initRecordDescriptor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAEDescNoCopy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, AEDesc[] copy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDescriptorType_bytes_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint type, IntPtr bytes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDescriptorType_data_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint type, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithEventClass_eventID_targetDescriptor_returnID_transactionID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @class, uint eventID, NSAppleEventDescriptor targetDescriptor, short returnID, int transactionID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertDescriptor_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAppleEventDescriptor descriptor, int atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int int32Value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint keywordForDescriptorAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr listDescriptor( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nullDescriptor( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr paramDescriptorForKeyword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint keyword );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recordDescriptor( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeDecriptorAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeDescriptorAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeDescriptorWithKeyword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint keyword );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeParamDescriptorWithKeyword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint keyword );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short returnID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributeDescriptor_forKeyword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAppleEventDescriptor descriptor, uint forKeyword );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDescriptor_forKeyword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAppleEventDescriptor descriptor, uint forKeyword );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setParamDescriptor_forKeyword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAppleEventDescriptor descriptor, uint forKeyword );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int transactionID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint typeCodeValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_ = "appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:";
			public static readonly Selector attributeDescriptorForKeyword_ = "attributeDescriptorForKeyword:";
			public static readonly Selector booleanValue = "booleanValue";
			public static readonly Selector coerceToDescriptorType_ = "coerceToDescriptorType:";
			public static readonly Selector data = "data";
			public static readonly Selector descriptorAtIndex_ = "descriptorAtIndex:";
			public static readonly Selector descriptorForKeyword_ = "descriptorForKeyword:";
			public static readonly Selector descriptorType = "descriptorType";
			public static readonly Selector descriptorWithBoolean_ = "descriptorWithBoolean:";
			public static readonly Selector descriptorWithDescriptorType_bytes_length_ = "descriptorWithDescriptorType:bytes:length:";
			public static readonly Selector descriptorWithDescriptorType_data_ = "descriptorWithDescriptorType:data:";
			public static readonly Selector descriptorWithEnumCode_ = "descriptorWithEnumCode:";
			public static readonly Selector descriptorWithInt32_ = "descriptorWithInt32:";
			public static readonly Selector descriptorWithString_ = "descriptorWithString:";
			public static readonly Selector descriptorWithTypeCode_ = "descriptorWithTypeCode:";
			public static readonly Selector enumCodeValue = "enumCodeValue";
			public static readonly Selector eventClass = "eventClass";
			public static readonly Selector eventID = "eventID";
			public static readonly Selector initListDescriptor = "initListDescriptor";
			public static readonly Selector initRecordDescriptor = "initRecordDescriptor";
			public static readonly Selector initWithAEDescNoCopy_ = "initWithAEDescNoCopy:";
			public static readonly Selector initWithDescriptorType_bytes_length_ = "initWithDescriptorType:bytes:length:";
			public static readonly Selector initWithDescriptorType_data_ = "initWithDescriptorType:data:";
			public static readonly Selector initWithEventClass_eventID_targetDescriptor_returnID_transactionID_ = "initWithEventClass:eventID:targetDescriptor:returnID:transactionID:";
			public static readonly Selector insertDescriptor_atIndex_ = "insertDescriptor:atIndex:";
			public static readonly Selector int32Value = "int32Value";
			public static readonly Selector keywordForDescriptorAtIndex_ = "keywordForDescriptorAtIndex:";
			public static readonly Selector listDescriptor = "listDescriptor";
			public static readonly Selector nullDescriptor = "nullDescriptor";
			public static readonly Selector numberOfItems = "numberOfItems";
			public static readonly Selector paramDescriptorForKeyword_ = "paramDescriptorForKeyword:";
			public static readonly Selector recordDescriptor = "recordDescriptor";
			public static readonly Selector removeDecriptorAtIndex_ = "removeDecriptorAtIndex:";
			public static readonly Selector removeDescriptorAtIndex_ = "removeDescriptorAtIndex:";
			public static readonly Selector removeDescriptorWithKeyword_ = "removeDescriptorWithKeyword:";
			public static readonly Selector removeParamDescriptorWithKeyword_ = "removeParamDescriptorWithKeyword:";
			public static readonly Selector returnID = "returnID";
			public static readonly Selector setAttributeDescriptor_forKeyword_ = "setAttributeDescriptor:forKeyword:";
			public static readonly Selector setDescriptor_forKeyword_ = "setDescriptor:forKeyword:";
			public static readonly Selector setParamDescriptor_forKeyword_ = "setParamDescriptor:forKeyword:";
			public static readonly Selector stringValue = "stringValue";
			public static readonly Selector transactionID = "transactionID";
			public static readonly Selector typeCodeValue = "typeCodeValue";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSAppleEventHandling : IEquatable<NSAppleEventHandling> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAppleEventHandling;
		public static implicit operator IntPtr( NSAppleEventHandling value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAppleEventHandling value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAppleEventHandling?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAppleEventHandling value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAppleEventHandling value1, NSAppleEventHandling value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAppleEventHandling value1, NSAppleEventHandling value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAppleEventHandling( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAppleEventHandling alloc() {
			return new NSAppleEventHandling( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject @event() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@event( Handle, CachedSelectors.@event, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replyEvent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replyEvent( Handle, CachedSelectors.replyEvent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void resumeWithScriptCommandResult_( NObjective.RuntimeObject result ) {
			RuntimeObject ___occuredException;
			NativeMethods.resumeWithScriptCommandResult_( Handle, CachedSelectors.resumeWithScriptCommandResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ), result );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject scriptCommand() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptCommand( Handle, CachedSelectors.scriptCommand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setScriptCommand_( NObjective.RuntimeObject command ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScriptCommand_( Handle, CachedSelectors.setScriptCommand_, out ___occuredException, sizeof( NObjective.RuntimeObject ), command );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void suspend() {
			RuntimeObject ___occuredException;
			NativeMethods.suspend( Handle, CachedSelectors.suspend, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @event( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replyEvent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resumeWithScriptCommandResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject result );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scriptCommand( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScriptCommand_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject command );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void suspend( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector @event = "event";
			public static readonly Selector replyEvent = "replyEvent";
			public static readonly Selector resumeWithScriptCommandResult_ = "resumeWithScriptCommandResult:";
			public static readonly Selector scriptCommand = "scriptCommand";
			public static readonly Selector setScriptCommand_ = "setScriptCommand:";
			public static readonly Selector suspend = "suspend";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSAppleEventManager : IEquatable<NSAppleEventManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAppleEventManager;
		public static implicit operator IntPtr( NSAppleEventManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAppleEventManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAppleEventManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAppleEventManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAppleEventManager value1, NSAppleEventManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAppleEventManager value1, NSAppleEventManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAppleEventManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAppleEventManager alloc() {
			return new NSAppleEventManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSAppleEventManager sharedAppleEventManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedAppleEventManager( ClassHandle, CachedSelectors.sharedAppleEventManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventManager( ___result );
		}
		unsafe public NSAppleEventDescriptor appleEventForSuspensionID_( IntPtr id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventForSuspensionID_( Handle, CachedSelectors.appleEventForSuspensionID_, out ___occuredException, sizeof( IntPtr ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleEventDescriptor currentAppleEvent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentAppleEvent( Handle, CachedSelectors.currentAppleEvent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleEventDescriptor currentReplyAppleEvent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentReplyAppleEvent( Handle, CachedSelectors.currentReplyAppleEvent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public short dispatchRawAppleEvent_withRawReply_handlerRefCon_( AEDesc[] @event, AEDesc[] withRawReply, uint handlerRefCon ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dispatchRawAppleEvent_withRawReply_handlerRefCon_( Handle, CachedSelectors.dispatchRawAppleEvent_withRawReply_handlerRefCon_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( uint ), @event, withRawReply, handlerRefCon );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void removeEventHandlerForEventClass_andEventID_( uint @class, uint andEventID ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeEventHandlerForEventClass_andEventID_( Handle, CachedSelectors.removeEventHandlerForEventClass_andEventID_, out ___occuredException, sizeof( uint ) + sizeof( uint ), @class, andEventID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSAppleEventDescriptor replyAppleEventForSuspensionID_( IntPtr id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replyAppleEventForSuspensionID_( Handle, CachedSelectors.replyAppleEventForSuspensionID_, out ___occuredException, sizeof( IntPtr ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public void resumeWithSuspensionID_( IntPtr id ) {
			RuntimeObject ___occuredException;
			NativeMethods.resumeWithSuspensionID_( Handle, CachedSelectors.resumeWithSuspensionID_, out ___occuredException, sizeof( IntPtr ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCurrentAppleEventAndReplyEventWithSuspensionID_( IntPtr id ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCurrentAppleEventAndReplyEventWithSuspensionID_( Handle, CachedSelectors.setCurrentAppleEventAndReplyEventWithSuspensionID_, out ___occuredException, sizeof( IntPtr ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEventHandler_andSelector_forEventClass_andEventID_( NObjective.RuntimeObject handler, NObjective.Selector andSelector, uint forEventClass, uint andEventID ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEventHandler_andSelector_forEventClass_andEventID_( Handle, CachedSelectors.setEventHandler_andSelector_forEventClass_andEventID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( uint ) + sizeof( uint ), handler, andSelector, forEventClass, andEventID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr appleEventForSuspensionID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentAppleEvent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentReplyAppleEvent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short dispatchRawAppleEvent_withRawReply_handlerRefCon_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, AEDesc[] @event, AEDesc[] withRawReply, uint handlerRefCon );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeEventHandlerForEventClass_andEventID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @class, uint andEventID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replyAppleEventForSuspensionID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resumeWithSuspensionID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrentAppleEventAndReplyEventWithSuspensionID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEventHandler_andSelector_forEventClass_andEventID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject handler, NObjective.Selector andSelector, uint forEventClass, uint andEventID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedAppleEventManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector appleEventForSuspensionID_ = "appleEventForSuspensionID:";
			public static readonly Selector currentAppleEvent = "currentAppleEvent";
			public static readonly Selector currentReplyAppleEvent = "currentReplyAppleEvent";
			public static readonly Selector dispatchRawAppleEvent_withRawReply_handlerRefCon_ = "dispatchRawAppleEvent:withRawReply:handlerRefCon:";
			public static readonly Selector removeEventHandlerForEventClass_andEventID_ = "removeEventHandlerForEventClass:andEventID:";
			public static readonly Selector replyAppleEventForSuspensionID_ = "replyAppleEventForSuspensionID:";
			public static readonly Selector resumeWithSuspensionID_ = "resumeWithSuspensionID:";
			public static readonly Selector setCurrentAppleEventAndReplyEventWithSuspensionID_ = "setCurrentAppleEventAndReplyEventWithSuspensionID:";
			public static readonly Selector setEventHandler_andSelector_forEventClass_andEventID_ = "setEventHandler:andSelector:forEventClass:andEventID:";
			public static readonly Selector sharedAppleEventManager = "sharedAppleEventManager";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSAppleScript : IEquatable<NSAppleScript> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAppleScript;
		public static implicit operator IntPtr( NSAppleScript value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAppleScript value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAppleScript?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAppleScript value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAppleScript value1, NSAppleScript value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAppleScript value1, NSAppleScript value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAppleScript( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAppleScript alloc() {
			return new NSAppleScript( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public bool compileAndReturnError_( ref NSDictionary error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compileAndReturnError_( Handle, CachedSelectors.compileAndReturnError_, out ___occuredException, sizeof( IntPtr ), ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSAppleEventDescriptor executeAndReturnError_( ref NSDictionary error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.executeAndReturnError_( Handle, CachedSelectors.executeAndReturnError_, out ___occuredException, sizeof( IntPtr ), ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleEventDescriptor executeAppleEvent_error_( NSAppleEventDescriptor @event, ref NSDictionary error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.executeAppleEvent_error_( Handle, CachedSelectors.executeAppleEvent_error_, out ___occuredException, sizeof( NSAppleEventDescriptor ) + sizeof( IntPtr ), @event, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSAppleScript initWithContentsOfURL_error_( NSURL url, ref NSDictionary error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_error_( Handle, CachedSelectors.initWithContentsOfURL_error_, out ___occuredException, sizeof( NSURL ) + sizeof( IntPtr ), url, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleScript( ___result );
		}
		unsafe public NSAppleScript initWithSource_( string source ) {
			RuntimeObject ___occuredException;
			var ___wrappedsource = Runtime.CreateStringProxy( source );
			var ___result = NativeMethods.initWithSource_( Handle, CachedSelectors.initWithSource_, out ___occuredException, sizeof( IntPtr ), ___wrappedsource );
			Runtime.ReleaseNativeObject( ___wrappedsource );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleScript( ___result );
		}
		unsafe public bool isCompiled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCompiled( Handle, CachedSelectors.isCompiled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string source() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.source( Handle, CachedSelectors.source, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool compileAndReturnError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ref NSDictionary error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr executeAndReturnError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ref NSDictionary error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr executeAppleEvent_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAppleEventDescriptor @event, ref NSDictionary error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, ref NSDictionary error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr source );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isCompiled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr source( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector compileAndReturnError_ = "compileAndReturnError:";
			public static readonly Selector executeAndReturnError_ = "executeAndReturnError:";
			public static readonly Selector executeAppleEvent_error_ = "executeAppleEvent:error:";
			public static readonly Selector initWithContentsOfURL_error_ = "initWithContentsOfURL:error:";
			public static readonly Selector initWithSource_ = "initWithSource:";
			public static readonly Selector isCompiled = "isCompiled";
			public static readonly Selector source = "source";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCoder ) )]
	public struct NSArchiver : IEquatable<NSArchiver> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSArchiver;
		public static implicit operator IntPtr( NSArchiver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSArchiver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSArchiver?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSArchiver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSArchiver value1, NSArchiver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSArchiver value1, NSArchiver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSArchiver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSArchiver alloc() {
			return new NSArchiver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSData archivedDataWithRootObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archivedDataWithRootObject_( ClassHandle, CachedSelectors.archivedDataWithRootObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static bool archiveRootObject_toFile_( NObjective.RuntimeObject @object, string toFile ) {
			RuntimeObject ___occuredException;
			var ___wrappedtoFile = Runtime.CreateStringProxy( toFile );
			var ___result = NativeMethods.archiveRootObject_toFile_( ClassHandle, CachedSelectors.archiveRootObject_toFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), @object, ___wrappedtoFile );
			Runtime.ReleaseNativeObject( ___wrappedtoFile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject __classNameEncodedForTrueClassName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__classNameEncodedForTrueClassName_( ClassHandle, CachedSelectors.__classNameEncodedForTrueClassName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void __encodeClassName_intoClassName_( NObjective.RuntimeObject name, NObjective.RuntimeObject intoClassName ) {
			RuntimeObject ___occuredException;
			NativeMethods.__encodeClassName_intoClassName_( ClassHandle, CachedSelectors.__encodeClassName_intoClassName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, intoClassName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSMutableData archiverData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archiverData( Handle, CachedSelectors.archiverData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableData( ___result );
		}
		unsafe public string classNameEncodedForTrueClassName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.classNameEncodedForTrueClassName_( Handle, CachedSelectors.classNameEncodedForTrueClassName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void encodeClassName_intoClassName_( string name, string intoClassName ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedintoClassName = Runtime.CreateStringProxy( intoClassName );
			NativeMethods.encodeClassName_intoClassName_( Handle, CachedSelectors.encodeClassName_intoClassName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedintoClassName );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedintoClassName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArchiver initForWritingWithMutableData_( NSMutableData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initForWritingWithMutableData_( Handle, CachedSelectors.initForWritingWithMutableData_, out ___occuredException, sizeof( NSMutableData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArchiver( ___result );
		}
		unsafe public void replaceObject_withObject_( NObjective.RuntimeObject @object, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObject_withObject_( Handle, CachedSelectors.replaceObject_withObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __classNameEncodedForTrueClassName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void __encodeClassName_intoClassName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject intoClassName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archivedDataWithRootObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archiverData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool archiveRootObject_toFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, IntPtr toFile );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classNameEncodedForTrueClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeClassName_intoClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr intoClassName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initForWritingWithMutableData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSMutableData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObject_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject withObject );
		}
		static internal class CachedSelectors {
			public static readonly Selector __classNameEncodedForTrueClassName_ = "__classNameEncodedForTrueClassName:";
			public static readonly Selector __encodeClassName_intoClassName_ = "__encodeClassName:intoClassName:";
			public static readonly Selector archivedDataWithRootObject_ = "archivedDataWithRootObject:";
			public static readonly Selector archiverData = "archiverData";
			public static readonly Selector archiveRootObject_toFile_ = "archiveRootObject:toFile:";
			public static readonly Selector classNameEncodedForTrueClassName_ = "classNameEncodedForTrueClassName:";
			public static readonly Selector data = "data";
			public static readonly Selector encodeClassName_intoClassName_ = "encodeClassName:intoClassName:";
			public static readonly Selector initForWritingWithMutableData_ = "initForWritingWithMutableData:";
			public static readonly Selector replaceObject_withObject_ = "replaceObject:withObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSArray : IEquatable<NSArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSArray;
		public static implicit operator IntPtr( NSArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSArray value1, NSArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSArray value1, NSArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSArray alloc() {
			return new NSArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject array() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.array( ClassHandle, CachedSelectors.array, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSArray arrayWithArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayWithArray_( ClassHandle, CachedSelectors.arrayWithArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSArray arrayWithArray_copyItems_( NObjective.RuntimeObject array, char copyItems ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayWithArray_copyItems_( ClassHandle, CachedSelectors.arrayWithArray_copyItems_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), array, copyItems );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSArray arrayWithContentsOfFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.arrayWithContentsOfFile_( ClassHandle, CachedSelectors.arrayWithContentsOfFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSArray arrayWithContentsOfURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayWithContentsOfURL_( ClassHandle, CachedSelectors.arrayWithContentsOfURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSArray arrayWithObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayWithObject_( ClassHandle, CachedSelectors.arrayWithObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		public static NSArray arrayWithObjects_( NObjective.RuntimeObject objects ) {
			return new NSArray( ClassHandle.InvokeIntPtrFast( CachedSelectors.arrayWithObjects_, CachedEncodings.__6F587D11, objects ) );
		}
		unsafe public static NSArray arrayWithObjects_count_( IntPtr objects, uint count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayWithObjects_count_( ClassHandle, CachedSelectors.arrayWithObjects_count_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), objects, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void addObserver_toObjectsAtIndexes_forKeyPath_options_context_( NSObject observer, NSIndexSet toObjectsAtIndexes, string forKeyPath, uint options, IntPtr context ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKeyPath = Runtime.CreateStringProxy( forKeyPath );
			NativeMethods.addObserver_toObjectsAtIndexes_forKeyPath_options_context_( Handle, CachedSelectors.addObserver_toObjectsAtIndexes_forKeyPath_options_context_, out ___occuredException, sizeof( NSObject ) + sizeof( NSIndexSet ) + sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), observer, toObjectsAtIndexes, ___wrappedforKeyPath, options, context );
			Runtime.ReleaseNativeObject( ___wrappedforKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray arrayByAddingObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayByAddingObject_( Handle, CachedSelectors.arrayByAddingObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject arrayByAddingObjects_count_( System.IntPtr objects, uint count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayByAddingObjects_count_( Handle, CachedSelectors.arrayByAddingObjects_count_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), objects, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSArray arrayByAddingObjectsFromArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayByAddingObjectsFromArray_( Handle, CachedSelectors.arrayByAddingObjectsFromArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject arrayByApplyingSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayByApplyingSelector_( Handle, CachedSelectors.arrayByApplyingSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject arrayByExcludingIdenticalObjectsInArray_( NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayByExcludingIdenticalObjectsInArray_( Handle, CachedSelectors.arrayByExcludingIdenticalObjectsInArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject arrayByExcludingObjectsInArray_( NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayByExcludingObjectsInArray_( Handle, CachedSelectors.arrayByExcludingObjectsInArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject arrayByExcludingObjectsInArray_identical_( NObjective.RuntimeObject array, char identical ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayByExcludingObjectsInArray_identical_( Handle, CachedSelectors.arrayByExcludingObjectsInArray_identical_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), array, identical );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject arrayByExcludingToObjectsInArray_( NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayByExcludingToObjectsInArray_( Handle, CachedSelectors.arrayByExcludingToObjectsInArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string componentsJoinedByString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.componentsJoinedByString_( Handle, CachedSelectors.componentsJoinedByString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool containsObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsObject_( Handle, CachedSelectors.containsObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char containsObjectIdenticalTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsObjectIdenticalTo_( Handle, CachedSelectors.containsObjectIdenticalTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint countOccurrences_( NObjective.RuntimeObject occurrences ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countOccurrences_( Handle, CachedSelectors.countOccurrences_, out ___occuredException, sizeof( NObjective.RuntimeObject ), occurrences );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string descriptionWithLocale_( NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptionWithLocale_( Handle, CachedSelectors.descriptionWithLocale_, out ___occuredException, sizeof( NSDictionary ), locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string descriptionWithLocale_indent_( NSDictionary locale, uint indent ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptionWithLocale_indent_( Handle, CachedSelectors.descriptionWithLocale_indent_, out ___occuredException, sizeof( NSDictionary ) + sizeof( uint ), locale, indent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray filteredArrayUsingPredicate_( NSPredicate predicate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filteredArrayUsingPredicate_( Handle, CachedSelectors.filteredArrayUsingPredicate_, out ___occuredException, sizeof( NSPredicate ), predicate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject firstObjectCommonWithArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstObjectCommonWithArray_( Handle, CachedSelectors.firstObjectCommonWithArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char getObject_atIndex_( System.IntPtr @object, uint atIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getObject_atIndex_( Handle, CachedSelectors.getObject_atIndex_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), @object, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void getObjects_( IntPtr objects ) {
			RuntimeObject ___occuredException;
			NativeMethods.getObjects_( Handle, CachedSelectors.getObjects_, out ___occuredException, sizeof( IntPtr ), objects );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getObjects_range_( IntPtr objects, _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.getObjects_range_( Handle, CachedSelectors.getObjects_range_, out ___occuredException, sizeof( IntPtr ) + sizeof( _NSRange ), objects, range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int indexOf___( NObjective.RuntimeObject of, int unnamedParameter, char unnamedParameter2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOf___( Handle, CachedSelectors.indexOf___, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( char ), of, unnamedParameter, unnamedParameter2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint indexOfAttributeBySelector_equalToObject_( NObjective.Selector selector, NObjective.RuntimeObject equalToObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfAttributeBySelector_equalToObject_( Handle, CachedSelectors.indexOfAttributeBySelector_equalToObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, equalToObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfObject_( Handle, CachedSelectors.indexOfObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfObject_inRange_( NObjective.RuntimeObject @object, _NSRange inRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfObject_inRange_( Handle, CachedSelectors.indexOfObject_inRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( _NSRange ), @object, inRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfObjectIdenticalTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfObjectIdenticalTo_( Handle, CachedSelectors.indexOfObjectIdenticalTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfObjectIdenticalTo_inRange_( NObjective.RuntimeObject to, _NSRange inRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfObjectIdenticalTo_inRange_( Handle, CachedSelectors.indexOfObjectIdenticalTo_inRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( _NSRange ), to, inRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSArray initWithArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithArray_( Handle, CachedSelectors.initWithArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray initWithArray_copyItems_( NSArray array, bool copyItems ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithArray_copyItems_( Handle, CachedSelectors.initWithArray_copyItems_, out ___occuredException, sizeof( NSArray ) + sizeof( bool ), array, copyItems );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray initWithContentsOfFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.initWithContentsOfFile_( Handle, CachedSelectors.initWithContentsOfFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray initWithContentsOfURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_( Handle, CachedSelectors.initWithContentsOfURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		public NSArray initWithObjects_( NObjective.RuntimeObject objects ) {
			return new NSArray( Handle.InvokeIntPtrFast( CachedSelectors.initWithObjects_, CachedEncodings.__6F587D11, objects ) );
		}
		unsafe public NSArray initWithObjects_count_( IntPtr objects, uint count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObjects_count_( Handle, CachedSelectors.initWithObjects_count_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), objects, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray initWithObjects_ex_count_( System.IntPtr objects_ex, uint count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObjects_ex_count_( Handle, CachedSelectors.initWithObjects_ex_count_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), objects_ex, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public bool isEqualToArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToArray_( Handle, CachedSelectors.isEqualToArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject lastObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastObject( Handle, CachedSelectors.lastObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void makeObjectsPerform_( NObjective.Selector perform ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeObjectsPerform_( Handle, CachedSelectors.makeObjectsPerform_, out ___occuredException, sizeof( NObjective.Selector ), perform );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeObjectsPerform_withObject_( NObjective.Selector perform, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeObjectsPerform_withObject_( Handle, CachedSelectors.makeObjectsPerform_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), perform, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeObjectsPerformSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeObjectsPerformSelector_( Handle, CachedSelectors.makeObjectsPerformSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeObjectsPerformSelector_withObject_( NObjective.Selector selector, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeObjectsPerformSelector_withObject_( Handle, CachedSelectors.makeObjectsPerformSelector_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject objectAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectAtIndex_( Handle, CachedSelectors.objectAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSEnumerator objectEnumerator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectEnumerator( Handle, CachedSelectors.objectEnumerator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSEnumerator( ___result );
		}
		unsafe public NSArray objectsAtIndexes_( NSIndexSet indexes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectsAtIndexes_( Handle, CachedSelectors.objectsAtIndexes_, out ___occuredException, sizeof( NSIndexSet ), indexes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray pathsMatchingExtensions_( NSArray extensions ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathsMatchingExtensions_( Handle, CachedSelectors.pathsMatchingExtensions_, out ___occuredException, sizeof( NSArray ), extensions );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void removeObserver_fromObjectsAtIndexes_forKeyPath_( NSObject observer, NSIndexSet fromObjectsAtIndexes, string forKeyPath ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKeyPath = Runtime.CreateStringProxy( forKeyPath );
			NativeMethods.removeObserver_fromObjectsAtIndexes_forKeyPath_( Handle, CachedSelectors.removeObserver_fromObjectsAtIndexes_forKeyPath_, out ___occuredException, sizeof( NSObject ) + sizeof( NSIndexSet ) + sizeof( IntPtr ), observer, fromObjectsAtIndexes, ___wrappedforKeyPath );
			Runtime.ReleaseNativeObject( ___wrappedforKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSEnumerator reverseObjectEnumerator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reverseObjectEnumerator( Handle, CachedSelectors.reverseObjectEnumerator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSEnumerator( ___result );
		}
		unsafe public NSData sortedArrayHint() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortedArrayHint( Handle, CachedSelectors.sortedArrayHint, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSArray sortedArrayUsingDescriptors_( NSArray descriptors ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortedArrayUsingDescriptors_( Handle, CachedSelectors.sortedArrayUsingDescriptors_, out ___occuredException, sizeof( NSArray ), descriptors );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray sortedArrayUsingFunction_context_( IntPtr function, IntPtr context ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortedArrayUsingFunction_context_( Handle, CachedSelectors.sortedArrayUsingFunction_context_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), function, context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray sortedArrayUsingFunction_context_hint_( IntPtr function, IntPtr context, NSData hint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortedArrayUsingFunction_context_hint_( Handle, CachedSelectors.sortedArrayUsingFunction_context_hint_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSData ), function, context, hint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray sortedArrayUsingSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortedArrayUsingSelector_( Handle, CachedSelectors.sortedArrayUsingSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject sortedArrayUsingSelector_hint_( NObjective.Selector selector, NObjective.RuntimeObject hint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortedArrayUsingSelector_hint_( Handle, CachedSelectors.sortedArrayUsingSelector_hint_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, hint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringsByAppendingPathComponent_( NObjective.RuntimeObject component ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsByAppendingPathComponent_( Handle, CachedSelectors.stringsByAppendingPathComponent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), component );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSArray subarrayWithRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subarrayWithRange_( Handle, CachedSelectors.subarrayWithRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public bool writeToFile_atomically_( string file, bool atomically ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.writeToFile_atomically_( Handle, CachedSelectors.writeToFile_atomically_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappedfile, atomically );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool writeToURL_atomically_( NSURL url, bool atomically ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeToURL_atomically_( Handle, CachedSelectors.writeToURL_atomically_, out ___occuredException, sizeof( NSURL ) + sizeof( bool ), url, atomically );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObserver_toObjectsAtIndexes_forKeyPath_options_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSObject observer, NSIndexSet toObjectsAtIndexes, IntPtr forKeyPath, uint options, IntPtr context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr array( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayByAddingObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayByAddingObjects_count_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr objects, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayByAddingObjectsFromArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayByApplyingSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayByExcludingIdenticalObjectsInArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayByExcludingObjectsInArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayByExcludingObjectsInArray_identical_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array, char identical );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayByExcludingToObjectsInArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayWithArray_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayWithArray_copyItems_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array, char copyItems );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayWithContentsOfFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayWithContentsOfURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayWithObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayWithObjects_count_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr objects, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr componentsJoinedByString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool containsObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsObjectIdenticalTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint countOccurrences_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject occurrences );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionWithLocale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionWithLocale_indent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary locale, uint indent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr filteredArrayUsingPredicate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPredicate predicate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstObjectCommonWithArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char getObject_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr @object, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getObjects_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr objects );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getObjects_range_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr objects, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int indexOf___( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject of, int unnamedParameter, char unnamedParameter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfAttributeBySelector_equalToObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject equalToObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfObject_inRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, _NSRange inRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfObjectIdenticalTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfObjectIdenticalTo_inRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to, _NSRange inRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithArray_copyItems_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array, bool copyItems );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObjects_count_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr objects, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObjects_ex_count_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr objects_ex, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeObjectsPerform_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector perform );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeObjectsPerform_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector perform, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeObjectsPerformSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeObjectsPerformSelector_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectEnumerator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectsAtIndexes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSIndexSet indexes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathsMatchingExtensions_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray extensions );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObserver_fromObjectsAtIndexes_forKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSObject observer, NSIndexSet fromObjectsAtIndexes, IntPtr forKeyPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr reverseObjectEnumerator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sortedArrayHint( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sortedArrayUsingDescriptors_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray descriptors );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sortedArrayUsingFunction_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr function, IntPtr context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sortedArrayUsingFunction_context_hint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr function, IntPtr context, NSData hint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sortedArrayUsingSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sortedArrayUsingSelector_hint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject hint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringsByAppendingPathComponent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject component );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subarrayWithRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToFile_atomically_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, bool atomically );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToURL_atomically_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, bool atomically );
		}
		static internal class CachedEncodings {
			public static readonly RuntimeMethodEncoding __6F587D11 = "@12@0:4@8";
		}
		static internal class CachedSelectors {
			public static readonly Selector addObserver_toObjectsAtIndexes_forKeyPath_options_context_ = "addObserver:toObjectsAtIndexes:forKeyPath:options:context:";
			public static readonly Selector array = "array";
			public static readonly Selector arrayByAddingObject_ = "arrayByAddingObject:";
			public static readonly Selector arrayByAddingObjects_count_ = "arrayByAddingObjects:count:";
			public static readonly Selector arrayByAddingObjectsFromArray_ = "arrayByAddingObjectsFromArray:";
			public static readonly Selector arrayByApplyingSelector_ = "arrayByApplyingSelector:";
			public static readonly Selector arrayByExcludingIdenticalObjectsInArray_ = "arrayByExcludingIdenticalObjectsInArray:";
			public static readonly Selector arrayByExcludingObjectsInArray_ = "arrayByExcludingObjectsInArray:";
			public static readonly Selector arrayByExcludingObjectsInArray_identical_ = "arrayByExcludingObjectsInArray:identical:";
			public static readonly Selector arrayByExcludingToObjectsInArray_ = "arrayByExcludingToObjectsInArray:";
			public static readonly Selector arrayWithArray_ = "arrayWithArray:";
			public static readonly Selector arrayWithArray_copyItems_ = "arrayWithArray:copyItems:";
			public static readonly Selector arrayWithContentsOfFile_ = "arrayWithContentsOfFile:";
			public static readonly Selector arrayWithContentsOfURL_ = "arrayWithContentsOfURL:";
			public static readonly Selector arrayWithObject_ = "arrayWithObject:";
			public static readonly Selector arrayWithObjects_ = "arrayWithObjects:";
			public static readonly Selector arrayWithObjects_count_ = "arrayWithObjects:count:";
			public static readonly Selector componentsJoinedByString_ = "componentsJoinedByString:";
			public static readonly Selector containsObject_ = "containsObject:";
			public static readonly Selector containsObjectIdenticalTo_ = "containsObjectIdenticalTo:";
			public static readonly Selector count = "count";
			public static readonly Selector countOccurrences_ = "countOccurrences:";
			public static readonly Selector descriptionWithLocale_ = "descriptionWithLocale:";
			public static readonly Selector descriptionWithLocale_indent_ = "descriptionWithLocale:indent:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector filteredArrayUsingPredicate_ = "filteredArrayUsingPredicate:";
			public static readonly Selector firstObjectCommonWithArray_ = "firstObjectCommonWithArray:";
			public static readonly Selector getObject_atIndex_ = "getObject:atIndex:";
			public static readonly Selector getObjects_ = "getObjects:";
			public static readonly Selector getObjects_range_ = "getObjects:range:";
			public static readonly Selector indexOf___ = "indexOf:::";
			public static readonly Selector indexOfAttributeBySelector_equalToObject_ = "indexOfAttributeBySelector:equalToObject:";
			public static readonly Selector indexOfObject_ = "indexOfObject:";
			public static readonly Selector indexOfObject_inRange_ = "indexOfObject:inRange:";
			public static readonly Selector indexOfObjectIdenticalTo_ = "indexOfObjectIdenticalTo:";
			public static readonly Selector indexOfObjectIdenticalTo_inRange_ = "indexOfObjectIdenticalTo:inRange:";
			public static readonly Selector initWithArray_ = "initWithArray:";
			public static readonly Selector initWithArray_copyItems_ = "initWithArray:copyItems:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithContentsOfFile_ = "initWithContentsOfFile:";
			public static readonly Selector initWithContentsOfURL_ = "initWithContentsOfURL:";
			public static readonly Selector initWithObjects_ = "initWithObjects:";
			public static readonly Selector initWithObjects_count_ = "initWithObjects:count:";
			public static readonly Selector initWithObjects_ex_count_ = "initWithObjects_ex:count:";
			public static readonly Selector isEqualToArray_ = "isEqualToArray:";
			public static readonly Selector lastObject = "lastObject";
			public static readonly Selector makeObjectsPerform_ = "makeObjectsPerform:";
			public static readonly Selector makeObjectsPerform_withObject_ = "makeObjectsPerform:withObject:";
			public static readonly Selector makeObjectsPerformSelector_ = "makeObjectsPerformSelector:";
			public static readonly Selector makeObjectsPerformSelector_withObject_ = "makeObjectsPerformSelector:withObject:";
			public static readonly Selector objectAtIndex_ = "objectAtIndex:";
			public static readonly Selector objectEnumerator = "objectEnumerator";
			public static readonly Selector objectsAtIndexes_ = "objectsAtIndexes:";
			public static readonly Selector pathsMatchingExtensions_ = "pathsMatchingExtensions:";
			public static readonly Selector removeObserver_fromObjectsAtIndexes_forKeyPath_ = "removeObserver:fromObjectsAtIndexes:forKeyPath:";
			public static readonly Selector reverseObjectEnumerator = "reverseObjectEnumerator";
			public static readonly Selector sortedArrayHint = "sortedArrayHint";
			public static readonly Selector sortedArrayUsingDescriptors_ = "sortedArrayUsingDescriptors:";
			public static readonly Selector sortedArrayUsingFunction_context_ = "sortedArrayUsingFunction:context:";
			public static readonly Selector sortedArrayUsingFunction_context_hint_ = "sortedArrayUsingFunction:context:hint:";
			public static readonly Selector sortedArrayUsingSelector_ = "sortedArrayUsingSelector:";
			public static readonly Selector sortedArrayUsingSelector_hint_ = "sortedArrayUsingSelector:hint:";
			public static readonly Selector stringsByAppendingPathComponent_ = "stringsByAppendingPathComponent:";
			public static readonly Selector subarrayWithRange_ = "subarrayWithRange:";
			public static readonly Selector writeToFile_atomically_ = "writeToFile:atomically:";
			public static readonly Selector writeToURL_atomically_ = "writeToURL:atomically:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSAssertionHandler : IEquatable<NSAssertionHandler> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAssertionHandler;
		public static implicit operator IntPtr( NSAssertionHandler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAssertionHandler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAssertionHandler?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAssertionHandler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAssertionHandler value1, NSAssertionHandler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAssertionHandler value1, NSAssertionHandler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAssertionHandler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAssertionHandler alloc() {
			return new NSAssertionHandler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSAssertionHandler currentHandler() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentHandler( ClassHandle, CachedSelectors.currentHandler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAssertionHandler( ___result );
		}
		public void handleFailureInFunction_file_lineNumber_description_( string function, string file, int lineNumber, string description, params object[] variableArguments ) {
			Handle.InvokeVoidFast( CachedSelectors.handleFailureInFunction_file_lineNumber_description_, CachedEncodings.__7C62957D, function, file, lineNumber, description, variableArguments );
		}
		public void handleFailureInMethod_object_file_lineNumber_description_( NObjective.Selector method, NObjective.RuntimeObject @object, string file, int lineNumber, string description, params object[] variableArguments ) {
			Handle.InvokeVoidFast( CachedSelectors.handleFailureInMethod_object_file_lineNumber_description_, CachedEncodings.__7F7D7F91, method, @object, file, lineNumber, description, variableArguments );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentHandler( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedEncodings {
			public static readonly RuntimeMethodEncoding __7C62957D = "v24@0:4@8@12i16@20";
			public static readonly RuntimeMethodEncoding __7F7D7F91 = "v28@0:4:8@12@16i20@24";
		}
		static internal class CachedSelectors {
			public static readonly Selector currentHandler = "currentHandler";
			public static readonly Selector handleFailureInFunction_file_lineNumber_description_ = "handleFailureInFunction:file:lineNumber:description:";
			public static readonly Selector handleFailureInMethod_object_file_lineNumber_description_ = "handleFailureInMethod:object:file:lineNumber:description:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSAttributedString : IEquatable<NSAttributedString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAttributedString;
		public static implicit operator IntPtr( NSAttributedString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAttributedString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAttributedString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAttributedString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAttributedString value1, NSAttributedString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAttributedString value1, NSAttributedString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAttributedString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAttributedString alloc() {
			return new NSAttributedString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject attribute_atIndex_effectiveRange_( string attribute, uint atIndex, _NSRange[] effectiveRange ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			var ___result = NativeMethods.attribute_atIndex_effectiveRange_( Handle, CachedSelectors.attribute_atIndex_effectiveRange_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), ___wrappedattribute, atIndex, effectiveRange );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject attribute_atIndex_longestEffectiveRange_inRange_( string attribute, uint atIndex, _NSRange[] longestEffectiveRange, _NSRange inRange ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			var ___result = NativeMethods.attribute_atIndex_longestEffectiveRange_inRange_( Handle, CachedSelectors.attribute_atIndex_longestEffectiveRange_inRange_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ) + sizeof( _NSRange ), ___wrappedattribute, atIndex, longestEffectiveRange, inRange );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject attributedStringByWeaklyAddingAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedStringByWeaklyAddingAttributes_( Handle, CachedSelectors.attributedStringByWeaklyAddingAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSAttributedString attributedSubstringFromRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedSubstringFromRange_( Handle, CachedSelectors.attributedSubstringFromRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAttributedString( ___result );
		}
		unsafe public NSDictionary attributesAtIndex_effectiveRange_( uint index, _NSRange[] effectiveRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributesAtIndex_effectiveRange_( Handle, CachedSelectors.attributesAtIndex_effectiveRange_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ), index, effectiveRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary attributesAtIndex_longestEffectiveRange_inRange_( uint index, _NSRange[] longestEffectiveRange, _NSRange inRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributesAtIndex_longestEffectiveRange_inRange_( Handle, CachedSelectors.attributesAtIndex_longestEffectiveRange_inRange_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ) + sizeof( _NSRange ), index, longestEffectiveRange, inRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSAttributedString initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAttributedString( ___result );
		}
		unsafe public bool isEqualToAttributedString_( NSAttributedString @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToAttributedString_( Handle, CachedSelectors.isEqualToAttributedString_, out ___occuredException, sizeof( NSAttributedString ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public char scriptingBeginsWith_( NObjective.RuntimeObject with ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingBeginsWith_( Handle, CachedSelectors.scriptingBeginsWith_, out ___occuredException, sizeof( NObjective.RuntimeObject ), with );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingContains_( NObjective.RuntimeObject contains ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingContains_( Handle, CachedSelectors.scriptingContains_, out ___occuredException, sizeof( NObjective.RuntimeObject ), contains );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingEndsWith_( NObjective.RuntimeObject with ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingEndsWith_( Handle, CachedSelectors.scriptingEndsWith_, out ___occuredException, sizeof( NObjective.RuntimeObject ), with );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingIsEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingIsEqualTo_( Handle, CachedSelectors.scriptingIsEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingIsGreaterThan_( NObjective.RuntimeObject than ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingIsGreaterThan_( Handle, CachedSelectors.scriptingIsGreaterThan_, out ___occuredException, sizeof( NObjective.RuntimeObject ), than );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingIsGreaterThanOrEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingIsGreaterThanOrEqualTo_( Handle, CachedSelectors.scriptingIsGreaterThanOrEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingIsLessThan_( NObjective.RuntimeObject than ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingIsLessThan_( Handle, CachedSelectors.scriptingIsLessThan_, out ___occuredException, sizeof( NObjective.RuntimeObject ), than );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingIsLessThanOrEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingIsLessThanOrEqualTo_( Handle, CachedSelectors.scriptingIsLessThanOrEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string @string() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@string( Handle, CachedSelectors.@string, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attribute_atIndex_effectiveRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute, uint atIndex, _NSRange[] effectiveRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attribute_atIndex_longestEffectiveRange_inRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute, uint atIndex, _NSRange[] longestEffectiveRange, _NSRange inRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedStringByWeaklyAddingAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedSubstringFromRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributesAtIndex_effectiveRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, _NSRange[] effectiveRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributesAtIndex_longestEffectiveRange_inRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, _NSRange[] longestEffectiveRange, _NSRange inRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToAttributedString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAttributedString @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingBeginsWith_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject with );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingContains_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject contains );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingEndsWith_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject with );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingIsEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingIsGreaterThan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject than );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingIsGreaterThanOrEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingIsLessThan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject than );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingIsLessThanOrEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @string( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attribute_atIndex_effectiveRange_ = "attribute:atIndex:effectiveRange:";
			public static readonly Selector attribute_atIndex_longestEffectiveRange_inRange_ = "attribute:atIndex:longestEffectiveRange:inRange:";
			public static readonly Selector attributedStringByWeaklyAddingAttributes_ = "attributedStringByWeaklyAddingAttributes:";
			public static readonly Selector attributedSubstringFromRange_ = "attributedSubstringFromRange:";
			public static readonly Selector attributesAtIndex_effectiveRange_ = "attributesAtIndex:effectiveRange:";
			public static readonly Selector attributesAtIndex_longestEffectiveRange_inRange_ = "attributesAtIndex:longestEffectiveRange:inRange:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector isEqualToAttributedString_ = "isEqualToAttributedString:";
			public static readonly Selector length = "length";
			public static readonly Selector scriptingBeginsWith_ = "scriptingBeginsWith:";
			public static readonly Selector scriptingContains_ = "scriptingContains:";
			public static readonly Selector scriptingEndsWith_ = "scriptingEndsWith:";
			public static readonly Selector scriptingIsEqualTo_ = "scriptingIsEqualTo:";
			public static readonly Selector scriptingIsGreaterThan_ = "scriptingIsGreaterThan:";
			public static readonly Selector scriptingIsGreaterThanOrEqualTo_ = "scriptingIsGreaterThanOrEqualTo:";
			public static readonly Selector scriptingIsLessThan_ = "scriptingIsLessThan:";
			public static readonly Selector scriptingIsLessThanOrEqualTo_ = "scriptingIsLessThanOrEqualTo:";
			public static readonly Selector @string = "string";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSAutoreleasePool : IEquatable<NSAutoreleasePool> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSAutoreleasePool;
		public static implicit operator IntPtr( NSAutoreleasePool value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSAutoreleasePool value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSAutoreleasePool?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSAutoreleasePool value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSAutoreleasePool value1, NSAutoreleasePool value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSAutoreleasePool value1, NSAutoreleasePool value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSAutoreleasePool( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSAutoreleasePool alloc() {
			return new NSAutoreleasePool( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void __addObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.__addObject_( ClassHandle, CachedSelectors.__addObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static uint autoreleasedObjectCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autoreleasedObjectCount( ClassHandle, CachedSelectors.autoreleasedObjectCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static char autoreleasePoolExists() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autoreleasePoolExists( ClassHandle, CachedSelectors.autoreleasePoolExists, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void enableFreedObjectCheck_( char check ) {
			RuntimeObject ___occuredException;
			NativeMethods.enableFreedObjectCheck_( ClassHandle, CachedSelectors.enableFreedObjectCheck_, out ___occuredException, sizeof( char ), check );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void enableRelease_( char release ) {
			RuntimeObject ___occuredException;
			NativeMethods.enableRelease_( ClassHandle, CachedSelectors.enableRelease_, out ___occuredException, sizeof( char ), release );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static uint poolCountHighWaterMark() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.poolCountHighWaterMark( ClassHandle, CachedSelectors.poolCountHighWaterMark, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint poolCountHighWaterResolution() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.poolCountHighWaterResolution( ClassHandle, CachedSelectors.poolCountHighWaterResolution, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static void releaseAllPools() {
			RuntimeObject ___occuredException;
			NativeMethods.releaseAllPools( ClassHandle, CachedSelectors.releaseAllPools, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void resetTotalAutoreleasedObjects() {
			RuntimeObject ___occuredException;
			NativeMethods.resetTotalAutoreleasedObjects( ClassHandle, CachedSelectors.resetTotalAutoreleasedObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setPoolCountHighWaterMark_( uint mark ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPoolCountHighWaterMark_( ClassHandle, CachedSelectors.setPoolCountHighWaterMark_, out ___occuredException, sizeof( uint ), mark );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setPoolCountHighWaterResolution_( uint resolution ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPoolCountHighWaterResolution_( ClassHandle, CachedSelectors.setPoolCountHighWaterResolution_, out ___occuredException, sizeof( uint ), resolution );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void showPools() {
			RuntimeObject ___occuredException;
			NativeMethods.showPools( ClassHandle, CachedSelectors.showPools, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static uint topAutoreleasePoolCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.topAutoreleasePoolCount( ClassHandle, CachedSelectors.topAutoreleasePoolCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint totalAutoreleasedObjects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.totalAutoreleasedObjects( ClassHandle, CachedSelectors.totalAutoreleasedObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void addObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.addObject_( Handle, CachedSelectors.addObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void drain() {
			RuntimeObject ___occuredException;
			NativeMethods.drain( Handle, CachedSelectors.drain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSAutoreleasePool initWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCapacity_( Handle, CachedSelectors.initWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAutoreleasePool( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void __addObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint autoreleasedObjectCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char autoreleasePoolExists( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void drain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enableFreedObjectCheck_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char check );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enableRelease_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char release );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCapacity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint poolCountHighWaterMark( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint poolCountHighWaterResolution( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void releaseAllPools( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetTotalAutoreleasedObjects( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPoolCountHighWaterMark_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint mark );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPoolCountHighWaterResolution_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint resolution );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showPools( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint topAutoreleasePoolCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint totalAutoreleasedObjects( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector __addObject_ = "__addObject:";
			public static readonly Selector addObject_ = "addObject:";
			public static readonly Selector autoreleasedObjectCount = "autoreleasedObjectCount";
			public static readonly Selector autoreleasePoolExists = "autoreleasePoolExists";
			public static readonly Selector drain = "drain";
			public static readonly Selector enableFreedObjectCheck_ = "enableFreedObjectCheck:";
			public static readonly Selector enableRelease_ = "enableRelease:";
			public static readonly Selector initWithCapacity_ = "initWithCapacity:";
			public static readonly Selector poolCountHighWaterMark = "poolCountHighWaterMark";
			public static readonly Selector poolCountHighWaterResolution = "poolCountHighWaterResolution";
			public static readonly Selector releaseAllPools = "releaseAllPools";
			public static readonly Selector resetTotalAutoreleasedObjects = "resetTotalAutoreleasedObjects";
			public static readonly Selector setPoolCountHighWaterMark_ = "setPoolCountHighWaterMark:";
			public static readonly Selector setPoolCountHighWaterResolution_ = "setPoolCountHighWaterResolution:";
			public static readonly Selector showPools = "showPools";
			public static readonly Selector topAutoreleasePoolCount = "topAutoreleasePoolCount";
			public static readonly Selector totalAutoreleasedObjects = "totalAutoreleasedObjects";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableString ) )]
	public struct NSBigMutableString : IEquatable<NSBigMutableString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSBigMutableString;
		public static implicit operator IntPtr( NSBigMutableString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSBigMutableString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSBigMutableString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSBigMutableString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSBigMutableString value1, NSBigMutableString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSBigMutableString value1, NSBigMutableString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSBigMutableString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSBigMutableString alloc() {
			return new NSBigMutableString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSBinHexDecoder : IEquatable<NSBinHexDecoder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSBinHexDecoder;
		public static implicit operator IntPtr( NSBinHexDecoder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSBinHexDecoder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSBinHexDecoder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSBinHexDecoder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSBinHexDecoder value1, NSBinHexDecoder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSBinHexDecoder value1, NSBinHexDecoder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSBinHexDecoder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSBinHexDecoder alloc() {
			return new NSBinHexDecoder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char canDecodeDownloadHeaderData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canDecodeDownloadHeaderData_( ClassHandle, CachedSelectors.canDecodeDownloadHeaderData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject MIMEType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.MIMEType( ClassHandle, CachedSelectors.MIMEType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void decodeAllIntoBuffer_size_useZeroBytesForCRC_( System.IntPtr buffer, int size, char useZeroBytesForCRC ) {
			RuntimeObject ___occuredException;
			NativeMethods.decodeAllIntoBuffer_size_useZeroBytesForCRC_( Handle, CachedSelectors.decodeAllIntoBuffer_size_useZeroBytesForCRC_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( int ) + sizeof( char ), buffer, size, useZeroBytesForCRC );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char decodeDownloadData_dataForkData_resourceForkData_( NObjective.RuntimeObject data, System.IntPtr dataForkData, System.IntPtr resourceForkData ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeDownloadData_dataForkData_resourceForkData_( Handle, CachedSelectors.decodeDownloadData_dataForkData_resourceForkData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), data, dataForkData, resourceForkData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void decodeDownloadHeader() {
			RuntimeObject ___occuredException;
			NativeMethods.decodeDownloadHeader( Handle, CachedSelectors.decodeDownloadHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void decodeForkWithData_count_CRCCheckFlag_( System.IntPtr data, System.IntPtr count, System.IntPtr CRCCheckFlag ) {
			RuntimeObject ___occuredException;
			NativeMethods.decodeForkWithData_count_CRCCheckFlag_( Handle, CachedSelectors.decodeForkWithData_count_CRCCheckFlag_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), data, count, CRCCheckFlag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int decodeIntoBuffer_size_useZeroBytesForCRC_( System.IntPtr buffer, int size, char useZeroBytesForCRC ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeIntoBuffer_size_useZeroBytesForCRC_( Handle, CachedSelectors.decodeIntoBuffer_size_useZeroBytesForCRC_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( int ) + sizeof( char ), buffer, size, useZeroBytesForCRC );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject fileAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileAttributes( Handle, CachedSelectors.fileAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject filenameWithOriginalFilename_( NObjective.RuntimeObject filename ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filenameWithOriginalFilename_( Handle, CachedSelectors.filenameWithOriginalFilename_, out ___occuredException, sizeof( NObjective.RuntimeObject ), filename );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char finishDownloadDecoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.finishDownloadDecoding( Handle, CachedSelectors.finishDownloadDecoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSBinHexDecoder initWithResumeInformation_( NObjective.RuntimeObject information ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithResumeInformation_( Handle, CachedSelectors.initWithResumeInformation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), information );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSBinHexDecoder( ___result );
		}
		unsafe public NObjective.RuntimeObject resumeInformation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resumeInformation( Handle, CachedSelectors.resumeInformation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setUpSourceForData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUpSourceForData_( Handle, CachedSelectors.setUpSourceForData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canDecodeDownloadHeaderData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decodeAllIntoBuffer_size_useZeroBytesForCRC_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr buffer, int size, char useZeroBytesForCRC );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char decodeDownloadData_dataForkData_resourceForkData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, System.IntPtr dataForkData, System.IntPtr resourceForkData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decodeDownloadHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decodeForkWithData_count_CRCCheckFlag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr data, System.IntPtr count, System.IntPtr CRCCheckFlag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int decodeIntoBuffer_size_useZeroBytesForCRC_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr buffer, int size, char useZeroBytesForCRC );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr filenameWithOriginalFilename_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filename );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char finishDownloadDecoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithResumeInformation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject information );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr MIMEType( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resumeInformation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUpSourceForData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
		}
		static internal class CachedSelectors {
			public static readonly Selector canDecodeDownloadHeaderData_ = "canDecodeDownloadHeaderData:";
			public static readonly Selector decodeAllIntoBuffer_size_useZeroBytesForCRC_ = "decodeAllIntoBuffer:size:useZeroBytesForCRC:";
			public static readonly Selector decodeDownloadData_dataForkData_resourceForkData_ = "decodeDownloadData:dataForkData:resourceForkData:";
			public static readonly Selector decodeDownloadHeader = "decodeDownloadHeader";
			public static readonly Selector decodeForkWithData_count_CRCCheckFlag_ = "decodeForkWithData:count:CRCCheckFlag:";
			public static readonly Selector decodeIntoBuffer_size_useZeroBytesForCRC_ = "decodeIntoBuffer:size:useZeroBytesForCRC:";
			public static readonly Selector fileAttributes = "fileAttributes";
			public static readonly Selector filenameWithOriginalFilename_ = "filenameWithOriginalFilename:";
			public static readonly Selector finishDownloadDecoding = "finishDownloadDecoding";
			public static readonly Selector initWithResumeInformation_ = "initWithResumeInformation:";
			public static readonly Selector MIMEType = "MIMEType";
			public static readonly Selector resumeInformation = "resumeInformation";
			public static readonly Selector setUpSourceForData_ = "setUpSourceForData:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCharacterSet ) )]
	public struct NSBuiltinCharacterSet : IEquatable<NSBuiltinCharacterSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSBuiltinCharacterSet;
		public static implicit operator IntPtr( NSBuiltinCharacterSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSBuiltinCharacterSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSBuiltinCharacterSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSBuiltinCharacterSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSBuiltinCharacterSet value1, NSBuiltinCharacterSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSBuiltinCharacterSet value1, NSBuiltinCharacterSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSBuiltinCharacterSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSBuiltinCharacterSet alloc() {
			return new NSBuiltinCharacterSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSBuiltinCharacterSet initWithOffset_( int offset ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOffset_( Handle, CachedSelectors.initWithOffset_, out ___occuredException, sizeof( int ), offset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSBuiltinCharacterSet( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOffset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int offset );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithOffset_ = "initWithOffset:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSBundle : IEquatable<NSBundle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSBundle;
		public static implicit operator IntPtr( NSBundle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSBundle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSBundle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSBundle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSBundle value1, NSBundle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSBundle value1, NSBundle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSBundle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSBundle alloc() {
			return new NSBundle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSArray allBundles() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allBundles( ClassHandle, CachedSelectors.allBundles, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSArray allFrameworks() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allFrameworks( ClassHandle, CachedSelectors.allFrameworks, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSBundle bundleForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bundleForClass_( ClassHandle, CachedSelectors.bundleForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSBundle( ___result );
		}
		unsafe public static NSBundle bundleWithIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.bundleWithIdentifier_( ClassHandle, CachedSelectors.bundleWithIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSBundle( ___result );
		}
		unsafe public static NSBundle bundleWithPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.bundleWithPath_( ClassHandle, CachedSelectors.bundleWithPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSBundle( ___result );
		}
		unsafe public static NObjective.RuntimeObject findBundleResources_callingMethod_directory_languages_name_types_limit_( NObjective.RuntimeObject resources, NObjective.Selector callingMethod, NObjective.RuntimeObject directory, NObjective.RuntimeObject languages, NObjective.RuntimeObject name, NObjective.RuntimeObject types, uint limit ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findBundleResources_callingMethod_directory_languages_name_types_limit_( ClassHandle, CachedSelectors.findBundleResources_callingMethod_directory_languages_name_types_limit_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), resources, callingMethod, directory, languages, name, types, 
			limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject loadedBundles() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.loadedBundles( ClassHandle, CachedSelectors.loadedBundles, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSBundle mainBundle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainBundle( ClassHandle, CachedSelectors.mainBundle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSBundle( ___result );
		}
		unsafe public static string __pathForResource_ofType_inDirectory_( string resource, string ofType, string inDirectory ) {
			RuntimeObject ___occuredException;
			var ___wrappedresource = Runtime.CreateStringProxy( resource );
			var ___wrappedofType = Runtime.CreateStringProxy( ofType );
			var ___wrappedinDirectory = Runtime.CreateStringProxy( inDirectory );
			var ___result = NativeMethods.__pathForResource_ofType_inDirectory_( ClassHandle, CachedSelectors.__pathForResource_ofType_inDirectory_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedresource, ___wrappedofType, ___wrappedinDirectory );
			Runtime.ReleaseNativeObject( ___wrappedresource );
			Runtime.ReleaseNativeObject( ___wrappedofType );
			Runtime.ReleaseNativeObject( ___wrappedinDirectory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static NSArray __pathsForResourcesOfType_inDirectory_( string type, string inDirectory ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___wrappedinDirectory = Runtime.CreateStringProxy( inDirectory );
			var ___result = NativeMethods.__pathsForResourcesOfType_inDirectory_( ClassHandle, CachedSelectors.__pathsForResourcesOfType_inDirectory_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedtype, ___wrappedinDirectory );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedinDirectory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSArray preferredLocalizationsFromArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preferredLocalizationsFromArray_( ClassHandle, CachedSelectors.preferredLocalizationsFromArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSArray preferredLocalizationsFromArray_forPreferences_( NSArray array, NSArray forPreferences ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preferredLocalizationsFromArray_forPreferences_( ClassHandle, CachedSelectors.preferredLocalizationsFromArray_forPreferences_, out ___occuredException, sizeof( NSArray ) + sizeof( NSArray ), array, forPreferences );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static void setSystemLanguages_( NObjective.RuntimeObject languages ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSystemLanguages_( ClassHandle, CachedSelectors.setSystemLanguages_, out ___occuredException, sizeof( NObjective.RuntimeObject ), languages );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string builtInPlugInsPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.builtInPlugInsPath( Handle, CachedSelectors.builtInPlugInsPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string bundleIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bundleIdentifier( Handle, CachedSelectors.bundleIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject bundleLanguages() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bundleLanguages( Handle, CachedSelectors.bundleLanguages, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string bundlePath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bundlePath( Handle, CachedSelectors.bundlePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeClass classNamed_( string named ) {
			RuntimeObject ___occuredException;
			var ___wrappednamed = Runtime.CreateStringProxy( named );
			var ___result = NativeMethods.classNamed_( Handle, CachedSelectors.classNamed_, out ___occuredException, sizeof( IntPtr ), ___wrappednamed );
			Runtime.ReleaseNativeObject( ___wrappednamed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject defaultsDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultsDictionary( Handle, CachedSelectors.defaultsDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string developmentLocalization() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.developmentLocalization( Handle, CachedSelectors.developmentLocalization, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string executablePath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.executablePath( Handle, CachedSelectors.executablePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDictionary infoDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoDictionary( Handle, CachedSelectors.infoDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSBundle initWithPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.initWithPath_( Handle, CachedSelectors.initWithPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSBundle( ___result );
		}
		unsafe public void invalidateResourceCache() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateResourceCache( Handle, CachedSelectors.invalidateResourceCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isLoaded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLoaded( Handle, CachedSelectors.isLoaded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool load() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.load( Handle, CachedSelectors.load, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray localizations() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizations( Handle, CachedSelectors.localizations, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject localizationsToSearch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizationsToSearch( Handle, CachedSelectors.localizationsToSearch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDictionary localizedInfoDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedInfoDictionary( Handle, CachedSelectors.localizedInfoDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public string localizedStringForKey_value_table_( string key, string value, string table ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			var ___wrappedtable = Runtime.CreateStringProxy( table );
			var ___result = NativeMethods.localizedStringForKey_value_table_( Handle, CachedSelectors.localizedStringForKey_value_table_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedkey, ___wrappedvalue, ___wrappedtable );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedtable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject objectForInfoDictionaryKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.objectForInfoDictionaryKey_( Handle, CachedSelectors.objectForInfoDictionaryKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string pathForAuxiliaryExecutable_( string executable ) {
			RuntimeObject ___occuredException;
			var ___wrappedexecutable = Runtime.CreateStringProxy( executable );
			var ___result = NativeMethods.pathForAuxiliaryExecutable_( Handle, CachedSelectors.pathForAuxiliaryExecutable_, out ___occuredException, sizeof( IntPtr ), ___wrappedexecutable );
			Runtime.ReleaseNativeObject( ___wrappedexecutable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string pathForResource_ofType_( string resource, string ofType ) {
			RuntimeObject ___occuredException;
			var ___wrappedresource = Runtime.CreateStringProxy( resource );
			var ___wrappedofType = Runtime.CreateStringProxy( ofType );
			var ___result = NativeMethods.pathForResource_ofType_( Handle, CachedSelectors.pathForResource_ofType_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedresource, ___wrappedofType );
			Runtime.ReleaseNativeObject( ___wrappedresource );
			Runtime.ReleaseNativeObject( ___wrappedofType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string pathForResource_ofType_inDirectory_( string resource, string ofType, string inDirectory ) {
			RuntimeObject ___occuredException;
			var ___wrappedresource = Runtime.CreateStringProxy( resource );
			var ___wrappedofType = Runtime.CreateStringProxy( ofType );
			var ___wrappedinDirectory = Runtime.CreateStringProxy( inDirectory );
			var ___result = NativeMethods.pathForResource_ofType_inDirectory_( Handle, CachedSelectors.pathForResource_ofType_inDirectory_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedresource, ___wrappedofType, ___wrappedinDirectory );
			Runtime.ReleaseNativeObject( ___wrappedresource );
			Runtime.ReleaseNativeObject( ___wrappedofType );
			Runtime.ReleaseNativeObject( ___wrappedinDirectory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject pathForResource_ofType_inDirectory_forLanguage_( NObjective.RuntimeObject resource, NObjective.RuntimeObject ofType, NObjective.RuntimeObject inDirectory, NObjective.RuntimeObject forLanguage ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathForResource_ofType_inDirectory_forLanguage_( Handle, CachedSelectors.pathForResource_ofType_inDirectory_forLanguage_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), resource, ofType, inDirectory, forLanguage );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string pathForResource_ofType_inDirectory_forLocalization_( string resource, string ofType, string inDirectory, string forLocalization ) {
			RuntimeObject ___occuredException;
			var ___wrappedresource = Runtime.CreateStringProxy( resource );
			var ___wrappedofType = Runtime.CreateStringProxy( ofType );
			var ___wrappedinDirectory = Runtime.CreateStringProxy( inDirectory );
			var ___wrappedforLocalization = Runtime.CreateStringProxy( forLocalization );
			var ___result = NativeMethods.pathForResource_ofType_inDirectory_forLocalization_( Handle, CachedSelectors.pathForResource_ofType_inDirectory_forLocalization_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedresource, ___wrappedofType, ___wrappedinDirectory, ___wrappedforLocalization );
			Runtime.ReleaseNativeObject( ___wrappedresource );
			Runtime.ReleaseNativeObject( ___wrappedofType );
			Runtime.ReleaseNativeObject( ___wrappedinDirectory );
			Runtime.ReleaseNativeObject( ___wrappedforLocalization );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSArray pathsForResourcesOfType_inDirectory_( string type, string inDirectory ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___wrappedinDirectory = Runtime.CreateStringProxy( inDirectory );
			var ___result = NativeMethods.pathsForResourcesOfType_inDirectory_( Handle, CachedSelectors.pathsForResourcesOfType_inDirectory_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedtype, ___wrappedinDirectory );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedinDirectory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject pathsForResourcesOfType_inDirectory_forLanguage_( NObjective.RuntimeObject type, NObjective.RuntimeObject inDirectory, NObjective.RuntimeObject forLanguage ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathsForResourcesOfType_inDirectory_forLanguage_( Handle, CachedSelectors.pathsForResourcesOfType_inDirectory_forLanguage_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), type, inDirectory, forLanguage );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSArray pathsForResourcesOfType_inDirectory_forLocalization_( string type, string inDirectory, string forLocalization ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___wrappedinDirectory = Runtime.CreateStringProxy( inDirectory );
			var ___wrappedforLocalization = Runtime.CreateStringProxy( forLocalization );
			var ___result = NativeMethods.pathsForResourcesOfType_inDirectory_forLocalization_( Handle, CachedSelectors.pathsForResourcesOfType_inDirectory_forLocalization_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedtype, ___wrappedinDirectory, ___wrappedforLocalization );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedinDirectory );
			Runtime.ReleaseNativeObject( ___wrappedforLocalization );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray preferredLocalizations() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preferredLocalizations( Handle, CachedSelectors.preferredLocalizations, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeClass principalClass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.principalClass( Handle, CachedSelectors.principalClass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string privateFrameworksPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.privateFrameworksPath( Handle, CachedSelectors.privateFrameworksPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string resourcePath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resourcePath( Handle, CachedSelectors.resourcePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string sharedFrameworksPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedFrameworksPath( Handle, CachedSelectors.sharedFrameworksPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string sharedSupportPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedSupportPath( Handle, CachedSelectors.sharedSupportPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public char unload() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unload( Handle, CachedSelectors.unload, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint versionNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.versionNumber( Handle, CachedSelectors.versionNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __pathForResource_ofType_inDirectory_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr resource, IntPtr ofType, IntPtr inDirectory );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __pathsForResourcesOfType_inDirectory_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type, IntPtr inDirectory );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allBundles( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allFrameworks( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr builtInPlugInsPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundleForClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundleIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundleLanguages( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundlePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundleWithIdentifier_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundleWithPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classNamed_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr named );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultsDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr developmentLocalization( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr executablePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr findBundleResources_callingMethod_directory_languages_name_types_limit_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject resources, NObjective.Selector callingMethod, NObjective.RuntimeObject directory, NObjective.RuntimeObject languages, NObjective.RuntimeObject name, NObjective.RuntimeObject types, 
			uint limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr infoDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidateResourceCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLoaded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool load( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr loadedBundles( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizations( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizationsToSearch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedInfoDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedStringForKey_value_table_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key, IntPtr value, IntPtr table );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainBundle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectForInfoDictionaryKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathForAuxiliaryExecutable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr executable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathForResource_ofType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr resource, IntPtr ofType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathForResource_ofType_inDirectory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr resource, IntPtr ofType, IntPtr inDirectory );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathForResource_ofType_inDirectory_forLanguage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject resource, NObjective.RuntimeObject ofType, NObjective.RuntimeObject inDirectory, NObjective.RuntimeObject forLanguage );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathForResource_ofType_inDirectory_forLocalization_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr resource, IntPtr ofType, IntPtr inDirectory, IntPtr forLocalization );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathsForResourcesOfType_inDirectory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type, IntPtr inDirectory );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathsForResourcesOfType_inDirectory_forLanguage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type, NObjective.RuntimeObject inDirectory, NObjective.RuntimeObject forLanguage );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathsForResourcesOfType_inDirectory_forLocalization_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type, IntPtr inDirectory, IntPtr forLocalization );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preferredLocalizations( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preferredLocalizationsFromArray_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preferredLocalizationsFromArray_forPreferences_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array, NSArray forPreferences );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass principalClass( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr privateFrameworksPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resourcePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSystemLanguages_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject languages );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedFrameworksPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedSupportPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char unload( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint versionNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector __pathForResource_ofType_inDirectory_ = "__pathForResource:ofType:inDirectory:";
			public static readonly Selector __pathsForResourcesOfType_inDirectory_ = "__pathsForResourcesOfType:inDirectory:";
			public static readonly Selector allBundles = "allBundles";
			public static readonly Selector allFrameworks = "allFrameworks";
			public static readonly Selector builtInPlugInsPath = "builtInPlugInsPath";
			public static readonly Selector bundleForClass_ = "bundleForClass:";
			public static readonly Selector bundleIdentifier = "bundleIdentifier";
			public static readonly Selector bundleLanguages = "bundleLanguages";
			public static readonly Selector bundlePath = "bundlePath";
			public static readonly Selector bundleWithIdentifier_ = "bundleWithIdentifier:";
			public static readonly Selector bundleWithPath_ = "bundleWithPath:";
			public static readonly Selector classNamed_ = "classNamed:";
			public static readonly Selector defaultsDictionary = "defaultsDictionary";
			public static readonly Selector developmentLocalization = "developmentLocalization";
			public static readonly Selector executablePath = "executablePath";
			public static readonly Selector findBundleResources_callingMethod_directory_languages_name_types_limit_ = "findBundleResources:callingMethod:directory:languages:name:types:limit:";
			public static readonly Selector infoDictionary = "infoDictionary";
			public static readonly Selector initWithPath_ = "initWithPath:";
			public static readonly Selector invalidateResourceCache = "invalidateResourceCache";
			public static readonly Selector isLoaded = "isLoaded";
			public static readonly Selector load = "load";
			public static readonly Selector loadedBundles = "loadedBundles";
			public static readonly Selector localizations = "localizations";
			public static readonly Selector localizationsToSearch = "localizationsToSearch";
			public static readonly Selector localizedInfoDictionary = "localizedInfoDictionary";
			public static readonly Selector localizedStringForKey_value_table_ = "localizedStringForKey:value:table:";
			public static readonly Selector mainBundle = "mainBundle";
			public static readonly Selector objectForInfoDictionaryKey_ = "objectForInfoDictionaryKey:";
			public static readonly Selector pathForAuxiliaryExecutable_ = "pathForAuxiliaryExecutable:";
			public static readonly Selector pathForResource_ofType_ = "pathForResource:ofType:";
			public static readonly Selector pathForResource_ofType_inDirectory_ = "pathForResource:ofType:inDirectory:";
			public static readonly Selector pathForResource_ofType_inDirectory_forLanguage_ = "pathForResource:ofType:inDirectory:forLanguage:";
			public static readonly Selector pathForResource_ofType_inDirectory_forLocalization_ = "pathForResource:ofType:inDirectory:forLocalization:";
			public static readonly Selector pathsForResourcesOfType_inDirectory_ = "pathsForResourcesOfType:inDirectory:";
			public static readonly Selector pathsForResourcesOfType_inDirectory_forLanguage_ = "pathsForResourcesOfType:inDirectory:forLanguage:";
			public static readonly Selector pathsForResourcesOfType_inDirectory_forLocalization_ = "pathsForResourcesOfType:inDirectory:forLocalization:";
			public static readonly Selector preferredLocalizations = "preferredLocalizations";
			public static readonly Selector preferredLocalizationsFromArray_ = "preferredLocalizationsFromArray:";
			public static readonly Selector preferredLocalizationsFromArray_forPreferences_ = "preferredLocalizationsFromArray:forPreferences:";
			public static readonly Selector principalClass = "principalClass";
			public static readonly Selector privateFrameworksPath = "privateFrameworksPath";
			public static readonly Selector resourcePath = "resourcePath";
			public static readonly Selector setSystemLanguages_ = "setSystemLanguages:";
			public static readonly Selector sharedFrameworksPath = "sharedFrameworksPath";
			public static readonly Selector sharedSupportPath = "sharedSupportPath";
			public static readonly Selector unload = "unload";
			public static readonly Selector versionNumber = "versionNumber";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSCachedURLResponse : IEquatable<NSCachedURLResponse> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCachedURLResponse;
		public static implicit operator IntPtr( NSCachedURLResponse value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCachedURLResponse value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCachedURLResponse?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCachedURLResponse value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCachedURLResponse value1, NSCachedURLResponse value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCachedURLResponse value1, NSCachedURLResponse value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCachedURLResponse( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCachedURLResponse alloc() {
			return new NSCachedURLResponse( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSData data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSCachedURLResponse initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCachedURLResponse( ___result );
		}
		unsafe public NSCachedURLResponse initWithResponse_data_( NSURLResponse response, NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithResponse_data_( Handle, CachedSelectors.initWithResponse_data_, out ___occuredException, sizeof( NSURLResponse ) + sizeof( NSData ), response, data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCachedURLResponse( ___result );
		}
		unsafe public NSCachedURLResponse initWithResponse_data_userInfo_storagePolicy_( NSURLResponse response, NSData data, NSDictionary userInfo, NSURLCacheStoragePolicy storagePolicy ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithResponse_data_userInfo_storagePolicy_( Handle, CachedSelectors.initWithResponse_data_userInfo_storagePolicy_, out ___occuredException, sizeof( NSURLResponse ) + sizeof( NSData ) + sizeof( NSDictionary ) + sizeof( NSURLCacheStoragePolicy ), response, data, userInfo, storagePolicy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCachedURLResponse( ___result );
		}
		unsafe public NSURLResponse response() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.response( Handle, CachedSelectors.response, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLResponse( ___result );
		}
		unsafe public NSURLCacheStoragePolicy storagePolicy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.storagePolicy( Handle, CachedSelectors.storagePolicy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSURLCacheStoragePolicy ) ___result;
		}
		unsafe public NSDictionary userInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userInfo( Handle, CachedSelectors.userInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithResponse_data_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLResponse response, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithResponse_data_userInfo_storagePolicy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLResponse response, NSData data, NSDictionary userInfo, NSURLCacheStoragePolicy storagePolicy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr response( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int storagePolicy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector data = "data";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithResponse_data_ = "initWithResponse:data:";
			public static readonly Selector initWithResponse_data_userInfo_storagePolicy_ = "initWithResponse:data:userInfo:storagePolicy:";
			public static readonly Selector response = "response";
			public static readonly Selector storagePolicy = "storagePolicy";
			public static readonly Selector userInfo = "userInfo";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSCachedURLResponseInternal : IEquatable<NSCachedURLResponseInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCachedURLResponseInternal;
		public static implicit operator IntPtr( NSCachedURLResponseInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCachedURLResponseInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCachedURLResponseInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCachedURLResponseInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCachedURLResponseInternal value1, NSCachedURLResponseInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCachedURLResponseInternal value1, NSCachedURLResponseInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCachedURLResponseInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCachedURLResponseInternal alloc() {
			return new NSCachedURLResponseInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSCalendar : IEquatable<NSCalendar> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCalendar;
		public static implicit operator IntPtr( NSCalendar value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCalendar value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCalendar?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCalendar value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCalendar value1, NSCalendar value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCalendar value1, NSCalendar value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCalendar( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCalendar alloc() {
			return new NSCalendar( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject currentCalendar() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentCalendar( ClassHandle, CachedSelectors.currentCalendar, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string calendarIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.calendarIdentifier( Handle, CachedSelectors.calendarIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDateComponents components_fromDate_( uint components, NSDate fromDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.components_fromDate_( Handle, CachedSelectors.components_fromDate_, out ___occuredException, sizeof( uint ) + sizeof( NSDate ), components, fromDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDateComponents( ___result );
		}
		unsafe public NSDateComponents components_fromDate_toDate_options_( uint components, NSDate fromDate, NSDate toDate, uint options ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.components_fromDate_toDate_options_( Handle, CachedSelectors.components_fromDate_toDate_options_, out ___occuredException, sizeof( uint ) + sizeof( NSDate ) + sizeof( NSDate ) + sizeof( uint ), components, fromDate, toDate, options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDateComponents( ___result );
		}
		unsafe public NSDate dateByAddingComponents_toDate_options_( NSDateComponents components, NSDate toDate, uint options ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateByAddingComponents_toDate_options_( Handle, CachedSelectors.dateByAddingComponents_toDate_options_, out ___occuredException, sizeof( NSDateComponents ) + sizeof( NSDate ) + sizeof( uint ), components, toDate, options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSDate dateFromComponents_( NSDateComponents components ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFromComponents_( Handle, CachedSelectors.dateFromComponents_, out ___occuredException, sizeof( NSDateComponents ), components );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint firstWeekday() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstWeekday( Handle, CachedSelectors.firstWeekday, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSCalendar initWithCalendarIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.initWithCalendarIdentifier_( Handle, CachedSelectors.initWithCalendarIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCalendar( ___result );
		}
		unsafe public NSCalendar initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCalendar( ___result );
		}
		unsafe public NSLocale locale() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.locale( Handle, CachedSelectors.locale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSLocale( ___result );
		}
		unsafe public _NSRange maximumRangeOfUnit_( NSCalendarUnit unit ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			NativeMethods.maximumRangeOfUnit_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.maximumRangeOfUnit_, out ___occuredException, sizeof( NSCalendarUnit ), unit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint minimumDaysInFirstWeek() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimumDaysInFirstWeek( Handle, CachedSelectors.minimumDaysInFirstWeek, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public _NSRange minimumRangeOfUnit_( NSCalendarUnit unit ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			NativeMethods.minimumRangeOfUnit_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.minimumRangeOfUnit_, out ___occuredException, sizeof( NSCalendarUnit ), unit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint ordinalityOfUnit_inUnit_forDate_( NSCalendarUnit unit, NSCalendarUnit inUnit, NSDate forDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ordinalityOfUnit_inUnit_forDate_( Handle, CachedSelectors.ordinalityOfUnit_inUnit_forDate_, out ___occuredException, sizeof( NSCalendarUnit ) + sizeof( NSCalendarUnit ) + sizeof( NSDate ), unit, inUnit, forDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public _NSRange rangeOfUnit_inUnit_forDate_( NSCalendarUnit unit, NSCalendarUnit inUnit, NSDate forDate ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			NativeMethods.rangeOfUnit_inUnit_forDate_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.rangeOfUnit_inUnit_forDate_, out ___occuredException, sizeof( NSCalendarUnit ) + sizeof( NSCalendarUnit ) + sizeof( NSDate ), unit, inUnit, forDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setFirstWeekday_( uint weekday ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFirstWeekday_( Handle, CachedSelectors.setFirstWeekday_, out ___occuredException, sizeof( uint ), weekday );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLocale_( NSLocale locale ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLocale_( Handle, CachedSelectors.setLocale_, out ___occuredException, sizeof( NSLocale ), locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinimumDaysInFirstWeek_( uint week ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMinimumDaysInFirstWeek_( Handle, CachedSelectors.setMinimumDaysInFirstWeek_, out ___occuredException, sizeof( uint ), week );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTimeZone_( NSTimeZone zone ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTimeZone_( Handle, CachedSelectors.setTimeZone_, out ___occuredException, sizeof( NSTimeZone ), zone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSTimeZone timeZone() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeZone( Handle, CachedSelectors.timeZone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr calendarIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr components_fromDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint components, NSDate fromDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr components_fromDate_toDate_options_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint components, NSDate fromDate, NSDate toDate, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentCalendar( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateByAddingComponents_toDate_options_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDateComponents components, NSDate toDate, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateFromComponents_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDateComponents components );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint firstWeekday( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCalendarIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr locale( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void maximumRangeOfUnit_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCalendarUnit unit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint minimumDaysInFirstWeek( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void minimumRangeOfUnit_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCalendarUnit unit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint ordinalityOfUnit_inUnit_forDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCalendarUnit unit, NSCalendarUnit inUnit, NSDate forDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void rangeOfUnit_inUnit_forDate_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCalendarUnit unit, NSCalendarUnit inUnit, NSDate forDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFirstWeekday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint weekday );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLocale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSLocale locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinimumDaysInFirstWeek_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint week );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTimeZone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSTimeZone zone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timeZone( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector calendarIdentifier = "calendarIdentifier";
			public static readonly Selector components_fromDate_ = "components:fromDate:";
			public static readonly Selector components_fromDate_toDate_options_ = "components:fromDate:toDate:options:";
			public static readonly Selector currentCalendar = "currentCalendar";
			public static readonly Selector dateByAddingComponents_toDate_options_ = "dateByAddingComponents:toDate:options:";
			public static readonly Selector dateFromComponents_ = "dateFromComponents:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector firstWeekday = "firstWeekday";
			public static readonly Selector initWithCalendarIdentifier_ = "initWithCalendarIdentifier:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector locale = "locale";
			public static readonly Selector maximumRangeOfUnit_ = "maximumRangeOfUnit:";
			public static readonly Selector minimumDaysInFirstWeek = "minimumDaysInFirstWeek";
			public static readonly Selector minimumRangeOfUnit_ = "minimumRangeOfUnit:";
			public static readonly Selector ordinalityOfUnit_inUnit_forDate_ = "ordinalityOfUnit:inUnit:forDate:";
			public static readonly Selector rangeOfUnit_inUnit_forDate_ = "rangeOfUnit:inUnit:forDate:";
			public static readonly Selector setFirstWeekday_ = "setFirstWeekday:";
			public static readonly Selector setLocale_ = "setLocale:";
			public static readonly Selector setMinimumDaysInFirstWeek_ = "setMinimumDaysInFirstWeek:";
			public static readonly Selector setTimeZone_ = "setTimeZone:";
			public static readonly Selector timeZone = "timeZone";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDate ) )]
	public struct NSCalendarDate : IEquatable<NSCalendarDate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCalendarDate;
		public static implicit operator IntPtr( NSCalendarDate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCalendarDate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCalendarDate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCalendarDate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCalendarDate value1, NSCalendarDate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCalendarDate value1, NSCalendarDate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCalendarDate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCalendarDate alloc() {
			return new NSCalendarDate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject calendarDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.calendarDate( ClassHandle, CachedSelectors.calendarDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject dateWithString_calendarFormat_( string @string, string calendarFormat ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___wrappedcalendarFormat = Runtime.CreateStringProxy( calendarFormat );
			var ___result = NativeMethods.dateWithString_calendarFormat_( ClassHandle, CachedSelectors.dateWithString_calendarFormat_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedstring, ___wrappedcalendarFormat );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedcalendarFormat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject dateWithString_calendarFormat_locale_( string @string, string calendarFormat, NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___wrappedcalendarFormat = Runtime.CreateStringProxy( calendarFormat );
			var ___result = NativeMethods.dateWithString_calendarFormat_locale_( ClassHandle, CachedSelectors.dateWithString_calendarFormat_locale_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedstring, ___wrappedcalendarFormat, locale );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedcalendarFormat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject dateWithYear_month_day_hour_minute_second_timeZone_( int year, uint month, uint day, uint hour, uint minute, uint second, NSTimeZone timeZone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateWithYear_month_day_hour_minute_second_timeZone_( ClassHandle, CachedSelectors.dateWithYear_month_day_hour_minute_second_timeZone_, out ___occuredException, sizeof( int ) + sizeof( uint ) + sizeof( uint ) + sizeof( uint ) + sizeof( uint ) + sizeof( uint ) + sizeof( NSTimeZone ), year, month, day, hour, minute, second, 
			timeZone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string calendarFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.calendarFormat( Handle, CachedSelectors.calendarFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSCalendarDate dateByAddingYears_months_days_hours_minutes_seconds_( int years, int months, int days, int hours, int minutes, int seconds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateByAddingYears_months_days_hours_minutes_seconds_( Handle, CachedSelectors.dateByAddingYears_months_days_hours_minutes_seconds_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( int ), years, months, days, hours, minutes, seconds
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCalendarDate( ___result );
		}
		unsafe public int dayOfCommonEra() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dayOfCommonEra( Handle, CachedSelectors.dayOfCommonEra, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int dayOfMonth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dayOfMonth( Handle, CachedSelectors.dayOfMonth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int dayOfWeek() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dayOfWeek( Handle, CachedSelectors.dayOfWeek, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int dayOfYear() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dayOfYear( Handle, CachedSelectors.dayOfYear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string descriptionWithCalendarFormat_( string format ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			var ___result = NativeMethods.descriptionWithCalendarFormat_( Handle, CachedSelectors.descriptionWithCalendarFormat_, out ___occuredException, sizeof( IntPtr ), ___wrappedformat );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string descriptionWithCalendarFormat_locale_( string format, NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			var ___result = NativeMethods.descriptionWithCalendarFormat_locale_( Handle, CachedSelectors.descriptionWithCalendarFormat_locale_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedformat, locale );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int hourOfDay() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hourOfDay( Handle, CachedSelectors.hourOfDay, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSCalendarDate initWithString_calendarFormat_( string @string, string calendarFormat ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___wrappedcalendarFormat = Runtime.CreateStringProxy( calendarFormat );
			var ___result = NativeMethods.initWithString_calendarFormat_( Handle, CachedSelectors.initWithString_calendarFormat_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedstring, ___wrappedcalendarFormat );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedcalendarFormat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCalendarDate( ___result );
		}
		unsafe public NSCalendarDate initWithString_calendarFormat_locale_( string @string, string calendarFormat, NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___wrappedcalendarFormat = Runtime.CreateStringProxy( calendarFormat );
			var ___result = NativeMethods.initWithString_calendarFormat_locale_( Handle, CachedSelectors.initWithString_calendarFormat_locale_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedstring, ___wrappedcalendarFormat, locale );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedcalendarFormat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCalendarDate( ___result );
		}
		unsafe public NSCalendarDate initWithYear_month_day_hour_minute_second_timeZone_( int year, uint month, uint day, uint hour, uint minute, uint second, NSTimeZone timeZone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithYear_month_day_hour_minute_second_timeZone_( Handle, CachedSelectors.initWithYear_month_day_hour_minute_second_timeZone_, out ___occuredException, sizeof( int ) + sizeof( uint ) + sizeof( uint ) + sizeof( uint ) + sizeof( uint ) + sizeof( uint ) + sizeof( NSTimeZone ), year, month, day, hour, minute, second, 
			timeZone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCalendarDate( ___result );
		}
		unsafe public int microsecondOfSecond() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.microsecondOfSecond( Handle, CachedSelectors.microsecondOfSecond, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int minuteOfHour() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minuteOfHour( Handle, CachedSelectors.minuteOfHour, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int monthOfYear() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.monthOfYear( Handle, CachedSelectors.monthOfYear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int secondOfMinute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.secondOfMinute( Handle, CachedSelectors.secondOfMinute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCalendarFormat_( string format ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			NativeMethods.setCalendarFormat_( Handle, CachedSelectors.setCalendarFormat_, out ___occuredException, sizeof( IntPtr ), ___wrappedformat );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTimeZone_( NSTimeZone zone ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTimeZone_( Handle, CachedSelectors.setTimeZone_, out ___occuredException, sizeof( NSTimeZone ), zone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSTimeZone timeZone() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeZone( Handle, CachedSelectors.timeZone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public NObjective.RuntimeObject timeZoneDetail() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeZoneDetail( Handle, CachedSelectors.timeZoneDetail, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int yearOfCommonEra() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.yearOfCommonEra( Handle, CachedSelectors.yearOfCommonEra, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void years_months_days_hours_minutes_seconds_sinceDate_( IntPtr years, IntPtr months, IntPtr days, IntPtr hours, IntPtr minutes, IntPtr seconds, NSCalendarDate sinceDate ) {
			RuntimeObject ___occuredException;
			NativeMethods.years_months_days_hours_minutes_seconds_sinceDate_( Handle, CachedSelectors.years_months_days_hours_minutes_seconds_sinceDate_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSCalendarDate ), years, months, days, hours, minutes, seconds, 
			sinceDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr calendarDate( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr calendarFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateByAddingYears_months_days_hours_minutes_seconds_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int years, int months, int days, int hours, int minutes, int seconds
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithString_calendarFormat_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, IntPtr calendarFormat );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithString_calendarFormat_locale_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, IntPtr calendarFormat, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithYear_month_day_hour_minute_second_timeZone_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int year, uint month, uint day, uint hour, uint minute, uint second, 
			NSTimeZone timeZone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int dayOfCommonEra( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int dayOfMonth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int dayOfWeek( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int dayOfYear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionWithCalendarFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionWithCalendarFormat_locale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int hourOfDay( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_calendarFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, IntPtr calendarFormat );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_calendarFormat_locale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, IntPtr calendarFormat, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithYear_month_day_hour_minute_second_timeZone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int year, uint month, uint day, uint hour, uint minute, uint second, 
			NSTimeZone timeZone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int microsecondOfSecond( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int minuteOfHour( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int monthOfYear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int secondOfMinute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCalendarFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTimeZone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSTimeZone zone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timeZone( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timeZoneDetail( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int yearOfCommonEra( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void years_months_days_hours_minutes_seconds_sinceDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr years, IntPtr months, IntPtr days, IntPtr hours, IntPtr minutes, IntPtr seconds, 
			NSCalendarDate sinceDate );
		}
		static internal class CachedSelectors {
			public static readonly Selector calendarDate = "calendarDate";
			public static readonly Selector calendarFormat = "calendarFormat";
			public static readonly Selector dateByAddingYears_months_days_hours_minutes_seconds_ = "dateByAddingYears:months:days:hours:minutes:seconds:";
			public static readonly Selector dateWithString_calendarFormat_ = "dateWithString:calendarFormat:";
			public static readonly Selector dateWithString_calendarFormat_locale_ = "dateWithString:calendarFormat:locale:";
			public static readonly Selector dateWithYear_month_day_hour_minute_second_timeZone_ = "dateWithYear:month:day:hour:minute:second:timeZone:";
			public static readonly Selector dayOfCommonEra = "dayOfCommonEra";
			public static readonly Selector dayOfMonth = "dayOfMonth";
			public static readonly Selector dayOfWeek = "dayOfWeek";
			public static readonly Selector dayOfYear = "dayOfYear";
			public static readonly Selector descriptionWithCalendarFormat_ = "descriptionWithCalendarFormat:";
			public static readonly Selector descriptionWithCalendarFormat_locale_ = "descriptionWithCalendarFormat:locale:";
			public static readonly Selector hourOfDay = "hourOfDay";
			public static readonly Selector initWithString_calendarFormat_ = "initWithString:calendarFormat:";
			public static readonly Selector initWithString_calendarFormat_locale_ = "initWithString:calendarFormat:locale:";
			public static readonly Selector initWithYear_month_day_hour_minute_second_timeZone_ = "initWithYear:month:day:hour:minute:second:timeZone:";
			public static readonly Selector microsecondOfSecond = "microsecondOfSecond";
			public static readonly Selector minuteOfHour = "minuteOfHour";
			public static readonly Selector monthOfYear = "monthOfYear";
			public static readonly Selector secondOfMinute = "secondOfMinute";
			public static readonly Selector setCalendarFormat_ = "setCalendarFormat:";
			public static readonly Selector setTimeZone_ = "setTimeZone:";
			public static readonly Selector timeZone = "timeZone";
			public static readonly Selector timeZoneDetail = "timeZoneDetail";
			public static readonly Selector yearOfCommonEra = "yearOfCommonEra";
			public static readonly Selector years_months_days_hours_minutes_seconds_sinceDate_ = "years:months:days:hours:minutes:seconds:sinceDate:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFArray ) )]
	public struct NSCFArray : IEquatable<NSCFArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFArray;
		public static implicit operator IntPtr( NSCFArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFArray value1, NSCFArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFArray value1, NSCFArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFArray alloc() {
			return new NSCFArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFArray ) )]
	public struct NSCFArray__ : IEquatable<NSCFArray__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFArray__;
		public static implicit operator IntPtr( NSCFArray__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFArray__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFArray__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFArray__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFArray__ value1, NSCFArray__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFArray__ value1, NSCFArray__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFArray__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFArray__ alloc() {
			return new NSCFArray__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFAttributedString ) )]
	public struct NSCFAttributedString : IEquatable<NSCFAttributedString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFAttributedString;
		public static implicit operator IntPtr( NSCFAttributedString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFAttributedString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFAttributedString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFAttributedString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFAttributedString value1, NSCFAttributedString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFAttributedString value1, NSCFAttributedString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFAttributedString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFAttributedString alloc() {
			return new NSCFAttributedString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFAttributedString ) )]
	public struct NSCFAttributedString__ : IEquatable<NSCFAttributedString__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFAttributedString__;
		public static implicit operator IntPtr( NSCFAttributedString__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFAttributedString__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFAttributedString__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFAttributedString__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFAttributedString__ value1, NSCFAttributedString__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFAttributedString__ value1, NSCFAttributedString__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFAttributedString__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFAttributedString__ alloc() {
			return new NSCFAttributedString__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFBoolean ) )]
	public struct NSCFBoolean : IEquatable<NSCFBoolean> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFBoolean;
		public static implicit operator IntPtr( NSCFBoolean value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFBoolean value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFBoolean?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFBoolean value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFBoolean value1, NSCFBoolean value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFBoolean value1, NSCFBoolean value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFBoolean( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFBoolean alloc() {
			return new NSCFBoolean( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFBoolean ) )]
	public struct NSCFBoolean__ : IEquatable<NSCFBoolean__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFBoolean__;
		public static implicit operator IntPtr( NSCFBoolean__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFBoolean__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFBoolean__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFBoolean__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFBoolean__ value1, NSCFBoolean__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFBoolean__ value1, NSCFBoolean__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFBoolean__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFBoolean__ alloc() {
			return new NSCFBoolean__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFCalendar ) )]
	public struct NSCFCalendar : IEquatable<NSCFCalendar> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFCalendar;
		public static implicit operator IntPtr( NSCFCalendar value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFCalendar value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFCalendar?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFCalendar value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFCalendar value1, NSCFCalendar value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFCalendar value1, NSCFCalendar value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFCalendar( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFCalendar alloc() {
			return new NSCFCalendar( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFCalendar ) )]
	public struct NSCFCalendar__ : IEquatable<NSCFCalendar__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFCalendar__;
		public static implicit operator IntPtr( NSCFCalendar__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFCalendar__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFCalendar__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFCalendar__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFCalendar__ value1, NSCFCalendar__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFCalendar__ value1, NSCFCalendar__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFCalendar__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFCalendar__ alloc() {
			return new NSCFCalendar__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFCharacterSet ) )]
	public struct NSCFCharacterSet : IEquatable<NSCFCharacterSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFCharacterSet;
		public static implicit operator IntPtr( NSCFCharacterSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFCharacterSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFCharacterSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFCharacterSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFCharacterSet value1, NSCFCharacterSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFCharacterSet value1, NSCFCharacterSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFCharacterSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFCharacterSet alloc() {
			return new NSCFCharacterSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFCharacterSet ) )]
	public struct NSCFCharacterSet__ : IEquatable<NSCFCharacterSet__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFCharacterSet__;
		public static implicit operator IntPtr( NSCFCharacterSet__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFCharacterSet__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFCharacterSet__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFCharacterSet__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFCharacterSet__ value1, NSCFCharacterSet__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFCharacterSet__ value1, NSCFCharacterSet__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFCharacterSet__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFCharacterSet__ alloc() {
			return new NSCFCharacterSet__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFData ) )]
	public struct NSCFData : IEquatable<NSCFData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFData;
		public static implicit operator IntPtr( NSCFData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFData value1, NSCFData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFData value1, NSCFData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFData alloc() {
			return new NSCFData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFData ) )]
	public struct NSCFData__ : IEquatable<NSCFData__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFData__;
		public static implicit operator IntPtr( NSCFData__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFData__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFData__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFData__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFData__ value1, NSCFData__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFData__ value1, NSCFData__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFData__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFData__ alloc() {
			return new NSCFData__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFDate ) )]
	public struct NSCFDate : IEquatable<NSCFDate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFDate;
		public static implicit operator IntPtr( NSCFDate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFDate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFDate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFDate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFDate value1, NSCFDate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFDate value1, NSCFDate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFDate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFDate alloc() {
			return new NSCFDate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFDate ) )]
	public struct NSCFDate__ : IEquatable<NSCFDate__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFDate__;
		public static implicit operator IntPtr( NSCFDate__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFDate__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFDate__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFDate__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFDate__ value1, NSCFDate__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFDate__ value1, NSCFDate__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFDate__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFDate__ alloc() {
			return new NSCFDate__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFDictionary ) )]
	public struct NSCFDictionary : IEquatable<NSCFDictionary> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFDictionary;
		public static implicit operator IntPtr( NSCFDictionary value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFDictionary value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFDictionary?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFDictionary value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFDictionary value1, NSCFDictionary value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFDictionary value1, NSCFDictionary value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFDictionary( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFDictionary alloc() {
			return new NSCFDictionary( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFDictionary ) )]
	public struct NSCFDictionary__ : IEquatable<NSCFDictionary__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFDictionary__;
		public static implicit operator IntPtr( NSCFDictionary__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFDictionary__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFDictionary__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFDictionary__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFDictionary__ value1, NSCFDictionary__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFDictionary__ value1, NSCFDictionary__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFDictionary__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFDictionary__ alloc() {
			return new NSCFDictionary__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFInputStream ) )]
	public struct NSCFInputStream : IEquatable<NSCFInputStream> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFInputStream;
		public static implicit operator IntPtr( NSCFInputStream value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFInputStream value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFInputStream?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFInputStream value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFInputStream value1, NSCFInputStream value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFInputStream value1, NSCFInputStream value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFInputStream( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFInputStream alloc() {
			return new NSCFInputStream( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFInputStream ) )]
	public struct NSCFInputStream__ : IEquatable<NSCFInputStream__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFInputStream__;
		public static implicit operator IntPtr( NSCFInputStream__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFInputStream__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFInputStream__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFInputStream__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFInputStream__ value1, NSCFInputStream__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFInputStream__ value1, NSCFInputStream__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFInputStream__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFInputStream__ alloc() {
			return new NSCFInputStream__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFLocale ) )]
	public struct NSCFLocale : IEquatable<NSCFLocale> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFLocale;
		public static implicit operator IntPtr( NSCFLocale value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFLocale value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFLocale?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFLocale value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFLocale value1, NSCFLocale value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFLocale value1, NSCFLocale value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFLocale( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFLocale alloc() {
			return new NSCFLocale( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFLocale ) )]
	public struct NSCFLocale__ : IEquatable<NSCFLocale__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFLocale__;
		public static implicit operator IntPtr( NSCFLocale__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFLocale__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFLocale__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFLocale__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFLocale__ value1, NSCFLocale__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFLocale__ value1, NSCFLocale__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFLocale__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFLocale__ alloc() {
			return new NSCFLocale__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFNumber ) )]
	public struct NSCFNumber : IEquatable<NSCFNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFNumber;
		public static implicit operator IntPtr( NSCFNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFNumber value1, NSCFNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFNumber value1, NSCFNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFNumber alloc() {
			return new NSCFNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFNumber ) )]
	public struct NSCFNumber__ : IEquatable<NSCFNumber__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFNumber__;
		public static implicit operator IntPtr( NSCFNumber__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFNumber__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFNumber__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFNumber__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFNumber__ value1, NSCFNumber__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFNumber__ value1, NSCFNumber__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFNumber__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFNumber__ alloc() {
			return new NSCFNumber__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFOutputStream ) )]
	public struct NSCFOutputStream : IEquatable<NSCFOutputStream> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFOutputStream;
		public static implicit operator IntPtr( NSCFOutputStream value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFOutputStream value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFOutputStream?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFOutputStream value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFOutputStream value1, NSCFOutputStream value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFOutputStream value1, NSCFOutputStream value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFOutputStream( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFOutputStream alloc() {
			return new NSCFOutputStream( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFOutputStream ) )]
	public struct NSCFOutputStream__ : IEquatable<NSCFOutputStream__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFOutputStream__;
		public static implicit operator IntPtr( NSCFOutputStream__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFOutputStream__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFOutputStream__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFOutputStream__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFOutputStream__ value1, NSCFOutputStream__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFOutputStream__ value1, NSCFOutputStream__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFOutputStream__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFOutputStream__ alloc() {
			return new NSCFOutputStream__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFSet ) )]
	public struct NSCFSet : IEquatable<NSCFSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFSet;
		public static implicit operator IntPtr( NSCFSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFSet value1, NSCFSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFSet value1, NSCFSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFSet alloc() {
			return new NSCFSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFSet ) )]
	public struct NSCFSet__ : IEquatable<NSCFSet__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFSet__;
		public static implicit operator IntPtr( NSCFSet__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFSet__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFSet__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFSet__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFSet__ value1, NSCFSet__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFSet__ value1, NSCFSet__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFSet__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFSet__ alloc() {
			return new NSCFSet__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFString ) )]
	public struct NSCFString__ : IEquatable<NSCFString__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFString__;
		public static implicit operator IntPtr( NSCFString__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFString__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFString__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFString__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFString__ value1, NSCFString__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFString__ value1, NSCFString__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFString__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFString__ alloc() {
			return new NSCFString__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFTimer ) )]
	public struct NSCFTimer : IEquatable<NSCFTimer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFTimer;
		public static implicit operator IntPtr( NSCFTimer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFTimer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFTimer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFTimer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFTimer value1, NSCFTimer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFTimer value1, NSCFTimer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFTimer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFTimer alloc() {
			return new NSCFTimer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFTimer ) )]
	public struct NSCFTimer__ : IEquatable<NSCFTimer__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFTimer__;
		public static implicit operator IntPtr( NSCFTimer__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFTimer__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFTimer__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFTimer__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFTimer__ value1, NSCFTimer__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFTimer__ value1, NSCFTimer__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFTimer__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFTimer__ alloc() {
			return new NSCFTimer__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFTimeZone ) )]
	public struct NSCFTimeZone : IEquatable<NSCFTimeZone> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFTimeZone;
		public static implicit operator IntPtr( NSCFTimeZone value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFTimeZone value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFTimeZone?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFTimeZone value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFTimeZone value1, NSCFTimeZone value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFTimeZone value1, NSCFTimeZone value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFTimeZone( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFTimeZone alloc() {
			return new NSCFTimeZone( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFTimeZone ) )]
	public struct NSCFTimeZone__ : IEquatable<NSCFTimeZone__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFTimeZone__;
		public static implicit operator IntPtr( NSCFTimeZone__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFTimeZone__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFTimeZone__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFTimeZone__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFTimeZone__ value1, NSCFTimeZone__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFTimeZone__ value1, NSCFTimeZone__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFTimeZone__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFTimeZone__ alloc() {
			return new NSCFTimeZone__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSCFType ) )]
	public struct NSCFType__ : IEquatable<NSCFType__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCFType__;
		public static implicit operator IntPtr( NSCFType__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCFType__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCFType__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCFType__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCFType__ value1, NSCFType__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCFType__ value1, NSCFType__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCFType__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCFType__ alloc() {
			return new NSCFType__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSCharacterSet : IEquatable<NSCharacterSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCharacterSet;
		public static implicit operator IntPtr( NSCharacterSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCharacterSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCharacterSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCharacterSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCharacterSet value1, NSCharacterSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCharacterSet value1, NSCharacterSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCharacterSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCharacterSet alloc() {
			return new NSCharacterSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSCharacterSet alphanumericCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alphanumericCharacterSet( ClassHandle, CachedSelectors.alphanumericCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet capitalizedLetterCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.capitalizedLetterCharacterSet( ClassHandle, CachedSelectors.capitalizedLetterCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet characterSetWithBitmapRepresentation_( NSData representation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.characterSetWithBitmapRepresentation_( ClassHandle, CachedSelectors.characterSetWithBitmapRepresentation_, out ___occuredException, sizeof( NSData ), representation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet characterSetWithCharactersInString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.characterSetWithCharactersInString_( ClassHandle, CachedSelectors.characterSetWithCharactersInString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet characterSetWithContentsOfFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.characterSetWithContentsOfFile_( ClassHandle, CachedSelectors.characterSetWithContentsOfFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet characterSetWithRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.characterSetWithRange_( ClassHandle, CachedSelectors.characterSetWithRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet controlCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.controlCharacterSet( ClassHandle, CachedSelectors.controlCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet decimalDigitCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalDigitCharacterSet( ClassHandle, CachedSelectors.decimalDigitCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet decomposableCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decomposableCharacterSet( ClassHandle, CachedSelectors.decomposableCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet illegalCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.illegalCharacterSet( ClassHandle, CachedSelectors.illegalCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet letterCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.letterCharacterSet( ClassHandle, CachedSelectors.letterCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet lowercaseLetterCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lowercaseLetterCharacterSet( ClassHandle, CachedSelectors.lowercaseLetterCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet nonBaseCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nonBaseCharacterSet( ClassHandle, CachedSelectors.nonBaseCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet punctuationCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.punctuationCharacterSet( ClassHandle, CachedSelectors.punctuationCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet symbolCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.symbolCharacterSet( ClassHandle, CachedSelectors.symbolCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet uppercaseLetterCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uppercaseLetterCharacterSet( ClassHandle, CachedSelectors.uppercaseLetterCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet whitespaceAndNewlineCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.whitespaceAndNewlineCharacterSet( ClassHandle, CachedSelectors.whitespaceAndNewlineCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public static NSCharacterSet whitespaceCharacterSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.whitespaceCharacterSet( ClassHandle, CachedSelectors.whitespaceCharacterSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public NSData bitmapRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bitmapRepresentation( Handle, CachedSelectors.bitmapRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public bool characterIsMember_( ushort member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.characterIsMember_( Handle, CachedSelectors.characterIsMember_, out ___occuredException, sizeof( ushort ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool hasMemberInPlane_( char plane ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasMemberInPlane_( Handle, CachedSelectors.hasMemberInPlane_, out ___occuredException, sizeof( char ), plane );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSCharacterSet initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public NSCharacterSet invertedSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.invertedSet( Handle, CachedSelectors.invertedSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public bool isEmpty() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEmpty( Handle, CachedSelectors.isEmpty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isMutable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMutable( Handle, CachedSelectors.isMutable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSupersetOfSet_( NSCharacterSet @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSupersetOfSet_( Handle, CachedSelectors.isSupersetOfSet_, out ___occuredException, sizeof( NSCharacterSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool longCharacterIsMember_( uint member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.longCharacterIsMember_( Handle, CachedSelectors.longCharacterIsMember_, out ___occuredException, sizeof( uint ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void makeImmutable() {
			RuntimeObject ___occuredException;
			NativeMethods.makeImmutable( Handle, CachedSelectors.makeImmutable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alphanumericCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bitmapRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr capitalizedLetterCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool characterIsMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort member );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr characterSetWithBitmapRepresentation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData representation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr characterSetWithCharactersInString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr characterSetWithContentsOfFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr characterSetWithRange_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr controlCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalDigitCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decomposableCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasMemberInPlane_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char plane );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr illegalCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr invertedSet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEmpty( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isMutable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSupersetOfSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCharacterSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr letterCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool longCharacterIsMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint member );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lowercaseLetterCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeImmutable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nonBaseCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr punctuationCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr symbolCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uppercaseLetterCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr whitespaceAndNewlineCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr whitespaceCharacterSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector alphanumericCharacterSet = "alphanumericCharacterSet";
			public static readonly Selector bitmapRepresentation = "bitmapRepresentation";
			public static readonly Selector capitalizedLetterCharacterSet = "capitalizedLetterCharacterSet";
			public static readonly Selector characterIsMember_ = "characterIsMember:";
			public static readonly Selector characterSetWithBitmapRepresentation_ = "characterSetWithBitmapRepresentation:";
			public static readonly Selector characterSetWithCharactersInString_ = "characterSetWithCharactersInString:";
			public static readonly Selector characterSetWithContentsOfFile_ = "characterSetWithContentsOfFile:";
			public static readonly Selector characterSetWithRange_ = "characterSetWithRange:";
			public static readonly Selector controlCharacterSet = "controlCharacterSet";
			public static readonly Selector count = "count";
			public static readonly Selector decimalDigitCharacterSet = "decimalDigitCharacterSet";
			public static readonly Selector decomposableCharacterSet = "decomposableCharacterSet";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector hasMemberInPlane_ = "hasMemberInPlane:";
			public static readonly Selector illegalCharacterSet = "illegalCharacterSet";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector invertedSet = "invertedSet";
			public static readonly Selector isEmpty = "isEmpty";
			public static readonly Selector isMutable = "isMutable";
			public static readonly Selector isSupersetOfSet_ = "isSupersetOfSet:";
			public static readonly Selector letterCharacterSet = "letterCharacterSet";
			public static readonly Selector longCharacterIsMember_ = "longCharacterIsMember:";
			public static readonly Selector lowercaseLetterCharacterSet = "lowercaseLetterCharacterSet";
			public static readonly Selector makeImmutable = "makeImmutable";
			public static readonly Selector nonBaseCharacterSet = "nonBaseCharacterSet";
			public static readonly Selector punctuationCharacterSet = "punctuationCharacterSet";
			public static readonly Selector symbolCharacterSet = "symbolCharacterSet";
			public static readonly Selector uppercaseLetterCharacterSet = "uppercaseLetterCharacterSet";
			public static readonly Selector whitespaceAndNewlineCharacterSet = "whitespaceAndNewlineCharacterSet";
			public static readonly Selector whitespaceCharacterSet = "whitespaceCharacterSet";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableString ) )]
	public struct NSCheapMutableString : IEquatable<NSCheapMutableString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCheapMutableString;
		public static implicit operator IntPtr( NSCheapMutableString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCheapMutableString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCheapMutableString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCheapMutableString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCheapMutableString value1, NSCheapMutableString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCheapMutableString value1, NSCheapMutableString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCheapMutableString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCheapMutableString alloc() {
			return new NSCheapMutableString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setContentsNoCopy_length_freeWhenDone_isUnicode_( System.IntPtr copy, uint length, char freeWhenDone, char isUnicode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContentsNoCopy_length_freeWhenDone_isUnicode_( Handle, CachedSelectors.setContentsNoCopy_length_freeWhenDone_isUnicode_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( char ) + sizeof( char ), copy, length, freeWhenDone, isUnicode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContentsNoCopy_length_freeWhenDone_isUnicode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr copy, uint length, char freeWhenDone, char isUnicode );
		}
		static internal class CachedSelectors {
			public static readonly Selector setContentsNoCopy_length_freeWhenDone_isUnicode_ = "setContentsNoCopy:length:freeWhenDone:isUnicode:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSClassDescription : IEquatable<NSClassDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSClassDescription;
		public static implicit operator IntPtr( NSClassDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSClassDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSClassDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSClassDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSClassDescription value1, NSClassDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSClassDescription value1, NSClassDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSClassDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSClassDescription alloc() {
			return new NSClassDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject classDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classDelegate( ClassHandle, CachedSelectors.classDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSClassDescription classDescriptionForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classDescriptionForClass_( ClassHandle, CachedSelectors.classDescriptionForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSClassDescription( ___result );
		}
		unsafe public static NObjective.RuntimeObject classDescriptionForEntityName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classDescriptionForEntityName_( ClassHandle, CachedSelectors.classDescriptionForEntityName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void invalidateClassDescriptionCache() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateClassDescriptionCache( ClassHandle, CachedSelectors.invalidateClassDescriptionCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void registerClassDescription_forClass_( NSClassDescription description, NObjective.RuntimeClass forClass ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerClassDescription_forClass_( ClassHandle, CachedSelectors.registerClassDescription_forClass_, out ___occuredException, sizeof( NSClassDescription ) + sizeof( NObjective.RuntimeClass ), description, forClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setClassDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setClassDelegate_( ClassHandle, CachedSelectors.setClassDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allAttributeKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allAttributeKeys( Handle, CachedSelectors.allAttributeKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allToManyRelationshipKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allToManyRelationshipKeys( Handle, CachedSelectors.allToManyRelationshipKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allToOneRelationshipKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allToOneRelationshipKeys( Handle, CachedSelectors.allToOneRelationshipKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject classDescriptionForKeyPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classDescriptionForKeyPath_( Handle, CachedSelectors.classDescriptionForKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject classPropertyKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classPropertyKeys( Handle, CachedSelectors.classPropertyKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayNameForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayNameForKey_( Handle, CachedSelectors.displayNameForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allAttributeKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allToManyRelationshipKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allToOneRelationshipKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDelegate( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDescriptionForClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDescriptionForEntityName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDescriptionForKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classPropertyKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayNameForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidateClassDescriptionCache( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerClassDescription_forClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSClassDescription description, NObjective.RuntimeClass forClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setClassDelegate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
		}
		static internal class CachedSelectors {
			public static readonly Selector allAttributeKeys = "allAttributeKeys";
			public static readonly Selector allToManyRelationshipKeys = "allToManyRelationshipKeys";
			public static readonly Selector allToOneRelationshipKeys = "allToOneRelationshipKeys";
			public static readonly Selector classDelegate = "classDelegate";
			public static readonly Selector classDescriptionForClass_ = "classDescriptionForClass:";
			public static readonly Selector classDescriptionForEntityName_ = "classDescriptionForEntityName:";
			public static readonly Selector classDescriptionForKeyPath_ = "classDescriptionForKeyPath:";
			public static readonly Selector classPropertyKeys = "classPropertyKeys";
			public static readonly Selector displayNameForKey_ = "displayNameForKey:";
			public static readonly Selector invalidateClassDescriptionCache = "invalidateClassDescriptionCache";
			public static readonly Selector registerClassDescription_forClass_ = "registerClassDescription:forClass:";
			public static readonly Selector setClassDelegate_ = "setClassDelegate:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCommand ) )]
	public struct NSCloneCommand : IEquatable<NSCloneCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCloneCommand;
		public static implicit operator IntPtr( NSCloneCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCloneCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCloneCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCloneCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCloneCommand value1, NSCloneCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCloneCommand value1, NSCloneCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCloneCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCloneCommand alloc() {
			return new NSCloneCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptObjectSpecifier keySpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keySpecifier( Handle, CachedSelectors.keySpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keySpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector keySpecifier = "keySpecifier";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCommand ) )]
	public struct NSCloseCommand : IEquatable<NSCloseCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCloseCommand;
		public static implicit operator IntPtr( NSCloseCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCloseCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCloseCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCloseCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCloseCommand value1, NSCloseCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCloseCommand value1, NSCloseCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCloseCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCloseCommand alloc() {
			return new NSCloseCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSSaveOptions saveOptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.saveOptions( Handle, CachedSelectors.saveOptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSSaveOptions ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int saveOptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector saveOptions = "saveOptions";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSCoder : IEquatable<NSCoder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCoder;
		public static implicit operator IntPtr( NSCoder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCoder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCoder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCoder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCoder value1, NSCoder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCoder value1, NSCoder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCoder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCoder alloc() {
			return new NSCoder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public bool allowsKeyedCoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsKeyedCoding( Handle, CachedSelectors.allowsKeyedCoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool containsValueForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.containsValueForKey_( Handle, CachedSelectors.containsValueForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void decodeArrayOfObjCType_count_at_( IntPtr type, uint count, IntPtr at ) {
			RuntimeObject ___occuredException;
			NativeMethods.decodeArrayOfObjCType_count_at_( Handle, CachedSelectors.decodeArrayOfObjCType_count_at_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), type, count, at );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool decodeBoolForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.decodeBoolForKey_( Handle, CachedSelectors.decodeBoolForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public IntPtr decodeBytesForKey_returnedLength_( string key, IntPtr returnedLength ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.decodeBytesForKey_returnedLength_( Handle, CachedSelectors.decodeBytesForKey_returnedLength_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedkey, returnedLength );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public IntPtr decodeBytesWithReturnedLength_( IntPtr length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeBytesWithReturnedLength_( Handle, CachedSelectors.decodeBytesWithReturnedLength_, out ___occuredException, sizeof( IntPtr ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSData decodeDataObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeDataObject( Handle, CachedSelectors.decodeDataObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public double decodeDoubleForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.decodeDoubleForKey_( Handle, CachedSelectors.decodeDoubleForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float decodeFloatForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.decodeFloatForKey_( Handle, CachedSelectors.decodeFloatForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int decodeInt32ForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.decodeInt32ForKey_( Handle, CachedSelectors.decodeInt32ForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public long decodeInt64ForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.decodeInt64ForKey_( Handle, CachedSelectors.decodeInt64ForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int decodeIntForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.decodeIntForKey_( Handle, CachedSelectors.decodeIntForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject decodeNXObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeNXObject( Handle, CachedSelectors.decodeNXObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject decodeObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeObject( Handle, CachedSelectors.decodeObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject decodeObjectForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.decodeObjectForKey_( Handle, CachedSelectors.decodeObjectForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public _NSPoint decodePoint() {
			_NSPoint ___result;
			RuntimeObject ___occuredException;
			NativeMethods.decodePoint( out ___result, sizeof( _NSPoint ), Handle, CachedSelectors.decodePoint, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSPoint decodePointForKey_( string key ) {
			_NSPoint ___result;
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.decodePointForKey_( out ___result, sizeof( _NSPoint ), Handle, CachedSelectors.decodePointForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject decodePropertyList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodePropertyList( Handle, CachedSelectors.decodePropertyList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public _NSRect decodeRect() {
			_NSRect ___result;
			RuntimeObject ___occuredException;
			NativeMethods.decodeRect( out ___result, sizeof( _NSRect ), Handle, CachedSelectors.decodeRect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSRect decodeRectForKey_( string key ) {
			_NSRect ___result;
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.decodeRectForKey_( out ___result, sizeof( _NSRect ), Handle, CachedSelectors.decodeRectForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSSize decodeSize() {
			_NSSize ___result;
			RuntimeObject ___occuredException;
			NativeMethods.decodeSize( out ___result, sizeof( _NSSize ), Handle, CachedSelectors.decodeSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSSize decodeSizeForKey_( string key ) {
			_NSSize ___result;
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.decodeSizeForKey_( out ___result, sizeof( _NSSize ), Handle, CachedSelectors.decodeSizeForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void decodeValueOfObjCType_at_( IntPtr type, IntPtr at ) {
			RuntimeObject ___occuredException;
			NativeMethods.decodeValueOfObjCType_at_( Handle, CachedSelectors.decodeValueOfObjCType_at_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), type, at );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public void decodeValuesOfObjCTypes_( IntPtr types, params object[] variableArguments ) {
			Handle.InvokeVoidFast( CachedSelectors.decodeValuesOfObjCTypes_, CachedEncodings.__18214203, types, variableArguments );
		}
		unsafe public void encodeArrayOfObjCType_count_at_( IntPtr type, uint count, IntPtr at ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeArrayOfObjCType_count_at_( Handle, CachedSelectors.encodeArrayOfObjCType_count_at_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), type, count, at );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeBool_forKey_( bool @bool, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeBool_forKey_( Handle, CachedSelectors.encodeBool_forKey_, out ___occuredException, sizeof( bool ) + sizeof( IntPtr ), @bool, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeBycopyObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeBycopyObject_( Handle, CachedSelectors.encodeBycopyObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeByrefObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeByrefObject_( Handle, CachedSelectors.encodeByrefObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeBytes_length_( IntPtr bytes, uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeBytes_length_( Handle, CachedSelectors.encodeBytes_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), bytes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeBytes_length_forKey_( IntPtr bytes, uint length, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeBytes_length_forKey_( Handle, CachedSelectors.encodeBytes_length_forKey_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), bytes, length, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeConditionalObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeConditionalObject_( Handle, CachedSelectors.encodeConditionalObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeConditionalObject_forKey_( NObjective.RuntimeObject @object, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeConditionalObject_forKey_( Handle, CachedSelectors.encodeConditionalObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), @object, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeDataObject_( NSData @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeDataObject_( Handle, CachedSelectors.encodeDataObject_, out ___occuredException, sizeof( NSData ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeDouble_forKey_( double @double, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeDouble_forKey_( Handle, CachedSelectors.encodeDouble_forKey_, out ___occuredException, sizeof( double ) + sizeof( IntPtr ), @double, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeFloat_forKey_( float @float, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeFloat_forKey_( Handle, CachedSelectors.encodeFloat_forKey_, out ___occuredException, sizeof( float ) + sizeof( IntPtr ), @float, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeInt_forKey_( int @int, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeInt_forKey_( Handle, CachedSelectors.encodeInt_forKey_, out ___occuredException, sizeof( int ) + sizeof( IntPtr ), @int, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeInt32_forKey_( int int32, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeInt32_forKey_( Handle, CachedSelectors.encodeInt32_forKey_, out ___occuredException, sizeof( int ) + sizeof( IntPtr ), int32, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeInt64_forKey_( long int64, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeInt64_forKey_( Handle, CachedSelectors.encodeInt64_forKey_, out ___occuredException, sizeof( long ) + sizeof( IntPtr ), int64, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeNXObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeNXObject_( Handle, CachedSelectors.encodeNXObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeObject_( Handle, CachedSelectors.encodeObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeObject_forKey_( NObjective.RuntimeObject @object, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeObject_forKey_( Handle, CachedSelectors.encodeObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), @object, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodePoint_( _NSPoint point ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodePoint_( Handle, CachedSelectors.encodePoint_, out ___occuredException, sizeof( _NSPoint ), point );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodePoint_forKey_( _NSPoint point, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodePoint_forKey_( Handle, CachedSelectors.encodePoint_forKey_, out ___occuredException, sizeof( _NSPoint ) + sizeof( IntPtr ), point, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodePropertyList_( NObjective.RuntimeObject list ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodePropertyList_( Handle, CachedSelectors.encodePropertyList_, out ___occuredException, sizeof( NObjective.RuntimeObject ), list );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeRect_( _NSRect rect ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeRect_( Handle, CachedSelectors.encodeRect_, out ___occuredException, sizeof( _NSRect ), rect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeRect_forKey_( _NSRect rect, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeRect_forKey_( Handle, CachedSelectors.encodeRect_forKey_, out ___occuredException, sizeof( _NSRect ) + sizeof( IntPtr ), rect, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeRootObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeRootObject_( Handle, CachedSelectors.encodeRootObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeSize_( _NSSize size ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeSize_( Handle, CachedSelectors.encodeSize_, out ___occuredException, sizeof( _NSSize ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeSize_forKey_( _NSSize size, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.encodeSize_forKey_( Handle, CachedSelectors.encodeSize_forKey_, out ___occuredException, sizeof( _NSSize ) + sizeof( IntPtr ), size, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeValueOfObjCType_at_( IntPtr type, IntPtr at ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeValueOfObjCType_at_( Handle, CachedSelectors.encodeValueOfObjCType_at_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), type, at );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public void encodeValuesOfObjCTypes_( IntPtr types, params object[] variableArguments ) {
			Handle.InvokeVoidFast( CachedSelectors.encodeValuesOfObjCTypes_, CachedEncodings.__18214203, types, variableArguments );
		}
		unsafe public void setObjectZone_( IntPtr zone ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObjectZone_( Handle, CachedSelectors.setObjectZone_, out ___occuredException, sizeof( IntPtr ), zone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint systemVersion() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemVersion( Handle, CachedSelectors.systemVersion, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint versionForClassName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.versionForClassName_( Handle, CachedSelectors.versionForClassName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool allowsKeyedCoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool containsValueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decodeArrayOfObjCType_count_at_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type, uint count, IntPtr at );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool decodeBoolForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr decodeBytesForKey_returnedLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key, IntPtr returnedLength );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr decodeBytesWithReturnedLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decodeDataObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double decodeDoubleForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float decodeFloatForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int decodeInt32ForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern long decodeInt64ForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int decodeIntForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decodeNXObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decodeObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decodeObjectForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void decodePoint( out _NSPoint ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void decodePointForKey_( out _NSPoint ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decodePropertyList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void decodeRect( out _NSRect ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void decodeRectForKey_( out _NSRect ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void decodeSize( out _NSSize ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void decodeSizeForKey_( out _NSSize ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decodeValueOfObjCType_at_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type, IntPtr at );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeArrayOfObjCType_count_at_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type, uint count, IntPtr at );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeBool_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool @bool, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeBycopyObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeByrefObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeBytes_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bytes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeBytes_length_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bytes, uint length, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeConditionalObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeConditionalObject_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeDataObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeDouble_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double @double, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeFloat_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @float, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeInt_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @int, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeInt32_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int int32, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeInt64_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, long int64, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeNXObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeObject_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodePoint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSPoint point );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodePoint_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSPoint point, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodePropertyList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeRect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRect rect );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeRect_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRect rect, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeRootObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSSize size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeSize_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSSize size, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeValueOfObjCType_at_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type, IntPtr at );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObjectZone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr zone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint systemVersion( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint versionForClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
		}
		static internal class CachedEncodings {
			public static readonly RuntimeMethodEncoding __18214203 = "v12@0:4r*8";
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsKeyedCoding = "allowsKeyedCoding";
			public static readonly Selector containsValueForKey_ = "containsValueForKey:";
			public static readonly Selector decodeArrayOfObjCType_count_at_ = "decodeArrayOfObjCType:count:at:";
			public static readonly Selector decodeBoolForKey_ = "decodeBoolForKey:";
			public static readonly Selector decodeBytesForKey_returnedLength_ = "decodeBytesForKey:returnedLength:";
			public static readonly Selector decodeBytesWithReturnedLength_ = "decodeBytesWithReturnedLength:";
			public static readonly Selector decodeDataObject = "decodeDataObject";
			public static readonly Selector decodeDoubleForKey_ = "decodeDoubleForKey:";
			public static readonly Selector decodeFloatForKey_ = "decodeFloatForKey:";
			public static readonly Selector decodeInt32ForKey_ = "decodeInt32ForKey:";
			public static readonly Selector decodeInt64ForKey_ = "decodeInt64ForKey:";
			public static readonly Selector decodeIntForKey_ = "decodeIntForKey:";
			public static readonly Selector decodeNXObject = "decodeNXObject";
			public static readonly Selector decodeObject = "decodeObject";
			public static readonly Selector decodeObjectForKey_ = "decodeObjectForKey:";
			public static readonly Selector decodePoint = "decodePoint";
			public static readonly Selector decodePointForKey_ = "decodePointForKey:";
			public static readonly Selector decodePropertyList = "decodePropertyList";
			public static readonly Selector decodeRect = "decodeRect";
			public static readonly Selector decodeRectForKey_ = "decodeRectForKey:";
			public static readonly Selector decodeSize = "decodeSize";
			public static readonly Selector decodeSizeForKey_ = "decodeSizeForKey:";
			public static readonly Selector decodeValueOfObjCType_at_ = "decodeValueOfObjCType:at:";
			public static readonly Selector decodeValuesOfObjCTypes_ = "decodeValuesOfObjCTypes:";
			public static readonly Selector encodeArrayOfObjCType_count_at_ = "encodeArrayOfObjCType:count:at:";
			public static readonly Selector encodeBool_forKey_ = "encodeBool:forKey:";
			public static readonly Selector encodeBycopyObject_ = "encodeBycopyObject:";
			public static readonly Selector encodeByrefObject_ = "encodeByrefObject:";
			public static readonly Selector encodeBytes_length_ = "encodeBytes:length:";
			public static readonly Selector encodeBytes_length_forKey_ = "encodeBytes:length:forKey:";
			public static readonly Selector encodeConditionalObject_ = "encodeConditionalObject:";
			public static readonly Selector encodeConditionalObject_forKey_ = "encodeConditionalObject:forKey:";
			public static readonly Selector encodeDataObject_ = "encodeDataObject:";
			public static readonly Selector encodeDouble_forKey_ = "encodeDouble:forKey:";
			public static readonly Selector encodeFloat_forKey_ = "encodeFloat:forKey:";
			public static readonly Selector encodeInt_forKey_ = "encodeInt:forKey:";
			public static readonly Selector encodeInt32_forKey_ = "encodeInt32:forKey:";
			public static readonly Selector encodeInt64_forKey_ = "encodeInt64:forKey:";
			public static readonly Selector encodeNXObject_ = "encodeNXObject:";
			public static readonly Selector encodeObject_ = "encodeObject:";
			public static readonly Selector encodeObject_forKey_ = "encodeObject:forKey:";
			public static readonly Selector encodePoint_ = "encodePoint:";
			public static readonly Selector encodePoint_forKey_ = "encodePoint:forKey:";
			public static readonly Selector encodePropertyList_ = "encodePropertyList:";
			public static readonly Selector encodeRect_ = "encodeRect:";
			public static readonly Selector encodeRect_forKey_ = "encodeRect:forKey:";
			public static readonly Selector encodeRootObject_ = "encodeRootObject:";
			public static readonly Selector encodeSize_ = "encodeSize:";
			public static readonly Selector encodeSize_forKey_ = "encodeSize:forKey:";
			public static readonly Selector encodeValueOfObjCType_at_ = "encodeValueOfObjCType:at:";
			public static readonly Selector encodeValuesOfObjCTypes_ = "encodeValuesOfObjCTypes:";
			public static readonly Selector setObjectZone_ = "setObjectZone:";
			public static readonly Selector systemVersion = "systemVersion";
			public static readonly Selector versionForClassName_ = "versionForClassName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCoercionHandler ) )]
	public struct NSCoercionHandler : IEquatable<NSCoercionHandler> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCoercionHandler;
		public static implicit operator IntPtr( NSCoercionHandler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCoercionHandler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCoercionHandler?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCoercionHandler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCoercionHandler value1, NSCoercionHandler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCoercionHandler value1, NSCoercionHandler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCoercionHandler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCoercionHandler alloc() {
			return new NSCoercionHandler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPredicate ) )]
	public struct NSComparisonPredicate : IEquatable<NSComparisonPredicate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSComparisonPredicate;
		public static implicit operator IntPtr( NSComparisonPredicate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSComparisonPredicate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSComparisonPredicate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSComparisonPredicate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSComparisonPredicate value1, NSComparisonPredicate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSComparisonPredicate value1, NSComparisonPredicate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSComparisonPredicate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSComparisonPredicate alloc() {
			return new NSComparisonPredicate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSPredicate predicateWithLeftExpression_rightExpression_customSelector_( NSExpression expression, NSExpression rightExpression, NObjective.Selector customSelector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateWithLeftExpression_rightExpression_customSelector_( ClassHandle, CachedSelectors.predicateWithLeftExpression_rightExpression_customSelector_, out ___occuredException, sizeof( NSExpression ) + sizeof( NSExpression ) + sizeof( NObjective.Selector ), expression, rightExpression, customSelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		unsafe public static NSPredicate predicateWithLeftExpression_rightExpression_modifier_type_options_( NSExpression expression, NSExpression rightExpression, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, uint options ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateWithLeftExpression_rightExpression_modifier_type_options_( ClassHandle, CachedSelectors.predicateWithLeftExpression_rightExpression_modifier_type_options_, out ___occuredException, sizeof( NSExpression ) + sizeof( NSExpression ) + sizeof( NSComparisonPredicateModifier ) + sizeof( NSPredicateOperatorType ) + sizeof( uint ), expression, rightExpression, modifier, type, options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		unsafe public static NObjective.RuntimeObject predicateWithPredicateOperator_leftExpression_rightExpression_( NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftExpression, NObjective.RuntimeObject rightExpression ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateWithPredicateOperator_leftExpression_rightExpression_( ClassHandle, CachedSelectors.predicateWithPredicateOperator_leftExpression_rightExpression_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @operator, leftExpression, rightExpression );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject predicateWithPredicateOperator_leftKeyPath_rightKeyPath_( NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftKeyPath, NObjective.RuntimeObject rightKeyPath ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateWithPredicateOperator_leftKeyPath_rightKeyPath_( ClassHandle, CachedSelectors.predicateWithPredicateOperator_leftKeyPath_rightKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @operator, leftKeyPath, rightKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject predicateWithPredicateOperator_leftKeyPath_rightValue_( NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftKeyPath, NObjective.RuntimeObject rightValue ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateWithPredicateOperator_leftKeyPath_rightValue_( ClassHandle, CachedSelectors.predicateWithPredicateOperator_leftKeyPath_rightValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @operator, leftKeyPath, rightValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSComparisonPredicateModifier comparisonPredicateModifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparisonPredicateModifier( Handle, CachedSelectors.comparisonPredicateModifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonPredicateModifier ) ___result;
		}
		unsafe public NObjective.Selector customSelector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.customSelector( Handle, CachedSelectors.customSelector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSComparisonPredicate initWithLeftExpression_rightExpression_customSelector_( NSExpression expression, NSExpression rightExpression, NObjective.Selector customSelector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLeftExpression_rightExpression_customSelector_( Handle, CachedSelectors.initWithLeftExpression_rightExpression_customSelector_, out ___occuredException, sizeof( NSExpression ) + sizeof( NSExpression ) + sizeof( NObjective.Selector ), expression, rightExpression, customSelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSComparisonPredicate( ___result );
		}
		unsafe public NSComparisonPredicate initWithLeftExpression_rightExpression_modifier_type_options_( NSExpression expression, NSExpression rightExpression, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, uint options ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLeftExpression_rightExpression_modifier_type_options_( Handle, CachedSelectors.initWithLeftExpression_rightExpression_modifier_type_options_, out ___occuredException, sizeof( NSExpression ) + sizeof( NSExpression ) + sizeof( NSComparisonPredicateModifier ) + sizeof( NSPredicateOperatorType ) + sizeof( uint ), expression, rightExpression, modifier, type, options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSComparisonPredicate( ___result );
		}
		unsafe public NSComparisonPredicate initWithPredicateOperator_leftExpression_rightExpression_( NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftExpression, NObjective.RuntimeObject rightExpression ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPredicateOperator_leftExpression_rightExpression_( Handle, CachedSelectors.initWithPredicateOperator_leftExpression_rightExpression_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @operator, leftExpression, rightExpression );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSComparisonPredicate( ___result );
		}
		unsafe public NSComparisonPredicate initWithPredicateOperator_leftKeyPath_rightKeyPath_( NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftKeyPath, NObjective.RuntimeObject rightKeyPath ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPredicateOperator_leftKeyPath_rightKeyPath_( Handle, CachedSelectors.initWithPredicateOperator_leftKeyPath_rightKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @operator, leftKeyPath, rightKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSComparisonPredicate( ___result );
		}
		unsafe public NSComparisonPredicate initWithPredicateOperator_leftKeyPath_rightValue_( NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftKeyPath, NObjective.RuntimeObject rightValue ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPredicateOperator_leftKeyPath_rightValue_( Handle, CachedSelectors.initWithPredicateOperator_leftKeyPath_rightValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @operator, leftKeyPath, rightValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSComparisonPredicate( ___result );
		}
		unsafe public NObjective.RuntimeObject keyPathExpressionForString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyPathExpressionForString_( Handle, CachedSelectors.keyPathExpressionForString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSExpression leftExpression() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.leftExpression( Handle, CachedSelectors.leftExpression, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSExpression( ___result );
		}
		unsafe public uint options() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.options( Handle, CachedSelectors.options, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject predicateOperator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateOperator( Handle, CachedSelectors.predicateOperator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSPredicateOperatorType predicateOperatorType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateOperatorType( Handle, CachedSelectors.predicateOperatorType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSPredicateOperatorType ) ___result;
		}
		unsafe public NSExpression rightExpression() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rightExpression( Handle, CachedSelectors.rightExpression, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSExpression( ___result );
		}
		unsafe public void setPredicateOperator_( NObjective.RuntimeObject @operator ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPredicateOperator_( Handle, CachedSelectors.setPredicateOperator_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @operator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int comparisonPredicateModifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector customSelector( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLeftExpression_rightExpression_customSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSExpression expression, NSExpression rightExpression, NObjective.Selector customSelector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLeftExpression_rightExpression_modifier_type_options_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSExpression expression, NSExpression rightExpression, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPredicateOperator_leftExpression_rightExpression_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftExpression, NObjective.RuntimeObject rightExpression );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPredicateOperator_leftKeyPath_rightKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftKeyPath, NObjective.RuntimeObject rightKeyPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPredicateOperator_leftKeyPath_rightValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftKeyPath, NObjective.RuntimeObject rightValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyPathExpressionForString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr leftExpression( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint options( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateOperator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int predicateOperatorType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateWithLeftExpression_rightExpression_customSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSExpression expression, NSExpression rightExpression, NObjective.Selector customSelector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateWithLeftExpression_rightExpression_modifier_type_options_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSExpression expression, NSExpression rightExpression, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateWithPredicateOperator_leftExpression_rightExpression_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftExpression, NObjective.RuntimeObject rightExpression );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateWithPredicateOperator_leftKeyPath_rightKeyPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftKeyPath, NObjective.RuntimeObject rightKeyPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateWithPredicateOperator_leftKeyPath_rightValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @operator, NObjective.RuntimeObject leftKeyPath, NObjective.RuntimeObject rightValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rightExpression( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPredicateOperator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @operator );
		}
		static internal class CachedSelectors {
			public static readonly Selector comparisonPredicateModifier = "comparisonPredicateModifier";
			public static readonly Selector customSelector = "customSelector";
			public static readonly Selector initWithLeftExpression_rightExpression_customSelector_ = "initWithLeftExpression:rightExpression:customSelector:";
			public static readonly Selector initWithLeftExpression_rightExpression_modifier_type_options_ = "initWithLeftExpression:rightExpression:modifier:type:options:";
			public static readonly Selector initWithPredicateOperator_leftExpression_rightExpression_ = "initWithPredicateOperator:leftExpression:rightExpression:";
			public static readonly Selector initWithPredicateOperator_leftKeyPath_rightKeyPath_ = "initWithPredicateOperator:leftKeyPath:rightKeyPath:";
			public static readonly Selector initWithPredicateOperator_leftKeyPath_rightValue_ = "initWithPredicateOperator:leftKeyPath:rightValue:";
			public static readonly Selector keyPathExpressionForString_ = "keyPathExpressionForString:";
			public static readonly Selector leftExpression = "leftExpression";
			public static readonly Selector options = "options";
			public static readonly Selector predicateOperator = "predicateOperator";
			public static readonly Selector predicateOperatorType = "predicateOperatorType";
			public static readonly Selector predicateWithLeftExpression_rightExpression_customSelector_ = "predicateWithLeftExpression:rightExpression:customSelector:";
			public static readonly Selector predicateWithLeftExpression_rightExpression_modifier_type_options_ = "predicateWithLeftExpression:rightExpression:modifier:type:options:";
			public static readonly Selector predicateWithPredicateOperator_leftExpression_rightExpression_ = "predicateWithPredicateOperator:leftExpression:rightExpression:";
			public static readonly Selector predicateWithPredicateOperator_leftKeyPath_rightKeyPath_ = "predicateWithPredicateOperator:leftKeyPath:rightKeyPath:";
			public static readonly Selector predicateWithPredicateOperator_leftKeyPath_rightValue_ = "predicateWithPredicateOperator:leftKeyPath:rightValue:";
			public static readonly Selector rightExpression = "rightExpression";
			public static readonly Selector setPredicateOperator_ = "setPredicateOperator:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPredicateOperator ) )]
	public struct NSComparisonPredicateOperator : IEquatable<NSComparisonPredicateOperator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSComparisonPredicateOperator;
		public static implicit operator IntPtr( NSComparisonPredicateOperator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSComparisonPredicateOperator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSComparisonPredicateOperator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSComparisonPredicateOperator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSComparisonPredicateOperator value1, NSComparisonPredicateOperator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSComparisonPredicateOperator value1, NSComparisonPredicateOperator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSComparisonPredicateOperator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSComparisonPredicateOperator alloc() {
			return new NSComparisonPredicateOperator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSComparisonPredicateOperator initWithOperatorType_modifier_variant_( int type, int modifier, int variant ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOperatorType_modifier_variant_( Handle, CachedSelectors.initWithOperatorType_modifier_variant_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( int ), type, modifier, variant );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSComparisonPredicateOperator( ___result );
		}
		unsafe public int variant() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.variant( Handle, CachedSelectors.variant, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOperatorType_modifier_variant_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, int modifier, int variant );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int variant( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithOperatorType_modifier_variant_ = "initWithOperatorType:modifier:variant:";
			public static readonly Selector variant = "variant";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPredicate ) )]
	public struct NSCompoundPredicate : IEquatable<NSCompoundPredicate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCompoundPredicate;
		public static implicit operator IntPtr( NSCompoundPredicate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCompoundPredicate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCompoundPredicate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCompoundPredicate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCompoundPredicate value1, NSCompoundPredicate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCompoundPredicate value1, NSCompoundPredicate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCompoundPredicate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCompoundPredicate alloc() {
			return new NSCompoundPredicate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSPredicate andPredicateWithSubpredicates_( NSArray subpredicates ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.andPredicateWithSubpredicates_( ClassHandle, CachedSelectors.andPredicateWithSubpredicates_, out ___occuredException, sizeof( NSArray ), subpredicates );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		unsafe public static NSPredicate notPredicateWithSubpredicate_( NSPredicate subpredicate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notPredicateWithSubpredicate_( ClassHandle, CachedSelectors.notPredicateWithSubpredicate_, out ___occuredException, sizeof( NSPredicate ), subpredicate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		unsafe public static NSPredicate orPredicateWithSubpredicates_( NSArray subpredicates ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orPredicateWithSubpredicates_( ClassHandle, CachedSelectors.orPredicateWithSubpredicates_, out ___occuredException, sizeof( NSArray ), subpredicates );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		unsafe public NSCompoundPredicateType compoundPredicateType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compoundPredicateType( Handle, CachedSelectors.compoundPredicateType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSCompoundPredicateType ) ___result;
		}
		unsafe public NSCompoundPredicate initWithType_subpredicates_( NSCompoundPredicateType type, NSArray subpredicates ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithType_subpredicates_( Handle, CachedSelectors.initWithType_subpredicates_, out ___occuredException, sizeof( NSCompoundPredicateType ) + sizeof( NSArray ), type, subpredicates );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCompoundPredicate( ___result );
		}
		unsafe public NSArray subpredicates() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subpredicates( Handle, CachedSelectors.subpredicates, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr andPredicateWithSubpredicates_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray subpredicates );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compoundPredicateType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithType_subpredicates_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCompoundPredicateType type, NSArray subpredicates );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notPredicateWithSubpredicate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPredicate subpredicate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orPredicateWithSubpredicates_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray subpredicates );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subpredicates( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector andPredicateWithSubpredicates_ = "andPredicateWithSubpredicates:";
			public static readonly Selector compoundPredicateType = "compoundPredicateType";
			public static readonly Selector initWithType_subpredicates_ = "initWithType:subpredicates:";
			public static readonly Selector notPredicateWithSubpredicate_ = "notPredicateWithSubpredicate:";
			public static readonly Selector orPredicateWithSubpredicates_ = "orPredicateWithSubpredicates:";
			public static readonly Selector subpredicates = "subpredicates";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPredicateOperator ) )]
	public struct NSCompoundPredicateOperator : IEquatable<NSCompoundPredicateOperator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCompoundPredicateOperator;
		public static implicit operator IntPtr( NSCompoundPredicateOperator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCompoundPredicateOperator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCompoundPredicateOperator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCompoundPredicateOperator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCompoundPredicateOperator value1, NSCompoundPredicateOperator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCompoundPredicateOperator value1, NSCompoundPredicateOperator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCompoundPredicateOperator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCompoundPredicateOperator alloc() {
			return new NSCompoundPredicateOperator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject andPredicateOperator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.andPredicateOperator( ClassHandle, CachedSelectors.andPredicateOperator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject notPredicateOperator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notPredicateOperator( ClassHandle, CachedSelectors.notPredicateOperator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject orPredicateOperator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orPredicateOperator( ClassHandle, CachedSelectors.orPredicateOperator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char evaluatePredicates_withObject_( NObjective.RuntimeObject predicates, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluatePredicates_withObject_( Handle, CachedSelectors.evaluatePredicates_withObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), predicates, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char evaluatePredicates_withObject_variableBindings_( NObjective.RuntimeObject predicates, NObjective.RuntimeObject withObject, NObjective.RuntimeObject variableBindings ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluatePredicates_withObject_variableBindings_( Handle, CachedSelectors.evaluatePredicates_withObject_variableBindings_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), predicates, withObject, variableBindings );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr andPredicateOperator( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char evaluatePredicates_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject predicates, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char evaluatePredicates_withObject_variableBindings_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject predicates, NObjective.RuntimeObject withObject, NObjective.RuntimeObject variableBindings );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notPredicateOperator( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orPredicateOperator( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector andPredicateOperator = "andPredicateOperator";
			public static readonly Selector evaluatePredicates_withObject_ = "evaluatePredicates:withObject:";
			public static readonly Selector evaluatePredicates_withObject_variableBindings_ = "evaluatePredicates:withObject:variableBindings:";
			public static readonly Selector notPredicateOperator = "notPredicateOperator";
			public static readonly Selector orPredicateOperator = "orPredicateOperator";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSAttributedString ) )]
	public struct NSConcreteAttributedString : IEquatable<NSConcreteAttributedString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteAttributedString;
		public static implicit operator IntPtr( NSConcreteAttributedString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteAttributedString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteAttributedString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteAttributedString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteAttributedString value1, NSConcreteAttributedString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteAttributedString value1, NSConcreteAttributedString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteAttributedString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteAttributedString alloc() {
			return new NSConcreteAttributedString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSConcreteAttributedString initWithAttributedString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAttributedString_( Handle, CachedSelectors.initWithAttributedString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteAttributedString( ___result );
		}
		unsafe public NSConcreteAttributedString initWithString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_( Handle, CachedSelectors.initWithString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteAttributedString( ___result );
		}
		unsafe public NSConcreteAttributedString initWithString_attributes_( NObjective.RuntimeObject @string, NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_attributes_( Handle, CachedSelectors.initWithString_attributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteAttributedString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAttributedString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_attributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject attributes );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithAttributedString_ = "initWithAttributedString:";
			public static readonly Selector initWithString_ = "initWithString:";
			public static readonly Selector initWithString_attributes_ = "initWithString:attributes:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSData ) )]
	public struct NSConcreteData : IEquatable<NSConcreteData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteData;
		public static implicit operator IntPtr( NSConcreteData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteData value1, NSConcreteData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteData value1, NSConcreteData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteData alloc() {
			return new NSConcreteData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDistantObjectRequest ) )]
	public struct NSConcreteDistantObjectRequest : IEquatable<NSConcreteDistantObjectRequest> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteDistantObjectRequest;
		public static implicit operator IntPtr( NSConcreteDistantObjectRequest value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteDistantObjectRequest value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteDistantObjectRequest?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteDistantObjectRequest value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteDistantObjectRequest value1, NSConcreteDistantObjectRequest value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteDistantObjectRequest value1, NSConcreteDistantObjectRequest value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteDistantObjectRequest( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteDistantObjectRequest alloc() {
			return new NSConcreteDistantObjectRequest( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSConcreteDistantObjectRequest initWithInvocation_conversation_sequence_importedObjects_connection_( NObjective.RuntimeObject invocation, NObjective.RuntimeObject conversation, uint sequence, NObjective.RuntimeObject importedObjects, NObjective.RuntimeObject connection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInvocation_conversation_sequence_importedObjects_connection_( Handle, CachedSelectors.initWithInvocation_conversation_sequence_importedObjects_connection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), invocation, conversation, sequence, importedObjects, connection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteDistantObjectRequest( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithInvocation_conversation_sequence_importedObjects_connection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject invocation, NObjective.RuntimeObject conversation, uint sequence, NObjective.RuntimeObject importedObjects, NObjective.RuntimeObject connection );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithInvocation_conversation_sequence_importedObjects_connection_ = "initWithInvocation:conversation:sequence:importedObjects:connection:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSFileHandle ) )]
	public struct NSConcreteFileHandle : IEquatable<NSConcreteFileHandle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteFileHandle;
		public static implicit operator IntPtr( NSConcreteFileHandle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteFileHandle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteFileHandle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteFileHandle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteFileHandle value1, NSConcreteFileHandle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteFileHandle value1, NSConcreteFileHandle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteFileHandle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteFileHandle alloc() {
			return new NSConcreteFileHandle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void acceptConnectionInBackgroundAndNotify() {
			RuntimeObject ___occuredException;
			NativeMethods.acceptConnectionInBackgroundAndNotify( Handle, CachedSelectors.acceptConnectionInBackgroundAndNotify, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void acceptConnectionInBackgroundAndNotifyForModes_( NObjective.RuntimeObject modes ) {
			RuntimeObject ___occuredException;
			NativeMethods.acceptConnectionInBackgroundAndNotifyForModes_( Handle, CachedSelectors.acceptConnectionInBackgroundAndNotifyForModes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), modes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSConcreteFileHandle initWithFileDescriptor_( int descriptor ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithFileDescriptor_( Handle, CachedSelectors.initWithFileDescriptor_, out ___occuredException, sizeof( int ), descriptor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteFileHandle( ___result );
		}
		unsafe public NSConcreteFileHandle initWithFileDescriptor_closeOnDealloc_( int descriptor, char closeOnDealloc ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithFileDescriptor_closeOnDealloc_( Handle, CachedSelectors.initWithFileDescriptor_closeOnDealloc_, out ___occuredException, sizeof( int ) + sizeof( char ), descriptor, closeOnDealloc );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteFileHandle( ___result );
		}
		unsafe public void performActivity_modes_( int activity, NObjective.RuntimeObject modes ) {
			RuntimeObject ___occuredException;
			NativeMethods.performActivity_modes_( Handle, CachedSelectors.performActivity_modes_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), activity, modes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject port() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.port( Handle, CachedSelectors.port, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint readDataOfLength_buffer_( uint length, System.IntPtr buffer ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.readDataOfLength_buffer_( Handle, CachedSelectors.readDataOfLength_buffer_, out ___occuredException, sizeof( uint ) + sizeof( System.IntPtr ), length, buffer );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void readInBackgroundAndNotify() {
			RuntimeObject ___occuredException;
			NativeMethods.readInBackgroundAndNotify( Handle, CachedSelectors.readInBackgroundAndNotify, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void readInBackgroundAndNotifyForModes_( NObjective.RuntimeObject modes ) {
			RuntimeObject ___occuredException;
			NativeMethods.readInBackgroundAndNotifyForModes_( Handle, CachedSelectors.readInBackgroundAndNotifyForModes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), modes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void readToEndOfFileInBackgroundAndNotify() {
			RuntimeObject ___occuredException;
			NativeMethods.readToEndOfFileInBackgroundAndNotify( Handle, CachedSelectors.readToEndOfFileInBackgroundAndNotify, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void readToEndOfFileInBackgroundAndNotifyForModes_( NObjective.RuntimeObject modes ) {
			RuntimeObject ___occuredException;
			NativeMethods.readToEndOfFileInBackgroundAndNotifyForModes_( Handle, CachedSelectors.readToEndOfFileInBackgroundAndNotifyForModes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), modes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPort_( NObjective.RuntimeObject port ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPort_( Handle, CachedSelectors.setPort_, out ___occuredException, sizeof( NObjective.RuntimeObject ), port );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void waitForDataInBackgroundAndNotify() {
			RuntimeObject ___occuredException;
			NativeMethods.waitForDataInBackgroundAndNotify( Handle, CachedSelectors.waitForDataInBackgroundAndNotify, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void waitForDataInBackgroundAndNotifyForModes_( NObjective.RuntimeObject modes ) {
			RuntimeObject ___occuredException;
			NativeMethods.waitForDataInBackgroundAndNotifyForModes_( Handle, CachedSelectors.waitForDataInBackgroundAndNotifyForModes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), modes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void acceptConnectionInBackgroundAndNotify( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void acceptConnectionInBackgroundAndNotifyForModes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject modes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithFileDescriptor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int descriptor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithFileDescriptor_closeOnDealloc_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int descriptor, char closeOnDealloc );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performActivity_modes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int activity, NObjective.RuntimeObject modes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr port( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint readDataOfLength_buffer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint length, System.IntPtr buffer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void readInBackgroundAndNotify( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void readInBackgroundAndNotifyForModes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject modes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void readToEndOfFileInBackgroundAndNotify( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void readToEndOfFileInBackgroundAndNotifyForModes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject modes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject port );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void waitForDataInBackgroundAndNotify( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void waitForDataInBackgroundAndNotifyForModes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject modes );
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptConnectionInBackgroundAndNotify = "acceptConnectionInBackgroundAndNotify";
			public static readonly Selector acceptConnectionInBackgroundAndNotifyForModes_ = "acceptConnectionInBackgroundAndNotifyForModes:";
			public static readonly Selector initWithFileDescriptor_ = "initWithFileDescriptor:";
			public static readonly Selector initWithFileDescriptor_closeOnDealloc_ = "initWithFileDescriptor:closeOnDealloc:";
			public static readonly Selector performActivity_modes_ = "performActivity:modes:";
			public static readonly Selector port = "port";
			public static readonly Selector readDataOfLength_buffer_ = "readDataOfLength:buffer:";
			public static readonly Selector readInBackgroundAndNotify = "readInBackgroundAndNotify";
			public static readonly Selector readInBackgroundAndNotifyForModes_ = "readInBackgroundAndNotifyForModes:";
			public static readonly Selector readToEndOfFileInBackgroundAndNotify = "readToEndOfFileInBackgroundAndNotify";
			public static readonly Selector readToEndOfFileInBackgroundAndNotifyForModes_ = "readToEndOfFileInBackgroundAndNotifyForModes:";
			public static readonly Selector setPort_ = "setPort:";
			public static readonly Selector waitForDataInBackgroundAndNotify = "waitForDataInBackgroundAndNotify";
			public static readonly Selector waitForDataInBackgroundAndNotifyForModes_ = "waitForDataInBackgroundAndNotifyForModes:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableAttributedString ) )]
	public struct NSConcreteMutableAttributedString : IEquatable<NSConcreteMutableAttributedString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteMutableAttributedString;
		public static implicit operator IntPtr( NSConcreteMutableAttributedString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteMutableAttributedString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteMutableAttributedString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteMutableAttributedString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteMutableAttributedString value1, NSConcreteMutableAttributedString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteMutableAttributedString value1, NSConcreteMutableAttributedString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteMutableAttributedString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteMutableAttributedString alloc() {
			return new NSConcreteMutableAttributedString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSConcreteMutableAttributedString initWithAttributedString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAttributedString_( Handle, CachedSelectors.initWithAttributedString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteMutableAttributedString( ___result );
		}
		unsafe public NSConcreteMutableAttributedString initWithString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_( Handle, CachedSelectors.initWithString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteMutableAttributedString( ___result );
		}
		unsafe public NSConcreteMutableAttributedString initWithString_attributes_( NObjective.RuntimeObject @string, NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_attributes_( Handle, CachedSelectors.initWithString_attributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteMutableAttributedString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAttributedString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_attributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject attributes );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithAttributedString_ = "initWithAttributedString:";
			public static readonly Selector initWithString_ = "initWithString:";
			public static readonly Selector initWithString_attributes_ = "initWithString:attributes:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableCharacterSet ) )]
	public struct NSConcreteMutableCharacterSet : IEquatable<NSConcreteMutableCharacterSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteMutableCharacterSet;
		public static implicit operator IntPtr( NSConcreteMutableCharacterSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteMutableCharacterSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteMutableCharacterSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteMutableCharacterSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteMutableCharacterSet value1, NSConcreteMutableCharacterSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteMutableCharacterSet value1, NSConcreteMutableCharacterSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteMutableCharacterSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteMutableCharacterSet alloc() {
			return new NSConcreteMutableCharacterSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject characterSetWithName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.characterSetWithName_( ClassHandle, CachedSelectors.characterSetWithName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void freeBitsAndReleaseDataIfNecessary() {
			RuntimeObject ___occuredException;
			NativeMethods.freeBitsAndReleaseDataIfNecessary( Handle, CachedSelectors.freeBitsAndReleaseDataIfNecessary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSConcreteMutableCharacterSet initWithBitmapRepresentation_( NObjective.RuntimeObject representation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBitmapRepresentation_( Handle, CachedSelectors.initWithBitmapRepresentation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), representation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteMutableCharacterSet( ___result );
		}
		unsafe public NSConcreteMutableCharacterSet initWithCharactersInString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCharactersInString_( Handle, CachedSelectors.initWithCharactersInString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteMutableCharacterSet( ___result );
		}
		unsafe public NSConcreteMutableCharacterSet initWithContentsOfFile_( NObjective.RuntimeObject file ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfFile_( Handle, CachedSelectors.initWithContentsOfFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ), file );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcreteMutableCharacterSet( ___result );
		}
		unsafe public bool isCompact() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCompact( Handle, CachedSelectors.isCompact, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void makeCharacterSetCompact() {
			RuntimeObject ___occuredException;
			NativeMethods.makeCharacterSetCompact( Handle, CachedSelectors.makeCharacterSetCompact, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeCharacterSetFast() {
			RuntimeObject ___occuredException;
			NativeMethods.makeCharacterSetFast( Handle, CachedSelectors.makeCharacterSetFast, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr characterSetWithName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void freeBitsAndReleaseDataIfNecessary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBitmapRepresentation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCharactersInString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isCompact( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeCharacterSetCompact( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeCharacterSetFast( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector characterSetWithName_ = "characterSetWithName:";
			public static readonly Selector freeBitsAndReleaseDataIfNecessary = "freeBitsAndReleaseDataIfNecessary";
			public static readonly Selector initWithBitmapRepresentation_ = "initWithBitmapRepresentation:";
			public static readonly Selector initWithCharactersInString_ = "initWithCharactersInString:";
			public static readonly Selector initWithContentsOfFile_ = "initWithContentsOfFile:";
			public static readonly Selector isCompact = "isCompact";
			public static readonly Selector makeCharacterSetCompact = "makeCharacterSetCompact";
			public static readonly Selector makeCharacterSetFast = "makeCharacterSetFast";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableData ) )]
	public struct NSConcreteMutableData : IEquatable<NSConcreteMutableData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteMutableData;
		public static implicit operator IntPtr( NSConcreteMutableData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteMutableData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteMutableData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteMutableData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteMutableData value1, NSConcreteMutableData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteMutableData value1, NSConcreteMutableData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteMutableData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteMutableData alloc() {
			return new NSConcreteMutableData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSNotification ) )]
	public struct NSConcreteNotification : IEquatable<NSConcreteNotification> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteNotification;
		public static implicit operator IntPtr( NSConcreteNotification value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteNotification value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteNotification?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteNotification value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteNotification value1, NSConcreteNotification value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteNotification value1, NSConcreteNotification value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteNotification( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteNotification alloc() {
			return new NSConcreteNotification( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject newTempNotificationWithName_object_userInfo_( NObjective.RuntimeObject name, NObjective.RuntimeObject @object, NObjective.RuntimeObject userInfo ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newTempNotificationWithName_object_userInfo_( ClassHandle, CachedSelectors.newTempNotificationWithName_object_userInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, @object, userInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void recycle() {
			RuntimeObject ___occuredException;
			NativeMethods.recycle( Handle, CachedSelectors.recycle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newTempNotificationWithName_object_userInfo_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject @object, NObjective.RuntimeObject userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void recycle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector newTempNotificationWithName_object_userInfo_ = "newTempNotificationWithName:object:userInfo:";
			public static readonly Selector recycle = "recycle";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPipe ) )]
	public struct NSConcretePipe : IEquatable<NSConcretePipe> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcretePipe;
		public static implicit operator IntPtr( NSConcretePipe value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcretePipe value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcretePipe?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcretePipe value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcretePipe value1, NSConcretePipe value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcretePipe value1, NSConcretePipe value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcretePipe( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcretePipe alloc() {
			return new NSConcretePipe( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPortCoder ) )]
	public struct NSConcretePortCoder : IEquatable<NSConcretePortCoder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcretePortCoder;
		public static implicit operator IntPtr( NSConcretePortCoder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcretePortCoder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcretePortCoder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcretePortCoder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcretePortCoder value1, NSConcretePortCoder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcretePortCoder value1, NSConcretePortCoder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcretePortCoder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcretePortCoder alloc() {
			return new NSConcretePortCoder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void authenticateWithDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.authenticateWithDelegate_( Handle, CachedSelectors.authenticateWithDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject components() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.components( Handle, CachedSelectors.components, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject decodeRetainedObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeRetainedObject( Handle, CachedSelectors.decodeRetainedObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void decryptWithDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.decryptWithDelegate_( Handle, CachedSelectors.decryptWithDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeObject_isBycopy_isByref_( NObjective.RuntimeObject @object, char isBycopy, char isByref ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeObject_isBycopy_isByref_( Handle, CachedSelectors.encodeObject_isBycopy_isByref_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), @object, isBycopy, isByref );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encryptWithDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.encryptWithDelegate_( Handle, CachedSelectors.encryptWithDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject importedObjects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importedObjects( Handle, CachedSelectors.importedObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void importObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.importObject_( Handle, CachedSelectors.importObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSConcretePortCoder initWithConnection_components_( NObjective.RuntimeObject connection, NObjective.RuntimeObject components ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithConnection_components_( Handle, CachedSelectors.initWithConnection_components_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, components );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConcretePortCoder( ___result );
		}
		unsafe public void invalidate() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidate( Handle, CachedSelectors.invalidate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendBeforeTime_sendReplyPort_( double time, char sendReplyPort ) {
			RuntimeObject ___occuredException;
			NativeMethods.sendBeforeTime_sendReplyPort_( Handle, CachedSelectors.sendBeforeTime_sendReplyPort_, out ___occuredException, sizeof( double ) + sizeof( char ), time, sendReplyPort );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char verifyWithDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.verifyWithDelegate_( Handle, CachedSelectors.verifyWithDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void authenticateWithDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr components( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decodeRetainedObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decryptWithDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeObject_isBycopy_isByref_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, char isBycopy, char isByref );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encryptWithDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr importedObjects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithConnection_components_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject components );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendBeforeTime_sendReplyPort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double time, char sendReplyPort );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char verifyWithDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
		}
		static internal class CachedSelectors {
			public static readonly Selector authenticateWithDelegate_ = "authenticateWithDelegate:";
			public static readonly Selector components = "components";
			public static readonly Selector decodeRetainedObject = "decodeRetainedObject";
			public static readonly Selector decryptWithDelegate_ = "decryptWithDelegate:";
			public static readonly Selector encodeObject_isBycopy_isByref_ = "encodeObject:isBycopy:isByref:";
			public static readonly Selector encryptWithDelegate_ = "encryptWithDelegate:";
			public static readonly Selector importedObjects = "importedObjects";
			public static readonly Selector importObject_ = "importObject:";
			public static readonly Selector initWithConnection_components_ = "initWithConnection:components:";
			public static readonly Selector invalidate = "invalidate";
			public static readonly Selector sendBeforeTime_sendReplyPort_ = "sendBeforeTime:sendReplyPort:";
			public static readonly Selector verifyWithDelegate_ = "verifyWithDelegate:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSProtocolChecker ) )]
	public struct NSConcreteProtocolChecker : IEquatable<NSConcreteProtocolChecker> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteProtocolChecker;
		public static implicit operator IntPtr( NSConcreteProtocolChecker value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteProtocolChecker value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteProtocolChecker?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteProtocolChecker value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteProtocolChecker value1, NSConcreteProtocolChecker value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteProtocolChecker value1, NSConcreteProtocolChecker value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteProtocolChecker( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteProtocolChecker alloc() {
			return new NSConcreteProtocolChecker( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScanner ) )]
	public struct NSConcreteScanner : IEquatable<NSConcreteScanner> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteScanner;
		public static implicit operator IntPtr( NSConcreteScanner value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteScanner value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteScanner?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteScanner value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteScanner value1, NSConcreteScanner value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteScanner value1, NSConcreteScanner value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteScanner( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteScanner alloc() {
			return new NSConcreteScanner( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTask ) )]
	public struct NSConcreteTask : IEquatable<NSConcreteTask> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteTask;
		public static implicit operator IntPtr( NSConcreteTask value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteTask value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteTask?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteTask value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteTask value1, NSConcreteTask value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteTask value1, NSConcreteTask value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteTask( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteTask alloc() {
			return new NSConcreteTask( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void launchWithDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.launchWithDictionary_( Handle, CachedSelectors.launchWithDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStartsNewProcessGroup_( char @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStartsNewProcessGroup_( Handle, CachedSelectors.setStartsNewProcessGroup_, out ___occuredException, sizeof( char ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTaskDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTaskDictionary_( Handle, CachedSelectors.setTaskDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject taskDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.taskDictionary( Handle, CachedSelectors.taskDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void terminateTask() {
			RuntimeObject ___occuredException;
			NativeMethods.terminateTask( Handle, CachedSelectors.terminateTask, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int terminationReason() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.terminationReason( Handle, CachedSelectors.terminationReason, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void waitUntilExit() {
			RuntimeObject ___occuredException;
			NativeMethods.waitUntilExit( Handle, CachedSelectors.waitUntilExit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void launchWithDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStartsNewProcessGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTaskDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr taskDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void terminateTask( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int terminationReason( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void waitUntilExit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector launchWithDictionary_ = "launchWithDictionary:";
			public static readonly Selector setStartsNewProcessGroup_ = "setStartsNewProcessGroup:";
			public static readonly Selector setTaskDictionary_ = "setTaskDictionary:";
			public static readonly Selector taskDictionary = "taskDictionary";
			public static readonly Selector terminateTask = "terminateTask";
			public static readonly Selector terminationReason = "terminationReason";
			public static readonly Selector waitUntilExit = "waitUntilExit";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSValue ) )]
	public struct NSConcreteValue : IEquatable<NSConcreteValue> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConcreteValue;
		public static implicit operator IntPtr( NSConcreteValue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConcreteValue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConcreteValue?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConcreteValue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConcreteValue value1, NSConcreteValue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConcreteValue value1, NSConcreteValue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConcreteValue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConcreteValue alloc() {
			return new NSConcreteValue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSCondition : IEquatable<NSCondition> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCondition;
		public static implicit operator IntPtr( NSCondition value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCondition value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCondition?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCondition value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCondition value1, NSCondition value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCondition value1, NSCondition value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCondition( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCondition alloc() {
			return new NSCondition( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void broadcast() {
			RuntimeObject ___occuredException;
			NativeMethods.broadcast( Handle, CachedSelectors.broadcast, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void @lock() {
			RuntimeObject ___occuredException;
			NativeMethods.@lock( Handle, CachedSelectors.@lock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void signal() {
			RuntimeObject ___occuredException;
			NativeMethods.signal( Handle, CachedSelectors.signal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void wait() {
			RuntimeObject ___occuredException;
			NativeMethods.wait( Handle, CachedSelectors.wait, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char waitUntilDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.waitUntilDate_( Handle, CachedSelectors.waitUntilDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void broadcast( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @lock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void signal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void wait( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char waitUntilDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
		}
		static internal class CachedSelectors {
			public static readonly Selector broadcast = "broadcast";
			public static readonly Selector @lock = "lock";
			public static readonly Selector signal = "signal";
			public static readonly Selector unlock = "unlock";
			public static readonly Selector wait = "wait";
			public static readonly Selector waitUntilDate_ = "waitUntilDate:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSConditionLock : IEquatable<NSConditionLock> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConditionLock;
		public static implicit operator IntPtr( NSConditionLock value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConditionLock value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConditionLock?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConditionLock value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConditionLock value1, NSConditionLock value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConditionLock value1, NSConditionLock value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConditionLock( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConditionLock alloc() {
			return new NSConditionLock( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int condition() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.condition( Handle, CachedSelectors.condition, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSConditionLock initWithCondition_( int condition ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCondition_( Handle, CachedSelectors.initWithCondition_, out ___occuredException, sizeof( int ), condition );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConditionLock( ___result );
		}
		unsafe public void @lock() {
			RuntimeObject ___occuredException;
			NativeMethods.@lock( Handle, CachedSelectors.@lock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool lockBeforeDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockBeforeDate_( Handle, CachedSelectors.lockBeforeDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void lockWhenCondition_( int condition ) {
			RuntimeObject ___occuredException;
			NativeMethods.lockWhenCondition_( Handle, CachedSelectors.lockWhenCondition_, out ___occuredException, sizeof( int ), condition );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool lockWhenCondition_beforeDate_( int condition, NSDate beforeDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockWhenCondition_beforeDate_( Handle, CachedSelectors.lockWhenCondition_beforeDate_, out ___occuredException, sizeof( int ) + sizeof( NSDate ), condition, beforeDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool tryLock() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tryLock( Handle, CachedSelectors.tryLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool tryLockWhenCondition_( int condition ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tryLockWhenCondition_( Handle, CachedSelectors.tryLockWhenCondition_, out ___occuredException, sizeof( int ), condition );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unlockWithCondition_( int condition ) {
			RuntimeObject ___occuredException;
			NativeMethods.unlockWithCondition_( Handle, CachedSelectors.unlockWithCondition_, out ___occuredException, sizeof( int ), condition );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int condition( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCondition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int condition );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @lock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool lockBeforeDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void lockWhenCondition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int condition );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool lockWhenCondition_beforeDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int condition, NSDate beforeDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool tryLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool tryLockWhenCondition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int condition );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlockWithCondition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int condition );
		}
		static internal class CachedSelectors {
			public static readonly Selector condition = "condition";
			public static readonly Selector initWithCondition_ = "initWithCondition:";
			public static readonly Selector @lock = "lock";
			public static readonly Selector lockBeforeDate_ = "lockBeforeDate:";
			public static readonly Selector lockWhenCondition_ = "lockWhenCondition:";
			public static readonly Selector lockWhenCondition_beforeDate_ = "lockWhenCondition:beforeDate:";
			public static readonly Selector tryLock = "tryLock";
			public static readonly Selector tryLockWhenCondition_ = "tryLockWhenCondition:";
			public static readonly Selector unlock = "unlock";
			public static readonly Selector unlockWithCondition_ = "unlockWithCondition:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSConnection : IEquatable<NSConnection> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConnection;
		public static implicit operator IntPtr( NSConnection value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConnection value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConnection?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConnection value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConnection value1, NSConnection value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConnection value1, NSConnection value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConnection( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConnection alloc() {
			return new NSConnection( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSArray allConnections() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allConnections( ClassHandle, CachedSelectors.allConnections, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static uint connectionsCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connectionsCount( ClassHandle, CachedSelectors.connectionsCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static NSConnection connectionWithReceivePort_sendPort_( NSPort port, NSPort sendPort ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connectionWithReceivePort_sendPort_( ClassHandle, CachedSelectors.connectionWithReceivePort_sendPort_, out ___occuredException, sizeof( NSPort ) + sizeof( NSPort ), port, sendPort );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConnection( ___result );
		}
		unsafe public static NSConnection connectionWithRegisteredName_host_( string name, string host ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedhost = Runtime.CreateStringProxy( host );
			var ___result = NativeMethods.connectionWithRegisteredName_host_( ClassHandle, CachedSelectors.connectionWithRegisteredName_host_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedhost );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedhost );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConnection( ___result );
		}
		unsafe public static NSConnection connectionWithRegisteredName_host_usingNameServer_( string name, string host, NSPortNameServer usingNameServer ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedhost = Runtime.CreateStringProxy( host );
			var ___result = NativeMethods.connectionWithRegisteredName_host_usingNameServer_( ClassHandle, CachedSelectors.connectionWithRegisteredName_host_usingNameServer_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSPortNameServer ), ___wrappedname, ___wrappedhost, usingNameServer );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedhost );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConnection( ___result );
		}
		unsafe public static NObjective.RuntimeObject currentConversation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentConversation( ClassHandle, CachedSelectors.currentConversation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSConnection defaultConnection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultConnection( ClassHandle, CachedSelectors.defaultConnection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConnection( ___result );
		}
		unsafe public static void doQueuedWork() {
			RuntimeObject ___occuredException;
			NativeMethods.doQueuedWork( ClassHandle, CachedSelectors.doQueuedWork, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NSDistantObject rootProxyForConnectionWithRegisteredName_host_( string name, string host ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedhost = Runtime.CreateStringProxy( host );
			var ___result = NativeMethods.rootProxyForConnectionWithRegisteredName_host_( ClassHandle, CachedSelectors.rootProxyForConnectionWithRegisteredName_host_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedhost );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedhost );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistantObject( ___result );
		}
		unsafe public static NSDistantObject rootProxyForConnectionWithRegisteredName_host_usingNameServer_( string name, string host, NSPortNameServer usingNameServer ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedhost = Runtime.CreateStringProxy( host );
			var ___result = NativeMethods.rootProxyForConnectionWithRegisteredName_host_usingNameServer_( ClassHandle, CachedSelectors.rootProxyForConnectionWithRegisteredName_host_usingNameServer_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSPortNameServer ), ___wrappedname, ___wrappedhost, usingNameServer );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedhost );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistantObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __statistics() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__statistics( ClassHandle, CachedSelectors.__statistics, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addClassNamed_version_( System.IntPtr named, uint version ) {
			RuntimeObject ___occuredException;
			NativeMethods.addClassNamed_version_( Handle, CachedSelectors.addClassNamed_version_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), named, version );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addPortsToAllRunLoops() {
			RuntimeObject ___occuredException;
			NativeMethods.addPortsToAllRunLoops( Handle, CachedSelectors.addPortsToAllRunLoops, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addPortsToRunLoop_( NObjective.RuntimeObject loop ) {
			RuntimeObject ___occuredException;
			NativeMethods.addPortsToRunLoop_( Handle, CachedSelectors.addPortsToRunLoop_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addRequestMode_( string mode ) {
			RuntimeObject ___occuredException;
			var ___wrappedmode = Runtime.CreateStringProxy( mode );
			NativeMethods.addRequestMode_( Handle, CachedSelectors.addRequestMode_, out ___occuredException, sizeof( IntPtr ), ___wrappedmode );
			Runtime.ReleaseNativeObject( ___wrappedmode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addRunLoop_( NSRunLoop loop ) {
			RuntimeObject ___occuredException;
			NativeMethods.addRunLoop_( Handle, CachedSelectors.addRunLoop_, out ___occuredException, sizeof( NSRunLoop ), loop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void decodeReleasedProxies_( NObjective.RuntimeObject proxies ) {
			RuntimeObject ___occuredException;
			NativeMethods.decodeReleasedProxies_( Handle, CachedSelectors.decodeReleasedProxies_, out ___occuredException, sizeof( NObjective.RuntimeObject ), proxies );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dispatchInvocation_( NObjective.RuntimeObject invocation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dispatchInvocation_( Handle, CachedSelectors.dispatchInvocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), invocation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void enableMultipleThreads() {
			RuntimeObject ___occuredException;
			NativeMethods.enableMultipleThreads( Handle, CachedSelectors.enableMultipleThreads, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void finishEncoding_( NObjective.RuntimeObject encoding ) {
			RuntimeObject ___occuredException;
			NativeMethods.finishEncoding_( Handle, CachedSelectors.finishEncoding_, out ___occuredException, sizeof( NObjective.RuntimeObject ), encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject getLocal_( NObjective.RuntimeObject local ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getLocal_( Handle, CachedSelectors.getLocal_, out ___occuredException, sizeof( NObjective.RuntimeObject ), local );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public System.IntPtr getReleasedProxies_length_( NObjective.RuntimeObject proxies, System.IntPtr length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getReleasedProxies_length_( Handle, CachedSelectors.getReleasedProxies_length_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), proxies, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject getRemote_( NObjective.RuntimeObject remote ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getRemote_( Handle, CachedSelectors.getRemote_, out ___occuredException, sizeof( NObjective.RuntimeObject ), remote );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void handlePortCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.handlePortCoder_( Handle, CachedSelectors.handlePortCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handlePortMessage_( NObjective.RuntimeObject message ) {
			RuntimeObject ___occuredException;
			NativeMethods.handlePortMessage_( Handle, CachedSelectors.handlePortMessage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), message );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleReleasedProxies_length_( System.IntPtr proxies, uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleReleasedProxies_length_( Handle, CachedSelectors.handleReleasedProxies_length_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), proxies, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleRequest_sequence_( NObjective.RuntimeObject request, uint sequence ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleRequest_sequence_( Handle, CachedSelectors.handleRequest_sequence_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), request, sequence );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char hasRunLoop_( NObjective.RuntimeObject loop ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasRunLoop_( Handle, CachedSelectors.hasRunLoop_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool independentConversationQueueing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.independentConversationQueueing( Handle, CachedSelectors.independentConversationQueueing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSConnection initWithReceivePort_sendPort_( NSPort port, NSPort sendPort ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithReceivePort_sendPort_( Handle, CachedSelectors.initWithReceivePort_sendPort_, out ___occuredException, sizeof( NSPort ) + sizeof( NSPort ), port, sendPort );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConnection( ___result );
		}
		unsafe public NObjective.RuntimeObject insertProxy_( NObjective.RuntimeObject proxy ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertProxy_( Handle, CachedSelectors.insertProxy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), proxy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void invalidate() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidate( Handle, CachedSelectors.invalidate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isValid() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isValid( Handle, CachedSelectors.isValid, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray localObjects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localObjects( Handle, CachedSelectors.localObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject localProxies() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localProxies( Handle, CachedSelectors.localProxies, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool multipleThreadsEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.multipleThreadsEnabled( Handle, CachedSelectors.multipleThreadsEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject newConversation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newConversation( Handle, CachedSelectors.newConversation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject portCoderWithComponents_( NObjective.RuntimeObject components ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.portCoderWithComponents_( Handle, CachedSelectors.portCoderWithComponents_, out ___occuredException, sizeof( NObjective.RuntimeObject ), components );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject proxyForObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.proxyForObject_( Handle, CachedSelectors.proxyForObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject proxyWithLocal_( NObjective.RuntimeObject local ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.proxyWithLocal_( Handle, CachedSelectors.proxyWithLocal_, out ___occuredException, sizeof( NObjective.RuntimeObject ), local );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSPort receivePort() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.receivePort( Handle, CachedSelectors.receivePort, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public bool registerName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.registerName_( Handle, CachedSelectors.registerName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool registerName_withNameServer_( string name, NSPortNameServer withNameServer ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.registerName_withNameServer_( Handle, CachedSelectors.registerName_withNameServer_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSPortNameServer ), ___wrappedname, withNameServer );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void releaseName_count_( NObjective.RuntimeObject name, uint count ) {
			RuntimeObject ___occuredException;
			NativeMethods.releaseName_count_( Handle, CachedSelectors.releaseName_count_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), name, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray remoteObjects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.remoteObjects( Handle, CachedSelectors.remoteObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void removeAllRequestModes() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllRequestModes( Handle, CachedSelectors.removeAllRequestModes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeLocal_( NObjective.RuntimeObject local ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeLocal_( Handle, CachedSelectors.removeLocal_, out ___occuredException, sizeof( NObjective.RuntimeObject ), local );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removePortsFromAllRunLoops() {
			RuntimeObject ___occuredException;
			NativeMethods.removePortsFromAllRunLoops( Handle, CachedSelectors.removePortsFromAllRunLoops, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removePortsFromRunLoop_( NObjective.RuntimeObject loop ) {
			RuntimeObject ___occuredException;
			NativeMethods.removePortsFromRunLoop_( Handle, CachedSelectors.removePortsFromRunLoop_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeProxy_( NObjective.RuntimeObject proxy ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeProxy_( Handle, CachedSelectors.removeProxy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), proxy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeRequestMode_( string mode ) {
			RuntimeObject ___occuredException;
			var ___wrappedmode = Runtime.CreateStringProxy( mode );
			NativeMethods.removeRequestMode_( Handle, CachedSelectors.removeRequestMode_, out ___occuredException, sizeof( IntPtr ), ___wrappedmode );
			Runtime.ReleaseNativeObject( ___wrappedmode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeRunLoop_( NSRunLoop loop ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeRunLoop_( Handle, CachedSelectors.removeRunLoop_, out ___occuredException, sizeof( NSRunLoop ), loop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject replyMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replyMode( Handle, CachedSelectors.replyMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public double replyTimeout() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replyTimeout( Handle, CachedSelectors.replyTimeout, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray requestModes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requestModes( Handle, CachedSelectors.requestModes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public double requestTimeout() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requestTimeout( Handle, CachedSelectors.requestTimeout, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void returnResult_exception_sequence_imports_( NObjective.RuntimeObject result, NObjective.RuntimeObject exception, uint sequence, NObjective.RuntimeObject imports ) {
			RuntimeObject ___occuredException;
			NativeMethods.returnResult_exception_sequence_imports_( Handle, CachedSelectors.returnResult_exception_sequence_imports_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ), result, exception, sequence, imports );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject rootObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rootObject( Handle, CachedSelectors.rootObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDistantObject rootProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rootProxy( Handle, CachedSelectors.rootProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistantObject( ___result );
		}
		unsafe public void run() {
			RuntimeObject ___occuredException;
			NativeMethods.run( Handle, CachedSelectors.run, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void runInNewThread() {
			RuntimeObject ___occuredException;
			NativeMethods.runInNewThread( Handle, CachedSelectors.runInNewThread, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendInvocation_( NObjective.RuntimeObject invocation ) {
			RuntimeObject ___occuredException;
			NativeMethods.sendInvocation_( Handle, CachedSelectors.sendInvocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), invocation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSPort sendPort() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendPort( Handle, CachedSelectors.sendPort, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public void sendReleasedProxies() {
			RuntimeObject ___occuredException;
			NativeMethods.sendReleasedProxies( Handle, CachedSelectors.sendReleasedProxies, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendWireCountForTarget_port_( NObjective.RuntimeObject target, NObjective.RuntimeObject port ) {
			RuntimeObject ___occuredException;
			NativeMethods.sendWireCountForTarget_port_( Handle, CachedSelectors.sendWireCountForTarget_port_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), target, port );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIndependentConversationQueueing_( bool queueing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIndependentConversationQueueing_( Handle, CachedSelectors.setIndependentConversationQueueing_, out ___occuredException, sizeof( bool ), queueing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setReplyMode_( NObjective.RuntimeObject mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setReplyMode_( Handle, CachedSelectors.setReplyMode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setReplyTimeout_( double timeout ) {
			RuntimeObject ___occuredException;
			NativeMethods.setReplyTimeout_( Handle, CachedSelectors.setReplyTimeout_, out ___occuredException, sizeof( double ), timeout );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRequestTimeout_( double timeout ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRequestTimeout_( Handle, CachedSelectors.setRequestTimeout_, out ___occuredException, sizeof( double ), timeout );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRootObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRootObject_( Handle, CachedSelectors.setRootObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSDictionary statistics() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.statistics( Handle, CachedSelectors.statistics, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public uint versionForClassNamed_( NObjective.RuntimeObject named ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.versionForClassNamed_( Handle, CachedSelectors.versionForClassNamed_, out ___occuredException, sizeof( NObjective.RuntimeObject ), named );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __statistics( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addClassNamed_version_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr named, uint version );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addPortsToAllRunLoops( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addPortsToRunLoop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loop );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addRequestMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addRunLoop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRunLoop loop );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allConnections( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint connectionsCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connectionWithReceivePort_sendPort_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPort port, NSPort sendPort );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connectionWithRegisteredName_host_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr host );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connectionWithRegisteredName_host_usingNameServer_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr host, NSPortNameServer usingNameServer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentConversation( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decodeReleasedProxies_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject proxies );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultConnection( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dispatchInvocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject invocation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doQueuedWork( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enableMultipleThreads( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void finishEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getLocal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject local );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr getReleasedProxies_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject proxies, System.IntPtr length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getRemote_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject remote );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handlePortCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handlePortMessage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject message );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleReleasedProxies_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr proxies, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleRequest_sequence_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request, uint sequence );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasRunLoop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loop );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool independentConversationQueueing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithReceivePort_sendPort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPort port, NSPort sendPort );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertProxy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject proxy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isValid( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localObjects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localProxies( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool multipleThreadsEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newConversation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr portCoderWithComponents_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject components );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr proxyForObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr proxyWithLocal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject local );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr receivePort( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool registerName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool registerName_withNameServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, NSPortNameServer withNameServer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void releaseName_count_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr remoteObjects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllRequestModes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeLocal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject local );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removePortsFromAllRunLoops( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removePortsFromRunLoop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loop );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeProxy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject proxy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeRequestMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeRunLoop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRunLoop loop );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replyMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double replyTimeout( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requestModes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double requestTimeout( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void returnResult_exception_sequence_imports_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject result, NObjective.RuntimeObject exception, uint sequence, NObjective.RuntimeObject imports );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rootObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rootProxy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rootProxyForConnectionWithRegisteredName_host_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr host );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rootProxyForConnectionWithRegisteredName_host_usingNameServer_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr host, NSPortNameServer usingNameServer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void run( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void runInNewThread( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendInvocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject invocation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sendPort( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendReleasedProxies( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendWireCountForTarget_port_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.RuntimeObject port );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIndependentConversationQueueing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool queueing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setReplyMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setReplyTimeout_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double timeout );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRequestTimeout_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double timeout );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRootObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr statistics( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint versionForClassNamed_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject named );
		}
		static internal class CachedSelectors {
			public static readonly Selector __statistics = "__statistics";
			public static readonly Selector addClassNamed_version_ = "addClassNamed:version:";
			public static readonly Selector addPortsToAllRunLoops = "addPortsToAllRunLoops";
			public static readonly Selector addPortsToRunLoop_ = "addPortsToRunLoop:";
			public static readonly Selector addRequestMode_ = "addRequestMode:";
			public static readonly Selector addRunLoop_ = "addRunLoop:";
			public static readonly Selector allConnections = "allConnections";
			public static readonly Selector connectionsCount = "connectionsCount";
			public static readonly Selector connectionWithReceivePort_sendPort_ = "connectionWithReceivePort:sendPort:";
			public static readonly Selector connectionWithRegisteredName_host_ = "connectionWithRegisteredName:host:";
			public static readonly Selector connectionWithRegisteredName_host_usingNameServer_ = "connectionWithRegisteredName:host:usingNameServer:";
			public static readonly Selector currentConversation = "currentConversation";
			public static readonly Selector decodeReleasedProxies_ = "decodeReleasedProxies:";
			public static readonly Selector defaultConnection = "defaultConnection";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector dispatchInvocation_ = "dispatchInvocation:";
			public static readonly Selector doQueuedWork = "doQueuedWork";
			public static readonly Selector enableMultipleThreads = "enableMultipleThreads";
			public static readonly Selector finishEncoding_ = "finishEncoding:";
			public static readonly Selector getLocal_ = "getLocal:";
			public static readonly Selector getReleasedProxies_length_ = "getReleasedProxies:length:";
			public static readonly Selector getRemote_ = "getRemote:";
			public static readonly Selector handlePortCoder_ = "handlePortCoder:";
			public static readonly Selector handlePortMessage_ = "handlePortMessage:";
			public static readonly Selector handleReleasedProxies_length_ = "handleReleasedProxies:length:";
			public static readonly Selector handleRequest_sequence_ = "handleRequest:sequence:";
			public static readonly Selector hasRunLoop_ = "hasRunLoop:";
			public static readonly Selector independentConversationQueueing = "independentConversationQueueing";
			public static readonly Selector initWithReceivePort_sendPort_ = "initWithReceivePort:sendPort:";
			public static readonly Selector insertProxy_ = "insertProxy:";
			public static readonly Selector invalidate = "invalidate";
			public static readonly Selector isValid = "isValid";
			public static readonly Selector localObjects = "localObjects";
			public static readonly Selector localProxies = "localProxies";
			public static readonly Selector multipleThreadsEnabled = "multipleThreadsEnabled";
			public static readonly Selector newConversation = "newConversation";
			public static readonly Selector portCoderWithComponents_ = "portCoderWithComponents:";
			public static readonly Selector proxyForObject_ = "proxyForObject:";
			public static readonly Selector proxyWithLocal_ = "proxyWithLocal:";
			public static readonly Selector receivePort = "receivePort";
			public static readonly Selector registerName_ = "registerName:";
			public static readonly Selector registerName_withNameServer_ = "registerName:withNameServer:";
			public static readonly Selector releaseName_count_ = "releaseName:count:";
			public static readonly Selector remoteObjects = "remoteObjects";
			public static readonly Selector removeAllRequestModes = "removeAllRequestModes";
			public static readonly Selector removeLocal_ = "removeLocal:";
			public static readonly Selector removePortsFromAllRunLoops = "removePortsFromAllRunLoops";
			public static readonly Selector removePortsFromRunLoop_ = "removePortsFromRunLoop:";
			public static readonly Selector removeProxy_ = "removeProxy:";
			public static readonly Selector removeRequestMode_ = "removeRequestMode:";
			public static readonly Selector removeRunLoop_ = "removeRunLoop:";
			public static readonly Selector replyMode = "replyMode";
			public static readonly Selector replyTimeout = "replyTimeout";
			public static readonly Selector requestModes = "requestModes";
			public static readonly Selector requestTimeout = "requestTimeout";
			public static readonly Selector returnResult_exception_sequence_imports_ = "returnResult:exception:sequence:imports:";
			public static readonly Selector rootObject = "rootObject";
			public static readonly Selector rootProxy = "rootProxy";
			public static readonly Selector rootProxyForConnectionWithRegisteredName_host_ = "rootProxyForConnectionWithRegisteredName:host:";
			public static readonly Selector rootProxyForConnectionWithRegisteredName_host_usingNameServer_ = "rootProxyForConnectionWithRegisteredName:host:usingNameServer:";
			public static readonly Selector run = "run";
			public static readonly Selector runInNewThread = "runInNewThread";
			public static readonly Selector sendInvocation_ = "sendInvocation:";
			public static readonly Selector sendPort = "sendPort";
			public static readonly Selector sendReleasedProxies = "sendReleasedProxies";
			public static readonly Selector sendWireCountForTarget_port_ = "sendWireCountForTarget:port:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setIndependentConversationQueueing_ = "setIndependentConversationQueueing:";
			public static readonly Selector setReplyMode_ = "setReplyMode:";
			public static readonly Selector setReplyTimeout_ = "setReplyTimeout:";
			public static readonly Selector setRequestTimeout_ = "setRequestTimeout:";
			public static readonly Selector setRootObject_ = "setRootObject:";
			public static readonly Selector statistics = "statistics";
			public static readonly Selector versionForClassNamed_ = "versionForClassNamed:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSHTTPURLProtocol ) )]
	public struct NSConnectionHTTPURLProtocol : IEquatable<NSConnectionHTTPURLProtocol> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConnectionHTTPURLProtocol;
		public static implicit operator IntPtr( NSConnectionHTTPURLProtocol value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConnectionHTTPURLProtocol value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConnectionHTTPURLProtocol?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConnectionHTTPURLProtocol value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConnectionHTTPURLProtocol value1, NSConnectionHTTPURLProtocol value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConnectionHTTPURLProtocol value1, NSConnectionHTTPURLProtocol value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConnectionHTTPURLProtocol( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConnectionHTTPURLProtocol alloc() {
			return new NSConnectionHTTPURLProtocol( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void flushHostCache() {
			RuntimeObject ___occuredException;
			NativeMethods.flushHostCache( ClassHandle, CachedSelectors.flushHostCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addAcceptFieldsToHeader() {
			RuntimeObject ___occuredException;
			NativeMethods.addAcceptFieldsToHeader( Handle, CachedSelectors.addAcceptFieldsToHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addAuthenticationFieldsToHeader() {
			RuntimeObject ___occuredException;
			NativeMethods.addAuthenticationFieldsToHeader( Handle, CachedSelectors.addAuthenticationFieldsToHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addConditionalFieldsToHeader() {
			RuntimeObject ___occuredException;
			NativeMethods.addConditionalFieldsToHeader( Handle, CachedSelectors.addConditionalFieldsToHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addConnectionFieldToHeader() {
			RuntimeObject ___occuredException;
			NativeMethods.addConnectionFieldToHeader( Handle, CachedSelectors.addConnectionFieldToHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addCookieFieldToHeader() {
			RuntimeObject ___occuredException;
			NativeMethods.addCookieFieldToHeader( Handle, CachedSelectors.addCookieFieldToHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addExtraFieldsToHeader() {
			RuntimeObject ___occuredException;
			NativeMethods.addExtraFieldsToHeader( Handle, CachedSelectors.addExtraFieldsToHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addHostFieldToHeader() {
			RuntimeObject ___occuredException;
			NativeMethods.addHostFieldToHeader( Handle, CachedSelectors.addHostFieldToHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addMessageBodyToRequest() {
			RuntimeObject ___occuredException;
			NativeMethods.addMessageBodyToRequest( Handle, CachedSelectors.addMessageBodyToRequest, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addReferrerFieldToHeader() {
			RuntimeObject ___occuredException;
			NativeMethods.addReferrerFieldToHeader( Handle, CachedSelectors.addReferrerFieldToHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addUserAgentFieldToHeader() {
			RuntimeObject ___occuredException;
			NativeMethods.addUserAgentFieldToHeader( Handle, CachedSelectors.addUserAgentFieldToHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void advanceProxyArray() {
			RuntimeObject ___occuredException;
			NativeMethods.advanceProxyArray( Handle, CachedSelectors.advanceProxyArray, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char attemptRetryAfter3xxResponse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attemptRetryAfter3xxResponse( Handle, CachedSelectors.attemptRetryAfter3xxResponse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelAuthenticationChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelAuthenticationChallenge_( Handle, CachedSelectors.cancelAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void continueAfterBytesAvailable() {
			RuntimeObject ___occuredException;
			NativeMethods.continueAfterBytesAvailable( Handle, CachedSelectors.continueAfterBytesAvailable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void continueAfterEndEncountered() {
			RuntimeObject ___occuredException;
			NativeMethods.continueAfterEndEncountered( Handle, CachedSelectors.continueAfterEndEncountered, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void continueBeginLoadInBackgroundAfterCreatingHTTPRequest() {
			RuntimeObject ___occuredException;
			NativeMethods.continueBeginLoadInBackgroundAfterCreatingHTTPRequest( Handle, CachedSelectors.continueBeginLoadInBackgroundAfterCreatingHTTPRequest, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void continueHeaderReadAfterFailureResponse() {
			RuntimeObject ___occuredException;
			NativeMethods.continueHeaderReadAfterFailureResponse( Handle, CachedSelectors.continueHeaderReadAfterFailureResponse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void continueWithoutCredentialForAuthenticationChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.continueWithoutCredentialForAuthenticationChallenge_( Handle, CachedSelectors.continueWithoutCredentialForAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void createStream_( System.IntPtr stream ) {
			RuntimeObject ___occuredException;
			NativeMethods.createStream_( Handle, CachedSelectors.createStream_, out ___occuredException, sizeof( System.IntPtr ), stream );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deallocateCFNetworkResources() {
			RuntimeObject ___occuredException;
			NativeMethods.deallocateCFNetworkResources( Handle, CachedSelectors.deallocateCFNetworkResources, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void destroyReadStream() {
			RuntimeObject ___occuredException;
			NativeMethods.destroyReadStream( Handle, CachedSelectors.destroyReadStream, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char performHTTPHeaderRead() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performHTTPHeaderRead( Handle, CachedSelectors.performHTTPHeaderRead, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void performProxyStreamRead() {
			RuntimeObject ___occuredException;
			NativeMethods.performProxyStreamRead( Handle, CachedSelectors.performProxyStreamRead, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void retryAfterConnectingToInternet() {
			RuntimeObject ___occuredException;
			NativeMethods.retryAfterConnectingToInternet( Handle, CachedSelectors.retryAfterConnectingToInternet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void retryAfterTLSFailure() {
			RuntimeObject ___occuredException;
			NativeMethods.retryAfterTLSFailure( Handle, CachedSelectors.retryAfterTLSFailure, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char setCertificatePolicyOnStream() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setCertificatePolicyOnStream( Handle, CachedSelectors.setCertificatePolicyOnStream, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool shouldFailOn403Response() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldFailOn403Response( Handle, CachedSelectors.shouldFailOn403Response, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void updateCacheForStreamDisposal() {
			RuntimeObject ___occuredException;
			NativeMethods.updateCacheForStreamDisposal( Handle, CachedSelectors.updateCacheForStreamDisposal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void useCredential_forAuthenticationChallenge_( NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.useCredential_forAuthenticationChallenge_( Handle, CachedSelectors.useCredential_forAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), credential, forAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addAcceptFieldsToHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addAuthenticationFieldsToHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addConditionalFieldsToHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addConnectionFieldToHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addCookieFieldToHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addExtraFieldsToHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addHostFieldToHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addMessageBodyToRequest( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addReferrerFieldToHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addUserAgentFieldToHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void advanceProxyArray( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char attemptRetryAfter3xxResponse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueAfterBytesAvailable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueAfterEndEncountered( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueBeginLoadInBackgroundAfterCreatingHTTPRequest( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueHeaderReadAfterFailureResponse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueWithoutCredentialForAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void createStream_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr stream );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deallocateCFNetworkResources( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void destroyReadStream( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void flushHostCache( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char performHTTPHeaderRead( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performProxyStreamRead( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void retryAfterConnectingToInternet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void retryAfterTLSFailure( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char setCertificatePolicyOnStream( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldFailOn403Response( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateCacheForStreamDisposal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void useCredential_forAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge );
		}
		static internal class CachedSelectors {
			public static readonly Selector addAcceptFieldsToHeader = "addAcceptFieldsToHeader";
			public static readonly Selector addAuthenticationFieldsToHeader = "addAuthenticationFieldsToHeader";
			public static readonly Selector addConditionalFieldsToHeader = "addConditionalFieldsToHeader";
			public static readonly Selector addConnectionFieldToHeader = "addConnectionFieldToHeader";
			public static readonly Selector addCookieFieldToHeader = "addCookieFieldToHeader";
			public static readonly Selector addExtraFieldsToHeader = "addExtraFieldsToHeader";
			public static readonly Selector addHostFieldToHeader = "addHostFieldToHeader";
			public static readonly Selector addMessageBodyToRequest = "addMessageBodyToRequest";
			public static readonly Selector addReferrerFieldToHeader = "addReferrerFieldToHeader";
			public static readonly Selector addUserAgentFieldToHeader = "addUserAgentFieldToHeader";
			public static readonly Selector advanceProxyArray = "advanceProxyArray";
			public static readonly Selector attemptRetryAfter3xxResponse = "attemptRetryAfter3xxResponse";
			public static readonly Selector cancelAuthenticationChallenge_ = "cancelAuthenticationChallenge:";
			public static readonly Selector continueAfterBytesAvailable = "continueAfterBytesAvailable";
			public static readonly Selector continueAfterEndEncountered = "continueAfterEndEncountered";
			public static readonly Selector continueBeginLoadInBackgroundAfterCreatingHTTPRequest = "continueBeginLoadInBackgroundAfterCreatingHTTPRequest";
			public static readonly Selector continueHeaderReadAfterFailureResponse = "continueHeaderReadAfterFailureResponse";
			public static readonly Selector continueWithoutCredentialForAuthenticationChallenge_ = "continueWithoutCredentialForAuthenticationChallenge:";
			public static readonly Selector createStream_ = "createStream:";
			public static readonly Selector deallocateCFNetworkResources = "deallocateCFNetworkResources";
			public static readonly Selector destroyReadStream = "destroyReadStream";
			public static readonly Selector flushHostCache = "flushHostCache";
			public static readonly Selector performHTTPHeaderRead = "performHTTPHeaderRead";
			public static readonly Selector performProxyStreamRead = "performProxyStreamRead";
			public static readonly Selector retryAfterConnectingToInternet = "retryAfterConnectingToInternet";
			public static readonly Selector retryAfterTLSFailure = "retryAfterTLSFailure";
			public static readonly Selector setCertificatePolicyOnStream = "setCertificatePolicyOnStream";
			public static readonly Selector shouldFailOn403Response = "shouldFailOn403Response";
			public static readonly Selector updateCacheForStreamDisposal = "updateCacheForStreamDisposal";
			public static readonly Selector useCredential_forAuthenticationChallenge_ = "useCredential:forAuthenticationChallenge:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSSimpleCString ) )]
	public struct NSConstantString : IEquatable<NSConstantString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConstantString;
		public static implicit operator IntPtr( NSConstantString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConstantString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConstantString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConstantString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConstantString value1, NSConstantString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConstantString value1, NSConstantString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConstantString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConstantString alloc() {
			return new NSConstantString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSConstantString initWithCharactersNoCopy_length_( System.IntPtr copy, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCharactersNoCopy_length_( Handle, CachedSelectors.initWithCharactersNoCopy_length_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), copy, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConstantString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCharactersNoCopy_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr copy, uint length );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithCharactersNoCopy_length_ = "initWithCharactersNoCopy:length:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSExpression ) )]
	public struct NSConstantValueExpression : IEquatable<NSConstantValueExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSConstantValueExpression;
		public static implicit operator IntPtr( NSConstantValueExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSConstantValueExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSConstantValueExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSConstantValueExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSConstantValueExpression value1, NSConstantValueExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSConstantValueExpression value1, NSConstantValueExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSConstantValueExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSConstantValueExpression alloc() {
			return new NSConstantValueExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject expressionValueWithObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expressionValueWithObject_( Handle, CachedSelectors.expressionValueWithObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSConstantValueExpression initWithObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObject_( Handle, CachedSelectors.initWithObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConstantValueExpression( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionValueWithObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector expressionValueWithObject_ = "expressionValueWithObject:";
			public static readonly Selector initWithObject_ = "initWithObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCommand ) )]
	public struct NSCountCommand : IEquatable<NSCountCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCountCommand;
		public static implicit operator IntPtr( NSCountCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCountCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCountCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCountCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCountCommand value1, NSCountCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCountCommand value1, NSCountCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCountCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCountCommand alloc() {
			return new NSCountCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableSet ) )]
	public struct NSCountedSet : IEquatable<NSCountedSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCountedSet;
		public static implicit operator IntPtr( NSCountedSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCountedSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCountedSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCountedSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCountedSet value1, NSCountedSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCountedSet value1, NSCountedSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCountedSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCountedSet alloc() {
			return new NSCountedSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCommand ) )]
	public struct NSCreateCommand : IEquatable<NSCreateCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCreateCommand;
		public static implicit operator IntPtr( NSCreateCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCreateCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCreateCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCreateCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCreateCommand value1, NSCreateCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCreateCommand value1, NSCreateCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCreateCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCreateCommand alloc() {
			return new NSCreateCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptClassDescription createClassDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createClassDescription( Handle, CachedSelectors.createClassDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptClassDescription( ___result );
		}
		unsafe public NSDictionary resolvedKeyDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resolvedKeyDictionary( Handle, CachedSelectors.resolvedKeyDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createClassDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resolvedKeyDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector createClassDescription = "createClassDescription";
			public static readonly Selector resolvedKeyDictionary = "resolvedKeyDictionary";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPredicateOperator ) )]
	public struct NSCustomPredicateOperator : IEquatable<NSCustomPredicateOperator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSCustomPredicateOperator;
		public static implicit operator IntPtr( NSCustomPredicateOperator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSCustomPredicateOperator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSCustomPredicateOperator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSCustomPredicateOperator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSCustomPredicateOperator value1, NSCustomPredicateOperator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSCustomPredicateOperator value1, NSCustomPredicateOperator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSCustomPredicateOperator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSCustomPredicateOperator alloc() {
			return new NSCustomPredicateOperator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSCustomPredicateOperator initWithCustomSelector_modifier_( NObjective.Selector selector, int modifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCustomSelector_modifier_( Handle, CachedSelectors.initWithCustomSelector_modifier_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( int ), selector, modifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCustomPredicateOperator( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCustomSelector_modifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, int modifier );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithCustomSelector_modifier_ = "initWithCustomSelector:modifier:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSData : IEquatable<NSData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSData;
		public static implicit operator IntPtr( NSData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSData value1, NSData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSData value1, NSData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSData alloc() {
			return new NSData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( ClassHandle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSData dataWithBytes_length_( IntPtr bytes, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataWithBytes_length_( ClassHandle, CachedSelectors.dataWithBytes_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), bytes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static NSData dataWithBytesNoCopy_length_( IntPtr copy, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataWithBytesNoCopy_length_( ClassHandle, CachedSelectors.dataWithBytesNoCopy_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), copy, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static NSData dataWithBytesNoCopy_length_freeWhenDone_( IntPtr copy, uint length, bool freeWhenDone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataWithBytesNoCopy_length_freeWhenDone_( ClassHandle, CachedSelectors.dataWithBytesNoCopy_length_freeWhenDone_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( bool ), copy, length, freeWhenDone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static NSData dataWithContentsOfFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.dataWithContentsOfFile_( ClassHandle, CachedSelectors.dataWithContentsOfFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static NSData dataWithContentsOfFile_options_error_( string file, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.dataWithContentsOfFile_options_error_( ClassHandle, CachedSelectors.dataWithContentsOfFile_options_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), ___wrappedfile, options, ref error );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static NSData dataWithContentsOfMappedFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.dataWithContentsOfMappedFile_( ClassHandle, CachedSelectors.dataWithContentsOfMappedFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static NSData dataWithContentsOfURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataWithContentsOfURL_( ClassHandle, CachedSelectors.dataWithContentsOfURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static NSData dataWithContentsOfURL_options_error_( NSURL url, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataWithContentsOfURL_options_error_( ClassHandle, CachedSelectors.dataWithContentsOfURL_options_error_, out ___occuredException, sizeof( NSURL ) + sizeof( uint ) + sizeof( IntPtr ), url, options, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static NSData dataWithData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataWithData_( ClassHandle, CachedSelectors.dataWithData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public IntPtr bytes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bytes( Handle, CachedSelectors.bytes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint deserializeAlignedBytesLengthAtCursor_( System.IntPtr cursor ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deserializeAlignedBytesLengthAtCursor_( Handle, CachedSelectors.deserializeAlignedBytesLengthAtCursor_, out ___occuredException, sizeof( System.IntPtr ), cursor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void deserializeBytes_length_atCursor_( System.IntPtr bytes, uint length, System.IntPtr atCursor ) {
			RuntimeObject ___occuredException;
			NativeMethods.deserializeBytes_length_atCursor_( Handle, CachedSelectors.deserializeBytes_length_atCursor_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( System.IntPtr ), bytes, length, atCursor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deserializeDataAt_ofObjCType_atCursor_context_( System.IntPtr at, System.IntPtr ofObjCType, System.IntPtr atCursor, NObjective.RuntimeObject context ) {
			RuntimeObject ___occuredException;
			NativeMethods.deserializeDataAt_ofObjCType_atCursor_context_( Handle, CachedSelectors.deserializeDataAt_ofObjCType_atCursor_context_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ), at, ofObjCType, atCursor, context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int deserializeIntAtCursor_( System.IntPtr cursor ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deserializeIntAtCursor_( Handle, CachedSelectors.deserializeIntAtCursor_, out ___occuredException, sizeof( System.IntPtr ), cursor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int deserializeIntAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deserializeIntAtIndex_( Handle, CachedSelectors.deserializeIntAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void deserializeInts_count_atCursor_( System.IntPtr ints, uint count, System.IntPtr atCursor ) {
			RuntimeObject ___occuredException;
			NativeMethods.deserializeInts_count_atCursor_( Handle, CachedSelectors.deserializeInts_count_atCursor_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( System.IntPtr ), ints, count, atCursor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deserializeInts_count_atIndex_( System.IntPtr ints, uint count, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.deserializeInts_count_atIndex_( Handle, CachedSelectors.deserializeInts_count_atIndex_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( uint ), ints, count, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getBytes_( IntPtr bytes ) {
			RuntimeObject ___occuredException;
			NativeMethods.getBytes_( Handle, CachedSelectors.getBytes_, out ___occuredException, sizeof( IntPtr ), bytes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getBytes_length_( IntPtr bytes, uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.getBytes_length_( Handle, CachedSelectors.getBytes_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), bytes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getBytes_range_( IntPtr bytes, _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.getBytes_range_( Handle, CachedSelectors.getBytes_range_, out ___occuredException, sizeof( IntPtr ) + sizeof( _NSRange ), bytes, range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSData initWithBytes_length_( IntPtr bytes, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBytes_length_( Handle, CachedSelectors.initWithBytes_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), bytes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithBytes_length_copy_freeWhenDone_bytesAreVM_( System.IntPtr bytes, uint length, char copy, char freeWhenDone, char bytesAreVM ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBytes_length_copy_freeWhenDone_bytesAreVM_( Handle, CachedSelectors.initWithBytes_length_copy_freeWhenDone_bytesAreVM_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( char ) + sizeof( char ) + sizeof( char ), bytes, length, copy, freeWhenDone, bytesAreVM );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithBytesNoCopy_length_( IntPtr copy, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBytesNoCopy_length_( Handle, CachedSelectors.initWithBytesNoCopy_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), copy, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithBytesNoCopy_length_freeWhenDone_( IntPtr copy, uint length, bool freeWhenDone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBytesNoCopy_length_freeWhenDone_( Handle, CachedSelectors.initWithBytesNoCopy_length_freeWhenDone_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( bool ), copy, length, freeWhenDone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithContentsOfFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.initWithContentsOfFile_( Handle, CachedSelectors.initWithContentsOfFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithContentsOfFile_error_( NObjective.RuntimeObject file, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfFile_error_( Handle, CachedSelectors.initWithContentsOfFile_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), file, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithContentsOfFile_options_error_( string file, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.initWithContentsOfFile_options_error_( Handle, CachedSelectors.initWithContentsOfFile_options_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), ___wrappedfile, options, ref error );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithContentsOfMappedFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.initWithContentsOfMappedFile_( Handle, CachedSelectors.initWithContentsOfMappedFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithContentsOfMappedFile_error_( NObjective.RuntimeObject file, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfMappedFile_error_( Handle, CachedSelectors.initWithContentsOfMappedFile_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), file, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithContentsOfURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_( Handle, CachedSelectors.initWithContentsOfURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithContentsOfURL_options_error_( NSURL url, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_options_error_( Handle, CachedSelectors.initWithContentsOfURL_options_error_, out ___occuredException, sizeof( NSURL ) + sizeof( uint ) + sizeof( IntPtr ), url, options, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData initWithData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_( Handle, CachedSelectors.initWithData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public bool isEqualToData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToData_( Handle, CachedSelectors.isEqualToData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSData subdataWithRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subdataWithRange_( Handle, CachedSelectors.subdataWithRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public bool writeToFile_atomically_( string file, bool atomically ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.writeToFile_atomically_( Handle, CachedSelectors.writeToFile_atomically_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappedfile, atomically );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char writeToFile_atomically_error_( NObjective.RuntimeObject file, char atomically, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeToFile_atomically_error_( Handle, CachedSelectors.writeToFile_atomically_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), file, atomically, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool writeToFile_options_error_( string file, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.writeToFile_options_error_( Handle, CachedSelectors.writeToFile_options_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), ___wrappedfile, options, ref error );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool writeToURL_atomically_( NSURL url, bool atomically ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeToURL_atomically_( Handle, CachedSelectors.writeToURL_atomically_, out ___occuredException, sizeof( NSURL ) + sizeof( bool ), url, atomically );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool writeToURL_options_error_( NSURL url, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeToURL_options_error_( Handle, CachedSelectors.writeToURL_options_error_, out ___occuredException, sizeof( NSURL ) + sizeof( uint ) + sizeof( IntPtr ), url, options, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr bytes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithBytes_length_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bytes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithBytesNoCopy_length_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr copy, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithBytesNoCopy_length_freeWhenDone_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr copy, uint length, bool freeWhenDone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithContentsOfFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithContentsOfFile_options_error_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, uint options, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithContentsOfMappedFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithContentsOfURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithContentsOfURL_options_error_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, uint options, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint deserializeAlignedBytesLengthAtCursor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr cursor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deserializeBytes_length_atCursor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr bytes, uint length, System.IntPtr atCursor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deserializeDataAt_ofObjCType_atCursor_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr at, System.IntPtr ofObjCType, System.IntPtr atCursor, NObjective.RuntimeObject context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int deserializeIntAtCursor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr cursor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int deserializeIntAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deserializeInts_count_atCursor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr ints, uint count, System.IntPtr atCursor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deserializeInts_count_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr ints, uint count, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getBytes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bytes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getBytes_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bytes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getBytes_range_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bytes, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBytes_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bytes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBytes_length_copy_freeWhenDone_bytesAreVM_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr bytes, uint length, char copy, char freeWhenDone, char bytesAreVM );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBytesNoCopy_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr copy, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBytesNoCopy_length_freeWhenDone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr copy, uint length, bool freeWhenDone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfFile_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject file, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfFile_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, uint options, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfMappedFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfMappedFile_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject file, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, uint options, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subdataWithRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToFile_atomically_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, bool atomically );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char writeToFile_atomically_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject file, char atomically, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToFile_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, uint options, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToURL_atomically_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, bool atomically );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToURL_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, uint options, ref NSError error );
		}
		static internal class CachedSelectors {
			public static readonly Selector bytes = "bytes";
			public static readonly Selector data = "data";
			public static readonly Selector dataWithBytes_length_ = "dataWithBytes:length:";
			public static readonly Selector dataWithBytesNoCopy_length_ = "dataWithBytesNoCopy:length:";
			public static readonly Selector dataWithBytesNoCopy_length_freeWhenDone_ = "dataWithBytesNoCopy:length:freeWhenDone:";
			public static readonly Selector dataWithContentsOfFile_ = "dataWithContentsOfFile:";
			public static readonly Selector dataWithContentsOfFile_options_error_ = "dataWithContentsOfFile:options:error:";
			public static readonly Selector dataWithContentsOfMappedFile_ = "dataWithContentsOfMappedFile:";
			public static readonly Selector dataWithContentsOfURL_ = "dataWithContentsOfURL:";
			public static readonly Selector dataWithContentsOfURL_options_error_ = "dataWithContentsOfURL:options:error:";
			public static readonly Selector dataWithData_ = "dataWithData:";
			public static readonly Selector deserializeAlignedBytesLengthAtCursor_ = "deserializeAlignedBytesLengthAtCursor:";
			public static readonly Selector deserializeBytes_length_atCursor_ = "deserializeBytes:length:atCursor:";
			public static readonly Selector deserializeDataAt_ofObjCType_atCursor_context_ = "deserializeDataAt:ofObjCType:atCursor:context:";
			public static readonly Selector deserializeIntAtCursor_ = "deserializeIntAtCursor:";
			public static readonly Selector deserializeIntAtIndex_ = "deserializeIntAtIndex:";
			public static readonly Selector deserializeInts_count_atCursor_ = "deserializeInts:count:atCursor:";
			public static readonly Selector deserializeInts_count_atIndex_ = "deserializeInts:count:atIndex:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector getBytes_ = "getBytes:";
			public static readonly Selector getBytes_length_ = "getBytes:length:";
			public static readonly Selector getBytes_range_ = "getBytes:range:";
			public static readonly Selector initWithBytes_length_ = "initWithBytes:length:";
			public static readonly Selector initWithBytes_length_copy_freeWhenDone_bytesAreVM_ = "initWithBytes:length:copy:freeWhenDone:bytesAreVM:";
			public static readonly Selector initWithBytesNoCopy_length_ = "initWithBytesNoCopy:length:";
			public static readonly Selector initWithBytesNoCopy_length_freeWhenDone_ = "initWithBytesNoCopy:length:freeWhenDone:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithContentsOfFile_ = "initWithContentsOfFile:";
			public static readonly Selector initWithContentsOfFile_error_ = "initWithContentsOfFile:error:";
			public static readonly Selector initWithContentsOfFile_options_error_ = "initWithContentsOfFile:options:error:";
			public static readonly Selector initWithContentsOfMappedFile_ = "initWithContentsOfMappedFile:";
			public static readonly Selector initWithContentsOfMappedFile_error_ = "initWithContentsOfMappedFile:error:";
			public static readonly Selector initWithContentsOfURL_ = "initWithContentsOfURL:";
			public static readonly Selector initWithContentsOfURL_options_error_ = "initWithContentsOfURL:options:error:";
			public static readonly Selector initWithData_ = "initWithData:";
			public static readonly Selector isEqualToData_ = "isEqualToData:";
			public static readonly Selector length = "length";
			public static readonly Selector subdataWithRange_ = "subdataWithRange:";
			public static readonly Selector writeToFile_atomically_ = "writeToFile:atomically:";
			public static readonly Selector writeToFile_atomically_error_ = "writeToFile:atomically:error:";
			public static readonly Selector writeToFile_options_error_ = "writeToFile:options:error:";
			public static readonly Selector writeToURL_atomically_ = "writeToURL:atomically:";
			public static readonly Selector writeToURL_options_error_ = "writeToURL:options:error:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLProtocol ) )]
	public struct NSDataURLProtocol : IEquatable<NSDataURLProtocol> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDataURLProtocol;
		public static implicit operator IntPtr( NSDataURLProtocol value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDataURLProtocol value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDataURLProtocol?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDataURLProtocol value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDataURLProtocol value1, NSDataURLProtocol value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDataURLProtocol value1, NSDataURLProtocol value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDataURLProtocol( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDataURLProtocol alloc() {
			return new NSDataURLProtocol( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject base64DecodeData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.base64DecodeData_( Handle, CachedSelectors.base64DecodeData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr base64DecodeData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
		}
		static internal class CachedSelectors {
			public static readonly Selector base64DecodeData_ = "base64DecodeData:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSDate : IEquatable<NSDate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDate;
		public static implicit operator IntPtr( NSDate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDate value1, NSDate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDate value1, NSDate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDate alloc() {
			return new NSDate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject date() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.date( ClassHandle, CachedSelectors.date, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSDate dateWithDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateWithDate_( ClassHandle, CachedSelectors.dateWithDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public static NSDate dateWithNaturalLanguageString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.dateWithNaturalLanguageString_( ClassHandle, CachedSelectors.dateWithNaturalLanguageString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public static NSDate dateWithNaturalLanguageString_date_locale_( NObjective.RuntimeObject @string, NObjective.RuntimeObject date, NObjective.RuntimeObject locale ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateWithNaturalLanguageString_date_locale_( ClassHandle, CachedSelectors.dateWithNaturalLanguageString_date_locale_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, date, locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public static NSDate dateWithNaturalLanguageString_locale_( string @string, NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.dateWithNaturalLanguageString_locale_( ClassHandle, CachedSelectors.dateWithNaturalLanguageString_locale_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedstring, locale );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public static NSDate dateWithString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.dateWithString_( ClassHandle, CachedSelectors.dateWithString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public static NSDate dateWithTimeInterval_sinceDate_( double interval, NObjective.RuntimeObject sinceDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateWithTimeInterval_sinceDate_( ClassHandle, CachedSelectors.dateWithTimeInterval_sinceDate_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ), interval, sinceDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public static NSDate dateWithTimeIntervalSince1970_( double since1970 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateWithTimeIntervalSince1970_( ClassHandle, CachedSelectors.dateWithTimeIntervalSince1970_, out ___occuredException, sizeof( double ), since1970 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public static NSDate dateWithTimeIntervalSinceNow_( double now ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateWithTimeIntervalSinceNow_( ClassHandle, CachedSelectors.dateWithTimeIntervalSinceNow_, out ___occuredException, sizeof( double ), now );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public static NSDate dateWithTimeIntervalSinceReferenceDate_( double date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateWithTimeIntervalSinceReferenceDate_( ClassHandle, CachedSelectors.dateWithTimeIntervalSinceReferenceDate_, out ___occuredException, sizeof( double ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public static NObjective.RuntimeObject distantFuture() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.distantFuture( ClassHandle, CachedSelectors.distantFuture, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject distantPast() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.distantPast( ClassHandle, CachedSelectors.distantPast, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static double __timeIntervalSinceReferenceDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__timeIntervalSinceReferenceDate( ClassHandle, CachedSelectors.__timeIntervalSinceReferenceDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject addTimeInterval_( double interval ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addTimeInterval_( Handle, CachedSelectors.addTimeInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSComparisonResult compare_( NSDate compare ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compare_( Handle, CachedSelectors.compare_, out ___occuredException, sizeof( NSDate ), compare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public NSCalendarDate dateWithCalendarFormat_timeZone_( string format, NSTimeZone timeZone ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			var ___result = NativeMethods.dateWithCalendarFormat_timeZone_( Handle, CachedSelectors.dateWithCalendarFormat_timeZone_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSTimeZone ), ___wrappedformat, timeZone );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCalendarDate( ___result );
		}
		unsafe public string descriptionWithCalendarFormat_timeZone_locale_( string format, NSTimeZone timeZone, NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			var ___result = NativeMethods.descriptionWithCalendarFormat_timeZone_locale_( Handle, CachedSelectors.descriptionWithCalendarFormat_timeZone_locale_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSTimeZone ) + sizeof( NSDictionary ), ___wrappedformat, timeZone, locale );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string descriptionWithLocale_( NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptionWithLocale_( Handle, CachedSelectors.descriptionWithLocale_, out ___occuredException, sizeof( NSDictionary ), locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDate earlierDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.earlierDate_( Handle, CachedSelectors.earlierDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSDate initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSDate initWithDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDate_( Handle, CachedSelectors.initWithDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSDate initWithString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.initWithString_( Handle, CachedSelectors.initWithString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSDate initWithTimeInterval_sinceDate_( double interval, NSDate sinceDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTimeInterval_sinceDate_( Handle, CachedSelectors.initWithTimeInterval_sinceDate_, out ___occuredException, sizeof( double ) + sizeof( NSDate ), interval, sinceDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSDate initWithTimeIntervalSince1970_( double since1970 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTimeIntervalSince1970_( Handle, CachedSelectors.initWithTimeIntervalSince1970_, out ___occuredException, sizeof( double ), since1970 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSDate initWithTimeIntervalSinceNow_( double now ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTimeIntervalSinceNow_( Handle, CachedSelectors.initWithTimeIntervalSinceNow_, out ___occuredException, sizeof( double ), now );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSDate initWithTimeIntervalSinceReferenceDate_( double date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTimeIntervalSinceReferenceDate_( Handle, CachedSelectors.initWithTimeIntervalSinceReferenceDate_, out ___occuredException, sizeof( double ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public bool isEqualToDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToDate_( Handle, CachedSelectors.isEqualToDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSDate laterDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.laterDate_( Handle, CachedSelectors.laterDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public double timeIntervalSince1970() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeIntervalSince1970( Handle, CachedSelectors.timeIntervalSince1970, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double timeIntervalSinceDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeIntervalSinceDate_( Handle, CachedSelectors.timeIntervalSinceDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double timeIntervalSinceNow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeIntervalSinceNow( Handle, CachedSelectors.timeIntervalSinceNow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double timeIntervalSinceReferenceDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeIntervalSinceReferenceDate( Handle, CachedSelectors.timeIntervalSinceReferenceDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double __timeIntervalSinceReferenceDate( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addTimeInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate compare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr date( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithCalendarFormat_timeZone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format, NSTimeZone timeZone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithDate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithNaturalLanguageString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithNaturalLanguageString_date_locale_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject date, NObjective.RuntimeObject locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithNaturalLanguageString_locale_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithTimeInterval_sinceDate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, NObjective.RuntimeObject sinceDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithTimeIntervalSince1970_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double since1970 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithTimeIntervalSinceNow_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double now );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateWithTimeIntervalSinceReferenceDate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionWithCalendarFormat_timeZone_locale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format, NSTimeZone timeZone, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionWithLocale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr distantFuture( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr distantPast( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr earlierDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTimeInterval_sinceDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, NSDate sinceDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTimeIntervalSince1970_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double since1970 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTimeIntervalSinceNow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double now );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTimeIntervalSinceReferenceDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr laterDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double timeIntervalSince1970( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double timeIntervalSinceDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double timeIntervalSinceNow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double timeIntervalSinceReferenceDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector __timeIntervalSinceReferenceDate = "__timeIntervalSinceReferenceDate";
			public static readonly Selector addTimeInterval_ = "addTimeInterval:";
			public static readonly Selector compare_ = "compare:";
			public static readonly Selector date = "date";
			public static readonly Selector dateWithCalendarFormat_timeZone_ = "dateWithCalendarFormat:timeZone:";
			public static readonly Selector dateWithDate_ = "dateWithDate:";
			public static readonly Selector dateWithNaturalLanguageString_ = "dateWithNaturalLanguageString:";
			public static readonly Selector dateWithNaturalLanguageString_date_locale_ = "dateWithNaturalLanguageString:date:locale:";
			public static readonly Selector dateWithNaturalLanguageString_locale_ = "dateWithNaturalLanguageString:locale:";
			public static readonly Selector dateWithString_ = "dateWithString:";
			public static readonly Selector dateWithTimeInterval_sinceDate_ = "dateWithTimeInterval:sinceDate:";
			public static readonly Selector dateWithTimeIntervalSince1970_ = "dateWithTimeIntervalSince1970:";
			public static readonly Selector dateWithTimeIntervalSinceNow_ = "dateWithTimeIntervalSinceNow:";
			public static readonly Selector dateWithTimeIntervalSinceReferenceDate_ = "dateWithTimeIntervalSinceReferenceDate:";
			public static readonly Selector descriptionWithCalendarFormat_timeZone_locale_ = "descriptionWithCalendarFormat:timeZone:locale:";
			public static readonly Selector descriptionWithLocale_ = "descriptionWithLocale:";
			public static readonly Selector distantFuture = "distantFuture";
			public static readonly Selector distantPast = "distantPast";
			public static readonly Selector earlierDate_ = "earlierDate:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithDate_ = "initWithDate:";
			public static readonly Selector initWithString_ = "initWithString:";
			public static readonly Selector initWithTimeInterval_sinceDate_ = "initWithTimeInterval:sinceDate:";
			public static readonly Selector initWithTimeIntervalSince1970_ = "initWithTimeIntervalSince1970:";
			public static readonly Selector initWithTimeIntervalSinceNow_ = "initWithTimeIntervalSinceNow:";
			public static readonly Selector initWithTimeIntervalSinceReferenceDate_ = "initWithTimeIntervalSinceReferenceDate:";
			public static readonly Selector isEqualToDate_ = "isEqualToDate:";
			public static readonly Selector laterDate_ = "laterDate:";
			public static readonly Selector timeIntervalSince1970 = "timeIntervalSince1970";
			public static readonly Selector timeIntervalSinceDate_ = "timeIntervalSinceDate:";
			public static readonly Selector timeIntervalSinceNow = "timeIntervalSinceNow";
			public static readonly Selector timeIntervalSinceReferenceDate = "timeIntervalSinceReferenceDate";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSDateComponents : IEquatable<NSDateComponents> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDateComponents;
		public static implicit operator IntPtr( NSDateComponents value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDateComponents value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDateComponents?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDateComponents value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDateComponents value1, NSDateComponents value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDateComponents value1, NSDateComponents value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDateComponents( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDateComponents alloc() {
			return new NSDateComponents( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject calendar() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.calendar( Handle, CachedSelectors.calendar, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int day() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.day( Handle, CachedSelectors.day, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int era() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.era( Handle, CachedSelectors.era, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int hour() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hour( Handle, CachedSelectors.hour, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSDateComponents initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDateComponents( ___result );
		}
		unsafe public int minute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minute( Handle, CachedSelectors.minute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int month() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.month( Handle, CachedSelectors.month, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int second() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.second( Handle, CachedSelectors.second, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCalendar_( NObjective.RuntimeObject calendar ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCalendar_( Handle, CachedSelectors.setCalendar_, out ___occuredException, sizeof( NObjective.RuntimeObject ), calendar );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDay_( int day ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDay_( Handle, CachedSelectors.setDay_, out ___occuredException, sizeof( int ), day );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEra_( int era ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEra_( Handle, CachedSelectors.setEra_, out ___occuredException, sizeof( int ), era );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHour_( int hour ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHour_( Handle, CachedSelectors.setHour_, out ___occuredException, sizeof( int ), hour );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinute_( int minute ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMinute_( Handle, CachedSelectors.setMinute_, out ___occuredException, sizeof( int ), minute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMonth_( int month ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMonth_( Handle, CachedSelectors.setMonth_, out ___occuredException, sizeof( int ), month );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSecond_( int second ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSecond_( Handle, CachedSelectors.setSecond_, out ___occuredException, sizeof( int ), second );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWeek_( int week ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWeek_( Handle, CachedSelectors.setWeek_, out ___occuredException, sizeof( int ), week );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWeekday_( int weekday ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWeekday_( Handle, CachedSelectors.setWeekday_, out ___occuredException, sizeof( int ), weekday );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWeekdayOrdinal_( int ordinal ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWeekdayOrdinal_( Handle, CachedSelectors.setWeekdayOrdinal_, out ___occuredException, sizeof( int ), ordinal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setYear_( int year ) {
			RuntimeObject ___occuredException;
			NativeMethods.setYear_( Handle, CachedSelectors.setYear_, out ___occuredException, sizeof( int ), year );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int week() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.week( Handle, CachedSelectors.week, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int weekday() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.weekday( Handle, CachedSelectors.weekday, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int weekdayOrdinal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.weekdayOrdinal( Handle, CachedSelectors.weekdayOrdinal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int year() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.year( Handle, CachedSelectors.year, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr calendar( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int day( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int era( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int hour( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int minute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int month( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int second( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCalendar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject calendar );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDay_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int day );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEra_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int era );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHour_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int hour );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int minute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMonth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int month );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSecond_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int second );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWeek_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int week );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWeekday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int weekday );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWeekdayOrdinal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int ordinal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setYear_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int year );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int week( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int weekday( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int weekdayOrdinal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int year( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector calendar = "calendar";
			public static readonly Selector day = "day";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector era = "era";
			public static readonly Selector hour = "hour";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector minute = "minute";
			public static readonly Selector month = "month";
			public static readonly Selector second = "second";
			public static readonly Selector setCalendar_ = "setCalendar:";
			public static readonly Selector setDay_ = "setDay:";
			public static readonly Selector setEra_ = "setEra:";
			public static readonly Selector setHour_ = "setHour:";
			public static readonly Selector setMinute_ = "setMinute:";
			public static readonly Selector setMonth_ = "setMonth:";
			public static readonly Selector setSecond_ = "setSecond:";
			public static readonly Selector setWeek_ = "setWeek:";
			public static readonly Selector setWeekday_ = "setWeekday:";
			public static readonly Selector setWeekdayOrdinal_ = "setWeekdayOrdinal:";
			public static readonly Selector setYear_ = "setYear:";
			public static readonly Selector week = "week";
			public static readonly Selector weekday = "weekday";
			public static readonly Selector weekdayOrdinal = "weekdayOrdinal";
			public static readonly Selector year = "year";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSFormatter ) )]
	public struct NSDateFormatter : IEquatable<NSDateFormatter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDateFormatter;
		public static implicit operator IntPtr( NSDateFormatter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDateFormatter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDateFormatter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDateFormatter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDateFormatter value1, NSDateFormatter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDateFormatter value1, NSDateFormatter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDateFormatter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDateFormatter alloc() {
			return new NSDateFormatter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSDateFormatterBehavior defaultFormatterBehavior() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultFormatterBehavior( ClassHandle, CachedSelectors.defaultFormatterBehavior, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSDateFormatterBehavior ) ___result;
		}
		unsafe public static void setDefaultFormatterBehavior_( NSDateFormatterBehavior behavior ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultFormatterBehavior_( ClassHandle, CachedSelectors.setDefaultFormatterBehavior_, out ___occuredException, sizeof( NSDateFormatterBehavior ), behavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool allowsNaturalLanguage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsNaturalLanguage( Handle, CachedSelectors.allowsNaturalLanguage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string AMSymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.AMSymbol( Handle, CachedSelectors.AMSymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSCalendar calendar() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.calendar( Handle, CachedSelectors.calendar, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCalendar( ___result );
		}
		unsafe public string dateFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFormat( Handle, CachedSelectors.dateFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDate dateFromString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.dateFromString_( Handle, CachedSelectors.dateFromString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSDateFormatterStyle dateStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateStyle( Handle, CachedSelectors.dateStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSDateFormatterStyle ) ___result;
		}
		unsafe public NSDate defaultDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultDate( Handle, CachedSelectors.defaultDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSArray eraSymbols() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.eraSymbols( Handle, CachedSelectors.eraSymbols, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSDateFormatterBehavior formatterBehavior() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formatterBehavior( Handle, CachedSelectors.formatterBehavior, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSDateFormatterBehavior ) ___result;
		}
		unsafe public bool generatesCalendarDates() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.generatesCalendarDates( Handle, CachedSelectors.generatesCalendarDates, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool getObjectValue_forString_range_error_( IntPtr value, string forString, _NSRange[] range, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedforString = Runtime.CreateStringProxy( forString );
			var ___result = NativeMethods.getObjectValue_forString_range_error_( Handle, CachedSelectors.getObjectValue_forString_range_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), value, ___wrappedforString, range, ref error );
			Runtime.ReleaseNativeObject( ___wrappedforString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSDateFormatter initWithDateFormat_allowNaturalLanguage_( string format, bool allowNaturalLanguage ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			var ___result = NativeMethods.initWithDateFormat_allowNaturalLanguage_( Handle, CachedSelectors.initWithDateFormat_allowNaturalLanguage_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappedformat, allowNaturalLanguage );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDateFormatter( ___result );
		}
		unsafe public bool isLenient() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLenient( Handle, CachedSelectors.isLenient, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSLocale locale() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.locale( Handle, CachedSelectors.locale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSLocale( ___result );
		}
		unsafe public NSArray monthSymbols() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.monthSymbols( Handle, CachedSelectors.monthSymbols, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public string PMSymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.PMSymbol( Handle, CachedSelectors.PMSymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void setAMSymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setAMSymbol_( Handle, CachedSelectors.setAMSymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCalendar_( NSCalendar calendar ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCalendar_( Handle, CachedSelectors.setCalendar_, out ___occuredException, sizeof( NSCalendar ), calendar );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDateFormat_( string format ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			NativeMethods.setDateFormat_( Handle, CachedSelectors.setDateFormat_, out ___occuredException, sizeof( IntPtr ), ___wrappedformat );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDateStyle_( NSDateFormatterStyle style ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDateStyle_( Handle, CachedSelectors.setDateStyle_, out ___occuredException, sizeof( NSDateFormatterStyle ), style );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultDate_( Handle, CachedSelectors.setDefaultDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEraSymbols_( NSArray symbols ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEraSymbols_( Handle, CachedSelectors.setEraSymbols_, out ___occuredException, sizeof( NSArray ), symbols );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFormatterBehavior_( NSDateFormatterBehavior behavior ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFormatterBehavior_( Handle, CachedSelectors.setFormatterBehavior_, out ___occuredException, sizeof( NSDateFormatterBehavior ), behavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGeneratesCalendarDates_( bool dates ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGeneratesCalendarDates_( Handle, CachedSelectors.setGeneratesCalendarDates_, out ___occuredException, sizeof( bool ), dates );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLenient_( bool lenient ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLenient_( Handle, CachedSelectors.setLenient_, out ___occuredException, sizeof( bool ), lenient );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLocale_( NSLocale locale ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLocale_( Handle, CachedSelectors.setLocale_, out ___occuredException, sizeof( NSLocale ), locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMonthSymbols_( NSArray symbols ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMonthSymbols_( Handle, CachedSelectors.setMonthSymbols_, out ___occuredException, sizeof( NSArray ), symbols );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPMSymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setPMSymbol_( Handle, CachedSelectors.setPMSymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShortMonthSymbols_( NSArray symbols ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShortMonthSymbols_( Handle, CachedSelectors.setShortMonthSymbols_, out ___occuredException, sizeof( NSArray ), symbols );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShortWeekdaySymbols_( NSArray symbols ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShortWeekdaySymbols_( Handle, CachedSelectors.setShortWeekdaySymbols_, out ___occuredException, sizeof( NSArray ), symbols );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTimeStyle_( NSDateFormatterStyle style ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTimeStyle_( Handle, CachedSelectors.setTimeStyle_, out ___occuredException, sizeof( NSDateFormatterStyle ), style );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTimeZone_( NSTimeZone zone ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTimeZone_( Handle, CachedSelectors.setTimeZone_, out ___occuredException, sizeof( NSTimeZone ), zone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTwoDigitStartDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTwoDigitStartDate_( Handle, CachedSelectors.setTwoDigitStartDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWeekdaySymbols_( NSArray symbols ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWeekdaySymbols_( Handle, CachedSelectors.setWeekdaySymbols_, out ___occuredException, sizeof( NSArray ), symbols );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray shortMonthSymbols() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shortMonthSymbols( Handle, CachedSelectors.shortMonthSymbols, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray shortWeekdaySymbols() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shortWeekdaySymbols( Handle, CachedSelectors.shortWeekdaySymbols, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public string stringFromDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringFromDate_( Handle, CachedSelectors.stringFromDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDateFormatterStyle timeStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeStyle( Handle, CachedSelectors.timeStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSDateFormatterStyle ) ___result;
		}
		unsafe public NSTimeZone timeZone() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeZone( Handle, CachedSelectors.timeZone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public NSDate twoDigitStartDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.twoDigitStartDate( Handle, CachedSelectors.twoDigitStartDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSArray weekdaySymbols() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.weekdaySymbols( Handle, CachedSelectors.weekdaySymbols, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool allowsNaturalLanguage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr AMSymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr calendar( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateFromString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int dateStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int defaultFormatterBehavior( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr eraSymbols( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int formatterBehavior( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool generatesCalendarDates( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool getObjectValue_forString_range_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value, IntPtr forString, _NSRange[] range, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDateFormat_allowNaturalLanguage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format, bool allowNaturalLanguage );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLenient( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr locale( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr monthSymbols( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr PMSymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAMSymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCalendar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCalendar calendar );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDateFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDateStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDateFormatterStyle style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultFormatterBehavior_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDateFormatterBehavior behavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEraSymbols_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray symbols );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFormatterBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDateFormatterBehavior behavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGeneratesCalendarDates_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool dates );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLenient_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool lenient );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLocale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSLocale locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMonthSymbols_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray symbols );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPMSymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShortMonthSymbols_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray symbols );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShortWeekdaySymbols_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray symbols );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTimeStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDateFormatterStyle style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTimeZone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSTimeZone zone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTwoDigitStartDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWeekdaySymbols_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray symbols );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr shortMonthSymbols( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr shortWeekdaySymbols( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringFromDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int timeStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timeZone( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr twoDigitStartDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr weekdaySymbols( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsNaturalLanguage = "allowsNaturalLanguage";
			public static readonly Selector AMSymbol = "AMSymbol";
			public static readonly Selector calendar = "calendar";
			public static readonly Selector dateFormat = "dateFormat";
			public static readonly Selector dateFromString_ = "dateFromString:";
			public static readonly Selector dateStyle = "dateStyle";
			public static readonly Selector defaultDate = "defaultDate";
			public static readonly Selector defaultFormatterBehavior = "defaultFormatterBehavior";
			public static readonly Selector eraSymbols = "eraSymbols";
			public static readonly Selector formatterBehavior = "formatterBehavior";
			public static readonly Selector generatesCalendarDates = "generatesCalendarDates";
			public static readonly Selector getObjectValue_forString_range_error_ = "getObjectValue:forString:range:error:";
			public static readonly Selector initWithDateFormat_allowNaturalLanguage_ = "initWithDateFormat:allowNaturalLanguage:";
			public static readonly Selector isLenient = "isLenient";
			public static readonly Selector locale = "locale";
			public static readonly Selector monthSymbols = "monthSymbols";
			public static readonly Selector PMSymbol = "PMSymbol";
			public static readonly Selector setAMSymbol_ = "setAMSymbol:";
			public static readonly Selector setCalendar_ = "setCalendar:";
			public static readonly Selector setDateFormat_ = "setDateFormat:";
			public static readonly Selector setDateStyle_ = "setDateStyle:";
			public static readonly Selector setDefaultDate_ = "setDefaultDate:";
			public static readonly Selector setDefaultFormatterBehavior_ = "setDefaultFormatterBehavior:";
			public static readonly Selector setEraSymbols_ = "setEraSymbols:";
			public static readonly Selector setFormatterBehavior_ = "setFormatterBehavior:";
			public static readonly Selector setGeneratesCalendarDates_ = "setGeneratesCalendarDates:";
			public static readonly Selector setLenient_ = "setLenient:";
			public static readonly Selector setLocale_ = "setLocale:";
			public static readonly Selector setMonthSymbols_ = "setMonthSymbols:";
			public static readonly Selector setPMSymbol_ = "setPMSymbol:";
			public static readonly Selector setShortMonthSymbols_ = "setShortMonthSymbols:";
			public static readonly Selector setShortWeekdaySymbols_ = "setShortWeekdaySymbols:";
			public static readonly Selector setTimeStyle_ = "setTimeStyle:";
			public static readonly Selector setTimeZone_ = "setTimeZone:";
			public static readonly Selector setTwoDigitStartDate_ = "setTwoDigitStartDate:";
			public static readonly Selector setWeekdaySymbols_ = "setWeekdaySymbols:";
			public static readonly Selector shortMonthSymbols = "shortMonthSymbols";
			public static readonly Selector shortWeekdaySymbols = "shortWeekdaySymbols";
			public static readonly Selector stringFromDate_ = "stringFromDate:";
			public static readonly Selector timeStyle = "timeStyle";
			public static readonly Selector timeZone = "timeZone";
			public static readonly Selector twoDigitStartDate = "twoDigitStartDate";
			public static readonly Selector weekdaySymbols = "weekdaySymbols";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSString ) )]
	public struct NSDebugString : IEquatable<NSDebugString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDebugString;
		public static implicit operator IntPtr( NSDebugString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDebugString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDebugString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDebugString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDebugString value1, NSDebugString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDebugString value1, NSDebugString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDebugString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDebugString alloc() {
			return new NSDebugString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSNumber ) )]
	public struct NSDecimalNumber : IEquatable<NSDecimalNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDecimalNumber;
		public static implicit operator IntPtr( NSDecimalNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDecimalNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDecimalNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDecimalNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDecimalNumber value1, NSDecimalNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDecimalNumber value1, NSDecimalNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDecimalNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDecimalNumber alloc() {
			return new NSDecimalNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSDecimalNumber decimalNumberWithDecimal_( NSDecimal @decimal ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberWithDecimal_( ClassHandle, CachedSelectors.decimalNumberWithDecimal_, out ___occuredException, sizeof( NSDecimal ), @decimal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public static NSDecimalNumber decimalNumberWithMantissa_exponent_isNegative_( ulong mantissa, short exponent, bool isNegative ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberWithMantissa_exponent_isNegative_( ClassHandle, CachedSelectors.decimalNumberWithMantissa_exponent_isNegative_, out ___occuredException, sizeof( ulong ) + sizeof( short ) + sizeof( bool ), mantissa, exponent, isNegative );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public static NSDecimalNumber decimalNumberWithString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.decimalNumberWithString_( ClassHandle, CachedSelectors.decimalNumberWithString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public static NSDecimalNumber decimalNumberWithString_locale_( string @string, NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.decimalNumberWithString_locale_( ClassHandle, CachedSelectors.decimalNumberWithString_locale_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedstring, locale );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultBehavior() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultBehavior( ClassHandle, CachedSelectors.defaultBehavior, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSDecimalNumber maximumDecimalNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maximumDecimalNumber( ClassHandle, CachedSelectors.maximumDecimalNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public static NSDecimalNumber minimumDecimalNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimumDecimalNumber( ClassHandle, CachedSelectors.minimumDecimalNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public static NSDecimalNumber notANumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notANumber( ClassHandle, CachedSelectors.notANumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public static NSDecimalNumber one() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.one( ClassHandle, CachedSelectors.one, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public static void setDefaultBehavior_( NObjective.RuntimeObject behavior ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultBehavior_( ClassHandle, CachedSelectors.setDefaultBehavior_, out ___occuredException, sizeof( NObjective.RuntimeObject ), behavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NSDecimalNumber zero() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.zero( ClassHandle, CachedSelectors.zero, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByAdding_( NSDecimalNumber adding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByAdding_( Handle, CachedSelectors.decimalNumberByAdding_, out ___occuredException, sizeof( NSDecimalNumber ), adding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByAdding_withBehavior_( NSDecimalNumber adding, NObjective.RuntimeObject withBehavior ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByAdding_withBehavior_( Handle, CachedSelectors.decimalNumberByAdding_withBehavior_, out ___occuredException, sizeof( NSDecimalNumber ) + sizeof( NObjective.RuntimeObject ), adding, withBehavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByDividingBy_( NSDecimalNumber @by ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByDividingBy_( Handle, CachedSelectors.decimalNumberByDividingBy_, out ___occuredException, sizeof( NSDecimalNumber ), @by );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByDividingBy_withBehavior_( NSDecimalNumber @by, NObjective.RuntimeObject withBehavior ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByDividingBy_withBehavior_( Handle, CachedSelectors.decimalNumberByDividingBy_withBehavior_, out ___occuredException, sizeof( NSDecimalNumber ) + sizeof( NObjective.RuntimeObject ), @by, withBehavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByMultiplyingBy_( NSDecimalNumber @by ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByMultiplyingBy_( Handle, CachedSelectors.decimalNumberByMultiplyingBy_, out ___occuredException, sizeof( NSDecimalNumber ), @by );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByMultiplyingBy_withBehavior_( NSDecimalNumber @by, NObjective.RuntimeObject withBehavior ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByMultiplyingBy_withBehavior_( Handle, CachedSelectors.decimalNumberByMultiplyingBy_withBehavior_, out ___occuredException, sizeof( NSDecimalNumber ) + sizeof( NObjective.RuntimeObject ), @by, withBehavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByMultiplyingByPowerOf10_( short of10 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByMultiplyingByPowerOf10_( Handle, CachedSelectors.decimalNumberByMultiplyingByPowerOf10_, out ___occuredException, sizeof( short ), of10 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByMultiplyingByPowerOf10_withBehavior_( short of10, NObjective.RuntimeObject withBehavior ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByMultiplyingByPowerOf10_withBehavior_( Handle, CachedSelectors.decimalNumberByMultiplyingByPowerOf10_withBehavior_, out ___occuredException, sizeof( short ) + sizeof( NObjective.RuntimeObject ), of10, withBehavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByRaisingToPower_( uint power ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByRaisingToPower_( Handle, CachedSelectors.decimalNumberByRaisingToPower_, out ___occuredException, sizeof( uint ), power );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByRaisingToPower_withBehavior_( uint power, NObjective.RuntimeObject withBehavior ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByRaisingToPower_withBehavior_( Handle, CachedSelectors.decimalNumberByRaisingToPower_withBehavior_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), power, withBehavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberByRoundingAccordingToBehavior_( NObjective.RuntimeObject behavior ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberByRoundingAccordingToBehavior_( Handle, CachedSelectors.decimalNumberByRoundingAccordingToBehavior_, out ___occuredException, sizeof( NObjective.RuntimeObject ), behavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NObjective.RuntimeObject decimalNumberBySubstracting_( NObjective.RuntimeObject substracting ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberBySubstracting_( Handle, CachedSelectors.decimalNumberBySubstracting_, out ___occuredException, sizeof( NObjective.RuntimeObject ), substracting );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject decimalNumberBySubstracting_withBehavior_( NObjective.RuntimeObject substracting, NObjective.RuntimeObject withBehavior ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberBySubstracting_withBehavior_( Handle, CachedSelectors.decimalNumberBySubstracting_withBehavior_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), substracting, withBehavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberBySubtracting_( NSDecimalNumber subtracting ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberBySubtracting_( Handle, CachedSelectors.decimalNumberBySubtracting_, out ___occuredException, sizeof( NSDecimalNumber ), subtracting );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber decimalNumberBySubtracting_withBehavior_( NSDecimalNumber subtracting, NObjective.RuntimeObject withBehavior ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberBySubtracting_withBehavior_( Handle, CachedSelectors.decimalNumberBySubtracting_withBehavior_, out ___occuredException, sizeof( NSDecimalNumber ) + sizeof( NObjective.RuntimeObject ), subtracting, withBehavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber initWithDecimal_( NSDecimal @decimal ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDecimal_( Handle, CachedSelectors.initWithDecimal_, out ___occuredException, sizeof( NSDecimal ), @decimal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber initWithMantissa_exponent_isNegative_( ulong mantissa, short exponent, bool isNegative ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMantissa_exponent_isNegative_( Handle, CachedSelectors.initWithMantissa_exponent_isNegative_, out ___occuredException, sizeof( ulong ) + sizeof( short ) + sizeof( bool ), mantissa, exponent, isNegative );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber initWithString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.initWithString_( Handle, CachedSelectors.initWithString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		unsafe public NSDecimalNumber initWithString_locale_( string @string, NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.initWithString_locale_( Handle, CachedSelectors.initWithString_locale_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedstring, locale );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumber( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByAdding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimalNumber adding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByAdding_withBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimalNumber adding, NObjective.RuntimeObject withBehavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByDividingBy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimalNumber @by );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByDividingBy_withBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimalNumber @by, NObjective.RuntimeObject withBehavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByMultiplyingBy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimalNumber @by );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByMultiplyingBy_withBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimalNumber @by, NObjective.RuntimeObject withBehavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByMultiplyingByPowerOf10_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short of10 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByMultiplyingByPowerOf10_withBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short of10, NObjective.RuntimeObject withBehavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByRaisingToPower_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint power );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByRaisingToPower_withBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint power, NObjective.RuntimeObject withBehavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberByRoundingAccordingToBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject behavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberBySubstracting_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject substracting );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberBySubstracting_withBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject substracting, NObjective.RuntimeObject withBehavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberBySubtracting_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimalNumber subtracting );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberBySubtracting_withBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimalNumber subtracting, NObjective.RuntimeObject withBehavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberWithDecimal_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimal @decimal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberWithMantissa_exponent_isNegative_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ulong mantissa, short exponent, bool isNegative );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberWithString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberWithString_locale_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultBehavior( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDecimal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimal @decimal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithMantissa_exponent_isNegative_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ulong mantissa, short exponent, bool isNegative );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_locale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr maximumDecimalNumber( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr minimumDecimalNumber( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notANumber( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr one( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultBehavior_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject behavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr zero( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector decimalNumberByAdding_ = "decimalNumberByAdding:";
			public static readonly Selector decimalNumberByAdding_withBehavior_ = "decimalNumberByAdding:withBehavior:";
			public static readonly Selector decimalNumberByDividingBy_ = "decimalNumberByDividingBy:";
			public static readonly Selector decimalNumberByDividingBy_withBehavior_ = "decimalNumberByDividingBy:withBehavior:";
			public static readonly Selector decimalNumberByMultiplyingBy_ = "decimalNumberByMultiplyingBy:";
			public static readonly Selector decimalNumberByMultiplyingBy_withBehavior_ = "decimalNumberByMultiplyingBy:withBehavior:";
			public static readonly Selector decimalNumberByMultiplyingByPowerOf10_ = "decimalNumberByMultiplyingByPowerOf10:";
			public static readonly Selector decimalNumberByMultiplyingByPowerOf10_withBehavior_ = "decimalNumberByMultiplyingByPowerOf10:withBehavior:";
			public static readonly Selector decimalNumberByRaisingToPower_ = "decimalNumberByRaisingToPower:";
			public static readonly Selector decimalNumberByRaisingToPower_withBehavior_ = "decimalNumberByRaisingToPower:withBehavior:";
			public static readonly Selector decimalNumberByRoundingAccordingToBehavior_ = "decimalNumberByRoundingAccordingToBehavior:";
			public static readonly Selector decimalNumberBySubstracting_ = "decimalNumberBySubstracting:";
			public static readonly Selector decimalNumberBySubstracting_withBehavior_ = "decimalNumberBySubstracting:withBehavior:";
			public static readonly Selector decimalNumberBySubtracting_ = "decimalNumberBySubtracting:";
			public static readonly Selector decimalNumberBySubtracting_withBehavior_ = "decimalNumberBySubtracting:withBehavior:";
			public static readonly Selector decimalNumberWithDecimal_ = "decimalNumberWithDecimal:";
			public static readonly Selector decimalNumberWithMantissa_exponent_isNegative_ = "decimalNumberWithMantissa:exponent:isNegative:";
			public static readonly Selector decimalNumberWithString_ = "decimalNumberWithString:";
			public static readonly Selector decimalNumberWithString_locale_ = "decimalNumberWithString:locale:";
			public static readonly Selector defaultBehavior = "defaultBehavior";
			public static readonly Selector initWithDecimal_ = "initWithDecimal:";
			public static readonly Selector initWithMantissa_exponent_isNegative_ = "initWithMantissa:exponent:isNegative:";
			public static readonly Selector initWithString_ = "initWithString:";
			public static readonly Selector initWithString_locale_ = "initWithString:locale:";
			public static readonly Selector maximumDecimalNumber = "maximumDecimalNumber";
			public static readonly Selector minimumDecimalNumber = "minimumDecimalNumber";
			public static readonly Selector notANumber = "notANumber";
			public static readonly Selector one = "one";
			public static readonly Selector setDefaultBehavior_ = "setDefaultBehavior:";
			public static readonly Selector zero = "zero";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSDecimalNumberHandler : IEquatable<NSDecimalNumberHandler> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDecimalNumberHandler;
		public static implicit operator IntPtr( NSDecimalNumberHandler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDecimalNumberHandler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDecimalNumberHandler?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDecimalNumberHandler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDecimalNumberHandler value1, NSDecimalNumberHandler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDecimalNumberHandler value1, NSDecimalNumberHandler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDecimalNumberHandler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDecimalNumberHandler alloc() {
			return new NSDecimalNumberHandler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_( NSRoundingMode mode, short scale, bool raiseOnExactness, bool raiseOnOverflow, bool raiseOnUnderflow, bool raiseOnDivideByZero ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_( ClassHandle, CachedSelectors.decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_, out ___occuredException, sizeof( NSRoundingMode ) + sizeof( short ) + sizeof( bool ) + sizeof( bool ) + sizeof( bool ) + sizeof( bool ), mode, scale, raiseOnExactness, raiseOnOverflow, raiseOnUnderflow, raiseOnDivideByZero
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberHandler( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultDecimalNumberHandler() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultDecimalNumberHandler( ClassHandle, CachedSelectors.defaultDecimalNumberHandler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject exceptionDuringOperation_error_leftOperand_rightOperand_( NObjective.Selector operation, int error, NObjective.RuntimeObject leftOperand, NObjective.RuntimeObject rightOperand ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.exceptionDuringOperation_error_leftOperand_rightOperand_( Handle, CachedSelectors.exceptionDuringOperation_error_leftOperand_rightOperand_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), operation, error, leftOperand, rightOperand );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDecimalNumberHandler initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberHandler( ___result );
		}
		unsafe public NSDecimalNumberHandler initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_( NSRoundingMode mode, short scale, bool raiseOnExactness, bool raiseOnOverflow, bool raiseOnUnderflow, bool raiseOnDivideByZero ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_( Handle, CachedSelectors.initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_, out ___occuredException, sizeof( NSRoundingMode ) + sizeof( short ) + sizeof( bool ) + sizeof( bool ) + sizeof( bool ) + sizeof( bool ), mode, scale, raiseOnExactness, raiseOnOverflow, raiseOnUnderflow, raiseOnDivideByZero
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberHandler( ___result );
		}
		unsafe public int roundingMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.roundingMode( Handle, CachedSelectors.roundingMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public short scale() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scale( Handle, CachedSelectors.scale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRoundingMode mode, short scale, bool raiseOnExactness, bool raiseOnOverflow, bool raiseOnUnderflow, bool raiseOnDivideByZero
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultDecimalNumberHandler( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr exceptionDuringOperation_error_leftOperand_rightOperand_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector operation, int error, NObjective.RuntimeObject leftOperand, NObjective.RuntimeObject rightOperand );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRoundingMode mode, short scale, bool raiseOnExactness, bool raiseOnOverflow, bool raiseOnUnderflow, bool raiseOnDivideByZero
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int roundingMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short scale( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_ = "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:";
			public static readonly Selector defaultDecimalNumberHandler = "defaultDecimalNumberHandler";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector exceptionDuringOperation_error_leftOperand_rightOperand_ = "exceptionDuringOperation:error:leftOperand:rightOperand:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_ = "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:";
			public static readonly Selector roundingMode = "roundingMode";
			public static readonly Selector scale = "scale";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSDecimalNumberPlaceholder : IEquatable<NSDecimalNumberPlaceholder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDecimalNumberPlaceholder;
		public static implicit operator IntPtr( NSDecimalNumberPlaceholder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDecimalNumberPlaceholder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDecimalNumberPlaceholder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDecimalNumberPlaceholder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDecimalNumberPlaceholder value1, NSDecimalNumberPlaceholder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDecimalNumberPlaceholder value1, NSDecimalNumberPlaceholder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDecimalNumberPlaceholder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDecimalNumberPlaceholder alloc() {
			return new NSDecimalNumberPlaceholder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSDecimalNumberPlaceholder initWithBool_( char @bool ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBool_( Handle, CachedSelectors.initWithBool_, out ___occuredException, sizeof( char ), @bool );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithChar_( char @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithChar_( Handle, CachedSelectors.initWithChar_, out ___occuredException, sizeof( char ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithDouble_( double @double ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDouble_( Handle, CachedSelectors.initWithDouble_, out ___occuredException, sizeof( double ), @double );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithFloat_( float @float ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithFloat_( Handle, CachedSelectors.initWithFloat_, out ___occuredException, sizeof( float ), @float );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithInt_( int @int ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInt_( Handle, CachedSelectors.initWithInt_, out ___occuredException, sizeof( int ), @int );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithLong_( int @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLong_( Handle, CachedSelectors.initWithLong_, out ___occuredException, sizeof( int ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithLongLong_( long @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLongLong_( Handle, CachedSelectors.initWithLongLong_, out ___occuredException, sizeof( long ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithMantissa_exponent_isNegative_( ulong mantissa, short exponent, char isNegative ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMantissa_exponent_isNegative_( Handle, CachedSelectors.initWithMantissa_exponent_isNegative_, out ___occuredException, sizeof( ulong ) + sizeof( short ) + sizeof( char ), mantissa, exponent, isNegative );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithShort_( short @short ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithShort_( Handle, CachedSelectors.initWithShort_, out ___occuredException, sizeof( short ), @short );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_( Handle, CachedSelectors.initWithString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithString_locale_( NObjective.RuntimeObject @string, NObjective.RuntimeObject locale ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_locale_( Handle, CachedSelectors.initWithString_locale_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithUnsignedChar_( char @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUnsignedChar_( Handle, CachedSelectors.initWithUnsignedChar_, out ___occuredException, sizeof( char ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithUnsignedInt_( uint @int ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUnsignedInt_( Handle, CachedSelectors.initWithUnsignedInt_, out ___occuredException, sizeof( uint ), @int );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithUnsignedLong_( uint @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUnsignedLong_( Handle, CachedSelectors.initWithUnsignedLong_, out ___occuredException, sizeof( uint ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithUnsignedLongLong_( ulong @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUnsignedLongLong_( Handle, CachedSelectors.initWithUnsignedLongLong_, out ___occuredException, sizeof( ulong ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		unsafe public NSDecimalNumberPlaceholder initWithUnsignedShort_( ushort @short ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUnsignedShort_( Handle, CachedSelectors.initWithUnsignedShort_, out ___occuredException, sizeof( ushort ), @short );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberPlaceholder( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBool_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @bool );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithChar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDouble_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double @double );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithFloat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @float );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithInt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @int );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLong_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLongLong_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, long @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithMantissa_exponent_isNegative_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ulong mantissa, short exponent, char isNegative );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithShort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short @short );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_locale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUnsignedChar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUnsignedInt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @int );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUnsignedLong_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUnsignedLongLong_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ulong @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUnsignedShort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort @short );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithBool_ = "initWithBool:";
			public static readonly Selector initWithChar_ = "initWithChar:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithDouble_ = "initWithDouble:";
			public static readonly Selector initWithFloat_ = "initWithFloat:";
			public static readonly Selector initWithInt_ = "initWithInt:";
			public static readonly Selector initWithLong_ = "initWithLong:";
			public static readonly Selector initWithLongLong_ = "initWithLongLong:";
			public static readonly Selector initWithMantissa_exponent_isNegative_ = "initWithMantissa:exponent:isNegative:";
			public static readonly Selector initWithShort_ = "initWithShort:";
			public static readonly Selector initWithString_ = "initWithString:";
			public static readonly Selector initWithString_locale_ = "initWithString:locale:";
			public static readonly Selector initWithUnsignedChar_ = "initWithUnsignedChar:";
			public static readonly Selector initWithUnsignedInt_ = "initWithUnsignedInt:";
			public static readonly Selector initWithUnsignedLong_ = "initWithUnsignedLong:";
			public static readonly Selector initWithUnsignedLongLong_ = "initWithUnsignedLongLong:";
			public static readonly Selector initWithUnsignedShort_ = "initWithUnsignedShort:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSDeflateDecoder : IEquatable<NSDeflateDecoder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDeflateDecoder;
		public static implicit operator IntPtr( NSDeflateDecoder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDeflateDecoder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDeflateDecoder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDeflateDecoder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDeflateDecoder value1, NSDeflateDecoder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDeflateDecoder value1, NSDeflateDecoder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDeflateDecoder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDeflateDecoder alloc() {
			return new NSDeflateDecoder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject decodeData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeData_( Handle, CachedSelectors.decodeData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isFinishedDecoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFinishedDecoding( Handle, CachedSelectors.isFinishedDecoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decodeData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isFinishedDecoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector decodeData_ = "decodeData:";
			public static readonly Selector isFinishedDecoding = "isFinishedDecoding";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCommand ) )]
	public struct NSDeleteCommand : IEquatable<NSDeleteCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDeleteCommand;
		public static implicit operator IntPtr( NSDeleteCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDeleteCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDeleteCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDeleteCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDeleteCommand value1, NSDeleteCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDeleteCommand value1, NSDeleteCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDeleteCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDeleteCommand alloc() {
			return new NSDeleteCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptObjectSpecifier keySpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keySpecifier( Handle, CachedSelectors.keySpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keySpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector keySpecifier = "keySpecifier";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSDeserializer : IEquatable<NSDeserializer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDeserializer;
		public static implicit operator IntPtr( NSDeserializer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDeserializer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDeserializer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDeserializer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDeserializer value1, NSDeserializer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDeserializer value1, NSDeserializer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDeserializer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDeserializer alloc() {
			return new NSDeserializer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject deserializePropertyListFromData_atCursor_mutableContainers_( NObjective.RuntimeObject data, System.IntPtr atCursor, char mutableContainers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deserializePropertyListFromData_atCursor_mutableContainers_( ClassHandle, CachedSelectors.deserializePropertyListFromData_atCursor_mutableContainers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( char ), data, atCursor, mutableContainers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject deserializePropertyListFromData_mutableContainers_( NObjective.RuntimeObject data, char mutableContainers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deserializePropertyListFromData_mutableContainers_( ClassHandle, CachedSelectors.deserializePropertyListFromData_mutableContainers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), data, mutableContainers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject deserializePropertyListLazilyFromData_atCursor_length_mutableContainers_( NObjective.RuntimeObject data, System.IntPtr atCursor, uint length, char mutableContainers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deserializePropertyListLazilyFromData_atCursor_length_mutableContainers_( ClassHandle, CachedSelectors.deserializePropertyListLazilyFromData_atCursor_length_mutableContainers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( char ), data, atCursor, length, mutableContainers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr deserializePropertyListFromData_atCursor_mutableContainers_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, System.IntPtr atCursor, char mutableContainers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr deserializePropertyListFromData_mutableContainers_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, char mutableContainers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr deserializePropertyListLazilyFromData_atCursor_length_mutableContainers_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, System.IntPtr atCursor, uint length, char mutableContainers );
		}
		static internal class CachedSelectors {
			public static readonly Selector deserializePropertyListFromData_atCursor_mutableContainers_ = "deserializePropertyListFromData:atCursor:mutableContainers:";
			public static readonly Selector deserializePropertyListFromData_mutableContainers_ = "deserializePropertyListFromData:mutableContainers:";
			public static readonly Selector deserializePropertyListLazilyFromData_atCursor_length_mutableContainers_ = "deserializePropertyListLazilyFromData:atCursor:length:mutableContainers:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSDictionary : IEquatable<NSDictionary> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDictionary;
		public static implicit operator IntPtr( NSDictionary value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDictionary value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDictionary?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDictionary value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDictionary value1, NSDictionary value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDictionary value1, NSDictionary value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDictionary( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDictionary alloc() {
			return new NSDictionary( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject dictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionary( ClassHandle, CachedSelectors.dictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSDictionary dictionaryWithContentsOfFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.dictionaryWithContentsOfFile_( ClassHandle, CachedSelectors.dictionaryWithContentsOfFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public static NSDictionary dictionaryWithContentsOfURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryWithContentsOfURL_( ClassHandle, CachedSelectors.dictionaryWithContentsOfURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public static NSDictionary dictionaryWithDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryWithDictionary_( ClassHandle, CachedSelectors.dictionaryWithDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public static NSDictionary dictionaryWithObject_forKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryWithObject_forKey_( ClassHandle, CachedSelectors.dictionaryWithObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public static NSDictionary dictionaryWithObjects_forKeys_( NSArray objects, NSArray forKeys ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryWithObjects_forKeys_( ClassHandle, CachedSelectors.dictionaryWithObjects_forKeys_, out ___occuredException, sizeof( NSArray ) + sizeof( NSArray ), objects, forKeys );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public static NSDictionary dictionaryWithObjects_forKeys_count_( IntPtr objects, IntPtr forKeys, uint count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryWithObjects_forKeys_count_( ClassHandle, CachedSelectors.dictionaryWithObjects_forKeys_count_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( uint ), objects, forKeys, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		public static NSDictionary dictionaryWithObjectsAndKeys_( NObjective.RuntimeObject keys ) {
			return new NSDictionary( ClassHandle.InvokeIntPtrFast( CachedSelectors.dictionaryWithObjectsAndKeys_, CachedEncodings.__6F587D11, keys ) );
		}
		unsafe public NSArray allKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allKeys( Handle, CachedSelectors.allKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray allKeysForObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allKeysForObject_( Handle, CachedSelectors.allKeysForObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray allValues() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allValues( Handle, CachedSelectors.allValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public char containsKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsKey_( Handle, CachedSelectors.containsKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char containsObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsObject_( Handle, CachedSelectors.containsObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint countForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countForKey_( Handle, CachedSelectors.countForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint countForObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countForObject_( Handle, CachedSelectors.countForObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string descriptionInStringsFileFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptionInStringsFileFormat( Handle, CachedSelectors.descriptionInStringsFileFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string descriptionWithLocale_( NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptionWithLocale_( Handle, CachedSelectors.descriptionWithLocale_, out ___occuredException, sizeof( NSDictionary ), locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string descriptionWithLocale_indent_( NSDictionary locale, uint indent ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptionWithLocale_indent_( Handle, CachedSelectors.descriptionWithLocale_indent_, out ___occuredException, sizeof( NSDictionary ) + sizeof( uint ), locale, indent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSDate fileCreationDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileCreationDate( Handle, CachedSelectors.fileCreationDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public bool fileExtensionHidden() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileExtensionHidden( Handle, CachedSelectors.fileExtensionHidden, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSNumber fileGroupOwnerAccountID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileGroupOwnerAccountID( Handle, CachedSelectors.fileGroupOwnerAccountID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public string fileGroupOwnerAccountName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileGroupOwnerAccountName( Handle, CachedSelectors.fileGroupOwnerAccountName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint fileGroupOwnerAccountNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileGroupOwnerAccountNumber( Handle, CachedSelectors.fileGroupOwnerAccountNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint fileHFSCreatorCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileHFSCreatorCode( Handle, CachedSelectors.fileHFSCreatorCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint fileHFSTypeCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileHFSTypeCode( Handle, CachedSelectors.fileHFSTypeCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public bool fileIsAppendOnly() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileIsAppendOnly( Handle, CachedSelectors.fileIsAppendOnly, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool fileIsImmutable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileIsImmutable( Handle, CachedSelectors.fileIsImmutable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSDate fileModificationDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileModificationDate( Handle, CachedSelectors.fileModificationDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSNumber fileOwnerAccountID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileOwnerAccountID( Handle, CachedSelectors.fileOwnerAccountID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public string fileOwnerAccountName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileOwnerAccountName( Handle, CachedSelectors.fileOwnerAccountName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint fileOwnerAccountNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileOwnerAccountNumber( Handle, CachedSelectors.fileOwnerAccountNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint filePosixPermissions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filePosixPermissions( Handle, CachedSelectors.filePosixPermissions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public ulong fileSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileSize( Handle, CachedSelectors.fileSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint fileSystemFileNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileSystemFileNumber( Handle, CachedSelectors.fileSystemFileNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint fileSystemNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileSystemNumber( Handle, CachedSelectors.fileSystemNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string fileType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileType( Handle, CachedSelectors.fileType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void getKeys_( System.IntPtr keys ) {
			RuntimeObject ___occuredException;
			NativeMethods.getKeys_( Handle, CachedSelectors.getKeys_, out ___occuredException, sizeof( System.IntPtr ), keys );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getObjects_( System.IntPtr objects ) {
			RuntimeObject ___occuredException;
			NativeMethods.getObjects_( Handle, CachedSelectors.getObjects_, out ___occuredException, sizeof( System.IntPtr ), objects );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getObjects_andKeys_( System.IntPtr objects, System.IntPtr andKeys ) {
			RuntimeObject ___occuredException;
			NativeMethods.getObjects_andKeys_( Handle, CachedSelectors.getObjects_andKeys_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ), objects, andKeys );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSDictionary initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary initWithContentsOfFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.initWithContentsOfFile_( Handle, CachedSelectors.initWithContentsOfFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary initWithContentsOfURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_( Handle, CachedSelectors.initWithContentsOfURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary initWithDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDictionary_( Handle, CachedSelectors.initWithDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary initWithDictionary_copyItems_( NSDictionary dictionary, bool copyItems ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDictionary_copyItems_( Handle, CachedSelectors.initWithDictionary_copyItems_, out ___occuredException, sizeof( NSDictionary ) + sizeof( bool ), dictionary, copyItems );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary initWithObjects_forKeys_( NSArray objects, NSArray forKeys ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObjects_forKeys_( Handle, CachedSelectors.initWithObjects_forKeys_, out ___occuredException, sizeof( NSArray ) + sizeof( NSArray ), objects, forKeys );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary initWithObjects_forKeys_count_( IntPtr objects, IntPtr forKeys, uint count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObjects_forKeys_count_( Handle, CachedSelectors.initWithObjects_forKeys_count_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( uint ), objects, forKeys, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary initWithObjects_ex_forKeys_count_( System.IntPtr objects_ex, System.IntPtr forKeys, uint count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObjects_ex_forKeys_count_( Handle, CachedSelectors.initWithObjects_ex_forKeys_count_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( uint ), objects_ex, forKeys, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		public NSDictionary initWithObjectsAndKeys_( NObjective.RuntimeObject keys ) {
			return new NSDictionary( Handle.InvokeIntPtrFast( CachedSelectors.initWithObjectsAndKeys_, CachedEncodings.__6F587D11, keys ) );
		}
		unsafe public NObjective.RuntimeObject invertedDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.invertedDictionary( Handle, CachedSelectors.invertedDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isEqualToDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToDictionary_( Handle, CachedSelectors.isEqualToDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSEnumerator keyEnumerator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyEnumerator( Handle, CachedSelectors.keyEnumerator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSEnumerator( ___result );
		}
		unsafe public NSArray keysSortedByValueUsingSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keysSortedByValueUsingSelector_( Handle, CachedSelectors.keysSortedByValueUsingSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSEnumerator objectEnumerator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectEnumerator( Handle, CachedSelectors.objectEnumerator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSEnumerator( ___result );
		}
		unsafe public NObjective.RuntimeObject objectForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectForKey_( Handle, CachedSelectors.objectForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSArray objectsForKeys_notFoundMarker_( NSArray keys, NObjective.RuntimeObject notFoundMarker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectsForKeys_notFoundMarker_( Handle, CachedSelectors.objectsForKeys_notFoundMarker_, out ___occuredException, sizeof( NSArray ) + sizeof( NObjective.RuntimeObject ), keys, notFoundMarker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public bool writeToFile_atomically_( string file, bool atomically ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.writeToFile_atomically_( Handle, CachedSelectors.writeToFile_atomically_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappedfile, atomically );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool writeToURL_atomically_( NSURL url, bool atomically ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeToURL_atomically_( Handle, CachedSelectors.writeToURL_atomically_, out ___occuredException, sizeof( NSURL ) + sizeof( bool ), url, atomically );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allKeysForObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint countForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint countForObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionInStringsFileFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionWithLocale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionWithLocale_indent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary locale, uint indent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionary( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryWithContentsOfFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryWithContentsOfURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryWithDictionary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryWithObject_forKey_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryWithObjects_forKeys_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray objects, NSArray forKeys );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryWithObjects_forKeys_count_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr objects, IntPtr forKeys, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileCreationDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool fileExtensionHidden( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileGroupOwnerAccountID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileGroupOwnerAccountName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fileGroupOwnerAccountNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fileHFSCreatorCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fileHFSTypeCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool fileIsAppendOnly( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool fileIsImmutable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileModificationDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileOwnerAccountID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileOwnerAccountName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fileOwnerAccountNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint filePosixPermissions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ulong fileSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fileSystemFileNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fileSystemNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getKeys_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr keys );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getObjects_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr objects );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getObjects_andKeys_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr objects, System.IntPtr andKeys );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDictionary_copyItems_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary, bool copyItems );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObjects_ex_forKeys_count_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr objects_ex, System.IntPtr forKeys, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObjects_forKeys_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray objects, NSArray forKeys );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObjects_forKeys_count_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr objects, IntPtr forKeys, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr invertedDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyEnumerator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keysSortedByValueUsingSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectEnumerator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectsForKeys_notFoundMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray keys, NObjective.RuntimeObject notFoundMarker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToFile_atomically_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, bool atomically );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToURL_atomically_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, bool atomically );
		}
		static internal class CachedEncodings {
			public static readonly RuntimeMethodEncoding __6F587D11 = "@12@0:4@8";
		}
		static internal class CachedSelectors {
			public static readonly Selector allKeys = "allKeys";
			public static readonly Selector allKeysForObject_ = "allKeysForObject:";
			public static readonly Selector allValues = "allValues";
			public static readonly Selector containsKey_ = "containsKey:";
			public static readonly Selector containsObject_ = "containsObject:";
			public static readonly Selector count = "count";
			public static readonly Selector countForKey_ = "countForKey:";
			public static readonly Selector countForObject_ = "countForObject:";
			public static readonly Selector descriptionInStringsFileFormat = "descriptionInStringsFileFormat";
			public static readonly Selector descriptionWithLocale_ = "descriptionWithLocale:";
			public static readonly Selector descriptionWithLocale_indent_ = "descriptionWithLocale:indent:";
			public static readonly Selector dictionary = "dictionary";
			public static readonly Selector dictionaryWithContentsOfFile_ = "dictionaryWithContentsOfFile:";
			public static readonly Selector dictionaryWithContentsOfURL_ = "dictionaryWithContentsOfURL:";
			public static readonly Selector dictionaryWithDictionary_ = "dictionaryWithDictionary:";
			public static readonly Selector dictionaryWithObject_forKey_ = "dictionaryWithObject:forKey:";
			public static readonly Selector dictionaryWithObjects_forKeys_ = "dictionaryWithObjects:forKeys:";
			public static readonly Selector dictionaryWithObjects_forKeys_count_ = "dictionaryWithObjects:forKeys:count:";
			public static readonly Selector dictionaryWithObjectsAndKeys_ = "dictionaryWithObjectsAndKeys:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector fileCreationDate = "fileCreationDate";
			public static readonly Selector fileExtensionHidden = "fileExtensionHidden";
			public static readonly Selector fileGroupOwnerAccountID = "fileGroupOwnerAccountID";
			public static readonly Selector fileGroupOwnerAccountName = "fileGroupOwnerAccountName";
			public static readonly Selector fileGroupOwnerAccountNumber = "fileGroupOwnerAccountNumber";
			public static readonly Selector fileHFSCreatorCode = "fileHFSCreatorCode";
			public static readonly Selector fileHFSTypeCode = "fileHFSTypeCode";
			public static readonly Selector fileIsAppendOnly = "fileIsAppendOnly";
			public static readonly Selector fileIsImmutable = "fileIsImmutable";
			public static readonly Selector fileModificationDate = "fileModificationDate";
			public static readonly Selector fileOwnerAccountID = "fileOwnerAccountID";
			public static readonly Selector fileOwnerAccountName = "fileOwnerAccountName";
			public static readonly Selector fileOwnerAccountNumber = "fileOwnerAccountNumber";
			public static readonly Selector filePosixPermissions = "filePosixPermissions";
			public static readonly Selector fileSize = "fileSize";
			public static readonly Selector fileSystemFileNumber = "fileSystemFileNumber";
			public static readonly Selector fileSystemNumber = "fileSystemNumber";
			public static readonly Selector fileType = "fileType";
			public static readonly Selector getKeys_ = "getKeys:";
			public static readonly Selector getObjects_ = "getObjects:";
			public static readonly Selector getObjects_andKeys_ = "getObjects:andKeys:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithContentsOfFile_ = "initWithContentsOfFile:";
			public static readonly Selector initWithContentsOfURL_ = "initWithContentsOfURL:";
			public static readonly Selector initWithDictionary_ = "initWithDictionary:";
			public static readonly Selector initWithDictionary_copyItems_ = "initWithDictionary:copyItems:";
			public static readonly Selector initWithObjects_ex_forKeys_count_ = "initWithObjects_ex:forKeys:count:";
			public static readonly Selector initWithObjects_forKeys_ = "initWithObjects:forKeys:";
			public static readonly Selector initWithObjects_forKeys_count_ = "initWithObjects:forKeys:count:";
			public static readonly Selector initWithObjectsAndKeys_ = "initWithObjectsAndKeys:";
			public static readonly Selector invertedDictionary = "invertedDictionary";
			public static readonly Selector isEqualToDictionary_ = "isEqualToDictionary:";
			public static readonly Selector keyEnumerator = "keyEnumerator";
			public static readonly Selector keysSortedByValueUsingSelector_ = "keysSortedByValueUsingSelector:";
			public static readonly Selector objectEnumerator = "objectEnumerator";
			public static readonly Selector objectForKey_ = "objectForKey:";
			public static readonly Selector objectsForKeys_notFoundMarker_ = "objectsForKeys:notFoundMarker:";
			public static readonly Selector writeToFile_atomically_ = "writeToFile:atomically:";
			public static readonly Selector writeToURL_atomically_ = "writeToURL:atomically:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSDictionaryEntry : IEquatable<NSDictionaryEntry> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDictionaryEntry;
		public static implicit operator IntPtr( NSDictionaryEntry value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDictionaryEntry value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDictionaryEntry?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDictionaryEntry value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDictionaryEntry value1, NSDictionaryEntry value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDictionaryEntry value1, NSDictionaryEntry value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDictionaryEntry( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDictionaryEntry alloc() {
			return new NSDictionaryEntry( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSEnumerator ) )]
	public struct NSDirectoryEnumerator : IEquatable<NSDirectoryEnumerator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDirectoryEnumerator;
		public static implicit operator IntPtr( NSDirectoryEnumerator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDirectoryEnumerator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDirectoryEnumerator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDirectoryEnumerator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDirectoryEnumerator value1, NSDirectoryEnumerator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDirectoryEnumerator value1, NSDirectoryEnumerator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDirectoryEnumerator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDirectoryEnumerator alloc() {
			return new NSDirectoryEnumerator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSDictionary directoryAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryAttributes( Handle, CachedSelectors.directoryAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary fileAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileAttributes( Handle, CachedSelectors.fileAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public void skipDescendents() {
			RuntimeObject ___occuredException;
			NativeMethods.skipDescendents( Handle, CachedSelectors.skipDescendents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void skipDescendents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector directoryAttributes = "directoryAttributes";
			public static readonly Selector fileAttributes = "fileAttributes";
			public static readonly Selector skipDescendents = "skipDescendents";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSProxy ) )]
	public struct NSDistantObject : IEquatable<NSDistantObject> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDistantObject;
		public static implicit operator IntPtr( NSDistantObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDistantObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDistantObject?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDistantObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDistantObject value1, NSDistantObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDistantObject value1, NSDistantObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDistantObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDistantObject alloc() {
			return new NSDistantObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static bool isAClassOfObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAClassOfObject_( ClassHandle, CachedSelectors.isAClassOfObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject newDistantObjectWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newDistantObjectWithCoder_( ClassHandle, CachedSelectors.newDistantObjectWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSDistantObject proxyWithLocal_connection_( NObjective.RuntimeObject local, NSConnection connection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.proxyWithLocal_connection_( ClassHandle, CachedSelectors.proxyWithLocal_connection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NSConnection ), local, connection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistantObject( ___result );
		}
		unsafe public static NSDistantObject proxyWithTarget_connection_( NObjective.RuntimeObject target, NSConnection connection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.proxyWithTarget_connection_( ClassHandle, CachedSelectors.proxyWithTarget_connection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NSConnection ), target, connection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistantObject( ___result );
		}
		unsafe public void appendFormat_( NObjective.RuntimeObject format ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendFormat_( Handle, CachedSelectors.appendFormat_, out ___occuredException, sizeof( NObjective.RuntimeObject ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject awakeAfterUsingCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.awakeAfterUsingCoder_( Handle, CachedSelectors.awakeAfterUsingCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject @class() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@class( Handle, CachedSelectors.@class, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeClass classForCoder() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForCoder( Handle, CachedSelectors.classForCoder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeClass classForPortCoder() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForPortCoder( Handle, CachedSelectors.classForPortCoder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSConnection connectionForProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connectionForProxy( Handle, CachedSelectors.connectionForProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConnection( ___result );
		}
		unsafe public NObjective.RuntimeObject copy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.copy( Handle, CachedSelectors.copy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSDistantObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistantObject( ___result );
		}
		unsafe public NSDistantObject initWithLocal_connection_( NObjective.RuntimeObject local, NSConnection connection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLocal_connection_( Handle, CachedSelectors.initWithLocal_connection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NSConnection ), local, connection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistantObject( ___result );
		}
		unsafe public NSDistantObject initWithTarget_connection_( NObjective.RuntimeObject target, NSConnection connection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTarget_connection_( Handle, CachedSelectors.initWithTarget_connection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NSConnection ), target, connection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistantObject( ___result );
		}
		unsafe public void invalidateProxy() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateProxy( Handle, CachedSelectors.invalidateProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject mutableCopy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mutableCopy( Handle, CachedSelectors.mutableCopy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replacementObjectForCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementObjectForCoder_( Handle, CachedSelectors.replacementObjectForCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replacementObjectForPortCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementObjectForPortCoder_( Handle, CachedSelectors.replacementObjectForPortCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void retainWireCount() {
			RuntimeObject ___occuredException;
			NativeMethods.retainWireCount( Handle, CachedSelectors.retainWireCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProtocolForProxy_( Protocol proxy ) {
			RuntimeObject ___occuredException;
			NativeMethods.setProtocolForProxy_( Handle, CachedSelectors.setProtocolForProxy_, out ___occuredException, sizeof( Protocol ), proxy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject stringByAppendingFormat_( NObjective.RuntimeObject format ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByAppendingFormat_( Handle, CachedSelectors.stringByAppendingFormat_, out ___occuredException, sizeof( NObjective.RuntimeObject ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr awakeAfterUsingCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @class( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForCoder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForPortCoder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connectionForProxy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr copy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLocal_connection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject local, NSConnection connection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTarget_connection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NSConnection connection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidateProxy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAClassOfObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutableCopy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newDistantObjectWithCoder_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr proxyWithLocal_connection_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject local, NSConnection connection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr proxyWithTarget_connection_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NSConnection connection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replacementObjectForCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replacementObjectForPortCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void retainWireCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProtocolForProxy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, Protocol proxy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByAppendingFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendFormat_ = "appendFormat:";
			public static readonly Selector awakeAfterUsingCoder_ = "awakeAfterUsingCoder:";
			public static readonly Selector @class = "class";
			public static readonly Selector classForCoder = "classForCoder";
			public static readonly Selector classForPortCoder = "classForPortCoder";
			public static readonly Selector connectionForProxy = "connectionForProxy";
			public static readonly Selector copy = "copy";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithLocal_connection_ = "initWithLocal:connection:";
			public static readonly Selector initWithTarget_connection_ = "initWithTarget:connection:";
			public static readonly Selector invalidateProxy = "invalidateProxy";
			public static readonly Selector isAClassOfObject_ = "isAClassOfObject:";
			public static readonly Selector mutableCopy = "mutableCopy";
			public static readonly Selector newDistantObjectWithCoder_ = "newDistantObjectWithCoder:";
			public static readonly Selector proxyWithLocal_connection_ = "proxyWithLocal:connection:";
			public static readonly Selector proxyWithTarget_connection_ = "proxyWithTarget:connection:";
			public static readonly Selector replacementObjectForCoder_ = "replacementObjectForCoder:";
			public static readonly Selector replacementObjectForPortCoder_ = "replacementObjectForPortCoder:";
			public static readonly Selector retainWireCount = "retainWireCount";
			public static readonly Selector setProtocolForProxy_ = "setProtocolForProxy:";
			public static readonly Selector stringByAppendingFormat_ = "stringByAppendingFormat:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSDistantObjectRequest : IEquatable<NSDistantObjectRequest> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDistantObjectRequest;
		public static implicit operator IntPtr( NSDistantObjectRequest value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDistantObjectRequest value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDistantObjectRequest?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDistantObjectRequest value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDistantObjectRequest value1, NSDistantObjectRequest value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDistantObjectRequest value1, NSDistantObjectRequest value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDistantObjectRequest( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDistantObjectRequest alloc() {
			return new NSDistantObjectRequest( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSConnection connection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connection( Handle, CachedSelectors.connection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConnection( ___result );
		}
		unsafe public NObjective.RuntimeObject conversation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conversation( Handle, CachedSelectors.conversation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSInvocation invocation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.invocation( Handle, CachedSelectors.invocation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSInvocation( ___result );
		}
		unsafe public void replyWithException_( NSException exception ) {
			RuntimeObject ___occuredException;
			NativeMethods.replyWithException_( Handle, CachedSelectors.replyWithException_, out ___occuredException, sizeof( NSException ), exception );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr conversation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr invocation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replyWithException_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSException exception );
		}
		static internal class CachedSelectors {
			public static readonly Selector connection = "connection";
			public static readonly Selector conversation = "conversation";
			public static readonly Selector invocation = "invocation";
			public static readonly Selector replyWithException_ = "replyWithException:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSDistributedLock : IEquatable<NSDistributedLock> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDistributedLock;
		public static implicit operator IntPtr( NSDistributedLock value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDistributedLock value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDistributedLock?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDistributedLock value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDistributedLock value1, NSDistributedLock value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDistributedLock value1, NSDistributedLock value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDistributedLock( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDistributedLock alloc() {
			return new NSDistributedLock( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSDistributedLock lockWithPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.lockWithPath_( ClassHandle, CachedSelectors.lockWithPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistributedLock( ___result );
		}
		unsafe public void breakLock() {
			RuntimeObject ___occuredException;
			NativeMethods.breakLock( Handle, CachedSelectors.breakLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSDistributedLock initWithPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.initWithPath_( Handle, CachedSelectors.initWithPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistributedLock( ___result );
		}
		unsafe public NSDate lockDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockDate( Handle, CachedSelectors.lockDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public bool tryLock() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tryLock( Handle, CachedSelectors.tryLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void breakLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lockDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lockWithPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool tryLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector breakLock = "breakLock";
			public static readonly Selector initWithPath_ = "initWithPath:";
			public static readonly Selector lockDate = "lockDate";
			public static readonly Selector lockWithPath_ = "lockWithPath:";
			public static readonly Selector tryLock = "tryLock";
			public static readonly Selector unlock = "unlock";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSNotificationCenter ) )]
	public struct NSDistributedNotificationCenter : IEquatable<NSDistributedNotificationCenter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDistributedNotificationCenter;
		public static implicit operator IntPtr( NSDistributedNotificationCenter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDistributedNotificationCenter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDistributedNotificationCenter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDistributedNotificationCenter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDistributedNotificationCenter value1, NSDistributedNotificationCenter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDistributedNotificationCenter value1, NSDistributedNotificationCenter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDistributedNotificationCenter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDistributedNotificationCenter alloc() {
			return new NSDistributedNotificationCenter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSDistributedNotificationCenter notificationCenterForType_( string type ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___result = NativeMethods.notificationCenterForType_( ClassHandle, CachedSelectors.notificationCenterForType_, out ___occuredException, sizeof( IntPtr ), ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDistributedNotificationCenter( ___result );
		}
		unsafe public void addObserver_selector_name_object_suspensionBehavior_( NObjective.RuntimeObject observer, NObjective.Selector selector, string name, string @object, NSNotificationSuspensionBehavior suspensionBehavior ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedobject = Runtime.CreateStringProxy( @object );
			NativeMethods.addObserver_selector_name_object_suspensionBehavior_( Handle, CachedSelectors.addObserver_selector_name_object_suspensionBehavior_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSNotificationSuspensionBehavior ), observer, selector, ___wrappedname, ___wrappedobject, suspensionBehavior );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedobject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void postNotificationName_object_userInfo_deliverImmediately_( string name, string @object, NSDictionary userInfo, bool deliverImmediately ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedobject = Runtime.CreateStringProxy( @object );
			NativeMethods.postNotificationName_object_userInfo_deliverImmediately_( Handle, CachedSelectors.postNotificationName_object_userInfo_deliverImmediately_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSDictionary ) + sizeof( bool ), ___wrappedname, ___wrappedobject, userInfo, deliverImmediately );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedobject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void postNotificationName_object_userInfo_options_( string name, string @object, NSDictionary userInfo, uint options ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedobject = Runtime.CreateStringProxy( @object );
			NativeMethods.postNotificationName_object_userInfo_options_( Handle, CachedSelectors.postNotificationName_object_userInfo_options_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSDictionary ) + sizeof( uint ), ___wrappedname, ___wrappedobject, userInfo, options );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedobject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSuspended_( bool suspended ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSuspended_( Handle, CachedSelectors.setSuspended_, out ___occuredException, sizeof( bool ), suspended );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool suspended() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suspended( Handle, CachedSelectors.suspended, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObserver_selector_name_object_suspensionBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject observer, NObjective.Selector selector, IntPtr name, IntPtr @object, NSNotificationSuspensionBehavior suspensionBehavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notificationCenterForType_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postNotificationName_object_userInfo_deliverImmediately_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr @object, NSDictionary userInfo, bool deliverImmediately );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postNotificationName_object_userInfo_options_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr @object, NSDictionary userInfo, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSuspended_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool suspended );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool suspended( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addObserver_selector_name_object_suspensionBehavior_ = "addObserver:selector:name:object:suspensionBehavior:";
			public static readonly Selector notificationCenterForType_ = "notificationCenterForType:";
			public static readonly Selector postNotificationName_object_userInfo_deliverImmediately_ = "postNotificationName:object:userInfo:deliverImmediately:";
			public static readonly Selector postNotificationName_object_userInfo_options_ = "postNotificationName:object:userInfo:options:";
			public static readonly Selector setSuspended_ = "setSuspended:";
			public static readonly Selector suspended = "suspended";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDictionary ) )]
	public struct NSDistributedObjectsStatistics : IEquatable<NSDistributedObjectsStatistics> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDistributedObjectsStatistics;
		public static implicit operator IntPtr( NSDistributedObjectsStatistics value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDistributedObjectsStatistics value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDistributedObjectsStatistics?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDistributedObjectsStatistics value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDistributedObjectsStatistics value1, NSDistributedObjectsStatistics value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDistributedObjectsStatistics value1, NSDistributedObjectsStatistics value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDistributedObjectsStatistics( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDistributedObjectsStatistics alloc() {
			return new NSDistributedObjectsStatistics( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addStatistics_( NObjective.RuntimeObject statistics ) {
			RuntimeObject ___occuredException;
			NativeMethods.addStatistics_( Handle, CachedSelectors.addStatistics_, out ___occuredException, sizeof( NObjective.RuntimeObject ), statistics );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addStatistics_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject statistics );
		}
		static internal class CachedSelectors {
			public static readonly Selector addStatistics_ = "addStatistics:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableData ) )]
	public struct NSDOStreamData : IEquatable<NSDOStreamData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSDOStreamData;
		public static implicit operator IntPtr( NSDOStreamData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSDOStreamData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSDOStreamData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSDOStreamData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSDOStreamData value1, NSDOStreamData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSDOStreamData value1, NSDOStreamData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSDOStreamData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSDOStreamData alloc() {
			return new NSDOStreamData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSRefCountingNumber ) )]
	public struct NSdoubleNumber : IEquatable<NSdoubleNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSdoubleNumber;
		public static implicit operator IntPtr( NSdoubleNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSdoubleNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSdoubleNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSdoubleNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSdoubleNumber value1, NSdoubleNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSdoubleNumber value1, NSdoubleNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSdoubleNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSdoubleNumber alloc() {
			return new NSdoubleNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSEnumerator : IEquatable<NSEnumerator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSEnumerator;
		public static implicit operator IntPtr( NSEnumerator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSEnumerator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSEnumerator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSEnumerator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSEnumerator value1, NSEnumerator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSEnumerator value1, NSEnumerator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSEnumerator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSEnumerator alloc() {
			return new NSEnumerator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSArray allObjects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allObjects( Handle, CachedSelectors.allObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject nextObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextObject( Handle, CachedSelectors.nextObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allObjects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allObjects = "allObjects";
			public static readonly Selector nextObject = "nextObject";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPredicateOperator ) )]
	public struct NSEqualityPredicateOperator : IEquatable<NSEqualityPredicateOperator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSEqualityPredicateOperator;
		public static implicit operator IntPtr( NSEqualityPredicateOperator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSEqualityPredicateOperator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSEqualityPredicateOperator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSEqualityPredicateOperator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSEqualityPredicateOperator value1, NSEqualityPredicateOperator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSEqualityPredicateOperator value1, NSEqualityPredicateOperator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSEqualityPredicateOperator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSEqualityPredicateOperator alloc() {
			return new NSEqualityPredicateOperator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSEqualityPredicateOperator initWithOperatorType_modifier_negate_( int type, int modifier, char negate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOperatorType_modifier_negate_( Handle, CachedSelectors.initWithOperatorType_modifier_negate_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( char ), type, modifier, negate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSEqualityPredicateOperator( ___result );
		}
		unsafe public bool isNegation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isNegation( Handle, CachedSelectors.isNegation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setNegation_( char negation ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNegation_( Handle, CachedSelectors.setNegation_, out ___occuredException, sizeof( char ), negation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOperatorType_modifier_negate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, int modifier, char negate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isNegation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNegation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char negation );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithOperatorType_modifier_negate_ = "initWithOperatorType:modifier:negate:";
			public static readonly Selector isNegation = "isNegation";
			public static readonly Selector setNegation_ = "setNegation:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSError : IEquatable<NSError> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSError;
		public static implicit operator IntPtr( NSError value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSError value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSError?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSError value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSError value1, NSError value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSError value1, NSError value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSError( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSError alloc() {
			return new NSError( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSError errorWithDomain_code_userInfo_( string domain, int code, NSDictionary userInfo ) {
			RuntimeObject ___occuredException;
			var ___wrappeddomain = Runtime.CreateStringProxy( domain );
			var ___result = NativeMethods.errorWithDomain_code_userInfo_( ClassHandle, CachedSelectors.errorWithDomain_code_userInfo_, out ___occuredException, sizeof( IntPtr ) + sizeof( int ) + sizeof( NSDictionary ), ___wrappeddomain, code, userInfo );
			Runtime.ReleaseNativeObject( ___wrappeddomain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSError( ___result );
		}
		unsafe public int code() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.code( Handle, CachedSelectors.code, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string domain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.domain( Handle, CachedSelectors.domain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject helpAnchor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.helpAnchor( Handle, CachedSelectors.helpAnchor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSError initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSError( ___result );
		}
		unsafe public NSError initWithDomain_code_userInfo_( string domain, int code, NSDictionary userInfo ) {
			RuntimeObject ___occuredException;
			var ___wrappeddomain = Runtime.CreateStringProxy( domain );
			var ___result = NativeMethods.initWithDomain_code_userInfo_( Handle, CachedSelectors.initWithDomain_code_userInfo_, out ___occuredException, sizeof( IntPtr ) + sizeof( int ) + sizeof( NSDictionary ), ___wrappeddomain, code, userInfo );
			Runtime.ReleaseNativeObject( ___wrappeddomain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSError( ___result );
		}
		unsafe public string localizedDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedDescription( Handle, CachedSelectors.localizedDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string localizedFailureReason() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedFailureReason( Handle, CachedSelectors.localizedFailureReason, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSArray localizedRecoveryOptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedRecoveryOptions( Handle, CachedSelectors.localizedRecoveryOptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public string localizedRecoverySuggestion() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedRecoverySuggestion( Handle, CachedSelectors.localizedRecoverySuggestion, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject recoveryAttempter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recoveryAttempter( Handle, CachedSelectors.recoveryAttempter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDictionary userInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userInfo( Handle, CachedSelectors.userInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int code( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr domain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr errorWithDomain_code_userInfo_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr domain, int code, NSDictionary userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr helpAnchor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDomain_code_userInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr domain, int code, NSDictionary userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedFailureReason( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedRecoveryOptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedRecoverySuggestion( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recoveryAttempter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector code = "code";
			public static readonly Selector domain = "domain";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector errorWithDomain_code_userInfo_ = "errorWithDomain:code:userInfo:";
			public static readonly Selector helpAnchor = "helpAnchor";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithDomain_code_userInfo_ = "initWithDomain:code:userInfo:";
			public static readonly Selector localizedDescription = "localizedDescription";
			public static readonly Selector localizedFailureReason = "localizedFailureReason";
			public static readonly Selector localizedRecoveryOptions = "localizedRecoveryOptions";
			public static readonly Selector localizedRecoverySuggestion = "localizedRecoverySuggestion";
			public static readonly Selector recoveryAttempter = "recoveryAttempter";
			public static readonly Selector userInfo = "userInfo";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSException : IEquatable<NSException> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSException;
		public static implicit operator IntPtr( NSException value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSException value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSException?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSException value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSException value1, NSException value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSException value1, NSException value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSException( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSException alloc() {
			return new NSException( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject aggregateExceptionWithExceptions_( NObjective.RuntimeObject exceptions ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.aggregateExceptionWithExceptions_( ClassHandle, CachedSelectors.aggregateExceptionWithExceptions_, out ___occuredException, sizeof( NObjective.RuntimeObject ), exceptions );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSException exceptionWithName_reason_userInfo_( string name, string reason, NSDictionary userInfo ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedreason = Runtime.CreateStringProxy( reason );
			var ___result = NativeMethods.exceptionWithName_reason_userInfo_( ClassHandle, CachedSelectors.exceptionWithName_reason_userInfo_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedname, ___wrappedreason, userInfo );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedreason );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSException( ___result );
		}
		public static void raise_format_( string raise, string format, params object[] variableArguments ) {
			ClassHandle.InvokeVoidFast( CachedSelectors.raise_format_, CachedEncodings.__E967B394, raise, format, variableArguments );
		}
		unsafe public static void raise_format_arguments_( string raise, string format, System.IntPtr arguments ) {
			RuntimeObject ___occuredException;
			var ___wrappedraise = Runtime.CreateStringProxy( raise );
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			NativeMethods.raise_format_arguments_( ClassHandle, CachedSelectors.raise_format_arguments_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( System.IntPtr ), ___wrappedraise, ___wrappedformat, arguments );
			Runtime.ReleaseNativeObject( ___wrappedraise );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject validationExceptionWithFormat_( NObjective.RuntimeObject format ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validationExceptionWithFormat_( ClassHandle, CachedSelectors.validationExceptionWithFormat_, out ___occuredException, sizeof( NObjective.RuntimeObject ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject exceptionAddingEntriesToUserInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.exceptionAddingEntriesToUserInfo_( Handle, CachedSelectors.exceptionAddingEntriesToUserInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject exceptionRememberingObject_key_( NObjective.RuntimeObject @object, NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.exceptionRememberingObject_key_( Handle, CachedSelectors.exceptionRememberingObject_key_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSException initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSException( ___result );
		}
		unsafe public NSException initWithName_reason_userInfo_( string name, string reason, NSDictionary userInfo ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedreason = Runtime.CreateStringProxy( reason );
			var ___result = NativeMethods.initWithName_reason_userInfo_( Handle, CachedSelectors.initWithName_reason_userInfo_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedname, ___wrappedreason, userInfo );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedreason );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSException( ___result );
		}
		unsafe public string name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void raise() {
			RuntimeObject ___occuredException;
			NativeMethods.raise( Handle, CachedSelectors.raise, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string reason() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reason( Handle, CachedSelectors.reason, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDictionary userInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userInfo( Handle, CachedSelectors.userInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr aggregateExceptionWithExceptions_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exceptions );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr exceptionAddingEntriesToUserInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr exceptionRememberingObject_key_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr exceptionWithName_reason_userInfo_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr reason, NSDictionary userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_reason_userInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr reason, NSDictionary userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void raise( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void raise_format_arguments_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr raise, IntPtr format, System.IntPtr arguments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr reason( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr validationExceptionWithFormat_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format );
		}
		static internal class CachedEncodings {
			public static readonly RuntimeMethodEncoding __E967B394 = "v16@0:4@8@12";
		}
		static internal class CachedSelectors {
			public static readonly Selector aggregateExceptionWithExceptions_ = "aggregateExceptionWithExceptions:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector exceptionAddingEntriesToUserInfo_ = "exceptionAddingEntriesToUserInfo:";
			public static readonly Selector exceptionRememberingObject_key_ = "exceptionRememberingObject:key:";
			public static readonly Selector exceptionWithName_reason_userInfo_ = "exceptionWithName:reason:userInfo:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithName_reason_userInfo_ = "initWithName:reason:userInfo:";
			public static readonly Selector name = "name";
			public static readonly Selector raise = "raise";
			public static readonly Selector raise_format_ = "raise:format:";
			public static readonly Selector raise_format_arguments_ = "raise:format:arguments:";
			public static readonly Selector reason = "reason";
			public static readonly Selector userInfo = "userInfo";
			public static readonly Selector validationExceptionWithFormat_ = "validationExceptionWithFormat:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCommand ) )]
	public struct NSExistsCommand : IEquatable<NSExistsCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSExistsCommand;
		public static implicit operator IntPtr( NSExistsCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSExistsCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSExistsCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSExistsCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSExistsCommand value1, NSExistsCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSExistsCommand value1, NSExistsCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSExistsCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSExistsCommand alloc() {
			return new NSExistsCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSBuiltinCharacterSet ) )]
	public struct NSExpandedBuiltinCharacterSet : IEquatable<NSExpandedBuiltinCharacterSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSExpandedBuiltinCharacterSet;
		public static implicit operator IntPtr( NSExpandedBuiltinCharacterSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSExpandedBuiltinCharacterSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSExpandedBuiltinCharacterSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSExpandedBuiltinCharacterSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSExpandedBuiltinCharacterSet value1, NSExpandedBuiltinCharacterSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSExpandedBuiltinCharacterSet value1, NSExpandedBuiltinCharacterSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSExpandedBuiltinCharacterSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSExpandedBuiltinCharacterSet alloc() {
			return new NSExpandedBuiltinCharacterSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSExpression : IEquatable<NSExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSExpression;
		public static implicit operator IntPtr( NSExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSExpression value1, NSExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSExpression value1, NSExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSExpression alloc() {
			return new NSExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSExpression expressionForConstantValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expressionForConstantValue_( ClassHandle, CachedSelectors.expressionForConstantValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSExpression( ___result );
		}
		unsafe public static NSExpression expressionForEvaluatedObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expressionForEvaluatedObject( ClassHandle, CachedSelectors.expressionForEvaluatedObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSExpression( ___result );
		}
		unsafe public static NSExpression expressionForFunction_arguments_( string function, NSArray arguments ) {
			RuntimeObject ___occuredException;
			var ___wrappedfunction = Runtime.CreateStringProxy( function );
			var ___result = NativeMethods.expressionForFunction_arguments_( ClassHandle, CachedSelectors.expressionForFunction_arguments_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSArray ), ___wrappedfunction, arguments );
			Runtime.ReleaseNativeObject( ___wrappedfunction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSExpression( ___result );
		}
		unsafe public static NSExpression expressionForKeyPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.expressionForKeyPath_( ClassHandle, CachedSelectors.expressionForKeyPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSExpression( ___result );
		}
		unsafe public static NObjective.RuntimeObject expressionForSubexpressions_( NObjective.RuntimeObject subexpressions ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expressionForSubexpressions_( ClassHandle, CachedSelectors.expressionForSubexpressions_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subexpressions );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject expressionForSubset_usingIteratorVariable_subpredicate_( NObjective.RuntimeObject subset, NObjective.RuntimeObject usingIteratorVariable, NObjective.RuntimeObject subpredicate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expressionForSubset_usingIteratorVariable_subpredicate_( ClassHandle, CachedSelectors.expressionForSubset_usingIteratorVariable_subpredicate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), subset, usingIteratorVariable, subpredicate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject expressionForSymbolicString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expressionForSymbolicString_( ClassHandle, CachedSelectors.expressionForSymbolicString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSExpression expressionForVariable_( string variable ) {
			RuntimeObject ___occuredException;
			var ___wrappedvariable = Runtime.CreateStringProxy( variable );
			var ___result = NativeMethods.expressionForVariable_( ClassHandle, CachedSelectors.expressionForVariable_, out ___occuredException, sizeof( IntPtr ), ___wrappedvariable );
			Runtime.ReleaseNativeObject( ___wrappedvariable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSExpression( ___result );
		}
		unsafe public static NObjective.RuntimeObject expressionForVariableNameAssignment_expression_( NObjective.RuntimeObject assignment, NObjective.RuntimeObject expression ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expressionForVariableNameAssignment_expression_( ClassHandle, CachedSelectors.expressionForVariableNameAssignment_expression_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), assignment, expression );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void acceptVisitor_flags_( NObjective.RuntimeObject visitor, uint flags ) {
			RuntimeObject ___occuredException;
			NativeMethods.acceptVisitor_flags_( Handle, CachedSelectors.acceptVisitor_flags_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), visitor, flags );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray arguments() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arguments( Handle, CachedSelectors.arguments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject constantValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.constantValue( Handle, CachedSelectors.constantValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSExpressionType expressionType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expressionType( Handle, CachedSelectors.expressionType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSExpressionType ) ___result;
		}
		unsafe public NObjective.RuntimeObject expressionValueWithObject_context_( NObjective.RuntimeObject @object, NSMutableDictionary context ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expressionValueWithObject_context_( Handle, CachedSelectors.expressionValueWithObject_context_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NSMutableDictionary ), @object, context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string function() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.function( Handle, CachedSelectors.function, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSExpression initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSExpression( ___result );
		}
		unsafe public NSExpression initWithExpressionType_( NSExpressionType type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithExpressionType_( Handle, CachedSelectors.initWithExpressionType_, out ___occuredException, sizeof( NSExpressionType ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSExpression( ___result );
		}
		unsafe public string keyPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyPath( Handle, CachedSelectors.keyPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSExpression operand() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.operand( Handle, CachedSelectors.operand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSExpression( ___result );
		}
		unsafe public NObjective.RuntimeObject predicateFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateFormat( Handle, CachedSelectors.predicateFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.Selector selector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selector( Handle, CachedSelectors.selector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject subexpression() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subexpression( Handle, CachedSelectors.subexpression, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subpredicate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subpredicate( Handle, CachedSelectors.subpredicate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string variable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.variable( Handle, CachedSelectors.variable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void acceptVisitor_flags_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visitor, uint flags );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arguments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr constantValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionForConstantValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionForEvaluatedObject( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionForFunction_arguments_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr function, NSArray arguments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionForKeyPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionForSubexpressions_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subexpressions );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionForSubset_usingIteratorVariable_subpredicate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subset, NObjective.RuntimeObject usingIteratorVariable, NObjective.RuntimeObject subpredicate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionForSymbolicString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionForVariable_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr variable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionForVariableNameAssignment_expression_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject assignment, NObjective.RuntimeObject expression );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int expressionType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expressionValueWithObject_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NSMutableDictionary context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr function( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithExpressionType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSExpressionType type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr operand( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector selector( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subexpression( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subpredicate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr variable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptVisitor_flags_ = "acceptVisitor:flags:";
			public static readonly Selector arguments = "arguments";
			public static readonly Selector constantValue = "constantValue";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector expressionForConstantValue_ = "expressionForConstantValue:";
			public static readonly Selector expressionForEvaluatedObject = "expressionForEvaluatedObject";
			public static readonly Selector expressionForFunction_arguments_ = "expressionForFunction:arguments:";
			public static readonly Selector expressionForKeyPath_ = "expressionForKeyPath:";
			public static readonly Selector expressionForSubexpressions_ = "expressionForSubexpressions:";
			public static readonly Selector expressionForSubset_usingIteratorVariable_subpredicate_ = "expressionForSubset:usingIteratorVariable:subpredicate:";
			public static readonly Selector expressionForSymbolicString_ = "expressionForSymbolicString:";
			public static readonly Selector expressionForVariable_ = "expressionForVariable:";
			public static readonly Selector expressionForVariableNameAssignment_expression_ = "expressionForVariableNameAssignment:expression:";
			public static readonly Selector expressionType = "expressionType";
			public static readonly Selector expressionValueWithObject_context_ = "expressionValueWithObject:context:";
			public static readonly Selector function = "function";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithExpressionType_ = "initWithExpressionType:";
			public static readonly Selector keyPath = "keyPath";
			public static readonly Selector operand = "operand";
			public static readonly Selector predicateFormat = "predicateFormat";
			public static readonly Selector selector = "selector";
			public static readonly Selector subexpression = "subexpression";
			public static readonly Selector subpredicate = "subpredicate";
			public static readonly Selector variable = "variable";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPredicate ) )]
	public struct NSFalsePredicate : IEquatable<NSFalsePredicate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSFalsePredicate;
		public static implicit operator IntPtr( NSFalsePredicate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSFalsePredicate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSFalsePredicate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSFalsePredicate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSFalsePredicate value1, NSFalsePredicate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSFalsePredicate value1, NSFalsePredicate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSFalsePredicate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSFalsePredicate alloc() {
			return new NSFalsePredicate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDictionary ) )]
	public struct NSFileAttributes : IEquatable<NSFileAttributes> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSFileAttributes;
		public static implicit operator IntPtr( NSFileAttributes value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSFileAttributes value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSFileAttributes?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSFileAttributes value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSFileAttributes value1, NSFileAttributes value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSFileAttributes value1, NSFileAttributes value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSFileAttributes( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSFileAttributes alloc() {
			return new NSFileAttributes( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject attributesAtPath_traverseLink_( NObjective.RuntimeObject path, char traverseLink ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributesAtPath_traverseLink_( ClassHandle, CachedSelectors.attributesAtPath_traverseLink_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), path, traverseLink );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDirectory( Handle, CachedSelectors.isDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributesAtPath_traverseLink_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, char traverseLink );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attributesAtPath_traverseLink_ = "attributesAtPath:traverseLink:";
			public static readonly Selector isDirectory = "isDirectory";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSFileHandle : IEquatable<NSFileHandle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSFileHandle;
		public static implicit operator IntPtr( NSFileHandle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSFileHandle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSFileHandle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSFileHandle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSFileHandle value1, NSFileHandle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSFileHandle value1, NSFileHandle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSFileHandle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSFileHandle alloc() {
			return new NSFileHandle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject fileHandleForReadingAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.fileHandleForReadingAtPath_( ClassHandle, CachedSelectors.fileHandleForReadingAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject fileHandleForUpdatingAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.fileHandleForUpdatingAtPath_( ClassHandle, CachedSelectors.fileHandleForUpdatingAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject fileHandleForWritingAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.fileHandleForWritingAtPath_( ClassHandle, CachedSelectors.fileHandleForWritingAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSFileHandle fileHandleWithNullDevice() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileHandleWithNullDevice( ClassHandle, CachedSelectors.fileHandleWithNullDevice, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFileHandle( ___result );
		}
		unsafe public static NSFileHandle fileHandleWithStandardError() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileHandleWithStandardError( ClassHandle, CachedSelectors.fileHandleWithStandardError, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFileHandle( ___result );
		}
		unsafe public static NSFileHandle fileHandleWithStandardInput() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileHandleWithStandardInput( ClassHandle, CachedSelectors.fileHandleWithStandardInput, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFileHandle( ___result );
		}
		unsafe public static NSFileHandle fileHandleWithStandardOutput() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileHandleWithStandardOutput( ClassHandle, CachedSelectors.fileHandleWithStandardOutput, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFileHandle( ___result );
		}
		unsafe public NSData availableData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.availableData( Handle, CachedSelectors.availableData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public void closeFile() {
			RuntimeObject ___occuredException;
			NativeMethods.closeFile( Handle, CachedSelectors.closeFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int fileDescriptor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileDescriptor( Handle, CachedSelectors.fileDescriptor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSFileHandle initWithPath_flags_createMode_( NObjective.RuntimeObject path, int flags, int createMode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPath_flags_createMode_( Handle, CachedSelectors.initWithPath_flags_createMode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ), path, flags, createMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFileHandle( ___result );
		}
		unsafe public ulong offsetInFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offsetInFile( Handle, CachedSelectors.offsetInFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSData readDataOfLength_( uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.readDataOfLength_( Handle, CachedSelectors.readDataOfLength_, out ___occuredException, sizeof( uint ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData readDataToEndOfFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.readDataToEndOfFile( Handle, CachedSelectors.readDataToEndOfFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public ulong seekToEndOfFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.seekToEndOfFile( Handle, CachedSelectors.seekToEndOfFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void seekToFileOffset_( ulong offset ) {
			RuntimeObject ___occuredException;
			NativeMethods.seekToFileOffset_( Handle, CachedSelectors.seekToFileOffset_, out ___occuredException, sizeof( ulong ), offset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void synchronizeFile() {
			RuntimeObject ___occuredException;
			NativeMethods.synchronizeFile( Handle, CachedSelectors.synchronizeFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void truncateFileAtOffset_( ulong offset ) {
			RuntimeObject ___occuredException;
			NativeMethods.truncateFileAtOffset_( Handle, CachedSelectors.truncateFileAtOffset_, out ___occuredException, sizeof( ulong ), offset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeData_( NSData data ) {
			RuntimeObject ___occuredException;
			NativeMethods.writeData_( Handle, CachedSelectors.writeData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr availableData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void closeFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int fileDescriptor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileHandleForReadingAtPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileHandleForUpdatingAtPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileHandleForWritingAtPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileHandleWithNullDevice( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileHandleWithStandardError( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileHandleWithStandardInput( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileHandleWithStandardOutput( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPath_flags_createMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, int flags, int createMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ulong offsetInFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr readDataOfLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr readDataToEndOfFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ulong seekToEndOfFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void seekToFileOffset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ulong offset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void synchronizeFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void truncateFileAtOffset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ulong offset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
		}
		static internal class CachedSelectors {
			public static readonly Selector availableData = "availableData";
			public static readonly Selector closeFile = "closeFile";
			public static readonly Selector fileDescriptor = "fileDescriptor";
			public static readonly Selector fileHandleForReadingAtPath_ = "fileHandleForReadingAtPath:";
			public static readonly Selector fileHandleForUpdatingAtPath_ = "fileHandleForUpdatingAtPath:";
			public static readonly Selector fileHandleForWritingAtPath_ = "fileHandleForWritingAtPath:";
			public static readonly Selector fileHandleWithNullDevice = "fileHandleWithNullDevice";
			public static readonly Selector fileHandleWithStandardError = "fileHandleWithStandardError";
			public static readonly Selector fileHandleWithStandardInput = "fileHandleWithStandardInput";
			public static readonly Selector fileHandleWithStandardOutput = "fileHandleWithStandardOutput";
			public static readonly Selector initWithPath_flags_createMode_ = "initWithPath:flags:createMode:";
			public static readonly Selector offsetInFile = "offsetInFile";
			public static readonly Selector readDataOfLength_ = "readDataOfLength:";
			public static readonly Selector readDataToEndOfFile = "readDataToEndOfFile";
			public static readonly Selector seekToEndOfFile = "seekToEndOfFile";
			public static readonly Selector seekToFileOffset_ = "seekToFileOffset:";
			public static readonly Selector synchronizeFile = "synchronizeFile";
			public static readonly Selector truncateFileAtOffset_ = "truncateFileAtOffset:";
			public static readonly Selector writeData_ = "writeData:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSFileManager : IEquatable<NSFileManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSFileManager;
		public static implicit operator IntPtr( NSFileManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSFileManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSFileManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSFileManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSFileManager value1, NSFileManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSFileManager value1, NSFileManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSFileManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSFileManager alloc() {
			return new NSFileManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSFileManager defaultManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultManager( ClassHandle, CachedSelectors.defaultManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFileManager( ___result );
		}
		unsafe public bool changeCurrentDirectoryPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.changeCurrentDirectoryPath_( Handle, CachedSelectors.changeCurrentDirectoryPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool changeFileAttributes_atPath_( NSDictionary attributes, string atPath ) {
			RuntimeObject ___occuredException;
			var ___wrappedatPath = Runtime.CreateStringProxy( atPath );
			var ___result = NativeMethods.changeFileAttributes_atPath_( Handle, CachedSelectors.changeFileAttributes_atPath_, out ___occuredException, sizeof( NSDictionary ) + sizeof( IntPtr ), attributes, ___wrappedatPath );
			Runtime.ReleaseNativeObject( ___wrappedatPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray componentsToDisplayForPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.componentsToDisplayForPath_( Handle, CachedSelectors.componentsToDisplayForPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSData contentsAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.contentsAtPath_( Handle, CachedSelectors.contentsAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public bool contentsEqualAtPath_andPath_( string path, string andPath ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___wrappedandPath = Runtime.CreateStringProxy( andPath );
			var ___result = NativeMethods.contentsEqualAtPath_andPath_( Handle, CachedSelectors.contentsEqualAtPath_andPath_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedpath, ___wrappedandPath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedandPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool copyPath_toPath_handler_( string path, string toPath, NObjective.RuntimeObject handler ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___wrappedtoPath = Runtime.CreateStringProxy( toPath );
			var ___result = NativeMethods.copyPath_toPath_handler_( Handle, CachedSelectors.copyPath_toPath_handler_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), ___wrappedpath, ___wrappedtoPath, handler );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedtoPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool createDirectoryAtPath_attributes_( string path, NSDictionary attributes ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.createDirectoryAtPath_attributes_( Handle, CachedSelectors.createDirectoryAtPath_attributes_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedpath, attributes );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool createFileAtPath_contents_attributes_( string path, NSData contents, NSDictionary attributes ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.createFileAtPath_contents_attributes_( Handle, CachedSelectors.createFileAtPath_contents_attributes_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSData ) + sizeof( NSDictionary ), ___wrappedpath, contents, attributes );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool createSymbolicLinkAtPath_pathContent_( string path, string pathContent ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___wrappedpathContent = Runtime.CreateStringProxy( pathContent );
			var ___result = NativeMethods.createSymbolicLinkAtPath_pathContent_( Handle, CachedSelectors.createSymbolicLinkAtPath_pathContent_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedpath, ___wrappedpathContent );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpathContent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string currentDirectoryPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentDirectoryPath( Handle, CachedSelectors.currentDirectoryPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public char directoryCanBeCreatedAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryCanBeCreatedAtPath_( Handle, CachedSelectors.directoryCanBeCreatedAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray directoryContentsAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.directoryContentsAtPath_( Handle, CachedSelectors.directoryContentsAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryContentsAtPath_matchingExtension_options_keepExtension_( NObjective.RuntimeObject path, NObjective.RuntimeObject matchingExtension, int options, char keepExtension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryContentsAtPath_matchingExtension_options_keepExtension_( Handle, CachedSelectors.directoryContentsAtPath_matchingExtension_options_keepExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( char ), path, matchingExtension, options, keepExtension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string displayNameAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.displayNameAtPath_( Handle, CachedSelectors.displayNameAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDirectoryEnumerator enumeratorAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.enumeratorAtPath_( Handle, CachedSelectors.enumeratorAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDirectoryEnumerator( ___result );
		}
		unsafe public NObjective.RuntimeObject extendedAttributeForKey_atPath_error_( NObjective.RuntimeObject key, NObjective.RuntimeObject atPath, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.extendedAttributeForKey_atPath_error_( Handle, CachedSelectors.extendedAttributeForKey_atPath_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), key, atPath, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject extendedAttributesAtPath_error_( NObjective.RuntimeObject path, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.extendedAttributesAtPath_error_( Handle, CachedSelectors.extendedAttributesAtPath_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), path, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDictionary fileAttributesAtPath_traverseLink_( string path, bool traverseLink ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.fileAttributesAtPath_traverseLink_( Handle, CachedSelectors.fileAttributesAtPath_traverseLink_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappedpath, traverseLink );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public bool fileExistsAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.fileExistsAtPath_( Handle, CachedSelectors.fileExistsAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool fileExistsAtPath_isDirectory_( string path, IntPtr isDirectory ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.fileExistsAtPath_isDirectory_( Handle, CachedSelectors.fileExistsAtPath_isDirectory_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedpath, isDirectory );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSDictionary fileSystemAttributesAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.fileSystemAttributesAtPath_( Handle, CachedSelectors.fileSystemAttributesAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public IntPtr fileSystemRepresentationWithPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.fileSystemRepresentationWithPath_( Handle, CachedSelectors.fileSystemRepresentationWithPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char getFileSystemRepresentation_maxLength_withPath_( System.IntPtr representation, uint maxLength, NObjective.RuntimeObject withPath ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getFileSystemRepresentation_maxLength_withPath_( Handle, CachedSelectors.getFileSystemRepresentation_maxLength_withPath_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ), representation, maxLength, withPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isDeletableFileAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.isDeletableFileAtPath_( Handle, CachedSelectors.isDeletableFileAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isExecutableFileAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.isExecutableFileAtPath_( Handle, CachedSelectors.isExecutableFileAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isReadableFileAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.isReadableFileAtPath_( Handle, CachedSelectors.isReadableFileAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isWritableFileAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.isWritableFileAtPath_( Handle, CachedSelectors.isWritableFileAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool linkPath_toPath_handler_( string path, string toPath, NObjective.RuntimeObject handler ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___wrappedtoPath = Runtime.CreateStringProxy( toPath );
			var ___result = NativeMethods.linkPath_toPath_handler_( Handle, CachedSelectors.linkPath_toPath_handler_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), ___wrappedpath, ___wrappedtoPath, handler );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedtoPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool movePath_toPath_handler_( string path, string toPath, NObjective.RuntimeObject handler ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___wrappedtoPath = Runtime.CreateStringProxy( toPath );
			var ___result = NativeMethods.movePath_toPath_handler_( Handle, CachedSelectors.movePath_toPath_handler_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), ___wrappedpath, ___wrappedtoPath, handler );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedtoPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string pathContentOfSymbolicLinkAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.pathContentOfSymbolicLinkAtPath_( Handle, CachedSelectors.pathContentOfSymbolicLinkAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public char removeExtendedAttributeForKey_atPath_error_( NObjective.RuntimeObject key, NObjective.RuntimeObject atPath, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeExtendedAttributeForKey_atPath_error_( Handle, CachedSelectors.removeExtendedAttributeForKey_atPath_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), key, atPath, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool removeFileAtPath_handler_( string path, NObjective.RuntimeObject handler ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.removeFileAtPath_handler_( Handle, CachedSelectors.removeFileAtPath_handler_, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), ___wrappedpath, handler );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setExtendedAttribute_forKey_atPath_error_( NObjective.RuntimeObject attribute, NObjective.RuntimeObject forKey, NObjective.RuntimeObject atPath, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setExtendedAttribute_forKey_atPath_error_( Handle, CachedSelectors.setExtendedAttribute_forKey_atPath_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), attribute, forKey, atPath, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string stringWithFileSystemRepresentation_length_( IntPtr representation, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithFileSystemRepresentation_length_( Handle, CachedSelectors.stringWithFileSystemRepresentation_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), representation, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSArray subpathsAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.subpathsAtPath_( Handle, CachedSelectors.subpathsAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool changeCurrentDirectoryPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool changeFileAttributes_atPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary attributes, IntPtr atPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr componentsToDisplayForPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentsAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool contentsEqualAtPath_andPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, IntPtr andPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool copyPath_toPath_handler_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, IntPtr toPath, NObjective.RuntimeObject handler );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool createDirectoryAtPath_attributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, NSDictionary attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool createFileAtPath_contents_attributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, NSData contents, NSDictionary attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool createSymbolicLinkAtPath_pathContent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, IntPtr pathContent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentDirectoryPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char directoryCanBeCreatedAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryContentsAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryContentsAtPath_matchingExtension_options_keepExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, NObjective.RuntimeObject matchingExtension, int options, char keepExtension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayNameAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr enumeratorAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr extendedAttributeForKey_atPath_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject atPath, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr extendedAttributesAtPath_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileAttributesAtPath_traverseLink_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, bool traverseLink );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool fileExistsAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool fileExistsAtPath_isDirectory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, IntPtr isDirectory );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileSystemAttributesAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr fileSystemRepresentationWithPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char getFileSystemRepresentation_maxLength_withPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr representation, uint maxLength, NObjective.RuntimeObject withPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDeletableFileAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isExecutableFileAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isReadableFileAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isWritableFileAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool linkPath_toPath_handler_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, IntPtr toPath, NObjective.RuntimeObject handler );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool movePath_toPath_handler_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, IntPtr toPath, NObjective.RuntimeObject handler );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathContentOfSymbolicLinkAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeExtendedAttributeForKey_atPath_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject atPath, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool removeFileAtPath_handler_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, NObjective.RuntimeObject handler );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char setExtendedAttribute_forKey_atPath_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute, NObjective.RuntimeObject forKey, NObjective.RuntimeObject atPath, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithFileSystemRepresentation_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr representation, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subpathsAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
		}
		static internal class CachedSelectors {
			public static readonly Selector changeCurrentDirectoryPath_ = "changeCurrentDirectoryPath:";
			public static readonly Selector changeFileAttributes_atPath_ = "changeFileAttributes:atPath:";
			public static readonly Selector componentsToDisplayForPath_ = "componentsToDisplayForPath:";
			public static readonly Selector contentsAtPath_ = "contentsAtPath:";
			public static readonly Selector contentsEqualAtPath_andPath_ = "contentsEqualAtPath:andPath:";
			public static readonly Selector copyPath_toPath_handler_ = "copyPath:toPath:handler:";
			public static readonly Selector createDirectoryAtPath_attributes_ = "createDirectoryAtPath:attributes:";
			public static readonly Selector createFileAtPath_contents_attributes_ = "createFileAtPath:contents:attributes:";
			public static readonly Selector createSymbolicLinkAtPath_pathContent_ = "createSymbolicLinkAtPath:pathContent:";
			public static readonly Selector currentDirectoryPath = "currentDirectoryPath";
			public static readonly Selector defaultManager = "defaultManager";
			public static readonly Selector directoryCanBeCreatedAtPath_ = "directoryCanBeCreatedAtPath:";
			public static readonly Selector directoryContentsAtPath_ = "directoryContentsAtPath:";
			public static readonly Selector directoryContentsAtPath_matchingExtension_options_keepExtension_ = "directoryContentsAtPath:matchingExtension:options:keepExtension:";
			public static readonly Selector displayNameAtPath_ = "displayNameAtPath:";
			public static readonly Selector enumeratorAtPath_ = "enumeratorAtPath:";
			public static readonly Selector extendedAttributeForKey_atPath_error_ = "extendedAttributeForKey:atPath:error:";
			public static readonly Selector extendedAttributesAtPath_error_ = "extendedAttributesAtPath:error:";
			public static readonly Selector fileAttributesAtPath_traverseLink_ = "fileAttributesAtPath:traverseLink:";
			public static readonly Selector fileExistsAtPath_ = "fileExistsAtPath:";
			public static readonly Selector fileExistsAtPath_isDirectory_ = "fileExistsAtPath:isDirectory:";
			public static readonly Selector fileSystemAttributesAtPath_ = "fileSystemAttributesAtPath:";
			public static readonly Selector fileSystemRepresentationWithPath_ = "fileSystemRepresentationWithPath:";
			public static readonly Selector getFileSystemRepresentation_maxLength_withPath_ = "getFileSystemRepresentation:maxLength:withPath:";
			public static readonly Selector isDeletableFileAtPath_ = "isDeletableFileAtPath:";
			public static readonly Selector isExecutableFileAtPath_ = "isExecutableFileAtPath:";
			public static readonly Selector isReadableFileAtPath_ = "isReadableFileAtPath:";
			public static readonly Selector isWritableFileAtPath_ = "isWritableFileAtPath:";
			public static readonly Selector linkPath_toPath_handler_ = "linkPath:toPath:handler:";
			public static readonly Selector movePath_toPath_handler_ = "movePath:toPath:handler:";
			public static readonly Selector pathContentOfSymbolicLinkAtPath_ = "pathContentOfSymbolicLinkAtPath:";
			public static readonly Selector removeExtendedAttributeForKey_atPath_error_ = "removeExtendedAttributeForKey:atPath:error:";
			public static readonly Selector removeFileAtPath_handler_ = "removeFileAtPath:handler:";
			public static readonly Selector setExtendedAttribute_forKey_atPath_error_ = "setExtendedAttribute:forKey:atPath:error:";
			public static readonly Selector stringWithFileSystemRepresentation_length_ = "stringWithFileSystemRepresentation:length:";
			public static readonly Selector subpathsAtPath_ = "subpathsAtPath:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLHandle ) )]
	public struct NSFileURLHandle : IEquatable<NSFileURLHandle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSFileURLHandle;
		public static implicit operator IntPtr( NSFileURLHandle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSFileURLHandle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSFileURLHandle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSFileURLHandle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSFileURLHandle value1, NSFileURLHandle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSFileURLHandle value1, NSFileURLHandle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSFileURLHandle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSFileURLHandle alloc() {
			return new NSFileURLHandle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLProtocol ) )]
	public struct NSFileURLProtocol : IEquatable<NSFileURLProtocol> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSFileURLProtocol;
		public static implicit operator IntPtr( NSFileURLProtocol value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSFileURLProtocol value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSFileURLProtocol?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSFileURLProtocol value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSFileURLProtocol value1, NSFileURLProtocol value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSFileURLProtocol value1, NSFileURLProtocol value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSFileURLProtocol( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSFileURLProtocol alloc() {
			return new NSFileURLProtocol( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void didLoadData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.didLoadData_( Handle, CachedSelectors.didLoadData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didLoadData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
		}
		static internal class CachedSelectors {
			public static readonly Selector didLoadData_ = "didLoadData:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSRefCountingNumber ) )]
	public struct NSfloatNumber : IEquatable<NSfloatNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSfloatNumber;
		public static implicit operator IntPtr( NSfloatNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSfloatNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSfloatNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSfloatNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSfloatNumber value1, NSfloatNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSfloatNumber value1, NSfloatNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSfloatNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSfloatNumber alloc() {
			return new NSfloatNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSFormatter : IEquatable<NSFormatter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSFormatter;
		public static implicit operator IntPtr( NSFormatter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSFormatter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSFormatter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSFormatter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSFormatter value1, NSFormatter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSFormatter value1, NSFormatter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSFormatter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSFormatter alloc() {
			return new NSFormatter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSAttributedString attributedStringForObjectValue_withDefaultAttributes_( NObjective.RuntimeObject value, NSDictionary withDefaultAttributes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedStringForObjectValue_withDefaultAttributes_( Handle, CachedSelectors.attributedStringForObjectValue_withDefaultAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NSDictionary ), value, withDefaultAttributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAttributedString( ___result );
		}
		unsafe public string editingStringForObjectValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editingStringForObjectValue_( Handle, CachedSelectors.editingStringForObjectValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool getObjectValue_forString_errorDescription_( IntPtr value, string forString, ref string errorDescription ) {
			RuntimeObject ___occuredException;
			var ___wrappedforString = Runtime.CreateStringProxy( forString );
			var ___wrappederrorDescription = Runtime.CreateStringProxy( errorDescription );
			var ___result = NativeMethods.getObjectValue_forString_errorDescription_( Handle, CachedSelectors.getObjectValue_forString_errorDescription_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), value, ___wrappedforString, ref ___wrappederrorDescription );
			Runtime.ReleaseNativeObject( ___wrappedforString );
			errorDescription = Runtime.UnwrapNSString( ___wrappederrorDescription );
			Runtime.ReleaseNativeObject( ___wrappederrorDescription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSFormatter initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFormatter( ___result );
		}
		unsafe public bool isPartialStringValid_newEditingString_errorDescription_( string valid, ref string newEditingString, ref string errorDescription ) {
			RuntimeObject ___occuredException;
			var ___wrappedvalid = Runtime.CreateStringProxy( valid );
			var ___wrappednewEditingString = Runtime.CreateStringProxy( newEditingString );
			var ___wrappederrorDescription = Runtime.CreateStringProxy( errorDescription );
			var ___result = NativeMethods.isPartialStringValid_newEditingString_errorDescription_( Handle, CachedSelectors.isPartialStringValid_newEditingString_errorDescription_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedvalid, ref ___wrappednewEditingString, ref ___wrappederrorDescription );
			Runtime.ReleaseNativeObject( ___wrappedvalid );
			newEditingString = Runtime.UnwrapNSString( ___wrappednewEditingString );
			Runtime.ReleaseNativeObject( ___wrappednewEditingString );
			errorDescription = Runtime.UnwrapNSString( ___wrappederrorDescription );
			Runtime.ReleaseNativeObject( ___wrappederrorDescription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_( ref string valid, _NSRange[] proposedSelectedRange, string originalString, _NSRange originalSelectedRange, ref string errorDescription ) {
			RuntimeObject ___occuredException;
			var ___wrappedvalid = Runtime.CreateStringProxy( valid );
			var ___wrappedoriginalString = Runtime.CreateStringProxy( originalString );
			var ___wrappederrorDescription = Runtime.CreateStringProxy( errorDescription );
			var ___result = NativeMethods.isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_( Handle, CachedSelectors.isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( _NSRange ) + sizeof( IntPtr ), ref ___wrappedvalid, proposedSelectedRange, ___wrappedoriginalString, originalSelectedRange, ref ___wrappederrorDescription );
			valid = Runtime.UnwrapNSString( ___wrappedvalid );
			Runtime.ReleaseNativeObject( ___wrappedvalid );
			Runtime.ReleaseNativeObject( ___wrappedoriginalString );
			errorDescription = Runtime.UnwrapNSString( ___wrappederrorDescription );
			Runtime.ReleaseNativeObject( ___wrappederrorDescription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string stringForObjectValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringForObjectValue_( Handle, CachedSelectors.stringForObjectValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedStringForObjectValue_withDefaultAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NSDictionary withDefaultAttributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr editingStringForObjectValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool getObjectValue_forString_errorDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value, IntPtr forString, ref IntPtr errorDescription );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPartialStringValid_newEditingString_errorDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr valid, ref IntPtr newEditingString, ref IntPtr errorDescription );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ref IntPtr valid, _NSRange[] proposedSelectedRange, IntPtr originalString, _NSRange originalSelectedRange, ref IntPtr errorDescription );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringForObjectValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
		}
		static internal class CachedSelectors {
			public static readonly Selector attributedStringForObjectValue_withDefaultAttributes_ = "attributedStringForObjectValue:withDefaultAttributes:";
			public static readonly Selector editingStringForObjectValue_ = "editingStringForObjectValue:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector getObjectValue_forString_errorDescription_ = "getObjectValue:forString:errorDescription:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector isPartialStringValid_newEditingString_errorDescription_ = "isPartialStringValid:newEditingString:errorDescription:";
			public static readonly Selector isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_ = "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:";
			public static readonly Selector stringForObjectValue_ = "stringForObjectValue:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLHandle ) )]
	public struct NSFTPURLHandle : IEquatable<NSFTPURLHandle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSFTPURLHandle;
		public static implicit operator IntPtr( NSFTPURLHandle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSFTPURLHandle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSFTPURLHandle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSFTPURLHandle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSFTPURLHandle value1, NSFTPURLHandle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSFTPURLHandle value1, NSFTPURLHandle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSFTPURLHandle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSFTPURLHandle alloc() {
			return new NSFTPURLHandle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject errorStringForFTPStatusCode_fromURL_( int code, NObjective.RuntimeObject fromURL ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.errorStringForFTPStatusCode_fromURL_( Handle, CachedSelectors.errorStringForFTPStatusCode_fromURL_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), code, fromURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void performStreamRead() {
			RuntimeObject ___occuredException;
			NativeMethods.performStreamRead( Handle, CachedSelectors.performStreamRead, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reportStreamError() {
			RuntimeObject ___occuredException;
			NativeMethods.reportStreamError( Handle, CachedSelectors.reportStreamError, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr errorStringForFTPStatusCode_fromURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int code, NObjective.RuntimeObject fromURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performStreamRead( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reportStreamError( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector errorStringForFTPStatusCode_fromURL_ = "errorStringForFTPStatusCode:fromURL:";
			public static readonly Selector performStreamRead = "performStreamRead";
			public static readonly Selector reportStreamError = "reportStreamError";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLProtocol ) )]
	public struct NSFTPURLProtocol : IEquatable<NSFTPURLProtocol> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSFTPURLProtocol;
		public static implicit operator IntPtr( NSFTPURLProtocol value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSFTPURLProtocol value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSFTPURLProtocol?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSFTPURLProtocol value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSFTPURLProtocol value1, NSFTPURLProtocol value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSFTPURLProtocol value1, NSFTPURLProtocol value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSFTPURLProtocol( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSFTPURLProtocol alloc() {
			return new NSFTPURLProtocol( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void determineErrorAndFail() {
			RuntimeObject ___occuredException;
			NativeMethods.determineErrorAndFail( Handle, CachedSelectors.determineErrorAndFail, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void didLoadData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.didLoadData_( Handle, CachedSelectors.didLoadData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleEndEncountered() {
			RuntimeObject ___occuredException;
			NativeMethods.handleEndEncountered( Handle, CachedSelectors.handleEndEncountered, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleHasBytesAvailable() {
			RuntimeObject ___occuredException;
			NativeMethods.handleHasBytesAvailable( Handle, CachedSelectors.handleHasBytesAvailable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendResponseAvailableCallback() {
			RuntimeObject ___occuredException;
			NativeMethods.sendResponseAvailableCallback( Handle, CachedSelectors.sendResponseAvailableCallback, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void determineErrorAndFail( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didLoadData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleEndEncountered( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleHasBytesAvailable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendResponseAvailableCallback( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector determineErrorAndFail = "determineErrorAndFail";
			public static readonly Selector didLoadData_ = "didLoadData:";
			public static readonly Selector handleEndEncountered = "handleEndEncountered";
			public static readonly Selector handleHasBytesAvailable = "handleHasBytesAvailable";
			public static readonly Selector sendResponseAvailableCallback = "sendResponseAvailableCallback";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSExpression ) )]
	public struct NSFunctionExpression : IEquatable<NSFunctionExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSFunctionExpression;
		public static implicit operator IntPtr( NSFunctionExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSFunctionExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSFunctionExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSFunctionExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSFunctionExpression value1, NSFunctionExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSFunctionExpression value1, NSFunctionExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSFunctionExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSFunctionExpression alloc() {
			return new NSFunctionExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char binaryOperatorForSelector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.binaryOperatorForSelector( Handle, CachedSelectors.binaryOperatorForSelector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSFunctionExpression initWithExpressionType_operand_selector_argumentArray_( int type, NObjective.RuntimeObject operand, NObjective.Selector selector, NObjective.RuntimeObject argumentArray ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithExpressionType_operand_selector_argumentArray_( Handle, CachedSelectors.initWithExpressionType_operand_selector_argumentArray_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), type, operand, selector, argumentArray );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFunctionExpression( ___result );
		}
		unsafe public NSFunctionExpression initWithSelector_argumentArray_( NObjective.Selector selector, NObjective.RuntimeObject argumentArray ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSelector_argumentArray_( Handle, CachedSelectors.initWithSelector_argumentArray_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, argumentArray );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFunctionExpression( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char binaryOperatorForSelector( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithExpressionType_operand_selector_argumentArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, NObjective.RuntimeObject operand, NObjective.Selector selector, NObjective.RuntimeObject argumentArray );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSelector_argumentArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject argumentArray );
		}
		static internal class CachedSelectors {
			public static readonly Selector binaryOperatorForSelector = "binaryOperatorForSelector";
			public static readonly Selector initWithExpressionType_operand_selector_argumentArray_ = "initWithExpressionType:operand:selector:argumentArray:";
			public static readonly Selector initWithSelector_argumentArray_ = "initWithSelector:argumentArray:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCommand ) )]
	public struct NSGetCommand : IEquatable<NSGetCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSGetCommand;
		public static implicit operator IntPtr( NSGetCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSGetCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSGetCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSGetCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSGetCommand value1, NSGetCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSGetCommand value1, NSGetCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSGetCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSGetCommand alloc() {
			return new NSGetCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSGZipDecoder : IEquatable<NSGZipDecoder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSGZipDecoder;
		public static implicit operator IntPtr( NSGZipDecoder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSGZipDecoder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSGZipDecoder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSGZipDecoder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSGZipDecoder value1, NSGZipDecoder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSGZipDecoder value1, NSGZipDecoder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSGZipDecoder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSGZipDecoder alloc() {
			return new NSGZipDecoder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char canDecodeDownloadHeaderData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canDecodeDownloadHeaderData_( ClassHandle, CachedSelectors.canDecodeDownloadHeaderData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char decodeDownloadHeader_headerLength_modificationTime_filename_( NObjective.RuntimeObject header, System.IntPtr headerLength, System.IntPtr modificationTime, System.IntPtr filename ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeDownloadHeader_headerLength_modificationTime_filename_( ClassHandle, CachedSelectors.decodeDownloadHeader_headerLength_modificationTime_filename_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), header, headerLength, modificationTime, filename );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject MIMEType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.MIMEType( ClassHandle, CachedSelectors.MIMEType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject decodeData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeData_( Handle, CachedSelectors.decodeData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char decodeDownloadData_dataForkData_resourceForkData_( NObjective.RuntimeObject data, System.IntPtr dataForkData, System.IntPtr resourceForkData ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeDownloadData_dataForkData_resourceForkData_( Handle, CachedSelectors.decodeDownloadData_dataForkData_resourceForkData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), data, dataForkData, resourceForkData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject fileAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileAttributes( Handle, CachedSelectors.fileAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject filenameWithOriginalFilename_( NObjective.RuntimeObject filename ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filenameWithOriginalFilename_( Handle, CachedSelectors.filenameWithOriginalFilename_, out ___occuredException, sizeof( NObjective.RuntimeObject ), filename );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char finishDownloadDecoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.finishDownloadDecoding( Handle, CachedSelectors.finishDownloadDecoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isFinishedDecoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFinishedDecoding( Handle, CachedSelectors.isFinishedDecoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canDecodeDownloadHeaderData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decodeData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char decodeDownloadData_dataForkData_resourceForkData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, System.IntPtr dataForkData, System.IntPtr resourceForkData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char decodeDownloadHeader_headerLength_modificationTime_filename_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject header, System.IntPtr headerLength, System.IntPtr modificationTime, System.IntPtr filename );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr filenameWithOriginalFilename_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filename );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char finishDownloadDecoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isFinishedDecoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr MIMEType( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector canDecodeDownloadHeaderData_ = "canDecodeDownloadHeaderData:";
			public static readonly Selector decodeData_ = "decodeData:";
			public static readonly Selector decodeDownloadData_dataForkData_resourceForkData_ = "decodeDownloadData:dataForkData:resourceForkData:";
			public static readonly Selector decodeDownloadHeader_headerLength_modificationTime_filename_ = "decodeDownloadHeader:headerLength:modificationTime:filename:";
			public static readonly Selector fileAttributes = "fileAttributes";
			public static readonly Selector filenameWithOriginalFilename_ = "filenameWithOriginalFilename:";
			public static readonly Selector finishDownloadDecoding = "finishDownloadDecoding";
			public static readonly Selector isFinishedDecoding = "isFinishedDecoding";
			public static readonly Selector MIMEType = "MIMEType";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHost : IEquatable<NSHost> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHost;
		public static implicit operator IntPtr( NSHost value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHost value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHost?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHost value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHost value1, NSHost value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHost value1, NSHost value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHost( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHost alloc() {
			return new NSHost( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSHost currentHost() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentHost( ClassHandle, CachedSelectors.currentHost, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSHost( ___result );
		}
		unsafe public static void flushHostCache() {
			RuntimeObject ___occuredException;
			NativeMethods.flushHostCache( ClassHandle, CachedSelectors.flushHostCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NSHost hostWithAddress_( string address ) {
			RuntimeObject ___occuredException;
			var ___wrappedaddress = Runtime.CreateStringProxy( address );
			var ___result = NativeMethods.hostWithAddress_( ClassHandle, CachedSelectors.hostWithAddress_, out ___occuredException, sizeof( IntPtr ), ___wrappedaddress );
			Runtime.ReleaseNativeObject( ___wrappedaddress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSHost( ___result );
		}
		unsafe public static NSHost hostWithName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.hostWithName_( ClassHandle, CachedSelectors.hostWithName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSHost( ___result );
		}
		unsafe public static bool isHostCacheEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isHostCacheEnabled( ClassHandle, CachedSelectors.isHostCacheEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void setHostCacheEnabled_( bool enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHostCacheEnabled_( ClassHandle, CachedSelectors.setHostCacheEnabled_, out ___occuredException, sizeof( bool ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string address() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.address( Handle, CachedSelectors.address, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSArray addresses() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addresses( Handle, CachedSelectors.addresses, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public bool isEqualToHost_( NSHost host ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToHost_( Handle, CachedSelectors.isEqualToHost_, out ___occuredException, sizeof( NSHost ), host );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSArray names() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.names( Handle, CachedSelectors.names, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr address( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addresses( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentHost( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void flushHostCache( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hostWithAddress_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr address );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hostWithName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToHost_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSHost host );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isHostCacheEnabled( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr names( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHostCacheEnabled_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool enabled );
		}
		static internal class CachedSelectors {
			public static readonly Selector address = "address";
			public static readonly Selector addresses = "addresses";
			public static readonly Selector currentHost = "currentHost";
			public static readonly Selector flushHostCache = "flushHostCache";
			public static readonly Selector hostWithAddress_ = "hostWithAddress:";
			public static readonly Selector hostWithName_ = "hostWithName:";
			public static readonly Selector isEqualToHost_ = "isEqualToHost:";
			public static readonly Selector isHostCacheEnabled = "isHostCacheEnabled";
			public static readonly Selector name = "name";
			public static readonly Selector names = "names";
			public static readonly Selector setHostCacheEnabled_ = "setHostCacheEnabled:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHTTPAuthenticator : IEquatable<NSHTTPAuthenticator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPAuthenticator;
		public static implicit operator IntPtr( NSHTTPAuthenticator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPAuthenticator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPAuthenticator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPAuthenticator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPAuthenticator value1, NSHTTPAuthenticator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPAuthenticator value1, NSHTTPAuthenticator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPAuthenticator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPAuthenticator alloc() {
			return new NSHTTPAuthenticator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedHTTPAuthenticator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedHTTPAuthenticator( ClassHandle, CachedSelectors.sharedHTTPAuthenticator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void continueWithoutCredentialForAuthenticationChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.continueWithoutCredentialForAuthenticationChallenge_( Handle, CachedSelectors.continueWithoutCredentialForAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char haveCredentialForURL_proxyURL_( NObjective.RuntimeObject url, NObjective.RuntimeObject proxyURL ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.haveCredentialForURL_proxyURL_( Handle, CachedSelectors.haveCredentialForURL_proxyURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), url, proxyURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void useCredential_forAuthenticationChallenge_( NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.useCredential_forAuthenticationChallenge_( Handle, CachedSelectors.useCredential_forAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), credential, forAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueWithoutCredentialForAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char haveCredentialForURL_proxyURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, NObjective.RuntimeObject proxyURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedHTTPAuthenticator( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void useCredential_forAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge );
		}
		static internal class CachedSelectors {
			public static readonly Selector continueWithoutCredentialForAuthenticationChallenge_ = "continueWithoutCredentialForAuthenticationChallenge:";
			public static readonly Selector haveCredentialForURL_proxyURL_ = "haveCredentialForURL:proxyURL:";
			public static readonly Selector sharedHTTPAuthenticator = "sharedHTTPAuthenticator";
			public static readonly Selector useCredential_forAuthenticationChallenge_ = "useCredential:forAuthenticationChallenge:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHTTPConnectionCache : IEquatable<NSHTTPConnectionCache> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPConnectionCache;
		public static implicit operator IntPtr( NSHTTPConnectionCache value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPConnectionCache value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPConnectionCache?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPConnectionCache value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPConnectionCache value1, NSHTTPConnectionCache value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPConnectionCache value1, NSHTTPConnectionCache value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPConnectionCache( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPConnectionCache alloc() {
			return new NSHTTPConnectionCache( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int connectionCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connectionCount( Handle, CachedSelectors.connectionCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int hostCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hostCount( Handle, CachedSelectors.hostCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void purgeConnectionsIdleFor_( double @for ) {
			RuntimeObject ___occuredException;
			NativeMethods.purgeConnectionsIdleFor_( Handle, CachedSelectors.purgeConnectionsIdleFor_, out ___occuredException, sizeof( double ), @for );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int connectionCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int hostCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void purgeConnectionsIdleFor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double @for );
		}
		static internal class CachedSelectors {
			public static readonly Selector connectionCount = "connectionCount";
			public static readonly Selector hostCount = "hostCount";
			public static readonly Selector purgeConnectionsIdleFor_ = "purgeConnectionsIdleFor:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHTTPCookie : IEquatable<NSHTTPCookie> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPCookie;
		public static implicit operator IntPtr( NSHTTPCookie value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPCookie value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPCookie?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPCookie value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPCookie value1, NSHTTPCookie value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPCookie value1, NSHTTPCookie value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPCookie( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPCookie alloc() {
			return new NSHTTPCookie( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSArray cookiesWithResponseHeaderFields_forURL_( NSDictionary fields, NSURL forURL ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cookiesWithResponseHeaderFields_forURL_( ClassHandle, CachedSelectors.cookiesWithResponseHeaderFields_forURL_, out ___occuredException, sizeof( NSDictionary ) + sizeof( NSURL ), fields, forURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NObjective.RuntimeObject cookieWithProperties_( NSDictionary properties ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cookieWithProperties_( ClassHandle, CachedSelectors.cookieWithProperties_, out ___occuredException, sizeof( NSDictionary ), properties );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject cookieWithV0Spec_forURL_locationHeader_( NObjective.RuntimeObject spec, NObjective.RuntimeObject forURL, NObjective.RuntimeObject locationHeader ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cookieWithV0Spec_forURL_locationHeader_( ClassHandle, CachedSelectors.cookieWithV0Spec_forURL_locationHeader_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), spec, forURL, locationHeader );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSDictionary requestHeaderFieldsWithCookies_( NSArray cookies ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requestHeaderFieldsWithCookies_( ClassHandle, CachedSelectors.requestHeaderFieldsWithCookies_, out ___occuredException, sizeof( NSArray ), cookies );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public string comment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comment( Handle, CachedSelectors.comment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSURL commentURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.commentURL( Handle, CachedSelectors.commentURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURL( ___result );
		}
		unsafe public int compare_( NObjective.RuntimeObject compare ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compare_( Handle, CachedSelectors.compare_, out ___occuredException, sizeof( NObjective.RuntimeObject ), compare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string domain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.domain( Handle, CachedSelectors.domain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSDate expiresDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expiresDate( Handle, CachedSelectors.expiresDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSHTTPCookie initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSHTTPCookie( ___result );
		}
		unsafe public NSHTTPCookie initWithProperties_( NSDictionary properties ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProperties_( Handle, CachedSelectors.initWithProperties_, out ___occuredException, sizeof( NSDictionary ), properties );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSHTTPCookie( ___result );
		}
		unsafe public bool isHTTPOnly() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isHTTPOnly( Handle, CachedSelectors.isHTTPOnly, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSecure() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSecure( Handle, CachedSelectors.isSecure, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSessionOnly() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSessionOnly( Handle, CachedSelectors.isSessionOnly, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string path() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.path( Handle, CachedSelectors.path, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSArray portList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.portList( Handle, CachedSelectors.portList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSDictionary properties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.properties( Handle, CachedSelectors.properties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public string value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint version() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.version( Handle, CachedSelectors.version, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr comment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commentURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject compare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cookiesWithResponseHeaderFields_forURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary fields, NSURL forURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cookieWithProperties_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary properties );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cookieWithV0Spec_forURL_locationHeader_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject spec, NObjective.RuntimeObject forURL, NObjective.RuntimeObject locationHeader );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr domain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expiresDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProperties_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary properties );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isHTTPOnly( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSecure( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSessionOnly( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr path( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr portList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr properties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requestHeaderFieldsWithCookies_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray cookies );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint version( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector comment = "comment";
			public static readonly Selector commentURL = "commentURL";
			public static readonly Selector compare_ = "compare:";
			public static readonly Selector cookiesWithResponseHeaderFields_forURL_ = "cookiesWithResponseHeaderFields:forURL:";
			public static readonly Selector cookieWithProperties_ = "cookieWithProperties:";
			public static readonly Selector cookieWithV0Spec_forURL_locationHeader_ = "cookieWithV0Spec:forURL:locationHeader:";
			public static readonly Selector domain = "domain";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector expiresDate = "expiresDate";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithProperties_ = "initWithProperties:";
			public static readonly Selector isHTTPOnly = "isHTTPOnly";
			public static readonly Selector isSecure = "isSecure";
			public static readonly Selector isSessionOnly = "isSessionOnly";
			public static readonly Selector name = "name";
			public static readonly Selector path = "path";
			public static readonly Selector portList = "portList";
			public static readonly Selector properties = "properties";
			public static readonly Selector requestHeaderFieldsWithCookies_ = "requestHeaderFieldsWithCookies:";
			public static readonly Selector value = "value";
			public static readonly Selector version = "version";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHTTPCookieDiskStorage : IEquatable<NSHTTPCookieDiskStorage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPCookieDiskStorage;
		public static implicit operator IntPtr( NSHTTPCookieDiskStorage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPCookieDiskStorage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPCookieDiskStorage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPCookieDiskStorage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPCookieDiskStorage value1, NSHTTPCookieDiskStorage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPCookieDiskStorage value1, NSHTTPCookieDiskStorage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPCookieDiskStorage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPCookieDiskStorage alloc() {
			return new NSHTTPCookieDiskStorage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cookies() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cookies( Handle, CachedSelectors.cookies, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cookiesMatchingDomain_path_secure_( NObjective.RuntimeObject domain, NObjective.RuntimeObject path, char secure ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cookiesMatchingDomain_path_secure_( Handle, CachedSelectors.cookiesMatchingDomain_path_secure_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), domain, path, secure );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deleteCookies_( NObjective.RuntimeObject cookies ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteCookies_( Handle, CachedSelectors.deleteCookies_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cookies );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSHTTPCookieDiskStorage initWithNotificationObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithNotificationObject_( Handle, CachedSelectors.initWithNotificationObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSHTTPCookieDiskStorage( ___result );
		}
		unsafe public void purgeCookiesFromPrivateBrowsing() {
			RuntimeObject ___occuredException;
			NativeMethods.purgeCookiesFromPrivateBrowsing( Handle, CachedSelectors.purgeCookiesFromPrivateBrowsing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCookies_whilePrivateBrowsing_( NObjective.RuntimeObject cookies, char whilePrivateBrowsing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCookies_whilePrivateBrowsing_( Handle, CachedSelectors.setCookies_whilePrivateBrowsing_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), cookies, whilePrivateBrowsing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cookies( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cookiesMatchingDomain_path_secure_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject domain, NObjective.RuntimeObject path, char secure );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteCookies_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cookies );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithNotificationObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void purgeCookiesFromPrivateBrowsing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCookies_whilePrivateBrowsing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cookies, char whilePrivateBrowsing );
		}
		static internal class CachedSelectors {
			public static readonly Selector cookies = "cookies";
			public static readonly Selector cookiesMatchingDomain_path_secure_ = "cookiesMatchingDomain:path:secure:";
			public static readonly Selector deleteCookies_ = "deleteCookies:";
			public static readonly Selector initWithNotificationObject_ = "initWithNotificationObject:";
			public static readonly Selector purgeCookiesFromPrivateBrowsing = "purgeCookiesFromPrivateBrowsing";
			public static readonly Selector setCookies_whilePrivateBrowsing_ = "setCookies:whilePrivateBrowsing:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHTTPCookieDiskStoragePrivate : IEquatable<NSHTTPCookieDiskStoragePrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPCookieDiskStoragePrivate;
		public static implicit operator IntPtr( NSHTTPCookieDiskStoragePrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPCookieDiskStoragePrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPCookieDiskStoragePrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPCookieDiskStoragePrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPCookieDiskStoragePrivate value1, NSHTTPCookieDiskStoragePrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPCookieDiskStoragePrivate value1, NSHTTPCookieDiskStoragePrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPCookieDiskStoragePrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPCookieDiskStoragePrivate alloc() {
			return new NSHTTPCookieDiskStoragePrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHTTPCookieInternal : IEquatable<NSHTTPCookieInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPCookieInternal;
		public static implicit operator IntPtr( NSHTTPCookieInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPCookieInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPCookieInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPCookieInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPCookieInternal value1, NSHTTPCookieInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPCookieInternal value1, NSHTTPCookieInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPCookieInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPCookieInternal alloc() {
			return new NSHTTPCookieInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHTTPCookieStorage : IEquatable<NSHTTPCookieStorage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPCookieStorage;
		public static implicit operator IntPtr( NSHTTPCookieStorage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPCookieStorage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPCookieStorage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPCookieStorage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPCookieStorage value1, NSHTTPCookieStorage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPCookieStorage value1, NSHTTPCookieStorage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPCookieStorage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPCookieStorage alloc() {
			return new NSHTTPCookieStorage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSHTTPCookieStorage sharedHTTPCookieStorage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedHTTPCookieStorage( ClassHandle, CachedSelectors.sharedHTTPCookieStorage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSHTTPCookieStorage( ___result );
		}
		unsafe public NSHTTPCookieAcceptPolicy cookieAcceptPolicy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cookieAcceptPolicy( Handle, CachedSelectors.cookieAcceptPolicy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSHTTPCookieAcceptPolicy ) ___result;
		}
		unsafe public NObjective.RuntimeObject cookieRequestHeaderFieldsForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cookieRequestHeaderFieldsForURL_( Handle, CachedSelectors.cookieRequestHeaderFieldsForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSArray cookies() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cookies( Handle, CachedSelectors.cookies, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray cookiesForURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cookiesForURL_( Handle, CachedSelectors.cookiesForURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void deleteCookie_( NSHTTPCookie cookie ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteCookie_( Handle, CachedSelectors.deleteCookie_, out ___occuredException, sizeof( NSHTTPCookie ), cookie );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCookie_( NSHTTPCookie cookie ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCookie_( Handle, CachedSelectors.setCookie_, out ___occuredException, sizeof( NSHTTPCookie ), cookie );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCookieAcceptPolicy_( NSHTTPCookieAcceptPolicy policy ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCookieAcceptPolicy_( Handle, CachedSelectors.setCookieAcceptPolicy_, out ___occuredException, sizeof( NSHTTPCookieAcceptPolicy ), policy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCookies_forURL_mainDocumentURL_( NSArray cookies, NSURL forURL, NSURL mainDocumentURL ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCookies_forURL_mainDocumentURL_( Handle, CachedSelectors.setCookies_forURL_mainDocumentURL_, out ___occuredException, sizeof( NSArray ) + sizeof( NSURL ) + sizeof( NSURL ), cookies, forURL, mainDocumentURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCookiesFromResponseHeader_forURL_policyBaseURL_( NObjective.RuntimeObject header, NObjective.RuntimeObject forURL, NObjective.RuntimeObject policyBaseURL ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCookiesFromResponseHeader_forURL_policyBaseURL_( Handle, CachedSelectors.setCookiesFromResponseHeader_forURL_policyBaseURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), header, forURL, policyBaseURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int cookieAcceptPolicy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cookieRequestHeaderFieldsForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cookies( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cookiesForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteCookie_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSHTTPCookie cookie );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCookie_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSHTTPCookie cookie );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCookieAcceptPolicy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSHTTPCookieAcceptPolicy policy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCookies_forURL_mainDocumentURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray cookies, NSURL forURL, NSURL mainDocumentURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCookiesFromResponseHeader_forURL_policyBaseURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject header, NObjective.RuntimeObject forURL, NObjective.RuntimeObject policyBaseURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedHTTPCookieStorage( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cookieAcceptPolicy = "cookieAcceptPolicy";
			public static readonly Selector cookieRequestHeaderFieldsForURL_ = "cookieRequestHeaderFieldsForURL:";
			public static readonly Selector cookies = "cookies";
			public static readonly Selector cookiesForURL_ = "cookiesForURL:";
			public static readonly Selector deleteCookie_ = "deleteCookie:";
			public static readonly Selector setCookie_ = "setCookie:";
			public static readonly Selector setCookieAcceptPolicy_ = "setCookieAcceptPolicy:";
			public static readonly Selector setCookies_forURL_mainDocumentURL_ = "setCookies:forURL:mainDocumentURL:";
			public static readonly Selector setCookiesFromResponseHeader_forURL_policyBaseURL_ = "setCookiesFromResponseHeader:forURL:policyBaseURL:";
			public static readonly Selector sharedHTTPCookieStorage = "sharedHTTPCookieStorage";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHTTPCookieStorageInternal : IEquatable<NSHTTPCookieStorageInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPCookieStorageInternal;
		public static implicit operator IntPtr( NSHTTPCookieStorageInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPCookieStorageInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPCookieStorageInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPCookieStorageInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPCookieStorageInternal value1, NSHTTPCookieStorageInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPCookieStorageInternal value1, NSHTTPCookieStorageInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPCookieStorageInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPCookieStorageInternal alloc() {
			return new NSHTTPCookieStorageInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLHandle ) )]
	public struct NSHTTPURLHandle : IEquatable<NSHTTPURLHandle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPURLHandle;
		public static implicit operator IntPtr( NSHTTPURLHandle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPURLHandle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPURLHandle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPURLHandle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPURLHandle value1, NSHTTPURLHandle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPURLHandle value1, NSHTTPURLHandle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPURLHandle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPURLHandle alloc() {
			return new NSHTTPURLHandle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject canonicalHTTPURLForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canonicalHTTPURLForURL_( ClassHandle, CachedSelectors.canonicalHTTPURLForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void performStreamRead() {
			RuntimeObject ___occuredException;
			NativeMethods.performStreamRead( Handle, CachedSelectors.performStreamRead, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reportStreamError() {
			RuntimeObject ___occuredException;
			NativeMethods.reportStreamError( Handle, CachedSelectors.reportStreamError, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr canonicalHTTPURLForURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performStreamRead( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reportStreamError( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector canonicalHTTPURLForURL_ = "canonicalHTTPURLForURL:";
			public static readonly Selector performStreamRead = "performStreamRead";
			public static readonly Selector reportStreamError = "reportStreamError";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLProtocol ) )]
	public struct NSHTTPURLProtocol : IEquatable<NSHTTPURLProtocol> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPURLProtocol;
		public static implicit operator IntPtr( NSHTTPURLProtocol value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPURLProtocol value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPURLProtocol?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPURLProtocol value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPURLProtocol value1, NSHTTPURLProtocol value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPURLProtocol value1, NSHTTPURLProtocol value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPURLProtocol( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPURLProtocol alloc() {
			return new NSHTTPURLProtocol( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void buildHTTPRequest() {
			RuntimeObject ___occuredException;
			NativeMethods.buildHTTPRequest( Handle, CachedSelectors.buildHTTPRequest, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char cachedResponseMustBeRevalidated() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedResponseMustBeRevalidated( Handle, CachedSelectors.cachedResponseMustBeRevalidated, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cachedResponseRevalidated_( NObjective.RuntimeObject revalidated ) {
			RuntimeObject ___occuredException;
			NativeMethods.cachedResponseRevalidated_( Handle, CachedSelectors.cachedResponseRevalidated_, out ___occuredException, sizeof( NObjective.RuntimeObject ), revalidated );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cleanUpForRetry() {
			RuntimeObject ___occuredException;
			NativeMethods.cleanUpForRetry( Handle, CachedSelectors.cleanUpForRetry, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void determineContentEncoding() {
			RuntimeObject ___occuredException;
			NativeMethods.determineContentEncoding( Handle, CachedSelectors.determineContentEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void determineErrorAndFail() {
			RuntimeObject ___occuredException;
			NativeMethods.determineErrorAndFail( Handle, CachedSelectors.determineErrorAndFail, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int determineHTTPEncodingFromString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.determineHTTPEncodingFromString_( Handle, CachedSelectors.determineHTTPEncodingFromString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void determineTransferEncoding() {
			RuntimeObject ___occuredException;
			NativeMethods.determineTransferEncoding( Handle, CachedSelectors.determineTransferEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void failWithError_( NObjective.RuntimeObject error ) {
			RuntimeObject ___occuredException;
			NativeMethods.failWithError_( Handle, CachedSelectors.failWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ), error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject HTTPResponse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPResponse( Handle, CachedSelectors.HTTPResponse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public double intervalSinceLastActive() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.intervalSinceLastActive( Handle, CachedSelectors.intervalSinceLastActive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject peerCertificateChain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peerCertificateChain( Handle, CachedSelectors.peerCertificateChain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reportDataToClient_( NObjective.RuntimeObject client ) {
			RuntimeObject ___occuredException;
			NativeMethods.reportDataToClient_( Handle, CachedSelectors.reportDataToClient_, out ___occuredException, sizeof( NObjective.RuntimeObject ), client );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reportDidFinishToClient() {
			RuntimeObject ___occuredException;
			NativeMethods.reportDidFinishToClient( Handle, CachedSelectors.reportDidFinishToClient, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void retryWithRedirectedURLAndResultCode_( int code ) {
			RuntimeObject ___occuredException;
			NativeMethods.retryWithRedirectedURLAndResultCode_( Handle, CachedSelectors.retryWithRedirectedURLAndResultCode_, out ___occuredException, sizeof( int ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendResponseAvailableCallback() {
			RuntimeObject ___occuredException;
			NativeMethods.sendResponseAvailableCallback( Handle, CachedSelectors.sendResponseAvailableCallback, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMultiPartDelimiter_( NObjective.RuntimeObject delimiter ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMultiPartDelimiter_( Handle, CachedSelectors.setMultiPartDelimiter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delimiter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setResponseHeader_( NObjective.RuntimeObject header ) {
			RuntimeObject ___occuredException;
			NativeMethods.setResponseHeader_( Handle, CachedSelectors.setResponseHeader_, out ___occuredException, sizeof( NObjective.RuntimeObject ), header );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startOriginLoad() {
			RuntimeObject ___occuredException;
			NativeMethods.startOriginLoad( Handle, CachedSelectors.startOriginLoad, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject URL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URL( Handle, CachedSelectors.URL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void buildHTTPRequest( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char cachedResponseMustBeRevalidated( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cachedResponseRevalidated_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject revalidated );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cleanUpForRetry( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void determineContentEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void determineErrorAndFail( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int determineHTTPEncodingFromString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void determineTransferEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void failWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr HTTPResponse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double intervalSinceLastActive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr peerCertificateChain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reportDataToClient_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject client );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reportDidFinishToClient( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void retryWithRedirectedURLAndResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendResponseAvailableCallback( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMultiPartDelimiter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delimiter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setResponseHeader_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject header );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startOriginLoad( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector buildHTTPRequest = "buildHTTPRequest";
			public static readonly Selector cachedResponseMustBeRevalidated = "cachedResponseMustBeRevalidated";
			public static readonly Selector cachedResponseRevalidated_ = "cachedResponseRevalidated:";
			public static readonly Selector cleanUpForRetry = "cleanUpForRetry";
			public static readonly Selector determineContentEncoding = "determineContentEncoding";
			public static readonly Selector determineErrorAndFail = "determineErrorAndFail";
			public static readonly Selector determineHTTPEncodingFromString_ = "determineHTTPEncodingFromString:";
			public static readonly Selector determineTransferEncoding = "determineTransferEncoding";
			public static readonly Selector failWithError_ = "failWithError:";
			public static readonly Selector HTTPResponse = "HTTPResponse";
			public static readonly Selector intervalSinceLastActive = "intervalSinceLastActive";
			public static readonly Selector peerCertificateChain = "peerCertificateChain";
			public static readonly Selector reportDataToClient_ = "reportDataToClient:";
			public static readonly Selector reportDidFinishToClient = "reportDidFinishToClient";
			public static readonly Selector retryWithRedirectedURLAndResultCode_ = "retryWithRedirectedURLAndResultCode:";
			public static readonly Selector sendResponseAvailableCallback = "sendResponseAvailableCallback";
			public static readonly Selector setMultiPartDelimiter_ = "setMultiPartDelimiter:";
			public static readonly Selector setResponseHeader_ = "setResponseHeader:";
			public static readonly Selector startOriginLoad = "startOriginLoad";
			public static readonly Selector URL = "URL";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHTTPURLRequestParameters : IEquatable<NSHTTPURLRequestParameters> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPURLRequestParameters;
		public static implicit operator IntPtr( NSHTTPURLRequestParameters value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPURLRequestParameters value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPURLRequestParameters?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPURLRequestParameters value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPURLRequestParameters value1, NSHTTPURLRequestParameters value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPURLRequestParameters value1, NSHTTPURLRequestParameters value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPURLRequestParameters( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPURLRequestParameters alloc() {
			return new NSHTTPURLRequestParameters( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSHTTPURLRequestParameters initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSHTTPURLRequestParameters( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
		}
		static internal class CachedSelectors {
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLResponse ) )]
	public struct NSHTTPURLResponse : IEquatable<NSHTTPURLResponse> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPURLResponse;
		public static implicit operator IntPtr( NSHTTPURLResponse value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPURLResponse value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPURLResponse?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPURLResponse value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPURLResponse value1, NSHTTPURLResponse value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPURLResponse value1, NSHTTPURLResponse value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPURLResponse( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPURLResponse alloc() {
			return new NSHTTPURLResponse( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static bool isErrorStatusCode_( int code ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isErrorStatusCode_( ClassHandle, CachedSelectors.isErrorStatusCode_, out ___occuredException, sizeof( int ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static string localizedStringForStatusCode_( int code ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedStringForStatusCode_( ClassHandle, CachedSelectors.localizedStringForStatusCode_, out ___occuredException, sizeof( int ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDictionary allHeaderFields() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allHeaderFields( Handle, CachedSelectors.allHeaderFields, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSHTTPURLResponse initWithURL_statusCode_headerFields_requestTime_( NObjective.RuntimeObject url, int statusCode, NObjective.RuntimeObject headerFields, double requestTime ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_statusCode_headerFields_requestTime_( Handle, CachedSelectors.initWithURL_statusCode_headerFields_requestTime_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( double ), url, statusCode, headerFields, requestTime );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSHTTPURLResponse( ___result );
		}
		unsafe public void setAllHeaderFields_( NObjective.RuntimeObject fields ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllHeaderFields_( Handle, CachedSelectors.setAllHeaderFields_, out ___occuredException, sizeof( NObjective.RuntimeObject ), fields );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStatusCode_( int code ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStatusCode_( Handle, CachedSelectors.setStatusCode_, out ___occuredException, sizeof( int ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int statusCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.statusCode( Handle, CachedSelectors.statusCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allHeaderFields( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURL_statusCode_headerFields_requestTime_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, int statusCode, NObjective.RuntimeObject headerFields, double requestTime );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isErrorStatusCode_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedStringForStatusCode_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllHeaderFields_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject fields );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStatusCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int statusCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allHeaderFields = "allHeaderFields";
			public static readonly Selector initWithURL_statusCode_headerFields_requestTime_ = "initWithURL:statusCode:headerFields:requestTime:";
			public static readonly Selector isErrorStatusCode_ = "isErrorStatusCode:";
			public static readonly Selector localizedStringForStatusCode_ = "localizedStringForStatusCode:";
			public static readonly Selector setAllHeaderFields_ = "setAllHeaderFields:";
			public static readonly Selector setStatusCode_ = "setStatusCode:";
			public static readonly Selector statusCode = "statusCode";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSHTTPURLResponseInternal : IEquatable<NSHTTPURLResponseInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSHTTPURLResponseInternal;
		public static implicit operator IntPtr( NSHTTPURLResponseInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSHTTPURLResponseInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSHTTPURLResponseInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSHTTPURLResponseInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSHTTPURLResponseInternal value1, NSHTTPURLResponseInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSHTTPURLResponseInternal value1, NSHTTPURLResponseInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSHTTPURLResponseInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSHTTPURLResponseInternal alloc() {
			return new NSHTTPURLResponseInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSHTTPURLResponseInternal initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSHTTPURLResponseInternal( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
		}
		static internal class CachedSelectors {
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSEnumerator ) )]
	public struct NSIdEnumerator : IEquatable<NSIdEnumerator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSIdEnumerator;
		public static implicit operator IntPtr( NSIdEnumerator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSIdEnumerator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSIdEnumerator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSIdEnumerator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSIdEnumerator value1, NSIdEnumerator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSIdEnumerator value1, NSIdEnumerator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSIdEnumerator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSIdEnumerator alloc() {
			return new NSIdEnumerator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSIdEnumerator initWithObjects_count_target_reverse_freeWhenDone_( System.IntPtr objects, uint count, NObjective.RuntimeObject target, char reverse, char freeWhenDone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObjects_count_target_reverse_freeWhenDone_( Handle, CachedSelectors.initWithObjects_count_target_reverse_freeWhenDone_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), objects, count, target, reverse, freeWhenDone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIdEnumerator( ___result );
		}
		unsafe public void invalidate() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidate( Handle, CachedSelectors.invalidate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObjects_count_target_reverse_freeWhenDone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr objects, uint count, NObjective.RuntimeObject target, char reverse, char freeWhenDone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithObjects_count_target_reverse_freeWhenDone_ = "initWithObjects:count:target:reverse:freeWhenDone:";
			public static readonly Selector invalidate = "invalidate";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCharacterSet ) )]
	public struct NSImmutableRangeCharacterSet : IEquatable<NSImmutableRangeCharacterSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSImmutableRangeCharacterSet;
		public static implicit operator IntPtr( NSImmutableRangeCharacterSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSImmutableRangeCharacterSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSImmutableRangeCharacterSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSImmutableRangeCharacterSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSImmutableRangeCharacterSet value1, NSImmutableRangeCharacterSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSImmutableRangeCharacterSet value1, NSImmutableRangeCharacterSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSImmutableRangeCharacterSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSImmutableRangeCharacterSet alloc() {
			return new NSImmutableRangeCharacterSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCharacterSet ) )]
	public struct NSImmutableStringCharacterSet : IEquatable<NSImmutableStringCharacterSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSImmutableStringCharacterSet;
		public static implicit operator IntPtr( NSImmutableStringCharacterSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSImmutableStringCharacterSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSImmutableStringCharacterSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSImmutableStringCharacterSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSImmutableStringCharacterSet value1, NSImmutableStringCharacterSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSImmutableStringCharacterSet value1, NSImmutableStringCharacterSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSImmutableStringCharacterSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSImmutableStringCharacterSet alloc() {
			return new NSImmutableStringCharacterSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSIndexPath : IEquatable<NSIndexPath> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSIndexPath;
		public static implicit operator IntPtr( NSIndexPath value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSIndexPath value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSIndexPath?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSIndexPath value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSIndexPath value1, NSIndexPath value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSIndexPath value1, NSIndexPath value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSIndexPath( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSIndexPath alloc() {
			return new NSIndexPath( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSIndexPath indexPathWithIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexPathWithIndex_( ClassHandle, CachedSelectors.indexPathWithIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexPath( ___result );
		}
		unsafe public static NSIndexPath indexPathWithIndexes_length_( IntPtr indexes, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexPathWithIndexes_length_( ClassHandle, CachedSelectors.indexPathWithIndexes_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), indexes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexPath( ___result );
		}
		unsafe public NSComparisonResult compare_( NSIndexPath compare ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compare_( Handle, CachedSelectors.compare_, out ___occuredException, sizeof( NSIndexPath ), compare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getIndexes_( IntPtr indexes ) {
			RuntimeObject ___occuredException;
			NativeMethods.getIndexes_( Handle, CachedSelectors.getIndexes_, out ___occuredException, sizeof( IntPtr ), indexes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint indexAtPosition_( uint position ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexAtPosition_( Handle, CachedSelectors.indexAtPosition_, out ___occuredException, sizeof( uint ), position );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSIndexPath indexPathByAddingIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexPathByAddingIndex_( Handle, CachedSelectors.indexPathByAddingIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexPath( ___result );
		}
		unsafe public NSIndexPath indexPathByRemovingLastIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexPathByRemovingLastIndex( Handle, CachedSelectors.indexPathByRemovingLastIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexPath( ___result );
		}
		unsafe public NSIndexPath initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexPath( ___result );
		}
		unsafe public NSIndexPath initWithIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithIndex_( Handle, CachedSelectors.initWithIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexPath( ___result );
		}
		unsafe public NSIndexPath initWithIndexes_length_( IntPtr indexes, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithIndexes_length_( Handle, CachedSelectors.initWithIndexes_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), indexes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexPath( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSIndexPath compare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getIndexes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr indexes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexAtPosition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint position );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr indexPathByAddingIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr indexPathByRemovingLastIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr indexPathWithIndex_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr indexPathWithIndexes_length_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr indexes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithIndexes_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr indexes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector compare_ = "compare:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector getIndexes_ = "getIndexes:";
			public static readonly Selector indexAtPosition_ = "indexAtPosition:";
			public static readonly Selector indexPathByAddingIndex_ = "indexPathByAddingIndex:";
			public static readonly Selector indexPathByRemovingLastIndex = "indexPathByRemovingLastIndex";
			public static readonly Selector indexPathWithIndex_ = "indexPathWithIndex:";
			public static readonly Selector indexPathWithIndexes_length_ = "indexPathWithIndexes:length:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithIndex_ = "initWithIndex:";
			public static readonly Selector initWithIndexes_length_ = "initWithIndexes:length:";
			public static readonly Selector length = "length";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSIndexSet : IEquatable<NSIndexSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSIndexSet;
		public static implicit operator IntPtr( NSIndexSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSIndexSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSIndexSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSIndexSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSIndexSet value1, NSIndexSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSIndexSet value1, NSIndexSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSIndexSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSIndexSet alloc() {
			return new NSIndexSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject indexSet() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexSet( ClassHandle, CachedSelectors.indexSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSIndexSet indexSetWithIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexSetWithIndex_( ClassHandle, CachedSelectors.indexSetWithIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexSet( ___result );
		}
		unsafe public static NSIndexSet indexSetWithIndexesInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexSetWithIndexesInRange_( ClassHandle, CachedSelectors.indexSetWithIndexesInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexSet( ___result );
		}
		unsafe public bool containsIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsIndex_( Handle, CachedSelectors.containsIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool containsIndexes_( NSIndexSet indexes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsIndexes_( Handle, CachedSelectors.containsIndexes_, out ___occuredException, sizeof( NSIndexSet ), indexes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool containsIndexesInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsIndexesInRange_( Handle, CachedSelectors.containsIndexesInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint firstIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstIndex( Handle, CachedSelectors.firstIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint getIndexes_maxCount_inIndexRange_( IntPtr indexes, uint maxCount, _NSRange[] inIndexRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getIndexes_maxCount_inIndexRange_( Handle, CachedSelectors.getIndexes_maxCount_inIndexRange_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), indexes, maxCount, inIndexRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexGreaterThanIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexGreaterThanIndex_( Handle, CachedSelectors.indexGreaterThanIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexGreaterThanOrEqualToIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexGreaterThanOrEqualToIndex_( Handle, CachedSelectors.indexGreaterThanOrEqualToIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexLessThanIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexLessThanIndex_( Handle, CachedSelectors.indexLessThanIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexLessThanOrEqualToIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexLessThanOrEqualToIndex_( Handle, CachedSelectors.indexLessThanOrEqualToIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSIndexSet initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexSet( ___result );
		}
		unsafe public NSIndexSet initWithIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithIndex_( Handle, CachedSelectors.initWithIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexSet( ___result );
		}
		unsafe public NSIndexSet initWithIndexesInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithIndexesInRange_( Handle, CachedSelectors.initWithIndexesInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexSet( ___result );
		}
		unsafe public NSIndexSet initWithIndexSet_( NSIndexSet @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithIndexSet_( Handle, CachedSelectors.initWithIndexSet_, out ___occuredException, sizeof( NSIndexSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexSet( ___result );
		}
		unsafe public bool intersectsIndexesInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.intersectsIndexesInRange_( Handle, CachedSelectors.intersectsIndexesInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEqualToIndexSet_( NSIndexSet @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToIndexSet_( Handle, CachedSelectors.isEqualToIndexSet_, out ___occuredException, sizeof( NSIndexSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint lastIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastIndex( Handle, CachedSelectors.lastIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint rangeCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rangeCount( Handle, CachedSelectors.rangeCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool containsIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool containsIndexes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSIndexSet indexes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool containsIndexesInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint firstIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint getIndexes_maxCount_inIndexRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr indexes, uint maxCount, _NSRange[] inIndexRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexGreaterThanIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexGreaterThanOrEqualToIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexLessThanIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexLessThanOrEqualToIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr indexSet( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr indexSetWithIndex_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr indexSetWithIndexesInRange_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithIndexesInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithIndexSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSIndexSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool intersectsIndexesInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToIndexSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSIndexSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint lastIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint rangeCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector containsIndex_ = "containsIndex:";
			public static readonly Selector containsIndexes_ = "containsIndexes:";
			public static readonly Selector containsIndexesInRange_ = "containsIndexesInRange:";
			public static readonly Selector count = "count";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector firstIndex = "firstIndex";
			public static readonly Selector getIndexes_maxCount_inIndexRange_ = "getIndexes:maxCount:inIndexRange:";
			public static readonly Selector indexGreaterThanIndex_ = "indexGreaterThanIndex:";
			public static readonly Selector indexGreaterThanOrEqualToIndex_ = "indexGreaterThanOrEqualToIndex:";
			public static readonly Selector indexLessThanIndex_ = "indexLessThanIndex:";
			public static readonly Selector indexLessThanOrEqualToIndex_ = "indexLessThanOrEqualToIndex:";
			public static readonly Selector indexSet = "indexSet";
			public static readonly Selector indexSetWithIndex_ = "indexSetWithIndex:";
			public static readonly Selector indexSetWithIndexesInRange_ = "indexSetWithIndexesInRange:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithIndex_ = "initWithIndex:";
			public static readonly Selector initWithIndexesInRange_ = "initWithIndexesInRange:";
			public static readonly Selector initWithIndexSet_ = "initWithIndexSet:";
			public static readonly Selector intersectsIndexesInRange_ = "intersectsIndexesInRange:";
			public static readonly Selector isEqualToIndexSet_ = "isEqualToIndexSet:";
			public static readonly Selector lastIndex = "lastIndex";
			public static readonly Selector rangeCount = "rangeCount";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectSpecifier ) )]
	public struct NSIndexSpecifier : IEquatable<NSIndexSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSIndexSpecifier;
		public static implicit operator IntPtr( NSIndexSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSIndexSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSIndexSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSIndexSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSIndexSpecifier value1, NSIndexSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSIndexSpecifier value1, NSIndexSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSIndexSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSIndexSpecifier alloc() {
			return new NSIndexSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int index() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.index( Handle, CachedSelectors.index, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSIndexSpecifier initWithContainerClassDescription_containerSpecifier_key_index_( NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, string key, int index ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.initWithContainerClassDescription_containerSpecifier_key_index_( Handle, CachedSelectors.initWithContainerClassDescription_containerSpecifier_key_index_, out ___occuredException, sizeof( NSScriptClassDescription ) + sizeof( NSScriptObjectSpecifier ) + sizeof( IntPtr ) + sizeof( int ), description, containerSpecifier, ___wrappedkey, index );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIndexSpecifier( ___result );
		}
		unsafe public void setIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIndex_( Handle, CachedSelectors.setIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int index( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassDescription_containerSpecifier_key_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, IntPtr key, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
		}
		static internal class CachedSelectors {
			public static readonly Selector index = "index";
			public static readonly Selector initWithContainerClassDescription_containerSpecifier_key_index_ = "initWithContainerClassDescription:containerSpecifier:key:index:";
			public static readonly Selector setIndex_ = "setIndex:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPredicateOperator ) )]
	public struct NSInPredicateOperator : IEquatable<NSInPredicateOperator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSInPredicateOperator;
		public static implicit operator IntPtr( NSInPredicateOperator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSInPredicateOperator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSInPredicateOperator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSInPredicateOperator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSInPredicateOperator value1, NSInPredicateOperator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSInPredicateOperator value1, NSInPredicateOperator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSInPredicateOperator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSInPredicateOperator alloc() {
			return new NSInPredicateOperator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint flags() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.flags( Handle, CachedSelectors.flags, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSInPredicateOperator initWithOperatorType_modifier_options_( int type, int modifier, uint options ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOperatorType_modifier_options_( Handle, CachedSelectors.initWithOperatorType_modifier_options_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( uint ), type, modifier, options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSInPredicateOperator( ___result );
		}
		unsafe public NObjective.RuntimeObject stringVersion() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringVersion( Handle, CachedSelectors.stringVersion, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint flags( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOperatorType_modifier_options_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, int modifier, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringVersion( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector flags = "flags";
			public static readonly Selector initWithOperatorType_modifier_options_ = "initWithOperatorType:modifier:options:";
			public static readonly Selector stringVersion = "stringVersion";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSStream ) )]
	public struct NSInputStream : IEquatable<NSInputStream> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSInputStream;
		public static implicit operator IntPtr( NSInputStream value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSInputStream value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSInputStream?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSInputStream value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSInputStream value1, NSInputStream value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSInputStream value1, NSInputStream value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSInputStream( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSInputStream alloc() {
			return new NSInputStream( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSInputStream inputStreamWithData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inputStreamWithData_( ClassHandle, CachedSelectors.inputStreamWithData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSInputStream( ___result );
		}
		unsafe public static NSInputStream inputStreamWithFileAtPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.inputStreamWithFileAtPath_( ClassHandle, CachedSelectors.inputStreamWithFileAtPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSInputStream( ___result );
		}
		unsafe public bool getBuffer_length_( IntPtr buffer, IntPtr length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBuffer_length_( Handle, CachedSelectors.getBuffer_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), buffer, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool hasBytesAvailable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasBytesAvailable( Handle, CachedSelectors.hasBytesAvailable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int read_maxLength_( IntPtr read, uint maxLength ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.read_maxLength_( Handle, CachedSelectors.read_maxLength_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), read, maxLength );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool getBuffer_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr buffer, IntPtr length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasBytesAvailable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr inputStreamWithData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr inputStreamWithFileAtPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int read_maxLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr read, uint maxLength );
		}
		static internal class CachedSelectors {
			public static readonly Selector getBuffer_length_ = "getBuffer:length:";
			public static readonly Selector hasBytesAvailable = "hasBytesAvailable";
			public static readonly Selector inputStreamWithData_ = "inputStreamWithData:";
			public static readonly Selector inputStreamWithFileAtPath_ = "inputStreamWithFileAtPath:";
			public static readonly Selector read_maxLength_ = "read:maxLength:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSRefCountingNumber ) )]
	public struct NSintNumber : IEquatable<NSintNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSintNumber;
		public static implicit operator IntPtr( NSintNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSintNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSintNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSintNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSintNumber value1, NSintNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSintNumber value1, NSintNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSintNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSintNumber alloc() {
			return new NSintNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCharacterSet ) )]
	public struct NSInvertedCharacterSet : IEquatable<NSInvertedCharacterSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSInvertedCharacterSet;
		public static implicit operator IntPtr( NSInvertedCharacterSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSInvertedCharacterSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSInvertedCharacterSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSInvertedCharacterSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSInvertedCharacterSet value1, NSInvertedCharacterSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSInvertedCharacterSet value1, NSInvertedCharacterSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSInvertedCharacterSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSInvertedCharacterSet alloc() {
			return new NSInvertedCharacterSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSInvertedCharacterSet initWithCharacterSet_( NObjective.RuntimeObject @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCharacterSet_( Handle, CachedSelectors.initWithCharacterSet_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSInvertedCharacterSet( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCharacterSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @set );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithCharacterSet_ = "initWithCharacterSet:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSInvocation : IEquatable<NSInvocation> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSInvocation;
		public static implicit operator IntPtr( NSInvocation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSInvocation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSInvocation?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSInvocation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSInvocation value1, NSInvocation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSInvocation value1, NSInvocation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSInvocation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSInvocation alloc() {
			return new NSInvocation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSInvocation invocationWithMethodSignature_( NSMethodSignature signature ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.invocationWithMethodSignature_( ClassHandle, CachedSelectors.invocationWithMethodSignature_, out ___occuredException, sizeof( NSMethodSignature ), signature );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSInvocation( ___result );
		}
		unsafe public static NObjective.RuntimeObject newInvocationWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newInvocationWithCoder_( ClassHandle, CachedSelectors.newInvocationWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject newInvocationWithMethodSignature_( NObjective.RuntimeObject signature ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newInvocationWithMethodSignature_( ClassHandle, CachedSelectors.newInvocationWithMethodSignature_, out ___occuredException, sizeof( NObjective.RuntimeObject ), signature );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool argumentsRetained() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.argumentsRetained( Handle, CachedSelectors.argumentsRetained, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void decodeReturnValueWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.decodeReturnValueWithCoder_( Handle, CachedSelectors.decodeReturnValueWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeReturnValueWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeReturnValueWithCoder_( Handle, CachedSelectors.encodeReturnValueWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getArgument_atIndex_( IntPtr argument, int atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.getArgument_atIndex_( Handle, CachedSelectors.getArgument_atIndex_, out ___occuredException, sizeof( IntPtr ) + sizeof( int ), argument, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getReturnValue_( IntPtr value ) {
			RuntimeObject ___occuredException;
			NativeMethods.getReturnValue_( Handle, CachedSelectors.getReturnValue_, out ___occuredException, sizeof( IntPtr ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSInvocation initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSInvocation( ___result );
		}
		unsafe public NSInvocation initWithMethodSignature_( NObjective.RuntimeObject signature ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMethodSignature_( Handle, CachedSelectors.initWithMethodSignature_, out ___occuredException, sizeof( NObjective.RuntimeObject ), signature );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSInvocation( ___result );
		}
		unsafe public void invalidate() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidate( Handle, CachedSelectors.invalidate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void invoke() {
			RuntimeObject ___occuredException;
			NativeMethods.invoke( Handle, CachedSelectors.invoke, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void invokeWithTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.invokeWithTarget_( Handle, CachedSelectors.invokeWithTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSMethodSignature methodSignature() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.methodSignature( Handle, CachedSelectors.methodSignature, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMethodSignature( ___result );
		}
		unsafe public void retainArguments() {
			RuntimeObject ___occuredException;
			NativeMethods.retainArguments( Handle, CachedSelectors.retainArguments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.Selector selector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selector( Handle, CachedSelectors.selector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setArgument_atIndex_( IntPtr argument, int atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.setArgument_atIndex_( Handle, CachedSelectors.setArgument_atIndex_, out ___occuredException, sizeof( IntPtr ) + sizeof( int ), argument, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setReturnValue_( IntPtr value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setReturnValue_( Handle, CachedSelectors.setReturnValue_, out ___occuredException, sizeof( IntPtr ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelector_( Handle, CachedSelectors.setSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTarget_( Handle, CachedSelectors.setTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool argumentsRetained( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decodeReturnValueWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeReturnValueWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getArgument_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr argument, int atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getReturnValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithMethodSignature_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject signature );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr invocationWithMethodSignature_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSMethodSignature signature );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invoke( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invokeWithTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr methodSignature( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newInvocationWithCoder_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newInvocationWithMethodSignature_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject signature );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void retainArguments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector selector( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setArgument_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr argument, int atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setReturnValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector argumentsRetained = "argumentsRetained";
			public static readonly Selector decodeReturnValueWithCoder_ = "decodeReturnValueWithCoder:";
			public static readonly Selector encodeReturnValueWithCoder_ = "encodeReturnValueWithCoder:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector getArgument_atIndex_ = "getArgument:atIndex:";
			public static readonly Selector getReturnValue_ = "getReturnValue:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithMethodSignature_ = "initWithMethodSignature:";
			public static readonly Selector invalidate = "invalidate";
			public static readonly Selector invocationWithMethodSignature_ = "invocationWithMethodSignature:";
			public static readonly Selector invoke = "invoke";
			public static readonly Selector invokeWithTarget_ = "invokeWithTarget:";
			public static readonly Selector methodSignature = "methodSignature";
			public static readonly Selector newInvocationWithCoder_ = "newInvocationWithCoder:";
			public static readonly Selector newInvocationWithMethodSignature_ = "newInvocationWithMethodSignature:";
			public static readonly Selector retainArguments = "retainArguments";
			public static readonly Selector selector = "selector";
			public static readonly Selector setArgument_atIndex_ = "setArgument:atIndex:";
			public static readonly Selector setReturnValue_ = "setReturnValue:";
			public static readonly Selector setSelector_ = "setSelector:";
			public static readonly Selector setTarget_ = "setTarget:";
			public static readonly Selector target = "target";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public struct NSInvocationBuilder : IEquatable<NSInvocationBuilder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSInvocationBuilder;
		public override int GetHashCode() {
			return Handle.GetHashCode();
		}
		public static implicit operator IntPtr( NSInvocationBuilder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSInvocationBuilder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSInvocationBuilder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSInvocationBuilder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSInvocationBuilder value1, NSInvocationBuilder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSInvocationBuilder value1, NSInvocationBuilder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSInvocationBuilder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSInvocationBuilder alloc() {
			return new NSInvocationBuilder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		public override string ToString() {
			return Handle.InvokeString( Selectors.description );
		}
		unsafe public static NObjective.RuntimeObject builderForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.builderForClass_( ClassHandle, CachedSelectors.builderForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject builderForObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.builderForObject_( ClassHandle, CachedSelectors.builderForObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject forward__( NObjective.Selector forward, System.IntPtr unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.forward__( Handle, CachedSelectors.forward__, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( System.IntPtr ), forward, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr builderForClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr builderForObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr forward__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector forward, System.IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector builderForClass_ = "builderForClass:";
			public static readonly Selector builderForObject_ = "builderForObject:";
			public static readonly Selector forward__ = "forward::";
			public static readonly Selector initialize = "initialize";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSKeyBinding : IEquatable<NSKeyBinding> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyBinding;
		public static implicit operator IntPtr( NSKeyBinding value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyBinding value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyBinding?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyBinding value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyBinding value1, NSKeyBinding value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyBinding value1, NSKeyBinding value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyBinding( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyBinding alloc() {
			return new NSKeyBinding( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void suppressCapitalizedKeyWarning() {
			RuntimeObject ___occuredException;
			NativeMethods.suppressCapitalizedKeyWarning( ClassHandle, CachedSelectors.suppressCapitalizedKeyWarning, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject key() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.key( Handle, CachedSelectors.key, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.setKey_( Handle, CachedSelectors.setKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeClass targetClass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.targetClass( Handle, CachedSelectors.targetClass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr key( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void suppressCapitalizedKeyWarning( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass targetClass( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector key = "key";
			public static readonly Selector setKey_ = "setKey:";
			public static readonly Selector suppressCapitalizedKeyWarning = "suppressCapitalizedKeyWarning";
			public static readonly Selector targetClass = "targetClass";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCoder ) )]
	public struct NSKeyedArchiver : IEquatable<NSKeyedArchiver> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyedArchiver;
		public static implicit operator IntPtr( NSKeyedArchiver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyedArchiver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyedArchiver?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyedArchiver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyedArchiver value1, NSKeyedArchiver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyedArchiver value1, NSKeyedArchiver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyedArchiver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyedArchiver alloc() {
			return new NSKeyedArchiver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSData archivedDataWithRootObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archivedDataWithRootObject_( ClassHandle, CachedSelectors.archivedDataWithRootObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static bool archiveRootObject_toFile_( NObjective.RuntimeObject @object, string toFile ) {
			RuntimeObject ___occuredException;
			var ___wrappedtoFile = Runtime.CreateStringProxy( toFile );
			var ___result = NativeMethods.archiveRootObject_toFile_( ClassHandle, CachedSelectors.archiveRootObject_toFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), @object, ___wrappedtoFile );
			Runtime.ReleaseNativeObject( ___wrappedtoFile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static string __classNameForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__classNameForClass_( ClassHandle, CachedSelectors.__classNameForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static void __setClassName_forClass_( string name, NObjective.RuntimeClass forClass ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.__setClassName_forClass_( ClassHandle, CachedSelectors.__setClassName_forClass_, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeClass ), ___wrappedname, forClass );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string classNameForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classNameForClass_( Handle, CachedSelectors.classNameForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void finishEncoding() {
			RuntimeObject ___occuredException;
			NativeMethods.finishEncoding( Handle, CachedSelectors.finishEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSKeyedArchiver initForWritingWithMutableData_( NSMutableData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initForWritingWithMutableData_( Handle, CachedSelectors.initForWritingWithMutableData_, out ___occuredException, sizeof( NSMutableData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyedArchiver( ___result );
		}
		unsafe public NSPropertyListFormat outputFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outputFormat( Handle, CachedSelectors.outputFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSPropertyListFormat ) ___result;
		}
		unsafe public void replaceObject_withObject_( NObjective.RuntimeObject @object, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObject_withObject_( Handle, CachedSelectors.replaceObject_withObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setClassName_forClass_( string name, NObjective.RuntimeClass forClass ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.setClassName_forClass_( Handle, CachedSelectors.setClassName_forClass_, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeClass ), ___wrappedname, forClass );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOutputFormat_( NSPropertyListFormat format ) {
			RuntimeObject ___occuredException;
			NativeMethods.setOutputFormat_( Handle, CachedSelectors.setOutputFormat_, out ___occuredException, sizeof( NSPropertyListFormat ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __classNameForClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void __setClassName_forClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, NObjective.RuntimeClass forClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archivedDataWithRootObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool archiveRootObject_toFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, IntPtr toFile );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classNameForClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void finishEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initForWritingWithMutableData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSMutableData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int outputFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObject_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setClassName_forClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, NObjective.RuntimeClass forClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOutputFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPropertyListFormat format );
		}
		static internal class CachedSelectors {
			public static readonly Selector __classNameForClass_ = "__classNameForClass:";
			public static readonly Selector __setClassName_forClass_ = "__setClassName:forClass:";
			public static readonly Selector archivedDataWithRootObject_ = "archivedDataWithRootObject:";
			public static readonly Selector archiveRootObject_toFile_ = "archiveRootObject:toFile:";
			public static readonly Selector classNameForClass_ = "classNameForClass:";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector finishEncoding = "finishEncoding";
			public static readonly Selector initForWritingWithMutableData_ = "initForWritingWithMutableData:";
			public static readonly Selector outputFormat = "outputFormat";
			public static readonly Selector replaceObject_withObject_ = "replaceObject:withObject:";
			public static readonly Selector setClassName_forClass_ = "setClassName:forClass:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setOutputFormat_ = "setOutputFormat:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCoder ) )]
	public struct NSKeyedUnarchiver : IEquatable<NSKeyedUnarchiver> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyedUnarchiver;
		public static implicit operator IntPtr( NSKeyedUnarchiver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyedUnarchiver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyedUnarchiver?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyedUnarchiver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyedUnarchiver value1, NSKeyedUnarchiver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyedUnarchiver value1, NSKeyedUnarchiver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyedUnarchiver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyedUnarchiver alloc() {
			return new NSKeyedUnarchiver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeClass __classForClassName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.__classForClassName_( ClassHandle, CachedSelectors.__classForClassName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void __setClass_forClassName_( NObjective.RuntimeClass @class, string forClassName ) {
			RuntimeObject ___occuredException;
			var ___wrappedforClassName = Runtime.CreateStringProxy( forClassName );
			NativeMethods.__setClass_forClassName_( ClassHandle, CachedSelectors.__setClass_forClassName_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( IntPtr ), @class, ___wrappedforClassName );
			Runtime.ReleaseNativeObject( ___wrappedforClassName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject unarchiveObjectWithData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unarchiveObjectWithData_( ClassHandle, CachedSelectors.unarchiveObjectWithData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject unarchiveObjectWithFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.unarchiveObjectWithFile_( ClassHandle, CachedSelectors.unarchiveObjectWithFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeClass classForClassName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.classForClassName_( Handle, CachedSelectors.classForClassName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void finishDecoding() {
			RuntimeObject ___occuredException;
			NativeMethods.finishDecoding( Handle, CachedSelectors.finishDecoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSKeyedUnarchiver initForReadingWithData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initForReadingWithData_( Handle, CachedSelectors.initForReadingWithData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyedUnarchiver( ___result );
		}
		unsafe public NSKeyedUnarchiver initWithStream_( NObjective.RuntimeObject stream ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithStream_( Handle, CachedSelectors.initWithStream_, out ___occuredException, sizeof( NObjective.RuntimeObject ), stream );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyedUnarchiver( ___result );
		}
		unsafe public void replaceObject_withObject_( NObjective.RuntimeObject @object, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObject_withObject_( Handle, CachedSelectors.replaceObject_withObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setClass_forClassName_( NObjective.RuntimeClass @class, string forClassName ) {
			RuntimeObject ___occuredException;
			var ___wrappedforClassName = Runtime.CreateStringProxy( forClassName );
			NativeMethods.setClass_forClassName_( Handle, CachedSelectors.setClass_forClassName_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( IntPtr ), @class, ___wrappedforClassName );
			Runtime.ReleaseNativeObject( ___wrappedforClassName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass __classForClassName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void __setClass_forClassName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, IntPtr forClassName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void finishDecoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initForReadingWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithStream_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject stream );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObject_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setClass_forClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, IntPtr forClassName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr unarchiveObjectWithData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr unarchiveObjectWithFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
		}
		static internal class CachedSelectors {
			public static readonly Selector __classForClassName_ = "__classForClassName:";
			public static readonly Selector __setClass_forClassName_ = "__setClass:forClassName:";
			public static readonly Selector classForClassName_ = "classForClassName:";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector finishDecoding = "finishDecoding";
			public static readonly Selector initForReadingWithData_ = "initForReadingWithData:";
			public static readonly Selector initWithStream_ = "initWithStream:";
			public static readonly Selector replaceObject_withObject_ = "replaceObject:withObject:";
			public static readonly Selector setClass_forClassName_ = "setClass:forClassName:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector unarchiveObjectWithData_ = "unarchiveObjectWithData:";
			public static readonly Selector unarchiveObjectWithFile_ = "unarchiveObjectWithFile:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyBinding ) )]
	public struct NSKeyGetBinding : IEquatable<NSKeyGetBinding> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyGetBinding;
		public static implicit operator IntPtr( NSKeyGetBinding value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyGetBinding value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyGetBinding?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyGetBinding value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyGetBinding value1, NSKeyGetBinding value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyGetBinding value1, NSKeyGetBinding value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyGetBinding( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyGetBinding alloc() {
			return new NSKeyGetBinding( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject getValueFromObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getValueFromObject_( Handle, CachedSelectors.getValueFromObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getValueFromObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector getValueFromObject_ = "getValueFromObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSFunctionExpression ) )]
	public struct NSKeyPathExpression : IEquatable<NSKeyPathExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyPathExpression;
		public static implicit operator IntPtr( NSKeyPathExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyPathExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyPathExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyPathExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyPathExpression value1, NSKeyPathExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyPathExpression value1, NSKeyPathExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyPathExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyPathExpression alloc() {
			return new NSKeyPathExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyPathExpression initWithKeyPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKeyPath_( Handle, CachedSelectors.initWithKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyPathExpression( ___result );
		}
		unsafe public NSKeyPathExpression initWithOperand_andKeyPath_( NObjective.RuntimeObject operand, NObjective.RuntimeObject andKeyPath ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOperand_andKeyPath_( Handle, CachedSelectors.initWithOperand_andKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), operand, andKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyPathExpression( ___result );
		}
		unsafe public NObjective.RuntimeObject pathExpression() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathExpression( Handle, CachedSelectors.pathExpression, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOperand_andKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject operand, NObjective.RuntimeObject andKeyPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathExpression( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithKeyPath_ = "initWithKeyPath:";
			public static readonly Selector initWithOperand_andKeyPath_ = "initWithOperand:andKeyPath:";
			public static readonly Selector pathExpression = "pathExpression";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSExpression ) )]
	public struct NSKeyPathSpecifierExpression : IEquatable<NSKeyPathSpecifierExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyPathSpecifierExpression;
		public static implicit operator IntPtr( NSKeyPathSpecifierExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyPathSpecifierExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyPathSpecifierExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyPathSpecifierExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyPathSpecifierExpression value1, NSKeyPathSpecifierExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyPathSpecifierExpression value1, NSKeyPathSpecifierExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyPathSpecifierExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyPathSpecifierExpression alloc() {
			return new NSKeyPathSpecifierExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyPathSpecifierExpression initWithObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObject_( Handle, CachedSelectors.initWithObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyPathSpecifierExpression( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithObject_ = "initWithObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyBinding ) )]
	public struct NSKeySetBinding : IEquatable<NSKeySetBinding> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeySetBinding;
		public static implicit operator IntPtr( NSKeySetBinding value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeySetBinding value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeySetBinding?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeySetBinding value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeySetBinding value1, NSKeySetBinding value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeySetBinding value1, NSKeySetBinding value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeySetBinding( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeySetBinding alloc() {
			return new NSKeySetBinding( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public bool isScalarProperty() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isScalarProperty( Handle, CachedSelectors.isScalarProperty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setValue_inObject_( NObjective.RuntimeObject value, NObjective.RuntimeObject inObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_inObject_( Handle, CachedSelectors.setValue_inObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, inObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isScalarProperty( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_inObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject inObject );
		}
		static internal class CachedSelectors {
			public static readonly Selector isScalarProperty = "isScalarProperty";
			public static readonly Selector setValue_inObject_ = "setValue:inObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSKeyValueAccessor : IEquatable<NSKeyValueAccessor> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueAccessor;
		public static implicit operator IntPtr( NSKeyValueAccessor value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueAccessor value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueAccessor?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueAccessor value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueAccessor value1, NSKeyValueAccessor value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueAccessor value1, NSKeyValueAccessor value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueAccessor( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueAccessor alloc() {
			return new NSKeyValueAccessor( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject containerClassID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containerClassID( Handle, CachedSelectors.containerClassID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public System.IntPtr extraArgument1() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.extraArgument1( Handle, CachedSelectors.extraArgument1, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public System.IntPtr extraArgument2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.extraArgument2( Handle, CachedSelectors.extraArgument2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint extraArgumentCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.extraArgumentCount( Handle, CachedSelectors.extraArgumentCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject key() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.key( Handle, CachedSelectors.key, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.Selector selector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selector( Handle, CachedSelectors.selector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr containerClassID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr extraArgument1( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr extraArgument2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint extraArgumentCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr key( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector selector( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector containerClassID = "containerClassID";
			public static readonly Selector extraArgument1 = "extraArgument1";
			public static readonly Selector extraArgument2 = "extraArgument2";
			public static readonly Selector extraArgumentCount = "extraArgumentCount";
			public static readonly Selector key = "key";
			public static readonly Selector selector = "selector";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSArray ) )]
	public struct NSKeyValueArray : IEquatable<NSKeyValueArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueArray;
		public static implicit operator IntPtr( NSKeyValueArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueArray value1, NSKeyValueArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueArray value1, NSKeyValueArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueArray alloc() {
			return new NSKeyValueArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueProxyGetter ) )]
	public struct NSKeyValueCollectionGetter : IEquatable<NSKeyValueCollectionGetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueCollectionGetter;
		public static implicit operator IntPtr( NSKeyValueCollectionGetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueCollectionGetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueCollectionGetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueCollectionGetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueCollectionGetter value1, NSKeyValueCollectionGetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueCollectionGetter value1, NSKeyValueCollectionGetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueCollectionGetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueCollectionGetter alloc() {
			return new NSKeyValueCollectionGetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueCollectionGetter initWithContainerClassID_key_methods_proxyClass_( NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeObject methods, NObjective.RuntimeClass proxyClass ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassID_key_methods_proxyClass_( Handle, CachedSelectors.initWithContainerClassID_key_methods_proxyClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), id, key, methods, proxyClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueCollectionGetter( ___result );
		}
		unsafe public NObjective.RuntimeObject methods() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.methods( Handle, CachedSelectors.methods, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassID_key_methods_proxyClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeObject methods, NObjective.RuntimeClass proxyClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr methods( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassID_key_methods_proxyClass_ = "initWithContainerClassID:key:methods:proxyClass:";
			public static readonly Selector methods = "methods";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueProperty ) )]
	public struct NSKeyValueComputedProperty : IEquatable<NSKeyValueComputedProperty> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueComputedProperty;
		public static implicit operator IntPtr( NSKeyValueComputedProperty value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueComputedProperty value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueComputedProperty?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueComputedProperty value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueComputedProperty value1, NSKeyValueComputedProperty value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueComputedProperty value1, NSKeyValueComputedProperty value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueComputedProperty( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueComputedProperty alloc() {
			return new NSKeyValueComputedProperty( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSKeyValueContainerClass : IEquatable<NSKeyValueContainerClass> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueContainerClass;
		public static implicit operator IntPtr( NSKeyValueContainerClass value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueContainerClass value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueContainerClass?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueContainerClass value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueContainerClass value1, NSKeyValueContainerClass value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueContainerClass value1, NSKeyValueContainerClass value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueContainerClass( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueContainerClass alloc() {
			return new NSKeyValueContainerClass( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueContainerClass initWithOriginalClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOriginalClass_( Handle, CachedSelectors.initWithOriginalClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueContainerClass( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOriginalClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithOriginalClass_ = "initWithOriginalClass:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueMutableArray ) )]
	public struct NSKeyValueFastMutableArray : IEquatable<NSKeyValueFastMutableArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueFastMutableArray;
		public static implicit operator IntPtr( NSKeyValueFastMutableArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueFastMutableArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueFastMutableArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueFastMutableArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueFastMutableArray value1, NSKeyValueFastMutableArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueFastMutableArray value1, NSKeyValueFastMutableArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueFastMutableArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueFastMutableArray alloc() {
			return new NSKeyValueFastMutableArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueFastMutableArray ) )]
	public struct NSKeyValueFastMutableArray1 : IEquatable<NSKeyValueFastMutableArray1> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueFastMutableArray1;
		public static implicit operator IntPtr( NSKeyValueFastMutableArray1 value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueFastMutableArray1 value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueFastMutableArray1?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueFastMutableArray1 value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueFastMutableArray1 value1, NSKeyValueFastMutableArray1 value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueFastMutableArray1 value1, NSKeyValueFastMutableArray1 value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueFastMutableArray1( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueFastMutableArray1 alloc() {
			return new NSKeyValueFastMutableArray1( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueFastMutableArray ) )]
	public struct NSKeyValueFastMutableArray2 : IEquatable<NSKeyValueFastMutableArray2> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueFastMutableArray2;
		public static implicit operator IntPtr( NSKeyValueFastMutableArray2 value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueFastMutableArray2 value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueFastMutableArray2?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueFastMutableArray2 value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueFastMutableArray2 value1, NSKeyValueFastMutableArray2 value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueFastMutableArray2 value1, NSKeyValueFastMutableArray2 value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueFastMutableArray2( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueFastMutableArray2 alloc() {
			return new NSKeyValueFastMutableArray2( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueProxyGetter ) )]
	public struct NSKeyValueFastMutableCollection1Getter : IEquatable<NSKeyValueFastMutableCollection1Getter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueFastMutableCollection1Getter;
		public static implicit operator IntPtr( NSKeyValueFastMutableCollection1Getter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueFastMutableCollection1Getter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueFastMutableCollection1Getter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueFastMutableCollection1Getter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueFastMutableCollection1Getter value1, NSKeyValueFastMutableCollection1Getter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueFastMutableCollection1Getter value1, NSKeyValueFastMutableCollection1Getter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueFastMutableCollection1Getter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueFastMutableCollection1Getter alloc() {
			return new NSKeyValueFastMutableCollection1Getter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueFastMutableCollection1Getter initWithContainerClassID_key_nonmutatingMethods_mutatingMethods_proxyClass_( NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeObject nonmutatingMethods, NObjective.RuntimeObject mutatingMethods, NObjective.RuntimeClass proxyClass ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassID_key_nonmutatingMethods_mutatingMethods_proxyClass_( Handle, CachedSelectors.initWithContainerClassID_key_nonmutatingMethods_mutatingMethods_proxyClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), id, key, nonmutatingMethods, mutatingMethods, proxyClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueFastMutableCollection1Getter( ___result );
		}
		unsafe public NObjective.RuntimeObject mutatingMethods() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mutatingMethods( Handle, CachedSelectors.mutatingMethods, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nonmutatingMethods() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nonmutatingMethods( Handle, CachedSelectors.nonmutatingMethods, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassID_key_nonmutatingMethods_mutatingMethods_proxyClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeObject nonmutatingMethods, NObjective.RuntimeObject mutatingMethods, NObjective.RuntimeClass proxyClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutatingMethods( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nonmutatingMethods( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassID_key_nonmutatingMethods_mutatingMethods_proxyClass_ = "initWithContainerClassID:key:nonmutatingMethods:mutatingMethods:proxyClass:";
			public static readonly Selector mutatingMethods = "mutatingMethods";
			public static readonly Selector nonmutatingMethods = "nonmutatingMethods";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueProxyGetter ) )]
	public struct NSKeyValueFastMutableCollection2Getter : IEquatable<NSKeyValueFastMutableCollection2Getter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueFastMutableCollection2Getter;
		public static implicit operator IntPtr( NSKeyValueFastMutableCollection2Getter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueFastMutableCollection2Getter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueFastMutableCollection2Getter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueFastMutableCollection2Getter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueFastMutableCollection2Getter value1, NSKeyValueFastMutableCollection2Getter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueFastMutableCollection2Getter value1, NSKeyValueFastMutableCollection2Getter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueFastMutableCollection2Getter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueFastMutableCollection2Getter alloc() {
			return new NSKeyValueFastMutableCollection2Getter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject baseGetter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseGetter( Handle, CachedSelectors.baseGetter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSKeyValueFastMutableCollection2Getter initWithContainerClassID_key_baseGetter_mutatingMethods_proxyClass_( NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeObject baseGetter, NObjective.RuntimeObject mutatingMethods, NObjective.RuntimeClass proxyClass ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassID_key_baseGetter_mutatingMethods_proxyClass_( Handle, CachedSelectors.initWithContainerClassID_key_baseGetter_mutatingMethods_proxyClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), id, key, baseGetter, mutatingMethods, proxyClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueFastMutableCollection2Getter( ___result );
		}
		unsafe public NObjective.RuntimeObject mutatingMethods() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mutatingMethods( Handle, CachedSelectors.mutatingMethods, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseGetter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassID_key_baseGetter_mutatingMethods_proxyClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeObject baseGetter, NObjective.RuntimeObject mutatingMethods, NObjective.RuntimeClass proxyClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutatingMethods( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector baseGetter = "baseGetter";
			public static readonly Selector initWithContainerClassID_key_baseGetter_mutatingMethods_proxyClass_ = "initWithContainerClassID:key:baseGetter:mutatingMethods:proxyClass:";
			public static readonly Selector mutatingMethods = "mutatingMethods";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueMutableSet ) )]
	public struct NSKeyValueFastMutableSet : IEquatable<NSKeyValueFastMutableSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueFastMutableSet;
		public static implicit operator IntPtr( NSKeyValueFastMutableSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueFastMutableSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueFastMutableSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueFastMutableSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueFastMutableSet value1, NSKeyValueFastMutableSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueFastMutableSet value1, NSKeyValueFastMutableSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueFastMutableSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueFastMutableSet alloc() {
			return new NSKeyValueFastMutableSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueFastMutableSet ) )]
	public struct NSKeyValueFastMutableSet1 : IEquatable<NSKeyValueFastMutableSet1> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueFastMutableSet1;
		public static implicit operator IntPtr( NSKeyValueFastMutableSet1 value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueFastMutableSet1 value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueFastMutableSet1?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueFastMutableSet1 value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueFastMutableSet1 value1, NSKeyValueFastMutableSet1 value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueFastMutableSet1 value1, NSKeyValueFastMutableSet1 value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueFastMutableSet1( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueFastMutableSet1 alloc() {
			return new NSKeyValueFastMutableSet1( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueFastMutableSet ) )]
	public struct NSKeyValueFastMutableSet2 : IEquatable<NSKeyValueFastMutableSet2> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueFastMutableSet2;
		public static implicit operator IntPtr( NSKeyValueFastMutableSet2 value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueFastMutableSet2 value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueFastMutableSet2?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueFastMutableSet2 value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueFastMutableSet2 value1, NSKeyValueFastMutableSet2 value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueFastMutableSet2 value1, NSKeyValueFastMutableSet2 value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueFastMutableSet2( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueFastMutableSet2 alloc() {
			return new NSKeyValueFastMutableSet2( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueAccessor ) )]
	public struct NSKeyValueGetter : IEquatable<NSKeyValueGetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueGetter;
		public static implicit operator IntPtr( NSKeyValueGetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueGetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueGetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueGetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueGetter value1, NSKeyValueGetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueGetter value1, NSKeyValueGetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueGetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueGetter alloc() {
			return new NSKeyValueGetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueGetter ) )]
	public struct NSKeyValueIvarGetter : IEquatable<NSKeyValueIvarGetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueIvarGetter;
		public static implicit operator IntPtr( NSKeyValueIvarGetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueIvarGetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueIvarGetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueIvarGetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueIvarGetter value1, NSKeyValueIvarGetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueIvarGetter value1, NSKeyValueIvarGetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueIvarGetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueIvarGetter alloc() {
			return new NSKeyValueIvarGetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueMutableArray ) )]
	public struct NSKeyValueIvarMutableArray : IEquatable<NSKeyValueIvarMutableArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueIvarMutableArray;
		public static implicit operator IntPtr( NSKeyValueIvarMutableArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueIvarMutableArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueIvarMutableArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueIvarMutableArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueIvarMutableArray value1, NSKeyValueIvarMutableArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueIvarMutableArray value1, NSKeyValueIvarMutableArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueIvarMutableArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueIvarMutableArray alloc() {
			return new NSKeyValueIvarMutableArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueProxyGetter ) )]
	public struct NSKeyValueIvarMutableCollectionGetter : IEquatable<NSKeyValueIvarMutableCollectionGetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueIvarMutableCollectionGetter;
		public static implicit operator IntPtr( NSKeyValueIvarMutableCollectionGetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueIvarMutableCollectionGetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueIvarMutableCollectionGetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueIvarMutableCollectionGetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueIvarMutableCollectionGetter value1, NSKeyValueIvarMutableCollectionGetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueIvarMutableCollectionGetter value1, NSKeyValueIvarMutableCollectionGetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueIvarMutableCollectionGetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueIvarMutableCollectionGetter alloc() {
			return new NSKeyValueIvarMutableCollectionGetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueMutableSet ) )]
	public struct NSKeyValueIvarMutableSet : IEquatable<NSKeyValueIvarMutableSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueIvarMutableSet;
		public static implicit operator IntPtr( NSKeyValueIvarMutableSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueIvarMutableSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueIvarMutableSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueIvarMutableSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueIvarMutableSet value1, NSKeyValueIvarMutableSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueIvarMutableSet value1, NSKeyValueIvarMutableSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueIvarMutableSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueIvarMutableSet alloc() {
			return new NSKeyValueIvarMutableSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueSetter ) )]
	public struct NSKeyValueIvarSetter : IEquatable<NSKeyValueIvarSetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueIvarSetter;
		public static implicit operator IntPtr( NSKeyValueIvarSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueIvarSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueIvarSetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueIvarSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueIvarSetter value1, NSKeyValueIvarSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueIvarSetter value1, NSKeyValueIvarSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueIvarSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueIvarSetter alloc() {
			return new NSKeyValueIvarSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueGetter ) )]
	public struct NSKeyValueMethodGetter : IEquatable<NSKeyValueMethodGetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueMethodGetter;
		public static implicit operator IntPtr( NSKeyValueMethodGetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueMethodGetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueMethodGetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueMethodGetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueMethodGetter value1, NSKeyValueMethodGetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueMethodGetter value1, NSKeyValueMethodGetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueMethodGetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueMethodGetter alloc() {
			return new NSKeyValueMethodGetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueSetter ) )]
	public struct NSKeyValueMethodSetter : IEquatable<NSKeyValueMethodSetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueMethodSetter;
		public static implicit operator IntPtr( NSKeyValueMethodSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueMethodSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueMethodSetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueMethodSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueMethodSetter value1, NSKeyValueMethodSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueMethodSetter value1, NSKeyValueMethodSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueMethodSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueMethodSetter alloc() {
			return new NSKeyValueMethodSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableArray ) )]
	public struct NSKeyValueMutableArray : IEquatable<NSKeyValueMutableArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueMutableArray;
		public static implicit operator IntPtr( NSKeyValueMutableArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueMutableArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueMutableArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueMutableArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueMutableArray value1, NSKeyValueMutableArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueMutableArray value1, NSKeyValueMutableArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueMutableArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueMutableArray alloc() {
			return new NSKeyValueMutableArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableSet ) )]
	public struct NSKeyValueMutableSet : IEquatable<NSKeyValueMutableSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueMutableSet;
		public static implicit operator IntPtr( NSKeyValueMutableSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueMutableSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueMutableSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueMutableSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueMutableSet value1, NSKeyValueMutableSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueMutableSet value1, NSKeyValueMutableSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueMutableSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueMutableSet alloc() {
			return new NSKeyValueMutableSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueMutatingCollectionMethodSet ) )]
	public struct NSKeyValueMutatingArrayMethodSet : IEquatable<NSKeyValueMutatingArrayMethodSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueMutatingArrayMethodSet;
		public static implicit operator IntPtr( NSKeyValueMutatingArrayMethodSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueMutatingArrayMethodSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueMutatingArrayMethodSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueMutatingArrayMethodSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueMutatingArrayMethodSet value1, NSKeyValueMutatingArrayMethodSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueMutatingArrayMethodSet value1, NSKeyValueMutatingArrayMethodSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueMutatingArrayMethodSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueMutatingArrayMethodSet alloc() {
			return new NSKeyValueMutatingArrayMethodSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSKeyValueMutatingCollectionMethodSet : IEquatable<NSKeyValueMutatingCollectionMethodSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueMutatingCollectionMethodSet;
		public static implicit operator IntPtr( NSKeyValueMutatingCollectionMethodSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueMutatingCollectionMethodSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueMutatingCollectionMethodSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueMutatingCollectionMethodSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueMutatingCollectionMethodSet value1, NSKeyValueMutatingCollectionMethodSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueMutatingCollectionMethodSet value1, NSKeyValueMutatingCollectionMethodSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueMutatingCollectionMethodSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueMutatingCollectionMethodSet alloc() {
			return new NSKeyValueMutatingCollectionMethodSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueMutatingCollectionMethodSet ) )]
	public struct NSKeyValueMutatingSetMethodSet : IEquatable<NSKeyValueMutatingSetMethodSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueMutatingSetMethodSet;
		public static implicit operator IntPtr( NSKeyValueMutatingSetMethodSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueMutatingSetMethodSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueMutatingSetMethodSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueMutatingSetMethodSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueMutatingSetMethodSet value1, NSKeyValueMutatingSetMethodSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueMutatingSetMethodSet value1, NSKeyValueMutatingSetMethodSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueMutatingSetMethodSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueMutatingSetMethodSet alloc() {
			return new NSKeyValueMutatingSetMethodSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueProperty ) )]
	public struct NSKeyValueNestedProperty : IEquatable<NSKeyValueNestedProperty> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueNestedProperty;
		public static implicit operator IntPtr( NSKeyValueNestedProperty value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueNestedProperty value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueNestedProperty?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueNestedProperty value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueNestedProperty value1, NSKeyValueNestedProperty value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueNestedProperty value1, NSKeyValueNestedProperty value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueNestedProperty( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueNestedProperty alloc() {
			return new NSKeyValueNestedProperty( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueNestedProperty initWithContainerClass_keyPath_firstDotIndex_( NObjective.RuntimeObject @class, NObjective.RuntimeObject keyPath, uint firstDotIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClass_keyPath_firstDotIndex_( Handle, CachedSelectors.initWithContainerClass_keyPath_firstDotIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @class, keyPath, firstDotIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueNestedProperty( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClass_keyPath_firstDotIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @class, NObjective.RuntimeObject keyPath, uint firstDotIndex );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClass_keyPath_firstDotIndex_ = "initWithContainerClass:keyPath:firstDotIndex:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSEnumerator ) )]
	public struct NSKeyValueNilSetEnumerator : IEquatable<NSKeyValueNilSetEnumerator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueNilSetEnumerator;
		public static implicit operator IntPtr( NSKeyValueNilSetEnumerator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueNilSetEnumerator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueNilSetEnumerator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueNilSetEnumerator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueNilSetEnumerator value1, NSKeyValueNilSetEnumerator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueNilSetEnumerator value1, NSKeyValueNilSetEnumerator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueNilSetEnumerator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueNilSetEnumerator alloc() {
			return new NSKeyValueNilSetEnumerator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueNonmutatingCollectionMethodSet ) )]
	public struct NSKeyValueNonmutatingArrayMethodSet : IEquatable<NSKeyValueNonmutatingArrayMethodSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueNonmutatingArrayMethodSet;
		public static implicit operator IntPtr( NSKeyValueNonmutatingArrayMethodSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueNonmutatingArrayMethodSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueNonmutatingArrayMethodSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueNonmutatingArrayMethodSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueNonmutatingArrayMethodSet value1, NSKeyValueNonmutatingArrayMethodSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueNonmutatingArrayMethodSet value1, NSKeyValueNonmutatingArrayMethodSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueNonmutatingArrayMethodSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueNonmutatingArrayMethodSet alloc() {
			return new NSKeyValueNonmutatingArrayMethodSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSKeyValueNonmutatingCollectionMethodSet : IEquatable<NSKeyValueNonmutatingCollectionMethodSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueNonmutatingCollectionMethodSet;
		public static implicit operator IntPtr( NSKeyValueNonmutatingCollectionMethodSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueNonmutatingCollectionMethodSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueNonmutatingCollectionMethodSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueNonmutatingCollectionMethodSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueNonmutatingCollectionMethodSet value1, NSKeyValueNonmutatingCollectionMethodSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueNonmutatingCollectionMethodSet value1, NSKeyValueNonmutatingCollectionMethodSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueNonmutatingCollectionMethodSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueNonmutatingCollectionMethodSet alloc() {
			return new NSKeyValueNonmutatingCollectionMethodSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueNonmutatingCollectionMethodSet ) )]
	public struct NSKeyValueNonmutatingSetMethodSet : IEquatable<NSKeyValueNonmutatingSetMethodSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueNonmutatingSetMethodSet;
		public static implicit operator IntPtr( NSKeyValueNonmutatingSetMethodSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueNonmutatingSetMethodSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueNonmutatingSetMethodSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueNonmutatingSetMethodSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueNonmutatingSetMethodSet value1, NSKeyValueNonmutatingSetMethodSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueNonmutatingSetMethodSet value1, NSKeyValueNonmutatingSetMethodSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueNonmutatingSetMethodSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueNonmutatingSetMethodSet alloc() {
			return new NSKeyValueNonmutatingSetMethodSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueMutableArray ) )]
	public struct NSKeyValueNotifyingMutableArray : IEquatable<NSKeyValueNotifyingMutableArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueNotifyingMutableArray;
		public static implicit operator IntPtr( NSKeyValueNotifyingMutableArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueNotifyingMutableArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueNotifyingMutableArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueNotifyingMutableArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueNotifyingMutableArray value1, NSKeyValueNotifyingMutableArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueNotifyingMutableArray value1, NSKeyValueNotifyingMutableArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueNotifyingMutableArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueNotifyingMutableArray alloc() {
			return new NSKeyValueNotifyingMutableArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueProxyGetter ) )]
	public struct NSKeyValueNotifyingMutableCollectionGetter : IEquatable<NSKeyValueNotifyingMutableCollectionGetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueNotifyingMutableCollectionGetter;
		public static implicit operator IntPtr( NSKeyValueNotifyingMutableCollectionGetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueNotifyingMutableCollectionGetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueNotifyingMutableCollectionGetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueNotifyingMutableCollectionGetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueNotifyingMutableCollectionGetter value1, NSKeyValueNotifyingMutableCollectionGetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueNotifyingMutableCollectionGetter value1, NSKeyValueNotifyingMutableCollectionGetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueNotifyingMutableCollectionGetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueNotifyingMutableCollectionGetter alloc() {
			return new NSKeyValueNotifyingMutableCollectionGetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueNotifyingMutableCollectionGetter initWithContainerClassID_key_mutableCollectionGetter_proxyClass_( NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeObject mutableCollectionGetter, NObjective.RuntimeClass proxyClass ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassID_key_mutableCollectionGetter_proxyClass_( Handle, CachedSelectors.initWithContainerClassID_key_mutableCollectionGetter_proxyClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), id, key, mutableCollectionGetter, proxyClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueNotifyingMutableCollectionGetter( ___result );
		}
		unsafe public NObjective.RuntimeObject mutableCollectionGetter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mutableCollectionGetter( Handle, CachedSelectors.mutableCollectionGetter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassID_key_mutableCollectionGetter_proxyClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeObject mutableCollectionGetter, NObjective.RuntimeClass proxyClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutableCollectionGetter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassID_key_mutableCollectionGetter_proxyClass_ = "initWithContainerClassID:key:mutableCollectionGetter:proxyClass:";
			public static readonly Selector mutableCollectionGetter = "mutableCollectionGetter";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueMutableSet ) )]
	public struct NSKeyValueNotifyingMutableSet : IEquatable<NSKeyValueNotifyingMutableSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueNotifyingMutableSet;
		public static implicit operator IntPtr( NSKeyValueNotifyingMutableSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueNotifyingMutableSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueNotifyingMutableSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueNotifyingMutableSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueNotifyingMutableSet value1, NSKeyValueNotifyingMutableSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueNotifyingMutableSet value1, NSKeyValueNotifyingMutableSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueNotifyingMutableSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueNotifyingMutableSet alloc() {
			return new NSKeyValueNotifyingMutableSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSKeyValueObservance : IEquatable<NSKeyValueObservance> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueObservance;
		public static implicit operator IntPtr( NSKeyValueObservance value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueObservance value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueObservance?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueObservance value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueObservance value1, NSKeyValueObservance value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueObservance value1, NSKeyValueObservance value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueObservance( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueObservance alloc() {
			return new NSKeyValueObservance( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector release = "release";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSKeyValueObservationForwarder : IEquatable<NSKeyValueObservationForwarder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueObservationForwarder;
		public static implicit operator IntPtr( NSKeyValueObservationForwarder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueObservationForwarder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueObservationForwarder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueObservationForwarder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueObservationForwarder value1, NSKeyValueObservationForwarder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueObservationForwarder value1, NSKeyValueObservationForwarder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueObservationForwarder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueObservationForwarder alloc() {
			return new NSKeyValueObservationForwarder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueObservationForwarder initWithObserver_relationshipKey_keyPathFromRelatedObject_options_context_( NObjective.RuntimeObject observer, NObjective.RuntimeObject relationshipKey, NObjective.RuntimeObject keyPathFromRelatedObject, uint options, System.IntPtr context ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObserver_relationshipKey_keyPathFromRelatedObject_options_context_( Handle, CachedSelectors.initWithObserver_relationshipKey_keyPathFromRelatedObject_options_context_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( System.IntPtr ), observer, relationshipKey, keyPathFromRelatedObject, options, context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueObservationForwarder( ___result );
		}
		unsafe public void stopObservingRelatedObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.stopObservingRelatedObject_( Handle, CachedSelectors.stopObservingRelatedObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObserver_relationshipKey_keyPathFromRelatedObject_options_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject observer, NObjective.RuntimeObject relationshipKey, NObjective.RuntimeObject keyPathFromRelatedObject, uint options, System.IntPtr context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopObservingRelatedObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithObserver_relationshipKey_keyPathFromRelatedObject_options_context_ = "initWithObserver:relationshipKey:keyPathFromRelatedObject:options:context:";
			public static readonly Selector stopObservingRelatedObject_ = "stopObservingRelatedObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSKeyValueProperty : IEquatable<NSKeyValueProperty> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueProperty;
		public static implicit operator IntPtr( NSKeyValueProperty value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueProperty value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueProperty?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueProperty value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueProperty value1, NSKeyValueProperty value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueProperty value1, NSKeyValueProperty value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueProperty( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueProperty alloc() {
			return new NSKeyValueProperty( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueProperty initWithContainerClass_keyPath_( NObjective.RuntimeObject @class, NObjective.RuntimeObject keyPath ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClass_keyPath_( Handle, CachedSelectors.initWithContainerClass_keyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @class, keyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueProperty( ___result );
		}
		unsafe public NObjective.RuntimeClass isaForAutonotifying() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isaForAutonotifying( Handle, CachedSelectors.isaForAutonotifying, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject keyPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyPath( Handle, CachedSelectors.keyPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject keyPathIfAffectedByValueForKey_exactMatch_( NObjective.RuntimeObject key, System.IntPtr exactMatch ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyPathIfAffectedByValueForKey_exactMatch_( Handle, CachedSelectors.keyPathIfAffectedByValueForKey_exactMatch_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), key, exactMatch );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool matchesWithoutOperatorComponentsKeyPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchesWithoutOperatorComponentsKeyPath_( Handle, CachedSelectors.matchesWithoutOperatorComponentsKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject restOfKeyPathIfContainedByValueForKeyPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.restOfKeyPathIfContainedByValueForKeyPath_( Handle, CachedSelectors.restOfKeyPathIfContainedByValueForKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClass_keyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @class, NObjective.RuntimeObject keyPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass isaForAutonotifying( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyPathIfAffectedByValueForKey_exactMatch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, System.IntPtr exactMatch );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool matchesWithoutOperatorComponentsKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr restOfKeyPathIfContainedByValueForKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClass_keyPath_ = "initWithContainerClass:keyPath:";
			public static readonly Selector isaForAutonotifying = "isaForAutonotifying";
			public static readonly Selector keyPath = "keyPath";
			public static readonly Selector keyPathIfAffectedByValueForKey_exactMatch_ = "keyPathIfAffectedByValueForKey:exactMatch:";
			public static readonly Selector matchesWithoutOperatorComponentsKeyPath_ = "matchesWithoutOperatorComponentsKeyPath:";
			public static readonly Selector restOfKeyPathIfContainedByValueForKeyPath_ = "restOfKeyPathIfContainedByValueForKeyPath:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueGetter ) )]
	public struct NSKeyValueProxyGetter : IEquatable<NSKeyValueProxyGetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueProxyGetter;
		public static implicit operator IntPtr( NSKeyValueProxyGetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueProxyGetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueProxyGetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueProxyGetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueProxyGetter value1, NSKeyValueProxyGetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueProxyGetter value1, NSKeyValueProxyGetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueProxyGetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueProxyGetter alloc() {
			return new NSKeyValueProxyGetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueProxyGetter initWithContainerClassID_key_proxyClass_( NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeClass proxyClass ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassID_key_proxyClass_( Handle, CachedSelectors.initWithContainerClassID_key_proxyClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), id, key, proxyClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueProxyGetter( ___result );
		}
		unsafe public NObjective.RuntimeClass proxyClass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.proxyClass( Handle, CachedSelectors.proxyClass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassID_key_proxyClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeClass proxyClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass proxyClass( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassID_key_proxyClass_ = "initWithContainerClassID:key:proxyClass:";
			public static readonly Selector proxyClass = "proxyClass";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSKeyValueProxyShareKey : IEquatable<NSKeyValueProxyShareKey> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueProxyShareKey;
		public static implicit operator IntPtr( NSKeyValueProxyShareKey value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueProxyShareKey value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueProxyShareKey?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueProxyShareKey value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueProxyShareKey value1, NSKeyValueProxyShareKey value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueProxyShareKey value1, NSKeyValueProxyShareKey value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueProxyShareKey( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueProxyShareKey alloc() {
			return new NSKeyValueProxyShareKey( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSSet ) )]
	public struct NSKeyValueSet : IEquatable<NSKeyValueSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueSet;
		public static implicit operator IntPtr( NSKeyValueSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueSet value1, NSKeyValueSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueSet value1, NSKeyValueSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueSet alloc() {
			return new NSKeyValueSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueAccessor ) )]
	public struct NSKeyValueSetter : IEquatable<NSKeyValueSetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueSetter;
		public static implicit operator IntPtr( NSKeyValueSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueSetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueSetter value1, NSKeyValueSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueSetter value1, NSKeyValueSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueSetter alloc() {
			return new NSKeyValueSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueGetter ) )]
	public struct NSKeyValueSlowGetter : IEquatable<NSKeyValueSlowGetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueSlowGetter;
		public static implicit operator IntPtr( NSKeyValueSlowGetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueSlowGetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueSlowGetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueSlowGetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueSlowGetter value1, NSKeyValueSlowGetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueSlowGetter value1, NSKeyValueSlowGetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueSlowGetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueSlowGetter alloc() {
			return new NSKeyValueSlowGetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueSlowGetter initWithContainerClassID_key_containerIsa_( NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeClass containerIsa ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassID_key_containerIsa_( Handle, CachedSelectors.initWithContainerClassID_key_containerIsa_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), id, key, containerIsa );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueSlowGetter( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassID_key_containerIsa_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeClass containerIsa );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassID_key_containerIsa_ = "initWithContainerClassID:key:containerIsa:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueMutableArray ) )]
	public struct NSKeyValueSlowMutableArray : IEquatable<NSKeyValueSlowMutableArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueSlowMutableArray;
		public static implicit operator IntPtr( NSKeyValueSlowMutableArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueSlowMutableArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueSlowMutableArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueSlowMutableArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueSlowMutableArray value1, NSKeyValueSlowMutableArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueSlowMutableArray value1, NSKeyValueSlowMutableArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueSlowMutableArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueSlowMutableArray alloc() {
			return new NSKeyValueSlowMutableArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueProxyGetter ) )]
	public struct NSKeyValueSlowMutableCollectionGetter : IEquatable<NSKeyValueSlowMutableCollectionGetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueSlowMutableCollectionGetter;
		public static implicit operator IntPtr( NSKeyValueSlowMutableCollectionGetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueSlowMutableCollectionGetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueSlowMutableCollectionGetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueSlowMutableCollectionGetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueSlowMutableCollectionGetter value1, NSKeyValueSlowMutableCollectionGetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueSlowMutableCollectionGetter value1, NSKeyValueSlowMutableCollectionGetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueSlowMutableCollectionGetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueSlowMutableCollectionGetter alloc() {
			return new NSKeyValueSlowMutableCollectionGetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject baseGetter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseGetter( Handle, CachedSelectors.baseGetter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject baseSetter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseSetter( Handle, CachedSelectors.baseSetter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSKeyValueSlowMutableCollectionGetter initWithContainerClassID_key_baseGetter_baseSetter_containerIsa_proxyClass_( NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeObject baseGetter, NObjective.RuntimeObject baseSetter, NObjective.RuntimeClass containerIsa, NObjective.RuntimeClass proxyClass ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassID_key_baseGetter_baseSetter_containerIsa_proxyClass_( Handle, CachedSelectors.initWithContainerClassID_key_baseGetter_baseSetter_containerIsa_proxyClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeClass ), id, key, baseGetter, baseSetter, containerIsa, proxyClass
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueSlowMutableCollectionGetter( ___result );
		}
		unsafe public char treatNilValuesLikeEmptyCollections() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.treatNilValuesLikeEmptyCollections( Handle, CachedSelectors.treatNilValuesLikeEmptyCollections, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseGetter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseSetter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassID_key_baseGetter_baseSetter_containerIsa_proxyClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeObject baseGetter, NObjective.RuntimeObject baseSetter, NObjective.RuntimeClass containerIsa, NObjective.RuntimeClass proxyClass
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char treatNilValuesLikeEmptyCollections( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector baseGetter = "baseGetter";
			public static readonly Selector baseSetter = "baseSetter";
			public static readonly Selector initWithContainerClassID_key_baseGetter_baseSetter_containerIsa_proxyClass_ = "initWithContainerClassID:key:baseGetter:baseSetter:containerIsa:proxyClass:";
			public static readonly Selector treatNilValuesLikeEmptyCollections = "treatNilValuesLikeEmptyCollections";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueMutableSet ) )]
	public struct NSKeyValueSlowMutableSet : IEquatable<NSKeyValueSlowMutableSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueSlowMutableSet;
		public static implicit operator IntPtr( NSKeyValueSlowMutableSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueSlowMutableSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueSlowMutableSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueSlowMutableSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueSlowMutableSet value1, NSKeyValueSlowMutableSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueSlowMutableSet value1, NSKeyValueSlowMutableSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueSlowMutableSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueSlowMutableSet alloc() {
			return new NSKeyValueSlowMutableSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueSetter ) )]
	public struct NSKeyValueSlowSetter : IEquatable<NSKeyValueSlowSetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueSlowSetter;
		public static implicit operator IntPtr( NSKeyValueSlowSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueSlowSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueSlowSetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueSlowSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueSlowSetter value1, NSKeyValueSlowSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueSlowSetter value1, NSKeyValueSlowSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueSlowSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueSlowSetter alloc() {
			return new NSKeyValueSlowSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueSlowSetter initWithContainerClassID_key_containerIsa_( NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeClass containerIsa ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassID_key_containerIsa_( Handle, CachedSelectors.initWithContainerClassID_key_containerIsa_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), id, key, containerIsa );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueSlowSetter( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassID_key_containerIsa_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeClass containerIsa );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassID_key_containerIsa_ = "initWithContainerClassID:key:containerIsa:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueGetter ) )]
	public struct NSKeyValueUndefinedGetter : IEquatable<NSKeyValueUndefinedGetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueUndefinedGetter;
		public static implicit operator IntPtr( NSKeyValueUndefinedGetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueUndefinedGetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueUndefinedGetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueUndefinedGetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueUndefinedGetter value1, NSKeyValueUndefinedGetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueUndefinedGetter value1, NSKeyValueUndefinedGetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueUndefinedGetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueUndefinedGetter alloc() {
			return new NSKeyValueUndefinedGetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueUndefinedGetter initWithContainerClassID_key_containerIsa_( NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeClass containerIsa ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassID_key_containerIsa_( Handle, CachedSelectors.initWithContainerClassID_key_containerIsa_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), id, key, containerIsa );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueUndefinedGetter( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassID_key_containerIsa_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeClass containerIsa );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassID_key_containerIsa_ = "initWithContainerClassID:key:containerIsa:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueSetter ) )]
	public struct NSKeyValueUndefinedSetter : IEquatable<NSKeyValueUndefinedSetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueUndefinedSetter;
		public static implicit operator IntPtr( NSKeyValueUndefinedSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueUndefinedSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueUndefinedSetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueUndefinedSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueUndefinedSetter value1, NSKeyValueUndefinedSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueUndefinedSetter value1, NSKeyValueUndefinedSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueUndefinedSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueUndefinedSetter alloc() {
			return new NSKeyValueUndefinedSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSKeyValueUndefinedSetter initWithContainerClassID_key_containerIsa_( NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeClass containerIsa ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassID_key_containerIsa_( Handle, CachedSelectors.initWithContainerClassID_key_containerIsa_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), id, key, containerIsa );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSKeyValueUndefinedSetter( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassID_key_containerIsa_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject key, NObjective.RuntimeClass containerIsa );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassID_key_containerIsa_ = "initWithContainerClassID:key:containerIsa:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSKeyValueProperty ) )]
	public struct NSKeyValueUnnestedProperty : IEquatable<NSKeyValueUnnestedProperty> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSKeyValueUnnestedProperty;
		public static implicit operator IntPtr( NSKeyValueUnnestedProperty value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSKeyValueUnnestedProperty value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSKeyValueUnnestedProperty?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSKeyValueUnnestedProperty value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSKeyValueUnnestedProperty value1, NSKeyValueUnnestedProperty value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSKeyValueUnnestedProperty value1, NSKeyValueUnnestedProperty value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSKeyValueUnnestedProperty( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSKeyValueUnnestedProperty alloc() {
			return new NSKeyValueUnnestedProperty( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableDictionary ) )]
	public struct NSLanguageContext : IEquatable<NSLanguageContext> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSLanguageContext;
		public static implicit operator IntPtr( NSLanguageContext value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSLanguageContext value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSLanguageContext?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSLanguageContext value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSLanguageContext value1, NSLanguageContext value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSLanguageContext value1, NSLanguageContext value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSLanguageContext( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSLanguageContext alloc() {
			return new NSLanguageContext( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject availableLanguageContextNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.availableLanguageContextNames( ClassHandle, CachedSelectors.availableLanguageContextNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultLanguageContext() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultLanguageContext( ClassHandle, CachedSelectors.defaultLanguageContext, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSLanguageContext languageContextWithName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.languageContextWithName_( ClassHandle, CachedSelectors.languageContextWithName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSLanguageContext( ___result );
		}
		unsafe public static NObjective.RuntimeObject systemLanguageContext() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLanguageContext( ClassHandle, CachedSelectors.systemLanguageContext, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject classForCoder() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForCoder( Handle, CachedSelectors.classForCoder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject formalName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formalName( Handle, CachedSelectors.formalName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject languageCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.languageCode( Handle, CachedSelectors.languageCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject languageName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.languageName( Handle, CachedSelectors.languageName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr availableLanguageContextNames( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classForCoder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultLanguageContext( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr formalName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr languageCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr languageContextWithName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr languageName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLanguageContext( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector availableLanguageContextNames = "availableLanguageContextNames";
			public static readonly Selector classForCoder = "classForCoder";
			public static readonly Selector defaultLanguageContext = "defaultLanguageContext";
			public static readonly Selector formalName = "formalName";
			public static readonly Selector languageCode = "languageCode";
			public static readonly Selector languageContextWithName_ = "languageContextWithName:";
			public static readonly Selector languageName = "languageName";
			public static readonly Selector systemLanguageContext = "systemLanguageContext";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMatchingPredicateOperator ) )]
	public struct NSLikePredicateOperator : IEquatable<NSLikePredicateOperator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSLikePredicateOperator;
		public static implicit operator IntPtr( NSLikePredicateOperator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSLikePredicateOperator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSLikePredicateOperator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSLikePredicateOperator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSLikePredicateOperator value1, NSLikePredicateOperator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSLikePredicateOperator value1, NSLikePredicateOperator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSLikePredicateOperator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSLikePredicateOperator alloc() {
			return new NSLikePredicateOperator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSLocale : IEquatable<NSLocale> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSLocale;
		public static implicit operator IntPtr( NSLocale value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSLocale value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSLocale?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSLocale value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSLocale value1, NSLocale value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSLocale value1, NSLocale value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSLocale( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSLocale alloc() {
			return new NSLocale( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSArray availableLocaleIdentifiers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.availableLocaleIdentifiers( ClassHandle, CachedSelectors.availableLocaleIdentifiers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NObjective.RuntimeObject canonicalLanguageIdentifierFromString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canonicalLanguageIdentifierFromString_( ClassHandle, CachedSelectors.canonicalLanguageIdentifierFromString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static string canonicalLocaleIdentifierFromString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.canonicalLocaleIdentifierFromString_( ClassHandle, CachedSelectors.canonicalLocaleIdentifierFromString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static NSDictionary componentsFromLocaleIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.componentsFromLocaleIdentifier_( ClassHandle, CachedSelectors.componentsFromLocaleIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public static NObjective.RuntimeObject currentLocale() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentLocale( ClassHandle, CachedSelectors.currentLocale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSArray ISOCountryCodes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ISOCountryCodes( ClassHandle, CachedSelectors.ISOCountryCodes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSArray ISOCurrencyCodes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ISOCurrencyCodes( ClassHandle, CachedSelectors.ISOCurrencyCodes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSArray ISOLanguageCodes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ISOLanguageCodes( ClassHandle, CachedSelectors.ISOLanguageCodes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static string localeIdentifierFromComponents_( NSDictionary components ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localeIdentifierFromComponents_( ClassHandle, CachedSelectors.localeIdentifierFromComponents_, out ___occuredException, sizeof( NSDictionary ), components );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static NObjective.RuntimeObject systemLocale() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemLocale( ClassHandle, CachedSelectors.systemLocale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string displayNameForKey_value_( NObjective.RuntimeObject key, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayNameForKey_value_( Handle, CachedSelectors.displayNameForKey_value_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject identifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifier( Handle, CachedSelectors.identifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSLocale initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSLocale( ___result );
		}
		unsafe public NSLocale initWithLocaleIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.initWithLocaleIdentifier_( Handle, CachedSelectors.initWithLocaleIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSLocale( ___result );
		}
		unsafe public string localeIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localeIdentifier( Handle, CachedSelectors.localeIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject objectForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectForKey_( Handle, CachedSelectors.objectForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr availableLocaleIdentifiers( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr canonicalLanguageIdentifierFromString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr canonicalLocaleIdentifierFromString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr componentsFromLocaleIdentifier_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentLocale( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayNameForKey_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr identifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLocaleIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ISOCountryCodes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ISOCurrencyCodes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ISOLanguageCodes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localeIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localeIdentifierFromComponents_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary components );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemLocale( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector availableLocaleIdentifiers = "availableLocaleIdentifiers";
			public static readonly Selector canonicalLanguageIdentifierFromString_ = "canonicalLanguageIdentifierFromString:";
			public static readonly Selector canonicalLocaleIdentifierFromString_ = "canonicalLocaleIdentifierFromString:";
			public static readonly Selector componentsFromLocaleIdentifier_ = "componentsFromLocaleIdentifier:";
			public static readonly Selector currentLocale = "currentLocale";
			public static readonly Selector displayNameForKey_value_ = "displayNameForKey:value:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector identifier = "identifier";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithLocaleIdentifier_ = "initWithLocaleIdentifier:";
			public static readonly Selector ISOCountryCodes = "ISOCountryCodes";
			public static readonly Selector ISOCurrencyCodes = "ISOCurrencyCodes";
			public static readonly Selector ISOLanguageCodes = "ISOLanguageCodes";
			public static readonly Selector localeIdentifier = "localeIdentifier";
			public static readonly Selector localeIdentifierFromComponents_ = "localeIdentifierFromComponents:";
			public static readonly Selector objectForKey_ = "objectForKey:";
			public static readonly Selector systemLocale = "systemLocale";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTimeZone ) )]
	public struct NSLocalTimeZone : IEquatable<NSLocalTimeZone> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSLocalTimeZone;
		public static implicit operator IntPtr( NSLocalTimeZone value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSLocalTimeZone value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSLocalTimeZone?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSLocalTimeZone value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSLocalTimeZone value1, NSLocalTimeZone value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSLocalTimeZone value1, NSLocalTimeZone value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSLocalTimeZone( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSLocalTimeZone alloc() {
			return new NSLocalTimeZone( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSLock : IEquatable<NSLock> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSLock;
		public static implicit operator IntPtr( NSLock value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSLock value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSLock?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSLock value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSLock value1, NSLock value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSLock value1, NSLock value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSLock( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSLock alloc() {
			return new NSLock( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void @lock() {
			RuntimeObject ___occuredException;
			NativeMethods.@lock( Handle, CachedSelectors.@lock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool lockBeforeDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockBeforeDate_( Handle, CachedSelectors.lockBeforeDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool tryLock() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tryLock( Handle, CachedSelectors.tryLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @lock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool lockBeforeDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool tryLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector @lock = "lock";
			public static readonly Selector lockBeforeDate_ = "lockBeforeDate:";
			public static readonly Selector tryLock = "tryLock";
			public static readonly Selector unlock = "unlock";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptWhoseTest ) )]
	public struct NSLogicalTest : IEquatable<NSLogicalTest> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSLogicalTest;
		public static implicit operator IntPtr( NSLogicalTest value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSLogicalTest value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSLogicalTest?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSLogicalTest value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSLogicalTest value1, NSLogicalTest value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSLogicalTest value1, NSLogicalTest value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSLogicalTest( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSLogicalTest alloc() {
			return new NSLogicalTest( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSLogicalTest initAndTestWithTests_( NSArray tests ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initAndTestWithTests_( Handle, CachedSelectors.initAndTestWithTests_, out ___occuredException, sizeof( NSArray ), tests );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSLogicalTest( ___result );
		}
		unsafe public NSLogicalTest initNotTestWithTest_( NSScriptWhoseTest test ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initNotTestWithTest_( Handle, CachedSelectors.initNotTestWithTest_, out ___occuredException, sizeof( NSScriptWhoseTest ), test );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSLogicalTest( ___result );
		}
		unsafe public NSLogicalTest initOrTestWithTests_( NSArray tests ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initOrTestWithTests_( Handle, CachedSelectors.initOrTestWithTests_, out ___occuredException, sizeof( NSArray ), tests );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSLogicalTest( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initAndTestWithTests_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray tests );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initNotTestWithTest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptWhoseTest test );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initOrTestWithTests_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray tests );
		}
		static internal class CachedSelectors {
			public static readonly Selector initAndTestWithTests_ = "initAndTestWithTests:";
			public static readonly Selector initNotTestWithTest_ = "initNotTestWithTest:";
			public static readonly Selector initOrTestWithTests_ = "initOrTestWithTests:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSRefCountingNumber ) )]
	public struct NSlongLongNumber : IEquatable<NSlongLongNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSlongLongNumber;
		public static implicit operator IntPtr( NSlongLongNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSlongLongNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSlongLongNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSlongLongNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSlongLongNumber value1, NSlongLongNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSlongLongNumber value1, NSlongLongNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSlongLongNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSlongLongNumber alloc() {
			return new NSlongLongNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSMacBinaryDecoder : IEquatable<NSMacBinaryDecoder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMacBinaryDecoder;
		public static implicit operator IntPtr( NSMacBinaryDecoder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMacBinaryDecoder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMacBinaryDecoder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMacBinaryDecoder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMacBinaryDecoder value1, NSMacBinaryDecoder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMacBinaryDecoder value1, NSMacBinaryDecoder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMacBinaryDecoder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMacBinaryDecoder alloc() {
			return new NSMacBinaryDecoder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char canDecodeDownloadHeaderData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canDecodeDownloadHeaderData_( ClassHandle, CachedSelectors.canDecodeDownloadHeaderData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject MIMEType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.MIMEType( ClassHandle, CachedSelectors.MIMEType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char decodeDownloadData_dataForkData_resourceForkData_( NObjective.RuntimeObject data, System.IntPtr dataForkData, System.IntPtr resourceForkData ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodeDownloadData_dataForkData_resourceForkData_( Handle, CachedSelectors.decodeDownloadData_dataForkData_resourceForkData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), data, dataForkData, resourceForkData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject fileAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileAttributes( Handle, CachedSelectors.fileAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject filenameWithOriginalFilename_( NObjective.RuntimeObject filename ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filenameWithOriginalFilename_( Handle, CachedSelectors.filenameWithOriginalFilename_, out ___occuredException, sizeof( NObjective.RuntimeObject ), filename );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char finishDownloadDecoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.finishDownloadDecoding( Handle, CachedSelectors.finishDownloadDecoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSMacBinaryDecoder initWithResumeInformation_( NObjective.RuntimeObject information ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithResumeInformation_( Handle, CachedSelectors.initWithResumeInformation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), information );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMacBinaryDecoder( ___result );
		}
		unsafe public NObjective.RuntimeObject resumeInformation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resumeInformation( Handle, CachedSelectors.resumeInformation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canDecodeDownloadHeaderData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char decodeDownloadData_dataForkData_resourceForkData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, System.IntPtr dataForkData, System.IntPtr resourceForkData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr filenameWithOriginalFilename_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filename );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char finishDownloadDecoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithResumeInformation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject information );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr MIMEType( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resumeInformation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector canDecodeDownloadHeaderData_ = "canDecodeDownloadHeaderData:";
			public static readonly Selector decodeDownloadData_dataForkData_resourceForkData_ = "decodeDownloadData:dataForkData:resourceForkData:";
			public static readonly Selector fileAttributes = "fileAttributes";
			public static readonly Selector filenameWithOriginalFilename_ = "filenameWithOriginalFilename:";
			public static readonly Selector finishDownloadDecoding = "finishDownloadDecoding";
			public static readonly Selector initWithResumeInformation_ = "initWithResumeInformation:";
			public static readonly Selector MIMEType = "MIMEType";
			public static readonly Selector resumeInformation = "resumeInformation";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPortNameServer ) )]
	public struct NSMachBootstrapServer : IEquatable<NSMachBootstrapServer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMachBootstrapServer;
		public static implicit operator IntPtr( NSMachBootstrapServer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMachBootstrapServer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMachBootstrapServer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMachBootstrapServer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMachBootstrapServer value1, NSMachBootstrapServer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMachBootstrapServer value1, NSMachBootstrapServer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMachBootstrapServer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMachBootstrapServer alloc() {
			return new NSMachBootstrapServer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedInstance( ClassHandle, CachedSelectors.sharedInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedInstance( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector sharedInstance = "sharedInstance";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSMachPort ) )]
	public struct NSMachPort : IEquatable<NSMachPort> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMachPort;
		public static implicit operator IntPtr( NSMachPort value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMachPort value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMachPort?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMachPort value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMachPort value1, NSMachPort value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMachPort value1, NSMachPort value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMachPort( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMachPort alloc() {
			return new NSMachPort( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSMachPort ) )]
	public struct NSMachPort__ : IEquatable<NSMachPort__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMachPort__;
		public static implicit operator IntPtr( NSMachPort__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMachPort__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMachPort__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMachPort__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMachPort__ value1, NSMachPort__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMachPort__ value1, NSMachPort__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMachPort__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMachPort__ alloc() {
			return new NSMachPort__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSStringPredicateOperator ) )]
	public struct NSMatchingPredicateOperator : IEquatable<NSMatchingPredicateOperator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMatchingPredicateOperator;
		public static implicit operator IntPtr( NSMatchingPredicateOperator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMatchingPredicateOperator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMatchingPredicateOperator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMatchingPredicateOperator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMatchingPredicateOperator value1, NSMatchingPredicateOperator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMatchingPredicateOperator value1, NSMatchingPredicateOperator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMatchingPredicateOperator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMatchingPredicateOperator alloc() {
			return new NSMatchingPredicateOperator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPort ) )]
	public struct NSMessagePort : IEquatable<NSMessagePort> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMessagePort;
		public static implicit operator IntPtr( NSMessagePort value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMessagePort value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMessagePort?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMessagePort value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMessagePort value1, NSMessagePort value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMessagePort value1, NSMessagePort value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMessagePort( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMessagePort alloc() {
			return new NSMessagePort( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char sendBeforeTime_streamData_components_to_from_msgid_reserved_( double time, NObjective.RuntimeObject streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject to, NObjective.RuntimeObject @from, uint msgid, uint reserved ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendBeforeTime_streamData_components_to_from_msgid_reserved_( ClassHandle, CachedSelectors.sendBeforeTime_streamData_components_to_from_msgid_reserved_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( uint ), time, streamData, components, to, @from, msgid, 
			reserved );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSMessagePort initWithName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithName_( Handle, CachedSelectors.initWithName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMessagePort( ___result );
		}
		unsafe public NSMessagePort initWithRemoteName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRemoteName_( Handle, CachedSelectors.initWithRemoteName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMessagePort( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char sendBeforeTime_streamData_components_from_msgid_( double time, System.IntPtr streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject @from, uint msgid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendBeforeTime_streamData_components_from_msgid_( Handle, CachedSelectors.sendBeforeTime_streamData_components_from_msgid_, out ___occuredException, sizeof( double ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), time, streamData, components, @from, msgid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRemoteName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sendBeforeTime_streamData_components_from_msgid_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double time, System.IntPtr streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject @from, uint msgid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sendBeforeTime_streamData_components_to_from_msgid_reserved_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double time, NObjective.RuntimeObject streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject to, NObjective.RuntimeObject @from, uint msgid, 
			uint reserved );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithName_ = "initWithName:";
			public static readonly Selector initWithRemoteName_ = "initWithRemoteName:";
			public static readonly Selector name = "name";
			public static readonly Selector sendBeforeTime_streamData_components_from_msgid_ = "sendBeforeTime:streamData:components:from:msgid:";
			public static readonly Selector sendBeforeTime_streamData_components_to_from_msgid_reserved_ = "sendBeforeTime:streamData:components:to:from:msgid:reserved:";
			public static readonly Selector setName_ = "setName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPortNameServer ) )]
	public struct NSMessagePortNameServer : IEquatable<NSMessagePortNameServer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMessagePortNameServer;
		public static implicit operator IntPtr( NSMessagePortNameServer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMessagePortNameServer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMessagePortNameServer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMessagePortNameServer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMessagePortNameServer value1, NSMessagePortNameServer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMessagePortNameServer value1, NSMessagePortNameServer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMessagePortNameServer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMessagePortNameServer alloc() {
			return new NSMessagePortNameServer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedInstance( ClassHandle, CachedSelectors.sharedInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedInstance( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector sharedInstance = "sharedInstance";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSMetadataItem : IEquatable<NSMetadataItem> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMetadataItem;
		public static implicit operator IntPtr( NSMetadataItem value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMetadataItem value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMetadataItem?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMetadataItem value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMetadataItem value1, NSMetadataItem value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMetadataItem value1, NSMetadataItem value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMetadataItem( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMetadataItem alloc() {
			return new NSMetadataItem( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSArray attributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributes( Handle, CachedSelectors.attributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForAttribute_( string attribute ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			var ___result = NativeMethods.valueForAttribute_( Handle, CachedSelectors.valueForAttribute_, out ___occuredException, sizeof( IntPtr ), ___wrappedattribute );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDictionary valuesForAttributes_( NSArray attributes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valuesForAttributes_( Handle, CachedSelectors.valuesForAttributes_, out ___occuredException, sizeof( NSArray ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valuesForAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray attributes );
		}
		static internal class CachedSelectors {
			public static readonly Selector attributes = "attributes";
			public static readonly Selector valueForAttribute_ = "valueForAttribute:";
			public static readonly Selector valuesForAttributes_ = "valuesForAttributes:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSMetadataQuery : IEquatable<NSMetadataQuery> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMetadataQuery;
		public static implicit operator IntPtr( NSMetadataQuery value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMetadataQuery value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMetadataQuery?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMetadataQuery value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMetadataQuery value1, NSMetadataQuery value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMetadataQuery value1, NSMetadataQuery value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMetadataQuery( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMetadataQuery alloc() {
			return new NSMetadataQuery( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void disableUpdates() {
			RuntimeObject ___occuredException;
			NativeMethods.disableUpdates( Handle, CachedSelectors.disableUpdates, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void enableUpdates() {
			RuntimeObject ___occuredException;
			NativeMethods.enableUpdates( Handle, CachedSelectors.enableUpdates, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray groupedResults() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupedResults( Handle, CachedSelectors.groupedResults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray groupingAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupingAttributes( Handle, CachedSelectors.groupingAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public uint indexOfResult_( NObjective.RuntimeObject result ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfResult_( Handle, CachedSelectors.indexOfResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ), result );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public bool isGathering() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isGathering( Handle, CachedSelectors.isGathering, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isStarted() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isStarted( Handle, CachedSelectors.isStarted, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isStopped() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isStopped( Handle, CachedSelectors.isStopped, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double notificationBatchingInterval() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notificationBatchingInterval( Handle, CachedSelectors.notificationBatchingInterval, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSPredicate predicate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicate( Handle, CachedSelectors.predicate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		unsafe public NObjective.RuntimeObject resultAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resultAtIndex_( Handle, CachedSelectors.resultAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint resultCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resultCount( Handle, CachedSelectors.resultCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSArray results() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.results( Handle, CachedSelectors.results, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray searchScopes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchScopes( Handle, CachedSelectors.searchScopes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupingAttributes_( NSArray attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroupingAttributes_( Handle, CachedSelectors.setGroupingAttributes_, out ___occuredException, sizeof( NSArray ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNotificationBatchingInterval_( double interval ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNotificationBatchingInterval_( Handle, CachedSelectors.setNotificationBatchingInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPredicate_( NSPredicate predicate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPredicate_( Handle, CachedSelectors.setPredicate_, out ___occuredException, sizeof( NSPredicate ), predicate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchScopes_( NSArray scopes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchScopes_( Handle, CachedSelectors.setSearchScopes_, out ___occuredException, sizeof( NSArray ), scopes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSortDescriptors_( NSArray descriptors ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSortDescriptors_( Handle, CachedSelectors.setSortDescriptors_, out ___occuredException, sizeof( NSArray ), descriptors );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValueListAttributes_( NSArray attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueListAttributes_( Handle, CachedSelectors.setValueListAttributes_, out ___occuredException, sizeof( NSArray ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray sortDescriptors() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortDescriptors( Handle, CachedSelectors.sortDescriptors, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public bool startQuery() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startQuery( Handle, CachedSelectors.startQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void stopQuery() {
			RuntimeObject ___occuredException;
			NativeMethods.stopQuery( Handle, CachedSelectors.stopQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray valueListAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueListAttributes( Handle, CachedSelectors.valueListAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSDictionary valueLists() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueLists( Handle, CachedSelectors.valueLists, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NObjective.RuntimeObject valueOfAttribute_forResultAtIndex_( string attribute, uint forResultAtIndex ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			var ___result = NativeMethods.valueOfAttribute_forResultAtIndex_( Handle, CachedSelectors.valueOfAttribute_forResultAtIndex_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), ___wrappedattribute, forResultAtIndex );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void disableUpdates( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enableUpdates( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupedResults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupingAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject result );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isGathering( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isStarted( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isStopped( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double notificationBatchingInterval( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resultAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint resultCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr results( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchScopes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGroupingAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNotificationBatchingInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPredicate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPredicate predicate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSearchScopes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray scopes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSortDescriptors_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray descriptors );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValueListAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sortDescriptors( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool startQuery( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopQuery( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueListAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueLists( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueOfAttribute_forResultAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute, uint forResultAtIndex );
		}
		static internal class CachedSelectors {
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector disableUpdates = "disableUpdates";
			public static readonly Selector enableUpdates = "enableUpdates";
			public static readonly Selector groupedResults = "groupedResults";
			public static readonly Selector groupingAttributes = "groupingAttributes";
			public static readonly Selector indexOfResult_ = "indexOfResult:";
			public static readonly Selector isGathering = "isGathering";
			public static readonly Selector isStarted = "isStarted";
			public static readonly Selector isStopped = "isStopped";
			public static readonly Selector notificationBatchingInterval = "notificationBatchingInterval";
			public static readonly Selector predicate = "predicate";
			public static readonly Selector resultAtIndex_ = "resultAtIndex:";
			public static readonly Selector resultCount = "resultCount";
			public static readonly Selector results = "results";
			public static readonly Selector searchScopes = "searchScopes";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setGroupingAttributes_ = "setGroupingAttributes:";
			public static readonly Selector setNotificationBatchingInterval_ = "setNotificationBatchingInterval:";
			public static readonly Selector setPredicate_ = "setPredicate:";
			public static readonly Selector setSearchScopes_ = "setSearchScopes:";
			public static readonly Selector setSortDescriptors_ = "setSortDescriptors:";
			public static readonly Selector setValueListAttributes_ = "setValueListAttributes:";
			public static readonly Selector sortDescriptors = "sortDescriptors";
			public static readonly Selector startQuery = "startQuery";
			public static readonly Selector stopQuery = "stopQuery";
			public static readonly Selector valueListAttributes = "valueListAttributes";
			public static readonly Selector valueLists = "valueLists";
			public static readonly Selector valueOfAttribute_forResultAtIndex_ = "valueOfAttribute:forResultAtIndex:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSMetadataQueryAttributeValueTuple : IEquatable<NSMetadataQueryAttributeValueTuple> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMetadataQueryAttributeValueTuple;
		public static implicit operator IntPtr( NSMetadataQueryAttributeValueTuple value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMetadataQueryAttributeValueTuple value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMetadataQueryAttributeValueTuple?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMetadataQueryAttributeValueTuple value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMetadataQueryAttributeValueTuple value1, NSMetadataQueryAttributeValueTuple value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMetadataQueryAttributeValueTuple value1, NSMetadataQueryAttributeValueTuple value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMetadataQueryAttributeValueTuple( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMetadataQueryAttributeValueTuple alloc() {
			return new NSMetadataQueryAttributeValueTuple( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public string attribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attribute( Handle, CachedSelectors.attribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attribute = "attribute";
			public static readonly Selector count = "count";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSMetadataQueryResultGroup : IEquatable<NSMetadataQueryResultGroup> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMetadataQueryResultGroup;
		public static implicit operator IntPtr( NSMetadataQueryResultGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMetadataQueryResultGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMetadataQueryResultGroup?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMetadataQueryResultGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMetadataQueryResultGroup value1, NSMetadataQueryResultGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMetadataQueryResultGroup value1, NSMetadataQueryResultGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMetadataQueryResultGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMetadataQueryResultGroup alloc() {
			return new NSMetadataQueryResultGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public string attribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attribute( Handle, CachedSelectors.attribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject resultAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resultAtIndex_( Handle, CachedSelectors.resultAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint resultCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resultCount( Handle, CachedSelectors.resultCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSArray results() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.results( Handle, CachedSelectors.results, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray subgroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subgroups( Handle, CachedSelectors.subgroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resultAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint resultCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr results( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subgroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attribute = "attribute";
			public static readonly Selector resultAtIndex_ = "resultAtIndex:";
			public static readonly Selector resultCount = "resultCount";
			public static readonly Selector results = "results";
			public static readonly Selector subgroups = "subgroups";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSMethodSignature : IEquatable<NSMethodSignature> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMethodSignature;
		public static implicit operator IntPtr( NSMethodSignature value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMethodSignature value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMethodSignature?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMethodSignature value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMethodSignature value1, NSMethodSignature value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMethodSignature value1, NSMethodSignature value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMethodSignature( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMethodSignature alloc() {
			return new NSMethodSignature( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject signatureWithObjCTypes_( System.IntPtr types ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.signatureWithObjCTypes_( ClassHandle, CachedSelectors.signatureWithObjCTypes_, out ___occuredException, sizeof( System.IntPtr ), types );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint frameLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frameLength( Handle, CachedSelectors.frameLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public IntPtr getArgumentTypeAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getArgumentTypeAtIndex_( Handle, CachedSelectors.getArgumentTypeAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isOneway() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isOneway( Handle, CachedSelectors.isOneway, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint methodReturnLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.methodReturnLength( Handle, CachedSelectors.methodReturnLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public IntPtr methodReturnType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.methodReturnType( Handle, CachedSelectors.methodReturnType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint numberOfArguments() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfArguments( Handle, CachedSelectors.numberOfArguments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint frameLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr getArgumentTypeAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isOneway( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint methodReturnLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr methodReturnType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint numberOfArguments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr signatureWithObjCTypes_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr types );
		}
		static internal class CachedSelectors {
			public static readonly Selector frameLength = "frameLength";
			public static readonly Selector getArgumentTypeAtIndex_ = "getArgumentTypeAtIndex:";
			public static readonly Selector isOneway = "isOneway";
			public static readonly Selector methodReturnLength = "methodReturnLength";
			public static readonly Selector methodReturnType = "methodReturnType";
			public static readonly Selector numberOfArguments = "numberOfArguments";
			public static readonly Selector signatureWithObjCTypes_ = "signatureWithObjCTypes:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectSpecifier ) )]
	public struct NSMiddleSpecifier : IEquatable<NSMiddleSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMiddleSpecifier;
		public static implicit operator IntPtr( NSMiddleSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMiddleSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMiddleSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMiddleSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMiddleSpecifier value1, NSMiddleSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMiddleSpecifier value1, NSMiddleSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMiddleSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMiddleSpecifier alloc() {
			return new NSMiddleSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCommand ) )]
	public struct NSMoveCommand : IEquatable<NSMoveCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMoveCommand;
		public static implicit operator IntPtr( NSMoveCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMoveCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMoveCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMoveCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMoveCommand value1, NSMoveCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMoveCommand value1, NSMoveCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMoveCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMoveCommand alloc() {
			return new NSMoveCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptObjectSpecifier keySpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keySpecifier( Handle, CachedSelectors.keySpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keySpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector keySpecifier = "keySpecifier";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSMultiReadUniWriteLock : IEquatable<NSMultiReadUniWriteLock> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMultiReadUniWriteLock;
		public static implicit operator IntPtr( NSMultiReadUniWriteLock value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMultiReadUniWriteLock value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMultiReadUniWriteLock?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMultiReadUniWriteLock value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMultiReadUniWriteLock value1, NSMultiReadUniWriteLock value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMultiReadUniWriteLock value1, NSMultiReadUniWriteLock value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMultiReadUniWriteLock( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMultiReadUniWriteLock alloc() {
			return new NSMultiReadUniWriteLock( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void @lock() {
			RuntimeObject ___occuredException;
			NativeMethods.@lock( Handle, CachedSelectors.@lock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void lockForReading() {
			RuntimeObject ___occuredException;
			NativeMethods.lockForReading( Handle, CachedSelectors.lockForReading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void lockForWriting() {
			RuntimeObject ___occuredException;
			NativeMethods.lockForWriting( Handle, CachedSelectors.lockForWriting, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char tryLockForReading() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tryLockForReading( Handle, CachedSelectors.tryLockForReading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char tryLockForWriting() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tryLockForWriting( Handle, CachedSelectors.tryLockForWriting, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @lock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void lockForReading( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void lockForWriting( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char tryLockForReading( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char tryLockForWriting( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector @lock = "lock";
			public static readonly Selector lockForReading = "lockForReading";
			public static readonly Selector lockForWriting = "lockForWriting";
			public static readonly Selector tryLockForReading = "tryLockForReading";
			public static readonly Selector tryLockForWriting = "tryLockForWriting";
			public static readonly Selector unlock = "unlock";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSArray ) )]
	public struct NSMutableArray : IEquatable<NSMutableArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableArray;
		public static implicit operator IntPtr( NSMutableArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableArray value1, NSMutableArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableArray value1, NSMutableArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableArray alloc() {
			return new NSMutableArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject arrayWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayWithCapacity_( ClassHandle, CachedSelectors.arrayWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.addObject_( Handle, CachedSelectors.addObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addObjectsFromArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			NativeMethods.addObjectsFromArray_( Handle, CachedSelectors.addObjectsFromArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exchange__( uint exchange, uint unnamedParameter ) {
			RuntimeObject ___occuredException;
			NativeMethods.exchange__( Handle, CachedSelectors.exchange__, out ___occuredException, sizeof( uint ) + sizeof( uint ), exchange, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exchangeObjectAtIndex_withObjectAtIndex_( uint index, uint withObjectAtIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.exchangeObjectAtIndex_withObjectAtIndex_( Handle, CachedSelectors.exchangeObjectAtIndex_withObjectAtIndex_, out ___occuredException, sizeof( uint ) + sizeof( uint ), index, withObjectAtIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void filterUsingPredicate_( NSPredicate predicate ) {
			RuntimeObject ___occuredException;
			NativeMethods.filterUsingPredicate_( Handle, CachedSelectors.filterUsingPredicate_, out ___occuredException, sizeof( NSPredicate ), predicate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSMutableArray initWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCapacity_( Handle, CachedSelectors.initWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableArray( ___result );
		}
		unsafe public void insertObject_atIndex_( NObjective.RuntimeObject @object, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertObject_atIndex_( Handle, CachedSelectors.insertObject_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @object, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertObjects_atIndexes_( NSArray objects, NSIndexSet atIndexes ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertObjects_atIndexes_( Handle, CachedSelectors.insertObjects_atIndexes_, out ___occuredException, sizeof( NSArray ) + sizeof( NSIndexSet ), objects, atIndexes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllObjects() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllObjects( Handle, CachedSelectors.removeAllObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeLastObject() {
			RuntimeObject ___occuredException;
			NativeMethods.removeLastObject( Handle, CachedSelectors.removeLastObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObject_( Handle, CachedSelectors.removeObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObject_inRange_( NObjective.RuntimeObject @object, _NSRange inRange ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObject_inRange_( Handle, CachedSelectors.removeObject_inRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( _NSRange ), @object, inRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectAtIndex_( Handle, CachedSelectors.removeObjectAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectIdenticalTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectIdenticalTo_( Handle, CachedSelectors.removeObjectIdenticalTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectIdenticalTo_inRange_( NObjective.RuntimeObject to, _NSRange inRange ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectIdenticalTo_inRange_( Handle, CachedSelectors.removeObjectIdenticalTo_inRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( _NSRange ), to, inRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectsAtIndexes_( NSIndexSet indexes ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectsAtIndexes_( Handle, CachedSelectors.removeObjectsAtIndexes_, out ___occuredException, sizeof( NSIndexSet ), indexes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectsFromIndices_numIndices_( IntPtr indices, uint numIndices ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectsFromIndices_numIndices_( Handle, CachedSelectors.removeObjectsFromIndices_numIndices_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), indices, numIndices );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectsInArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectsInArray_( Handle, CachedSelectors.removeObjectsInArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectsInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectsInRange_( Handle, CachedSelectors.removeObjectsInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceObjectAtIndex_withObject_( uint index, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObjectAtIndex_withObject_( Handle, CachedSelectors.replaceObjectAtIndex_withObject_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), index, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceObjectsAtIndexes_withObjects_( NSIndexSet indexes, NSArray withObjects ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObjectsAtIndexes_withObjects_( Handle, CachedSelectors.replaceObjectsAtIndexes_withObjects_, out ___occuredException, sizeof( NSIndexSet ) + sizeof( NSArray ), indexes, withObjects );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceObjectsInRange_withObjectsFromArray_( _NSRange range, NSArray withObjectsFromArray ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObjectsInRange_withObjectsFromArray_( Handle, CachedSelectors.replaceObjectsInRange_withObjectsFromArray_, out ___occuredException, sizeof( _NSRange ) + sizeof( NSArray ), range, withObjectsFromArray );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceObjectsInRange_withObjectsFromArray_range_( _NSRange range, NSArray withObjectsFromArray, _NSRange range2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObjectsInRange_withObjectsFromArray_range_( Handle, CachedSelectors.replaceObjectsInRange_withObjectsFromArray_range_, out ___occuredException, sizeof( _NSRange ) + sizeof( NSArray ) + sizeof( _NSRange ), range, withObjectsFromArray, range2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			NativeMethods.setArray_( Handle, CachedSelectors.setArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObject_atIndex_( NObjective.RuntimeObject @object, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObject_atIndex_( Handle, CachedSelectors.setObject_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @object, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sortUsingDescriptors_( NSArray descriptors ) {
			RuntimeObject ___occuredException;
			NativeMethods.sortUsingDescriptors_( Handle, CachedSelectors.sortUsingDescriptors_, out ___occuredException, sizeof( NSArray ), descriptors );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sortUsingFunction_context_( IntPtr function, IntPtr context ) {
			RuntimeObject ___occuredException;
			NativeMethods.sortUsingFunction_context_( Handle, CachedSelectors.sortUsingFunction_context_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), function, context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sortUsingSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.sortUsingSelector_( Handle, CachedSelectors.sortUsingSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObjectsFromArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayWithCapacity_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void exchange__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint exchange, uint unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void exchangeObjectAtIndex_withObjectAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, uint withObjectAtIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void filterUsingPredicate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPredicate predicate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCapacity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertObject_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertObjects_atIndexes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray objects, NSIndexSet atIndexes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllObjects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeLastObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObject_inRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, _NSRange inRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectIdenticalTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectIdenticalTo_inRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to, _NSRange inRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectsAtIndexes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSIndexSet indexes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectsFromIndices_numIndices_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr indices, uint numIndices );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectsInArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectsInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObjectAtIndex_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObjectsAtIndexes_withObjects_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSIndexSet indexes, NSArray withObjects );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObjectsInRange_withObjectsFromArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range, NSArray withObjectsFromArray );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObjectsInRange_withObjectsFromArray_range_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range, NSArray withObjectsFromArray, _NSRange range2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObject_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sortUsingDescriptors_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray descriptors );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sortUsingFunction_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr function, IntPtr context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sortUsingSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
		}
		static internal class CachedSelectors {
			public static readonly Selector addObject_ = "addObject:";
			public static readonly Selector addObjectsFromArray_ = "addObjectsFromArray:";
			public static readonly Selector arrayWithCapacity_ = "arrayWithCapacity:";
			public static readonly Selector exchange__ = "exchange::";
			public static readonly Selector exchangeObjectAtIndex_withObjectAtIndex_ = "exchangeObjectAtIndex:withObjectAtIndex:";
			public static readonly Selector filterUsingPredicate_ = "filterUsingPredicate:";
			public static readonly Selector initWithCapacity_ = "initWithCapacity:";
			public static readonly Selector insertObject_atIndex_ = "insertObject:atIndex:";
			public static readonly Selector insertObjects_atIndexes_ = "insertObjects:atIndexes:";
			public static readonly Selector removeAllObjects = "removeAllObjects";
			public static readonly Selector removeLastObject = "removeLastObject";
			public static readonly Selector removeObject_ = "removeObject:";
			public static readonly Selector removeObject_inRange_ = "removeObject:inRange:";
			public static readonly Selector removeObjectAtIndex_ = "removeObjectAtIndex:";
			public static readonly Selector removeObjectIdenticalTo_ = "removeObjectIdenticalTo:";
			public static readonly Selector removeObjectIdenticalTo_inRange_ = "removeObjectIdenticalTo:inRange:";
			public static readonly Selector removeObjectsAtIndexes_ = "removeObjectsAtIndexes:";
			public static readonly Selector removeObjectsFromIndices_numIndices_ = "removeObjectsFromIndices:numIndices:";
			public static readonly Selector removeObjectsInArray_ = "removeObjectsInArray:";
			public static readonly Selector removeObjectsInRange_ = "removeObjectsInRange:";
			public static readonly Selector replaceObjectAtIndex_withObject_ = "replaceObjectAtIndex:withObject:";
			public static readonly Selector replaceObjectsAtIndexes_withObjects_ = "replaceObjectsAtIndexes:withObjects:";
			public static readonly Selector replaceObjectsInRange_withObjectsFromArray_ = "replaceObjectsInRange:withObjectsFromArray:";
			public static readonly Selector replaceObjectsInRange_withObjectsFromArray_range_ = "replaceObjectsInRange:withObjectsFromArray:range:";
			public static readonly Selector setArray_ = "setArray:";
			public static readonly Selector setObject_atIndex_ = "setObject:atIndex:";
			public static readonly Selector sortUsingDescriptors_ = "sortUsingDescriptors:";
			public static readonly Selector sortUsingFunction_context_ = "sortUsingFunction:context:";
			public static readonly Selector sortUsingSelector_ = "sortUsingSelector:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSAttributedString ) )]
	public struct NSMutableAttributedString : IEquatable<NSMutableAttributedString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableAttributedString;
		public static implicit operator IntPtr( NSMutableAttributedString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableAttributedString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableAttributedString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableAttributedString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableAttributedString value1, NSMutableAttributedString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableAttributedString value1, NSMutableAttributedString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableAttributedString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableAttributedString alloc() {
			return new NSMutableAttributedString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addAttribute_value_range_( string attribute, NObjective.RuntimeObject value, _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			NativeMethods.addAttribute_value_range_( Handle, CachedSelectors.addAttribute_value_range_, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( _NSRange ), ___wrappedattribute, value, range );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addAttributes_range_( NSDictionary attributes, _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.addAttributes_range_( Handle, CachedSelectors.addAttributes_range_, out ___occuredException, sizeof( NSDictionary ) + sizeof( _NSRange ), attributes, range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendAttributedString_( NSAttributedString @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendAttributedString_( Handle, CachedSelectors.appendAttributedString_, out ___occuredException, sizeof( NSAttributedString ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void beginEditing() {
			RuntimeObject ___occuredException;
			NativeMethods.beginEditing( Handle, CachedSelectors.beginEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteCharactersInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteCharactersInRange_( Handle, CachedSelectors.deleteCharactersInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void endEditing() {
			RuntimeObject ___occuredException;
			NativeMethods.endEditing( Handle, CachedSelectors.endEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertAttributedString_atIndex_( NSAttributedString @string, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertAttributedString_atIndex_( Handle, CachedSelectors.insertAttributedString_atIndex_, out ___occuredException, sizeof( NSAttributedString ) + sizeof( uint ), @string, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSMutableString mutableString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mutableString( Handle, CachedSelectors.mutableString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableString( ___result );
		}
		unsafe public void removeAttribute_range_( string attribute, _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___wrappedattribute = Runtime.CreateStringProxy( attribute );
			NativeMethods.removeAttribute_range_( Handle, CachedSelectors.removeAttribute_range_, out ___occuredException, sizeof( IntPtr ) + sizeof( _NSRange ), ___wrappedattribute, range );
			Runtime.ReleaseNativeObject( ___wrappedattribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceCharactersInRange_withAttributedString_( _NSRange range, NSAttributedString withAttributedString ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceCharactersInRange_withAttributedString_( Handle, CachedSelectors.replaceCharactersInRange_withAttributedString_, out ___occuredException, sizeof( _NSRange ) + sizeof( NSAttributedString ), range, withAttributedString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceCharactersInRange_withString_( _NSRange range, string withString ) {
			RuntimeObject ___occuredException;
			var ___wrappedwithString = Runtime.CreateStringProxy( withString );
			NativeMethods.replaceCharactersInRange_withString_( Handle, CachedSelectors.replaceCharactersInRange_withString_, out ___occuredException, sizeof( _NSRange ) + sizeof( IntPtr ), range, ___wrappedwithString );
			Runtime.ReleaseNativeObject( ___wrappedwithString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAttributedString_( NSAttributedString @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttributedString_( Handle, CachedSelectors.setAttributedString_, out ___occuredException, sizeof( NSAttributedString ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAttributes_range_( NSDictionary attributes, _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttributes_range_( Handle, CachedSelectors.setAttributes_range_, out ___occuredException, sizeof( NSDictionary ) + sizeof( _NSRange ), attributes, range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addAttribute_value_range_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute, NObjective.RuntimeObject value, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addAttributes_range_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary attributes, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendAttributedString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAttributedString @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void beginEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteCharactersInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void endEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertAttributedString_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAttributedString @string, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutableString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAttribute_range_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr attribute, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceCharactersInRange_withAttributedString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range, NSAttributedString withAttributedString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceCharactersInRange_withString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range, IntPtr withString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributedString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAttributedString @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributes_range_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary attributes, _NSRange range );
		}
		static internal class CachedSelectors {
			public static readonly Selector addAttribute_value_range_ = "addAttribute:value:range:";
			public static readonly Selector addAttributes_range_ = "addAttributes:range:";
			public static readonly Selector appendAttributedString_ = "appendAttributedString:";
			public static readonly Selector beginEditing = "beginEditing";
			public static readonly Selector deleteCharactersInRange_ = "deleteCharactersInRange:";
			public static readonly Selector endEditing = "endEditing";
			public static readonly Selector insertAttributedString_atIndex_ = "insertAttributedString:atIndex:";
			public static readonly Selector mutableString = "mutableString";
			public static readonly Selector removeAttribute_range_ = "removeAttribute:range:";
			public static readonly Selector replaceCharactersInRange_withAttributedString_ = "replaceCharactersInRange:withAttributedString:";
			public static readonly Selector replaceCharactersInRange_withString_ = "replaceCharactersInRange:withString:";
			public static readonly Selector setAttributedString_ = "setAttributedString:";
			public static readonly Selector setAttributes_range_ = "setAttributes:range:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCharacterSet ) )]
	public struct NSMutableCharacterSet : IEquatable<NSMutableCharacterSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableCharacterSet;
		public static implicit operator IntPtr( NSMutableCharacterSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableCharacterSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableCharacterSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableCharacterSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableCharacterSet value1, NSMutableCharacterSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableCharacterSet value1, NSMutableCharacterSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableCharacterSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableCharacterSet alloc() {
			return new NSMutableCharacterSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addCharactersInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.addCharactersInRange_( Handle, CachedSelectors.addCharactersInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addCharactersInString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.addCharactersInString_( Handle, CachedSelectors.addCharactersInString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void formIntersectionWithCharacterSet_( NSCharacterSet @set ) {
			RuntimeObject ___occuredException;
			NativeMethods.formIntersectionWithCharacterSet_( Handle, CachedSelectors.formIntersectionWithCharacterSet_, out ___occuredException, sizeof( NSCharacterSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void formUnionWithCharacterSet_( NSCharacterSet @set ) {
			RuntimeObject ___occuredException;
			NativeMethods.formUnionWithCharacterSet_( Handle, CachedSelectors.formUnionWithCharacterSet_, out ___occuredException, sizeof( NSCharacterSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void invert() {
			RuntimeObject ___occuredException;
			NativeMethods.invert( Handle, CachedSelectors.invert, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeCharactersInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeCharactersInRange_( Handle, CachedSelectors.removeCharactersInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeCharactersInString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.removeCharactersInString_( Handle, CachedSelectors.removeCharactersInString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addCharactersInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addCharactersInString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void formIntersectionWithCharacterSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCharacterSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void formUnionWithCharacterSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCharacterSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invert( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeCharactersInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeCharactersInString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
		}
		static internal class CachedSelectors {
			public static readonly Selector addCharactersInRange_ = "addCharactersInRange:";
			public static readonly Selector addCharactersInString_ = "addCharactersInString:";
			public static readonly Selector formIntersectionWithCharacterSet_ = "formIntersectionWithCharacterSet:";
			public static readonly Selector formUnionWithCharacterSet_ = "formUnionWithCharacterSet:";
			public static readonly Selector invert = "invert";
			public static readonly Selector removeCharactersInRange_ = "removeCharactersInRange:";
			public static readonly Selector removeCharactersInString_ = "removeCharactersInString:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSData ) )]
	public struct NSMutableData : IEquatable<NSMutableData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableData;
		public static implicit operator IntPtr( NSMutableData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableData value1, NSMutableData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableData value1, NSMutableData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableData alloc() {
			return new NSMutableData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject dataWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataWithCapacity_( ClassHandle, CachedSelectors.dataWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject dataWithLength_( uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataWithLength_( ClassHandle, CachedSelectors.dataWithLength_, out ___occuredException, sizeof( uint ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void appendBytes_length_( IntPtr bytes, uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendBytes_length_( Handle, CachedSelectors.appendBytes_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), bytes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendData_( NSData data ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendData_( Handle, CachedSelectors.appendData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void increaseLengthBy_( uint @by ) {
			RuntimeObject ___occuredException;
			NativeMethods.increaseLengthBy_( Handle, CachedSelectors.increaseLengthBy_, out ___occuredException, sizeof( uint ), @by );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSMutableData initWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCapacity_( Handle, CachedSelectors.initWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableData( ___result );
		}
		unsafe public NSMutableData initWithLength_( uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLength_( Handle, CachedSelectors.initWithLength_, out ___occuredException, sizeof( uint ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableData( ___result );
		}
		unsafe public IntPtr mutableBytes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mutableBytes( Handle, CachedSelectors.mutableBytes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void replaceBytesInRange_withBytes_( _NSRange range, IntPtr withBytes ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceBytesInRange_withBytes_( Handle, CachedSelectors.replaceBytesInRange_withBytes_, out ___occuredException, sizeof( _NSRange ) + sizeof( IntPtr ), range, withBytes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceBytesInRange_withBytes_length_( _NSRange range, IntPtr withBytes, uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceBytesInRange_withBytes_length_( Handle, CachedSelectors.replaceBytesInRange_withBytes_length_, out ___occuredException, sizeof( _NSRange ) + sizeof( IntPtr ) + sizeof( uint ), range, withBytes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetBytesInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.resetBytesInRange_( Handle, CachedSelectors.resetBytesInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void serializeAlignedBytes_length_( System.IntPtr bytes, uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.serializeAlignedBytes_length_( Handle, CachedSelectors.serializeAlignedBytes_length_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), bytes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void serializeAlignedBytesLength_( uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.serializeAlignedBytesLength_( Handle, CachedSelectors.serializeAlignedBytesLength_, out ___occuredException, sizeof( uint ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void serializeDataAt_ofObjCType_context_( System.IntPtr at, System.IntPtr ofObjCType, NObjective.RuntimeObject context ) {
			RuntimeObject ___occuredException;
			NativeMethods.serializeDataAt_ofObjCType_context_( Handle, CachedSelectors.serializeDataAt_ofObjCType_context_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ), at, ofObjCType, context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void serializeInt_( int @int ) {
			RuntimeObject ___occuredException;
			NativeMethods.serializeInt_( Handle, CachedSelectors.serializeInt_, out ___occuredException, sizeof( int ), @int );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void serializeInt_atIndex_( int @int, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.serializeInt_atIndex_( Handle, CachedSelectors.serializeInt_atIndex_, out ___occuredException, sizeof( int ) + sizeof( uint ), @int, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void serializeInts_count_( System.IntPtr ints, uint count ) {
			RuntimeObject ___occuredException;
			NativeMethods.serializeInts_count_( Handle, CachedSelectors.serializeInts_count_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), ints, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void serializeInts_count_atIndex_( System.IntPtr ints, uint count, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.serializeInts_count_atIndex_( Handle, CachedSelectors.serializeInts_count_atIndex_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( uint ), ints, count, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setData_( NSData data ) {
			RuntimeObject ___occuredException;
			NativeMethods.setData_( Handle, CachedSelectors.setData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLength_( uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLength_( Handle, CachedSelectors.setLength_, out ___occuredException, sizeof( uint ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendBytes_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bytes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithCapacity_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataWithLength_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void increaseLengthBy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @by );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCapacity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr mutableBytes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceBytesInRange_withBytes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range, IntPtr withBytes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceBytesInRange_withBytes_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range, IntPtr withBytes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetBytesInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void serializeAlignedBytes_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr bytes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void serializeAlignedBytesLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void serializeDataAt_ofObjCType_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr at, System.IntPtr ofObjCType, NObjective.RuntimeObject context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void serializeInt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @int );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void serializeInt_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @int, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void serializeInts_count_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr ints, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void serializeInts_count_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr ints, uint count, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint length );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendBytes_length_ = "appendBytes:length:";
			public static readonly Selector appendData_ = "appendData:";
			public static readonly Selector dataWithCapacity_ = "dataWithCapacity:";
			public static readonly Selector dataWithLength_ = "dataWithLength:";
			public static readonly Selector increaseLengthBy_ = "increaseLengthBy:";
			public static readonly Selector initWithCapacity_ = "initWithCapacity:";
			public static readonly Selector initWithLength_ = "initWithLength:";
			public static readonly Selector mutableBytes = "mutableBytes";
			public static readonly Selector replaceBytesInRange_withBytes_ = "replaceBytesInRange:withBytes:";
			public static readonly Selector replaceBytesInRange_withBytes_length_ = "replaceBytesInRange:withBytes:length:";
			public static readonly Selector resetBytesInRange_ = "resetBytesInRange:";
			public static readonly Selector serializeAlignedBytes_length_ = "serializeAlignedBytes:length:";
			public static readonly Selector serializeAlignedBytesLength_ = "serializeAlignedBytesLength:";
			public static readonly Selector serializeDataAt_ofObjCType_context_ = "serializeDataAt:ofObjCType:context:";
			public static readonly Selector serializeInt_ = "serializeInt:";
			public static readonly Selector serializeInt_atIndex_ = "serializeInt:atIndex:";
			public static readonly Selector serializeInts_count_ = "serializeInts:count:";
			public static readonly Selector serializeInts_count_atIndex_ = "serializeInts:count:atIndex:";
			public static readonly Selector setData_ = "setData:";
			public static readonly Selector setLength_ = "setLength:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDictionary ) )]
	public struct NSMutableDictionary : IEquatable<NSMutableDictionary> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableDictionary;
		public static implicit operator IntPtr( NSMutableDictionary value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableDictionary value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableDictionary?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableDictionary value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableDictionary value1, NSMutableDictionary value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableDictionary value1, NSMutableDictionary value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableDictionary( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableDictionary alloc() {
			return new NSMutableDictionary( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject dictionaryWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryWithCapacity_( ClassHandle, CachedSelectors.dictionaryWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addEntriesFromDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.addEntriesFromDictionary_( Handle, CachedSelectors.addEntriesFromDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSMutableDictionary initWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCapacity_( Handle, CachedSelectors.initWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableDictionary( ___result );
		}
		unsafe public void invert() {
			RuntimeObject ___occuredException;
			NativeMethods.invert( Handle, CachedSelectors.invert, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllObjects() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllObjects( Handle, CachedSelectors.removeAllObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeKeysForObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeKeysForObject_( Handle, CachedSelectors.removeKeysForObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectForKey_( Handle, CachedSelectors.removeObjectForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectsForKeys_( NSArray keys ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectsForKeys_( Handle, CachedSelectors.removeObjectsForKeys_, out ___occuredException, sizeof( NSArray ), keys );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDictionary_( Handle, CachedSelectors.setDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObject_forKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObject_forKey_( Handle, CachedSelectors.setObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addEntriesFromDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryWithCapacity_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCapacity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invert( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllObjects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeKeysForObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectsForKeys_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray keys );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObject_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey );
		}
		static internal class CachedSelectors {
			public static readonly Selector addEntriesFromDictionary_ = "addEntriesFromDictionary:";
			public static readonly Selector dictionaryWithCapacity_ = "dictionaryWithCapacity:";
			public static readonly Selector initWithCapacity_ = "initWithCapacity:";
			public static readonly Selector invert = "invert";
			public static readonly Selector removeAllObjects = "removeAllObjects";
			public static readonly Selector removeKeysForObject_ = "removeKeysForObject:";
			public static readonly Selector removeObjectForKey_ = "removeObjectForKey:";
			public static readonly Selector removeObjectsForKeys_ = "removeObjectsForKeys:";
			public static readonly Selector setDictionary_ = "setDictionary:";
			public static readonly Selector setObject_forKey_ = "setObject:forKey:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSIndexSet ) )]
	public struct NSMutableIndexSet : IEquatable<NSMutableIndexSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableIndexSet;
		public static implicit operator IntPtr( NSMutableIndexSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableIndexSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableIndexSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableIndexSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableIndexSet value1, NSMutableIndexSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableIndexSet value1, NSMutableIndexSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableIndexSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableIndexSet alloc() {
			return new NSMutableIndexSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.addIndex_( Handle, CachedSelectors.addIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addIndexes_( NSIndexSet indexes ) {
			RuntimeObject ___occuredException;
			NativeMethods.addIndexes_( Handle, CachedSelectors.addIndexes_, out ___occuredException, sizeof( NSIndexSet ), indexes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addIndexesFromIndexSet_( NObjective.RuntimeObject @set ) {
			RuntimeObject ___occuredException;
			NativeMethods.addIndexesFromIndexSet_( Handle, CachedSelectors.addIndexesFromIndexSet_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addIndexesInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.addIndexesInRange_( Handle, CachedSelectors.addIndexesInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllIndexes() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllIndexes( Handle, CachedSelectors.removeAllIndexes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeIndex_( Handle, CachedSelectors.removeIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeIndexes_( NSIndexSet indexes ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeIndexes_( Handle, CachedSelectors.removeIndexes_, out ___occuredException, sizeof( NSIndexSet ), indexes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeIndexesFromIndexSet_( NObjective.RuntimeObject @set ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeIndexesFromIndexSet_( Handle, CachedSelectors.removeIndexesFromIndexSet_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeIndexesInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeIndexesInRange_( Handle, CachedSelectors.removeIndexesInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void shiftIndexesStartingAtIndex_by_( uint index, int @by ) {
			RuntimeObject ___occuredException;
			NativeMethods.shiftIndexesStartingAtIndex_by_( Handle, CachedSelectors.shiftIndexesStartingAtIndex_by_, out ___occuredException, sizeof( uint ) + sizeof( int ), index, @by );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addIndexes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSIndexSet indexes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addIndexesFromIndexSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addIndexesInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllIndexes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeIndexes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSIndexSet indexes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeIndexesFromIndexSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeIndexesInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void shiftIndexesStartingAtIndex_by_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, int @by );
		}
		static internal class CachedSelectors {
			public static readonly Selector addIndex_ = "addIndex:";
			public static readonly Selector addIndexes_ = "addIndexes:";
			public static readonly Selector addIndexesFromIndexSet_ = "addIndexesFromIndexSet:";
			public static readonly Selector addIndexesInRange_ = "addIndexesInRange:";
			public static readonly Selector removeAllIndexes = "removeAllIndexes";
			public static readonly Selector removeIndex_ = "removeIndex:";
			public static readonly Selector removeIndexes_ = "removeIndexes:";
			public static readonly Selector removeIndexesFromIndexSet_ = "removeIndexesFromIndexSet:";
			public static readonly Selector removeIndexesInRange_ = "removeIndexesInRange:";
			public static readonly Selector shiftIndexesStartingAtIndex_by_ = "shiftIndexesStartingAtIndex:by:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSRLEArray ) )]
	public struct NSMutableRLEArray : IEquatable<NSMutableRLEArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableRLEArray;
		public static implicit operator IntPtr( NSMutableRLEArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableRLEArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableRLEArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableRLEArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableRLEArray value1, NSMutableRLEArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableRLEArray value1, NSMutableRLEArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableRLEArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableRLEArray alloc() {
			return new NSMutableRLEArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSSet ) )]
	public struct NSMutableSet : IEquatable<NSMutableSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableSet;
		public static implicit operator IntPtr( NSMutableSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableSet value1, NSMutableSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableSet value1, NSMutableSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableSet alloc() {
			return new NSMutableSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject setWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setWithCapacity_( ClassHandle, CachedSelectors.setWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.addObject_( Handle, CachedSelectors.addObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addObjectsFromArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			NativeMethods.addObjectsFromArray_( Handle, CachedSelectors.addObjectsFromArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSMutableSet initWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCapacity_( Handle, CachedSelectors.initWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableSet( ___result );
		}
		unsafe public void intersectSet_( NSSet @set ) {
			RuntimeObject ___occuredException;
			NativeMethods.intersectSet_( Handle, CachedSelectors.intersectSet_, out ___occuredException, sizeof( NSSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void minusSet_( NSSet @set ) {
			RuntimeObject ___occuredException;
			NativeMethods.minusSet_( Handle, CachedSelectors.minusSet_, out ___occuredException, sizeof( NSSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllObjects() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllObjects( Handle, CachedSelectors.removeAllObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObject_( Handle, CachedSelectors.removeObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSet_( NSSet @set ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSet_( Handle, CachedSelectors.setSet_, out ___occuredException, sizeof( NSSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unionSet_( NSSet @set ) {
			RuntimeObject ___occuredException;
			NativeMethods.unionSet_( Handle, CachedSelectors.unionSet_, out ___occuredException, sizeof( NSSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObjectsFromArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCapacity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void intersectSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void minusSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllObjects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr setWithCapacity_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unionSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSSet @set );
		}
		static internal class CachedSelectors {
			public static readonly Selector addObject_ = "addObject:";
			public static readonly Selector addObjectsFromArray_ = "addObjectsFromArray:";
			public static readonly Selector initWithCapacity_ = "initWithCapacity:";
			public static readonly Selector intersectSet_ = "intersectSet:";
			public static readonly Selector minusSet_ = "minusSet:";
			public static readonly Selector removeAllObjects = "removeAllObjects";
			public static readonly Selector removeObject_ = "removeObject:";
			public static readonly Selector setSet_ = "setSet:";
			public static readonly Selector setWithCapacity_ = "setWithCapacity:";
			public static readonly Selector unionSet_ = "unionSet:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSString ) )]
	public struct NSMutableString : IEquatable<NSMutableString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableString;
		public static implicit operator IntPtr( NSMutableString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableString value1, NSMutableString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableString value1, NSMutableString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableString alloc() {
			return new NSMutableString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject stringWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithCapacity_( ClassHandle, CachedSelectors.stringWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void appendCharacters_length_( System.IntPtr characters, uint length ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendCharacters_length_( Handle, CachedSelectors.appendCharacters_length_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), characters, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		public void appendFormat_( string format, params object[] variableArguments ) {
			Handle.InvokeVoidFast( CachedSelectors.appendFormat_, CachedEncodings.__6DDB5A83, format, variableArguments );
		}
		unsafe public void appendString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.appendString_( Handle, CachedSelectors.appendString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteCharactersInRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteCharactersInRange_( Handle, CachedSelectors.deleteCharactersInRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSMutableString initWithCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCapacity_( Handle, CachedSelectors.initWithCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableString( ___result );
		}
		unsafe public void insertString_atIndex_( string @string, uint atIndex ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.insertString_atIndex_( Handle, CachedSelectors.insertString_atIndex_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), ___wrappedstring, atIndex );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceCharactersInRange_withString_( _NSRange range, string withString ) {
			RuntimeObject ___occuredException;
			var ___wrappedwithString = Runtime.CreateStringProxy( withString );
			NativeMethods.replaceCharactersInRange_withString_( Handle, CachedSelectors.replaceCharactersInRange_withString_, out ___occuredException, sizeof( _NSRange ) + sizeof( IntPtr ), range, ___wrappedwithString );
			Runtime.ReleaseNativeObject( ___wrappedwithString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint replaceOccurrencesOfString_withString_options_range_( string @string, string withString, uint options, _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___wrappedwithString = Runtime.CreateStringProxy( withString );
			var ___result = NativeMethods.replaceOccurrencesOfString_withString_options_range_( Handle, CachedSelectors.replaceOccurrencesOfString_withString_options_range_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( uint ) + sizeof( _NSRange ), ___wrappedstring, ___wrappedwithString, options, range );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedwithString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void setString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.setString_( Handle, CachedSelectors.setString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendCharacters_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr characters, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteCharactersInRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCapacity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertString_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceCharactersInRange_withString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range, IntPtr withString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint replaceOccurrencesOfString_withString_options_range_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, IntPtr withString, uint options, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithCapacity_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
		}
		static internal class CachedEncodings {
			public static readonly RuntimeMethodEncoding __6DDB5A83 = "v12@0:4@8";
		}
		static internal class CachedSelectors {
			public static readonly Selector appendCharacters_length_ = "appendCharacters:length:";
			public static readonly Selector appendFormat_ = "appendFormat:";
			public static readonly Selector appendString_ = "appendString:";
			public static readonly Selector deleteCharactersInRange_ = "deleteCharactersInRange:";
			public static readonly Selector initWithCapacity_ = "initWithCapacity:";
			public static readonly Selector insertString_atIndex_ = "insertString:atIndex:";
			public static readonly Selector replaceCharactersInRange_withString_ = "replaceCharactersInRange:withString:";
			public static readonly Selector replaceOccurrencesOfString_withString_options_range_ = "replaceOccurrencesOfString:withString:options:range:";
			public static readonly Selector setString_ = "setString:";
			public static readonly Selector stringWithCapacity_ = "stringWithCapacity:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDistantObject ) )]
	public struct NSMutableStringProxy : IEquatable<NSMutableStringProxy> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableStringProxy;
		public static implicit operator IntPtr( NSMutableStringProxy value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableStringProxy value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableStringProxy?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableStringProxy value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableStringProxy value1, NSMutableStringProxy value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableStringProxy value1, NSMutableStringProxy value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableStringProxy( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableStringProxy alloc() {
			return new NSMutableStringProxy( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void getCharacters_( System.IntPtr characters ) {
			RuntimeObject ___occuredException;
			NativeMethods.getCharacters_( Handle, CachedSelectors.getCharacters_, out ___occuredException, sizeof( System.IntPtr ), characters );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getCString_( System.IntPtr @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.getCString_( Handle, CachedSelectors.getCString_, out ___occuredException, sizeof( System.IntPtr ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getCString_maxLength_( System.IntPtr @string, uint maxLength ) {
			RuntimeObject ___occuredException;
			NativeMethods.getCString_maxLength_( Handle, CachedSelectors.getCString_maxLength_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), @string, maxLength );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getCharacters_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr characters );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getCString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getCString_maxLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr @string, uint maxLength );
		}
		static internal class CachedSelectors {
			public static readonly Selector getCharacters_ = "getCharacters:";
			public static readonly Selector getCString_ = "getCString:";
			public static readonly Selector getCString_maxLength_ = "getCString:maxLength:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableString ) )]
	public struct NSMutableStringProxyForMutableAttributedString : IEquatable<NSMutableStringProxyForMutableAttributedString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableStringProxyForMutableAttributedString;
		public static implicit operator IntPtr( NSMutableStringProxyForMutableAttributedString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableStringProxyForMutableAttributedString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableStringProxyForMutableAttributedString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableStringProxyForMutableAttributedString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableStringProxyForMutableAttributedString value1, NSMutableStringProxyForMutableAttributedString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableStringProxyForMutableAttributedString value1, NSMutableStringProxyForMutableAttributedString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableStringProxyForMutableAttributedString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableStringProxyForMutableAttributedString alloc() {
			return new NSMutableStringProxyForMutableAttributedString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSMutableStringProxyForMutableAttributedString initWithMutableAttributedString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMutableAttributedString_( Handle, CachedSelectors.initWithMutableAttributedString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableStringProxyForMutableAttributedString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithMutableAttributedString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithMutableAttributedString_ = "initWithMutableAttributedString:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLRequest ) )]
	public struct NSMutableURLRequest : IEquatable<NSMutableURLRequest> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSMutableURLRequest;
		public static implicit operator IntPtr( NSMutableURLRequest value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSMutableURLRequest value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSMutableURLRequest?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSMutableURLRequest value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSMutableURLRequest value1, NSMutableURLRequest value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSMutableURLRequest value1, NSMutableURLRequest value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSMutableURLRequest( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSMutableURLRequest alloc() {
			return new NSMutableURLRequest( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addValue_forHTTPHeaderField_( string value, string forHTTPHeaderField ) {
			RuntimeObject ___occuredException;
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			var ___wrappedforHTTPHeaderField = Runtime.CreateStringProxy( forHTTPHeaderField );
			NativeMethods.addValue_forHTTPHeaderField_( Handle, CachedSelectors.addValue_forHTTPHeaderField_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedvalue, ___wrappedforHTTPHeaderField );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedforHTTPHeaderField );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllHTTPHeaderFields_( NSDictionary fields ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllHTTPHeaderFields_( Handle, CachedSelectors.setAllHTTPHeaderFields_, out ___occuredException, sizeof( NSDictionary ), fields );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCachePolicy_( NSURLRequestCachePolicy policy ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCachePolicy_( Handle, CachedSelectors.setCachePolicy_, out ___occuredException, sizeof( NSURLRequestCachePolicy ), policy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPBody_( NSData body ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHTTPBody_( Handle, CachedSelectors.setHTTPBody_, out ___occuredException, sizeof( NSData ), body );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPBodyStream_( NSInputStream stream ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHTTPBodyStream_( Handle, CachedSelectors.setHTTPBodyStream_, out ___occuredException, sizeof( NSInputStream ), stream );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPContentType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHTTPContentType_( Handle, CachedSelectors.setHTTPContentType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPCookiePolicyBaseURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHTTPCookiePolicyBaseURL_( Handle, CachedSelectors.setHTTPCookiePolicyBaseURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPExtraCookies_( NObjective.RuntimeObject cookies ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHTTPExtraCookies_( Handle, CachedSelectors.setHTTPExtraCookies_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cookies );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPMethod_( string method ) {
			RuntimeObject ___occuredException;
			var ___wrappedmethod = Runtime.CreateStringProxy( method );
			NativeMethods.setHTTPMethod_( Handle, CachedSelectors.setHTTPMethod_, out ___occuredException, sizeof( IntPtr ), ___wrappedmethod );
			Runtime.ReleaseNativeObject( ___wrappedmethod );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPPageNotFoundCacheLifetime_( uint lifetime ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHTTPPageNotFoundCacheLifetime_( Handle, CachedSelectors.setHTTPPageNotFoundCacheLifetime_, out ___occuredException, sizeof( uint ), lifetime );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPReferrer_( NObjective.RuntimeObject referrer ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHTTPReferrer_( Handle, CachedSelectors.setHTTPReferrer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), referrer );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPShouldHandleCookies_( bool cookies ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHTTPShouldHandleCookies_( Handle, CachedSelectors.setHTTPShouldHandleCookies_, out ___occuredException, sizeof( bool ), cookies );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPShouldHandleMixedReplace_( char replace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHTTPShouldHandleMixedReplace_( Handle, CachedSelectors.setHTTPShouldHandleMixedReplace_, out ___occuredException, sizeof( char ), replace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHTTPUserAgent_( NObjective.RuntimeObject agent ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHTTPUserAgent_( Handle, CachedSelectors.setHTTPUserAgent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), agent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMainDocumentURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMainDocumentURL_( Handle, CachedSelectors.setMainDocumentURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTimeoutInterval_( double interval ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTimeoutInterval_( Handle, CachedSelectors.setTimeoutInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			NativeMethods.setURL_( Handle, CachedSelectors.setURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_forHTTPHeaderField_( string value, string forHTTPHeaderField ) {
			RuntimeObject ___occuredException;
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			var ___wrappedforHTTPHeaderField = Runtime.CreateStringProxy( forHTTPHeaderField );
			NativeMethods.setValue_forHTTPHeaderField_( Handle, CachedSelectors.setValue_forHTTPHeaderField_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedvalue, ___wrappedforHTTPHeaderField );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedforHTTPHeaderField );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addValue_forHTTPHeaderField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value, IntPtr forHTTPHeaderField );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllHTTPHeaderFields_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary fields );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCachePolicy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequestCachePolicy policy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPBody_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData body );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPBodyStream_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSInputStream stream );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPContentType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPCookiePolicyBaseURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPExtraCookies_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cookies );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPMethod_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr method );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPPageNotFoundCacheLifetime_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint lifetime );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPReferrer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject referrer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPShouldHandleCookies_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool cookies );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPShouldHandleMixedReplace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char replace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHTTPUserAgent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject agent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMainDocumentURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTimeoutInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_forHTTPHeaderField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value, IntPtr forHTTPHeaderField );
		}
		static internal class CachedSelectors {
			public static readonly Selector addValue_forHTTPHeaderField_ = "addValue:forHTTPHeaderField:";
			public static readonly Selector setAllHTTPHeaderFields_ = "setAllHTTPHeaderFields:";
			public static readonly Selector setCachePolicy_ = "setCachePolicy:";
			public static readonly Selector setHTTPBody_ = "setHTTPBody:";
			public static readonly Selector setHTTPBodyStream_ = "setHTTPBodyStream:";
			public static readonly Selector setHTTPContentType_ = "setHTTPContentType:";
			public static readonly Selector setHTTPCookiePolicyBaseURL_ = "setHTTPCookiePolicyBaseURL:";
			public static readonly Selector setHTTPExtraCookies_ = "setHTTPExtraCookies:";
			public static readonly Selector setHTTPMethod_ = "setHTTPMethod:";
			public static readonly Selector setHTTPPageNotFoundCacheLifetime_ = "setHTTPPageNotFoundCacheLifetime:";
			public static readonly Selector setHTTPReferrer_ = "setHTTPReferrer:";
			public static readonly Selector setHTTPShouldHandleCookies_ = "setHTTPShouldHandleCookies:";
			public static readonly Selector setHTTPShouldHandleMixedReplace_ = "setHTTPShouldHandleMixedReplace:";
			public static readonly Selector setHTTPUserAgent_ = "setHTTPUserAgent:";
			public static readonly Selector setMainDocumentURL_ = "setMainDocumentURL:";
			public static readonly Selector setTimeoutInterval_ = "setTimeoutInterval:";
			public static readonly Selector setURL_ = "setURL:";
			public static readonly Selector setValue_forHTTPHeaderField_ = "setValue:forHTTPHeaderField:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectSpecifier ) )]
	public struct NSNameSpecifier : IEquatable<NSNameSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNameSpecifier;
		public static implicit operator IntPtr( NSNameSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNameSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNameSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNameSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNameSpecifier value1, NSNameSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNameSpecifier value1, NSNameSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNameSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNameSpecifier alloc() {
			return new NSNameSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSNameSpecifier initWithContainerClassDescription_containerSpecifier_key_name_( NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, string key, string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.initWithContainerClassDescription_containerSpecifier_key_name_( Handle, CachedSelectors.initWithContainerClassDescription_containerSpecifier_key_name_, out ___occuredException, sizeof( NSScriptClassDescription ) + sizeof( NSScriptObjectSpecifier ) + sizeof( IntPtr ) + sizeof( IntPtr ), description, containerSpecifier, ___wrappedkey, ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNameSpecifier( ___result );
		}
		unsafe public string name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void setName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassDescription_containerSpecifier_key_name_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, IntPtr key, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassDescription_containerSpecifier_key_name_ = "initWithContainerClassDescription:containerSpecifier:key:name:";
			public static readonly Selector name = "name";
			public static readonly Selector setName_ = "setName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSNetService : IEquatable<NSNetService> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNetService;
		public static implicit operator IntPtr( NSNetService value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNetService value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNetService?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNetService value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNetService value1, NSNetService value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNetService value1, NSNetService value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNetService( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNetService alloc() {
			return new NSNetService( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSData dataFromTXTRecordDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataFromTXTRecordDictionary_( ClassHandle, CachedSelectors.dataFromTXTRecordDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static NSDictionary dictionaryFromTXTRecordData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryFromTXTRecordData_( ClassHandle, CachedSelectors.dictionaryFromTXTRecordData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSArray addresses() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addresses( Handle, CachedSelectors.addresses, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string domain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.domain( Handle, CachedSelectors.domain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool getInputStream_outputStream_( ref NSInputStream stream, ref NSOutputStream outputStream ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getInputStream_outputStream_( Handle, CachedSelectors.getInputStream_outputStream_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ref stream, ref outputStream );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string hostName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hostName( Handle, CachedSelectors.hostName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSNetService initWithDomain_type_name_( string domain, string type, string name ) {
			RuntimeObject ___occuredException;
			var ___wrappeddomain = Runtime.CreateStringProxy( domain );
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.initWithDomain_type_name_( Handle, CachedSelectors.initWithDomain_type_name_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappeddomain, ___wrappedtype, ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappeddomain );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNetService( ___result );
		}
		unsafe public NSNetService initWithDomain_type_name_port_( string domain, string type, string name, int port ) {
			RuntimeObject ___occuredException;
			var ___wrappeddomain = Runtime.CreateStringProxy( domain );
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.initWithDomain_type_name_port_( Handle, CachedSelectors.initWithDomain_type_name_port_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( int ), ___wrappeddomain, ___wrappedtype, ___wrappedname, port );
			Runtime.ReleaseNativeObject( ___wrappeddomain );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNetService( ___result );
		}
		unsafe public string name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string protocolSpecificInformation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protocolSpecificInformation( Handle, CachedSelectors.protocolSpecificInformation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void publish() {
			RuntimeObject ___occuredException;
			NativeMethods.publish( Handle, CachedSelectors.publish, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void publishWithOptions_( uint options ) {
			RuntimeObject ___occuredException;
			NativeMethods.publishWithOptions_( Handle, CachedSelectors.publishWithOptions_, out ___occuredException, sizeof( uint ), options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeFromRunLoop_forMode_( NSRunLoop loop, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.removeFromRunLoop_forMode_( Handle, CachedSelectors.removeFromRunLoop_forMode_, out ___occuredException, sizeof( NSRunLoop ) + sizeof( IntPtr ), loop, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resolve() {
			RuntimeObject ___occuredException;
			NativeMethods.resolve( Handle, CachedSelectors.resolve, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resolveWithTimeout_( double timeout ) {
			RuntimeObject ___occuredException;
			NativeMethods.resolveWithTimeout_( Handle, CachedSelectors.resolveWithTimeout_, out ___occuredException, sizeof( double ), timeout );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleInRunLoop_forMode_( NSRunLoop loop, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.scheduleInRunLoop_forMode_( Handle, CachedSelectors.scheduleInRunLoop_forMode_, out ___occuredException, sizeof( NSRunLoop ) + sizeof( IntPtr ), loop, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProtocolSpecificInformation_( string information ) {
			RuntimeObject ___occuredException;
			var ___wrappedinformation = Runtime.CreateStringProxy( information );
			NativeMethods.setProtocolSpecificInformation_( Handle, CachedSelectors.setProtocolSpecificInformation_, out ___occuredException, sizeof( IntPtr ), ___wrappedinformation );
			Runtime.ReleaseNativeObject( ___wrappedinformation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool setTXTRecordData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setTXTRecordData_( Handle, CachedSelectors.setTXTRecordData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void startMonitoring() {
			RuntimeObject ___occuredException;
			NativeMethods.startMonitoring( Handle, CachedSelectors.startMonitoring, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stop() {
			RuntimeObject ___occuredException;
			NativeMethods.stop( Handle, CachedSelectors.stop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopMonitoring() {
			RuntimeObject ___occuredException;
			NativeMethods.stopMonitoring( Handle, CachedSelectors.stopMonitoring, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSData TXTRecordData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.TXTRecordData( Handle, CachedSelectors.TXTRecordData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public string type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addresses( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataFromTXTRecordDictionary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryFromTXTRecordData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr domain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool getInputStream_outputStream_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ref NSInputStream stream, ref NSOutputStream outputStream );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hostName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDomain_type_name_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr domain, IntPtr type, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDomain_type_name_port_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr domain, IntPtr type, IntPtr name, int port );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr protocolSpecificInformation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void publish( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void publishWithOptions_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeFromRunLoop_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRunLoop loop, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resolve( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resolveWithTimeout_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double timeout );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scheduleInRunLoop_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRunLoop loop, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProtocolSpecificInformation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr information );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool setTXTRecordData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startMonitoring( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopMonitoring( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr TXTRecordData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addresses = "addresses";
			public static readonly Selector dataFromTXTRecordDictionary_ = "dataFromTXTRecordDictionary:";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector dictionaryFromTXTRecordData_ = "dictionaryFromTXTRecordData:";
			public static readonly Selector domain = "domain";
			public static readonly Selector getInputStream_outputStream_ = "getInputStream:outputStream:";
			public static readonly Selector hostName = "hostName";
			public static readonly Selector initWithDomain_type_name_ = "initWithDomain:type:name:";
			public static readonly Selector initWithDomain_type_name_port_ = "initWithDomain:type:name:port:";
			public static readonly Selector name = "name";
			public static readonly Selector protocolSpecificInformation = "protocolSpecificInformation";
			public static readonly Selector publish = "publish";
			public static readonly Selector publishWithOptions_ = "publishWithOptions:";
			public static readonly Selector removeFromRunLoop_forMode_ = "removeFromRunLoop:forMode:";
			public static readonly Selector resolve = "resolve";
			public static readonly Selector resolveWithTimeout_ = "resolveWithTimeout:";
			public static readonly Selector scheduleInRunLoop_forMode_ = "scheduleInRunLoop:forMode:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setProtocolSpecificInformation_ = "setProtocolSpecificInformation:";
			public static readonly Selector setTXTRecordData_ = "setTXTRecordData:";
			public static readonly Selector startMonitoring = "startMonitoring";
			public static readonly Selector stop = "stop";
			public static readonly Selector stopMonitoring = "stopMonitoring";
			public static readonly Selector TXTRecordData = "TXTRecordData";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSNetServiceBrowser : IEquatable<NSNetServiceBrowser> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNetServiceBrowser;
		public static implicit operator IntPtr( NSNetServiceBrowser value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNetServiceBrowser value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNetServiceBrowser?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNetServiceBrowser value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNetServiceBrowser value1, NSNetServiceBrowser value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNetServiceBrowser value1, NSNetServiceBrowser value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNetServiceBrowser( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNetServiceBrowser alloc() {
			return new NSNetServiceBrowser( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeFromRunLoop_forMode_( NSRunLoop loop, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.removeFromRunLoop_forMode_( Handle, CachedSelectors.removeFromRunLoop_forMode_, out ___occuredException, sizeof( NSRunLoop ) + sizeof( IntPtr ), loop, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleInRunLoop_forMode_( NSRunLoop loop, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.scheduleInRunLoop_forMode_( Handle, CachedSelectors.scheduleInRunLoop_forMode_, out ___occuredException, sizeof( NSRunLoop ) + sizeof( IntPtr ), loop, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void searchForAllDomains() {
			RuntimeObject ___occuredException;
			NativeMethods.searchForAllDomains( Handle, CachedSelectors.searchForAllDomains, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void searchForBrowsableDomains() {
			RuntimeObject ___occuredException;
			NativeMethods.searchForBrowsableDomains( Handle, CachedSelectors.searchForBrowsableDomains, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void searchForRegistrationDomains() {
			RuntimeObject ___occuredException;
			NativeMethods.searchForRegistrationDomains( Handle, CachedSelectors.searchForRegistrationDomains, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void searchForServicesOfType_inDomain_( string type, string inDomain ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___wrappedinDomain = Runtime.CreateStringProxy( inDomain );
			NativeMethods.searchForServicesOfType_inDomain_( Handle, CachedSelectors.searchForServicesOfType_inDomain_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedtype, ___wrappedinDomain );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedinDomain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stop() {
			RuntimeObject ___occuredException;
			NativeMethods.stop( Handle, CachedSelectors.stop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeFromRunLoop_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRunLoop loop, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scheduleInRunLoop_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRunLoop loop, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void searchForAllDomains( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void searchForBrowsableDomains( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void searchForRegistrationDomains( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void searchForServicesOfType_inDomain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type, IntPtr inDomain );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector removeFromRunLoop_forMode_ = "removeFromRunLoop:forMode:";
			public static readonly Selector scheduleInRunLoop_forMode_ = "scheduleInRunLoop:forMode:";
			public static readonly Selector searchForAllDomains = "searchForAllDomains";
			public static readonly Selector searchForBrowsableDomains = "searchForBrowsableDomains";
			public static readonly Selector searchForRegistrationDomains = "searchForRegistrationDomains";
			public static readonly Selector searchForServicesOfType_inDomain_ = "searchForServicesOfType:inDomain:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector stop = "stop";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSNetworkSettings : IEquatable<NSNetworkSettings> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNetworkSettings;
		public static implicit operator IntPtr( NSNetworkSettings value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNetworkSettings value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNetworkSettings?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNetworkSettings value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNetworkSettings value1, NSNetworkSettings value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNetworkSettings value1, NSNetworkSettings value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNetworkSettings( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNetworkSettings alloc() {
			return new NSNetworkSettings( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedNetworkSettings() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedNetworkSettings( ClassHandle, CachedSelectors.sharedNetworkSettings, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char connectedToInternet_( char internet ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connectedToInternet_( Handle, CachedSelectors.connectedToInternet_, out ___occuredException, sizeof( char ), internet );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isProxyNeededForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isProxyNeededForURL_( Handle, CachedSelectors.isProxyNeededForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject proxyDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.proxyDictionary( Handle, CachedSelectors.proxyDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject proxyPropertiesForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.proxyPropertiesForURL_( Handle, CachedSelectors.proxyPropertiesForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setProxyDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setProxyDictionary_( Handle, CachedSelectors.setProxyDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char connectedToInternet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char internet );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isProxyNeededForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr proxyDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr proxyPropertiesForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProxyDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedNetworkSettings( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector connectedToInternet_ = "connectedToInternet:";
			public static readonly Selector isProxyNeededForURL_ = "isProxyNeededForURL:";
			public static readonly Selector proxyDictionary = "proxyDictionary";
			public static readonly Selector proxyPropertiesForURL_ = "proxyPropertiesForURL:";
			public static readonly Selector setProxyDictionary_ = "setProxyDictionary:";
			public static readonly Selector sharedNetworkSettings = "sharedNetworkSettings";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSNetworkSettingsInternal : IEquatable<NSNetworkSettingsInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNetworkSettingsInternal;
		public static implicit operator IntPtr( NSNetworkSettingsInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNetworkSettingsInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNetworkSettingsInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNetworkSettingsInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNetworkSettingsInternal value1, NSNetworkSettingsInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNetworkSettingsInternal value1, NSNetworkSettingsInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNetworkSettingsInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNetworkSettingsInternal alloc() {
			return new NSNetworkSettingsInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSNotification : IEquatable<NSNotification> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNotification;
		public static implicit operator IntPtr( NSNotification value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNotification value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNotification?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNotification value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNotification value1, NSNotification value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNotification value1, NSNotification value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNotification( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNotification alloc() {
			return new NSNotification( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSNotification notificationWithName_object_( string name, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.notificationWithName_object_( ClassHandle, CachedSelectors.notificationWithName_object_, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), ___wrappedname, @object );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNotification( ___result );
		}
		unsafe public static NSNotification notificationWithName_object_userInfo_( string name, NObjective.RuntimeObject @object, NSDictionary userInfo ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.notificationWithName_object_userInfo_( ClassHandle, CachedSelectors.notificationWithName_object_userInfo_, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( NSDictionary ), ___wrappedname, @object, userInfo );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNotification( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSNotification initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNotification( ___result );
		}
		unsafe public NSNotification initWithName_object_userInfo_( NObjective.RuntimeObject name, NObjective.RuntimeObject @object, NObjective.RuntimeObject userInfo ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithName_object_userInfo_( Handle, CachedSelectors.initWithName_object_userInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, @object, userInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNotification( ___result );
		}
		unsafe public string name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject @object() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@object( Handle, CachedSelectors.@object, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDictionary userInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userInfo( Handle, CachedSelectors.userInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_object_userInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject @object, NObjective.RuntimeObject userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notificationWithName_object_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notificationWithName_object_userInfo_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, NObjective.RuntimeObject @object, NSDictionary userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @object( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithName_object_userInfo_ = "initWithName:object:userInfo:";
			public static readonly Selector name = "name";
			public static readonly Selector notificationWithName_object_ = "notificationWithName:object:";
			public static readonly Selector notificationWithName_object_userInfo_ = "notificationWithName:object:userInfo:";
			public static readonly Selector @object = "object";
			public static readonly Selector userInfo = "userInfo";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSNotificationCenter : IEquatable<NSNotificationCenter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNotificationCenter;
		public static implicit operator IntPtr( NSNotificationCenter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNotificationCenter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNotificationCenter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNotificationCenter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNotificationCenter value1, NSNotificationCenter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNotificationCenter value1, NSNotificationCenter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNotificationCenter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNotificationCenter alloc() {
			return new NSNotificationCenter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject defaultCenter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultCenter( ClassHandle, CachedSelectors.defaultCenter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void setNotificationCenterSerializeRemoves_( char removes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNotificationCenterSerializeRemoves_( ClassHandle, CachedSelectors.setNotificationCenterSerializeRemoves_, out ___occuredException, sizeof( char ), removes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addObserver_selector_name_object_( NObjective.RuntimeObject observer, NObjective.Selector selector, string name, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.addObserver_selector_name_object_( Handle, CachedSelectors.addObserver_selector_name_object_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), observer, selector, ___wrappedname, @object );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isEmpty() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEmpty( Handle, CachedSelectors.isEmpty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void postNotification_( NSNotification notification ) {
			RuntimeObject ___occuredException;
			NativeMethods.postNotification_( Handle, CachedSelectors.postNotification_, out ___occuredException, sizeof( NSNotification ), notification );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void postNotificationName_object_( string name, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.postNotificationName_object_( Handle, CachedSelectors.postNotificationName_object_, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), ___wrappedname, @object );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void postNotificationName_object_userInfo_( string name, NObjective.RuntimeObject @object, NSDictionary userInfo ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.postNotificationName_object_userInfo_( Handle, CachedSelectors.postNotificationName_object_userInfo_, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( NSDictionary ), ___wrappedname, @object, userInfo );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObserver_( NObjective.RuntimeObject observer ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObserver_( Handle, CachedSelectors.removeObserver_, out ___occuredException, sizeof( NObjective.RuntimeObject ), observer );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObserver_name_object_( NObjective.RuntimeObject observer, string name, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.removeObserver_name_object_( Handle, CachedSelectors.removeObserver_name_object_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), observer, ___wrappedname, @object );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObserver_selector_name_object_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject observer, NObjective.Selector selector, IntPtr name, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultCenter( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEmpty( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postNotification_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNotification notification );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postNotificationName_object_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postNotificationName_object_userInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, NObjective.RuntimeObject @object, NSDictionary userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObserver_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject observer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObserver_name_object_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject observer, IntPtr name, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNotificationCenterSerializeRemoves_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char removes );
		}
		static internal class CachedSelectors {
			public static readonly Selector addObserver_selector_name_object_ = "addObserver:selector:name:object:";
			public static readonly Selector defaultCenter = "defaultCenter";
			public static readonly Selector isEmpty = "isEmpty";
			public static readonly Selector postNotification_ = "postNotification:";
			public static readonly Selector postNotificationName_object_ = "postNotificationName:object:";
			public static readonly Selector postNotificationName_object_userInfo_ = "postNotificationName:object:userInfo:";
			public static readonly Selector removeObserver_ = "removeObserver:";
			public static readonly Selector removeObserver_name_object_ = "removeObserver:name:object:";
			public static readonly Selector setNotificationCenterSerializeRemoves_ = "setNotificationCenterSerializeRemoves:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSNotificationQueue : IEquatable<NSNotificationQueue> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNotificationQueue;
		public static implicit operator IntPtr( NSNotificationQueue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNotificationQueue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNotificationQueue?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNotificationQueue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNotificationQueue value1, NSNotificationQueue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNotificationQueue value1, NSNotificationQueue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNotificationQueue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNotificationQueue alloc() {
			return new NSNotificationQueue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSNotificationQueue defaultQueue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultQueue( ClassHandle, CachedSelectors.defaultQueue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNotificationQueue( ___result );
		}
		unsafe public void dequeueNotificationsMatching_coalesceMask_( NSNotification matching, uint coalesceMask ) {
			RuntimeObject ___occuredException;
			NativeMethods.dequeueNotificationsMatching_coalesceMask_( Handle, CachedSelectors.dequeueNotificationsMatching_coalesceMask_, out ___occuredException, sizeof( NSNotification ) + sizeof( uint ), matching, coalesceMask );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void enqueueNotification_postingStyle_( NSNotification notification, NSPostingStyle postingStyle ) {
			RuntimeObject ___occuredException;
			NativeMethods.enqueueNotification_postingStyle_( Handle, CachedSelectors.enqueueNotification_postingStyle_, out ___occuredException, sizeof( NSNotification ) + sizeof( NSPostingStyle ), notification, postingStyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void enqueueNotification_postingStyle_coalesceMask_forModes_( NSNotification notification, NSPostingStyle postingStyle, uint coalesceMask, NSArray forModes ) {
			RuntimeObject ___occuredException;
			NativeMethods.enqueueNotification_postingStyle_coalesceMask_forModes_( Handle, CachedSelectors.enqueueNotification_postingStyle_coalesceMask_forModes_, out ___occuredException, sizeof( NSNotification ) + sizeof( NSPostingStyle ) + sizeof( uint ) + sizeof( NSArray ), notification, postingStyle, coalesceMask, forModes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSNotificationQueue initWithNotificationCenter_( NSNotificationCenter center ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithNotificationCenter_( Handle, CachedSelectors.initWithNotificationCenter_, out ___occuredException, sizeof( NSNotificationCenter ), center );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNotificationQueue( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultQueue( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dequeueNotificationsMatching_coalesceMask_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNotification matching, uint coalesceMask );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enqueueNotification_postingStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNotification notification, NSPostingStyle postingStyle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enqueueNotification_postingStyle_coalesceMask_forModes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNotification notification, NSPostingStyle postingStyle, uint coalesceMask, NSArray forModes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithNotificationCenter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNotificationCenter center );
		}
		static internal class CachedSelectors {
			public static readonly Selector defaultQueue = "defaultQueue";
			public static readonly Selector dequeueNotificationsMatching_coalesceMask_ = "dequeueNotificationsMatching:coalesceMask:";
			public static readonly Selector enqueueNotification_postingStyle_ = "enqueueNotification:postingStyle:";
			public static readonly Selector enqueueNotification_postingStyle_coalesceMask_forModes_ = "enqueueNotification:postingStyle:coalesceMask:forModes:";
			public static readonly Selector initWithNotificationCenter_ = "initWithNotificationCenter:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSNull ) )]
	public struct NSNull : IEquatable<NSNull> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNull;
		public static implicit operator IntPtr( NSNull value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNull value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNull?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNull value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNull value1, NSNull value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNull value1, NSNull value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNull( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNull alloc() {
			return new NSNull( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSNull ) )]
	public struct NSNull__ : IEquatable<NSNull__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNull__;
		public static implicit operator IntPtr( NSNull__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNull__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNull__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNull__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNull__ value1, NSNull__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNull__ value1, NSNull__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNull__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNull__ alloc() {
			return new NSNull__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSFileHandle ) )]
	public struct NSNullFileHandle : IEquatable<NSNullFileHandle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNullFileHandle;
		public static implicit operator IntPtr( NSNullFileHandle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNullFileHandle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNullFileHandle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNullFileHandle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNullFileHandle value1, NSNullFileHandle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNullFileHandle value1, NSNullFileHandle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNullFileHandle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNullFileHandle alloc() {
			return new NSNullFileHandle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSValue ) )]
	public struct NSNumber : IEquatable<NSNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNumber;
		public static implicit operator IntPtr( NSNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNumber value1, NSNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNumber value1, NSNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNumber alloc() {
			return new NSNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSNumber numberWithBool_( bool @bool ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithBool_( ClassHandle, CachedSelectors.numberWithBool_, out ___occuredException, sizeof( bool ), @bool );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithChar_( sbyte @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithChar_( ClassHandle, CachedSelectors.numberWithChar_, out ___occuredException, sizeof( sbyte ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithDouble_( double @double ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithDouble_( ClassHandle, CachedSelectors.numberWithDouble_, out ___occuredException, sizeof( double ), @double );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithFloat_( float @float ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithFloat_( ClassHandle, CachedSelectors.numberWithFloat_, out ___occuredException, sizeof( float ), @float );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithInt_( int @int ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithInt_( ClassHandle, CachedSelectors.numberWithInt_, out ___occuredException, sizeof( int ), @int );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithLong_( int @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithLong_( ClassHandle, CachedSelectors.numberWithLong_, out ___occuredException, sizeof( int ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithLongLong_( long @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithLongLong_( ClassHandle, CachedSelectors.numberWithLongLong_, out ___occuredException, sizeof( long ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithShort_( short @short ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithShort_( ClassHandle, CachedSelectors.numberWithShort_, out ___occuredException, sizeof( short ), @short );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithUnsignedChar_( char @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithUnsignedChar_( ClassHandle, CachedSelectors.numberWithUnsignedChar_, out ___occuredException, sizeof( char ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithUnsignedInt_( uint @int ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithUnsignedInt_( ClassHandle, CachedSelectors.numberWithUnsignedInt_, out ___occuredException, sizeof( uint ), @int );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithUnsignedLong_( uint @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithUnsignedLong_( ClassHandle, CachedSelectors.numberWithUnsignedLong_, out ___occuredException, sizeof( uint ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithUnsignedLongLong_( ulong @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithUnsignedLongLong_( ClassHandle, CachedSelectors.numberWithUnsignedLongLong_, out ___occuredException, sizeof( ulong ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public static NSNumber numberWithUnsignedShort_( ushort @short ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberWithUnsignedShort_( ClassHandle, CachedSelectors.numberWithUnsignedShort_, out ___occuredException, sizeof( ushort ), @short );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public bool boolValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.boolValue( Handle, CachedSelectors.boolValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public sbyte charValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.charValue( Handle, CachedSelectors.charValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSComparisonResult compare_( NSNumber compare ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compare_( Handle, CachedSelectors.compare_, out ___occuredException, sizeof( NSNumber ), compare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public NSDecimal decimalValue() {
			NSDecimal ___result;
			RuntimeObject ___occuredException;
			NativeMethods.decimalValue( out ___result, sizeof( NSDecimal ), Handle, CachedSelectors.decimalValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string descriptionWithLocale_( NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptionWithLocale_( Handle, CachedSelectors.descriptionWithLocale_, out ___occuredException, sizeof( NSDictionary ), locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public double doubleValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doubleValue( Handle, CachedSelectors.doubleValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float floatValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.floatValue( Handle, CachedSelectors.floatValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSNumber initWithBool_( bool @bool ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBool_( Handle, CachedSelectors.initWithBool_, out ___occuredException, sizeof( bool ), @bool );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithChar_( sbyte @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithChar_( Handle, CachedSelectors.initWithChar_, out ___occuredException, sizeof( sbyte ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithDouble_( double @double ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDouble_( Handle, CachedSelectors.initWithDouble_, out ___occuredException, sizeof( double ), @double );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithFloat_( float @float ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithFloat_( Handle, CachedSelectors.initWithFloat_, out ___occuredException, sizeof( float ), @float );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithInt_( int @int ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInt_( Handle, CachedSelectors.initWithInt_, out ___occuredException, sizeof( int ), @int );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithLong_( int @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLong_( Handle, CachedSelectors.initWithLong_, out ___occuredException, sizeof( int ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithLongLong_( long @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLongLong_( Handle, CachedSelectors.initWithLongLong_, out ___occuredException, sizeof( long ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithShort_( short @short ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithShort_( Handle, CachedSelectors.initWithShort_, out ___occuredException, sizeof( short ), @short );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithUnsignedChar_( char @char ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUnsignedChar_( Handle, CachedSelectors.initWithUnsignedChar_, out ___occuredException, sizeof( char ), @char );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithUnsignedInt_( uint @int ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUnsignedInt_( Handle, CachedSelectors.initWithUnsignedInt_, out ___occuredException, sizeof( uint ), @int );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithUnsignedLong_( uint @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUnsignedLong_( Handle, CachedSelectors.initWithUnsignedLong_, out ___occuredException, sizeof( uint ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithUnsignedLongLong_( ulong @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUnsignedLongLong_( Handle, CachedSelectors.initWithUnsignedLongLong_, out ___occuredException, sizeof( ulong ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumber initWithUnsignedShort_( ushort @short ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUnsignedShort_( Handle, CachedSelectors.initWithUnsignedShort_, out ___occuredException, sizeof( ushort ), @short );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public int intValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.intValue( Handle, CachedSelectors.intValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEqualToNumber_( NSNumber number ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToNumber_( Handle, CachedSelectors.isEqualToNumber_, out ___occuredException, sizeof( NSNumber ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public long longLongValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.longLongValue( Handle, CachedSelectors.longLongValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int longValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.longValue( Handle, CachedSelectors.longValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public short shortValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shortValue( Handle, CachedSelectors.shortValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string stringValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringValue( Handle, CachedSelectors.stringValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public char unsignedCharValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unsignedCharValue( Handle, CachedSelectors.unsignedCharValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint unsignedIntValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unsignedIntValue( Handle, CachedSelectors.unsignedIntValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public ulong unsignedLongLongValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unsignedLongLongValue( Handle, CachedSelectors.unsignedLongLongValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint unsignedLongValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unsignedLongValue( Handle, CachedSelectors.unsignedLongValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public ushort unsignedShortValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unsignedShortValue( Handle, CachedSelectors.unsignedShortValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool boolValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern sbyte charValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumber compare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void decimalValue( out NSDecimal ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionWithLocale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double doubleValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float floatValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBool_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool @bool );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithChar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, sbyte @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDouble_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double @double );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithFloat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @float );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithInt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @int );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLong_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLongLong_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, long @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithShort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short @short );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUnsignedChar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUnsignedInt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @int );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUnsignedLong_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUnsignedLongLong_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ulong @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUnsignedShort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort @short );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int intValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumber number );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern long longLongValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int longValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithBool_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool @bool );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithChar_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, sbyte @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithDouble_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double @double );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithFloat_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @float );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithInt_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @int );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithLong_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithLongLong_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, long @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithShort_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short @short );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithUnsignedChar_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @char );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithUnsignedInt_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @int );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithUnsignedLong_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithUnsignedLongLong_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ulong @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberWithUnsignedShort_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort @short );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short shortValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char unsignedCharValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint unsignedIntValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ulong unsignedLongLongValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint unsignedLongValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort unsignedShortValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector boolValue = "boolValue";
			public static readonly Selector charValue = "charValue";
			public static readonly Selector compare_ = "compare:";
			public static readonly Selector decimalValue = "decimalValue";
			public static readonly Selector descriptionWithLocale_ = "descriptionWithLocale:";
			public static readonly Selector doubleValue = "doubleValue";
			public static readonly Selector floatValue = "floatValue";
			public static readonly Selector initWithBool_ = "initWithBool:";
			public static readonly Selector initWithChar_ = "initWithChar:";
			public static readonly Selector initWithDouble_ = "initWithDouble:";
			public static readonly Selector initWithFloat_ = "initWithFloat:";
			public static readonly Selector initWithInt_ = "initWithInt:";
			public static readonly Selector initWithLong_ = "initWithLong:";
			public static readonly Selector initWithLongLong_ = "initWithLongLong:";
			public static readonly Selector initWithShort_ = "initWithShort:";
			public static readonly Selector initWithUnsignedChar_ = "initWithUnsignedChar:";
			public static readonly Selector initWithUnsignedInt_ = "initWithUnsignedInt:";
			public static readonly Selector initWithUnsignedLong_ = "initWithUnsignedLong:";
			public static readonly Selector initWithUnsignedLongLong_ = "initWithUnsignedLongLong:";
			public static readonly Selector initWithUnsignedShort_ = "initWithUnsignedShort:";
			public static readonly Selector intValue = "intValue";
			public static readonly Selector isEqualToNumber_ = "isEqualToNumber:";
			public static readonly Selector longLongValue = "longLongValue";
			public static readonly Selector longValue = "longValue";
			public static readonly Selector numberWithBool_ = "numberWithBool:";
			public static readonly Selector numberWithChar_ = "numberWithChar:";
			public static readonly Selector numberWithDouble_ = "numberWithDouble:";
			public static readonly Selector numberWithFloat_ = "numberWithFloat:";
			public static readonly Selector numberWithInt_ = "numberWithInt:";
			public static readonly Selector numberWithLong_ = "numberWithLong:";
			public static readonly Selector numberWithLongLong_ = "numberWithLongLong:";
			public static readonly Selector numberWithShort_ = "numberWithShort:";
			public static readonly Selector numberWithUnsignedChar_ = "numberWithUnsignedChar:";
			public static readonly Selector numberWithUnsignedInt_ = "numberWithUnsignedInt:";
			public static readonly Selector numberWithUnsignedLong_ = "numberWithUnsignedLong:";
			public static readonly Selector numberWithUnsignedLongLong_ = "numberWithUnsignedLongLong:";
			public static readonly Selector numberWithUnsignedShort_ = "numberWithUnsignedShort:";
			public static readonly Selector shortValue = "shortValue";
			public static readonly Selector stringValue = "stringValue";
			public static readonly Selector unsignedCharValue = "unsignedCharValue";
			public static readonly Selector unsignedIntValue = "unsignedIntValue";
			public static readonly Selector unsignedLongLongValue = "unsignedLongLongValue";
			public static readonly Selector unsignedLongValue = "unsignedLongValue";
			public static readonly Selector unsignedShortValue = "unsignedShortValue";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSFormatter ) )]
	public struct NSNumberFormatter : IEquatable<NSNumberFormatter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSNumberFormatter;
		public static implicit operator IntPtr( NSNumberFormatter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSNumberFormatter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSNumberFormatter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSNumberFormatter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSNumberFormatter value1, NSNumberFormatter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSNumberFormatter value1, NSNumberFormatter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSNumberFormatter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSNumberFormatter alloc() {
			return new NSNumberFormatter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSNumberFormatterBehavior defaultFormatterBehavior() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultFormatterBehavior( ClassHandle, CachedSelectors.defaultFormatterBehavior, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSNumberFormatterBehavior ) ___result;
		}
		unsafe public static void setDefaultFormatterBehavior_( NSNumberFormatterBehavior behavior ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultFormatterBehavior_( ClassHandle, CachedSelectors.setDefaultFormatterBehavior_, out ___occuredException, sizeof( NSNumberFormatterBehavior ), behavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool allowsFloats() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsFloats( Handle, CachedSelectors.allowsFloats, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool alwaysShowsDecimalSeparator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alwaysShowsDecimalSeparator( Handle, CachedSelectors.alwaysShowsDecimalSeparator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSAttributedString attributedStringForNil() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedStringForNil( Handle, CachedSelectors.attributedStringForNil, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAttributedString( ___result );
		}
		unsafe public NSAttributedString attributedStringForNotANumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedStringForNotANumber( Handle, CachedSelectors.attributedStringForNotANumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAttributedString( ___result );
		}
		unsafe public NSAttributedString attributedStringForZero() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedStringForZero( Handle, CachedSelectors.attributedStringForZero, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAttributedString( ___result );
		}
		unsafe public string currencyCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currencyCode( Handle, CachedSelectors.currencyCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string currencyDecimalSeparator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currencyDecimalSeparator( Handle, CachedSelectors.currencyDecimalSeparator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string currencySymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currencySymbol( Handle, CachedSelectors.currencySymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string decimalSeparator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decimalSeparator( Handle, CachedSelectors.decimalSeparator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string exponentSymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.exponentSymbol( Handle, CachedSelectors.exponentSymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string format() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.format( Handle, CachedSelectors.format, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSNumberFormatterBehavior formatterBehavior() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formatterBehavior( Handle, CachedSelectors.formatterBehavior, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSNumberFormatterBehavior ) ___result;
		}
		unsafe public uint formatWidth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formatWidth( Handle, CachedSelectors.formatWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public bool generatesDecimalNumbers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.generatesDecimalNumbers( Handle, CachedSelectors.generatesDecimalNumbers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool getObjectValue_forString_range_error_( IntPtr value, string forString, _NSRange[] range, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedforString = Runtime.CreateStringProxy( forString );
			var ___result = NativeMethods.getObjectValue_forString_range_error_( Handle, CachedSelectors.getObjectValue_forString_range_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), value, ___wrappedforString, range, ref error );
			Runtime.ReleaseNativeObject( ___wrappedforString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string groupingSeparator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupingSeparator( Handle, CachedSelectors.groupingSeparator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint groupingSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupingSize( Handle, CachedSelectors.groupingSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public bool hasThousandSeparators() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasThousandSeparators( Handle, CachedSelectors.hasThousandSeparators, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string internationalCurrencySymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.internationalCurrencySymbol( Handle, CachedSelectors.internationalCurrencySymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSLocale locale() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.locale( Handle, CachedSelectors.locale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSLocale( ___result );
		}
		unsafe public bool localizesFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizesFormat( Handle, CachedSelectors.localizesFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSNumber maximum() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maximum( Handle, CachedSelectors.maximum, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public uint maximumFractionDigits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maximumFractionDigits( Handle, CachedSelectors.maximumFractionDigits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint maximumIntegerDigits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maximumIntegerDigits( Handle, CachedSelectors.maximumIntegerDigits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSNumber minimum() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimum( Handle, CachedSelectors.minimum, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public uint minimumFractionDigits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimumFractionDigits( Handle, CachedSelectors.minimumFractionDigits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint minimumIntegerDigits() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimumIntegerDigits( Handle, CachedSelectors.minimumIntegerDigits, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string minusSign() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minusSign( Handle, CachedSelectors.minusSign, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSNumber multiplier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.multiplier( Handle, CachedSelectors.multiplier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public string negativeFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.negativeFormat( Handle, CachedSelectors.negativeFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string negativeInfinitySymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.negativeInfinitySymbol( Handle, CachedSelectors.negativeInfinitySymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string negativePrefix() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.negativePrefix( Handle, CachedSelectors.negativePrefix, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string negativeSuffix() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.negativeSuffix( Handle, CachedSelectors.negativeSuffix, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string nilSymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nilSymbol( Handle, CachedSelectors.nilSymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string notANumberSymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notANumberSymbol( Handle, CachedSelectors.notANumberSymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSNumber numberFromString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.numberFromString_( Handle, CachedSelectors.numberFromString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumberFormatterStyle numberStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberStyle( Handle, CachedSelectors.numberStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSNumberFormatterStyle ) ___result;
		}
		unsafe public string paddingCharacter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.paddingCharacter( Handle, CachedSelectors.paddingCharacter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSNumberFormatterPadPosition paddingPosition() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.paddingPosition( Handle, CachedSelectors.paddingPosition, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSNumberFormatterPadPosition ) ___result;
		}
		unsafe public string percentSymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.percentSymbol( Handle, CachedSelectors.percentSymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string perMillSymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.perMillSymbol( Handle, CachedSelectors.perMillSymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string plusSign() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.plusSign( Handle, CachedSelectors.plusSign, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string positiveFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.positiveFormat( Handle, CachedSelectors.positiveFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string positiveInfinitySymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.positiveInfinitySymbol( Handle, CachedSelectors.positiveInfinitySymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string positivePrefix() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.positivePrefix( Handle, CachedSelectors.positivePrefix, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string positiveSuffix() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.positiveSuffix( Handle, CachedSelectors.positiveSuffix, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDecimalNumberHandler roundingBehavior() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.roundingBehavior( Handle, CachedSelectors.roundingBehavior, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDecimalNumberHandler( ___result );
		}
		unsafe public NSNumber roundingIncrement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.roundingIncrement( Handle, CachedSelectors.roundingIncrement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSNumber( ___result );
		}
		unsafe public NSNumberFormatterRoundingMode roundingMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.roundingMode( Handle, CachedSelectors.roundingMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSNumberFormatterRoundingMode ) ___result;
		}
		unsafe public uint secondaryGroupingSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.secondaryGroupingSize( Handle, CachedSelectors.secondaryGroupingSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void setAllowsFloats_( bool floats ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsFloats_( Handle, CachedSelectors.setAllowsFloats_, out ___occuredException, sizeof( bool ), floats );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlwaysShowsDecimalSeparator_( bool separator ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlwaysShowsDecimalSeparator_( Handle, CachedSelectors.setAlwaysShowsDecimalSeparator_, out ___occuredException, sizeof( bool ), separator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAttributedStringForNil_( NSAttributedString nil ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttributedStringForNil_( Handle, CachedSelectors.setAttributedStringForNil_, out ___occuredException, sizeof( NSAttributedString ), nil );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAttributedStringForNotANumber_( NSAttributedString number ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttributedStringForNotANumber_( Handle, CachedSelectors.setAttributedStringForNotANumber_, out ___occuredException, sizeof( NSAttributedString ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAttributedStringForZero_( NSAttributedString zero ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttributedStringForZero_( Handle, CachedSelectors.setAttributedStringForZero_, out ___occuredException, sizeof( NSAttributedString ), zero );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCurrencyCode_( string code ) {
			RuntimeObject ___occuredException;
			var ___wrappedcode = Runtime.CreateStringProxy( code );
			NativeMethods.setCurrencyCode_( Handle, CachedSelectors.setCurrencyCode_, out ___occuredException, sizeof( IntPtr ), ___wrappedcode );
			Runtime.ReleaseNativeObject( ___wrappedcode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCurrencyDecimalSeparator_( string separator ) {
			RuntimeObject ___occuredException;
			var ___wrappedseparator = Runtime.CreateStringProxy( separator );
			NativeMethods.setCurrencyDecimalSeparator_( Handle, CachedSelectors.setCurrencyDecimalSeparator_, out ___occuredException, sizeof( IntPtr ), ___wrappedseparator );
			Runtime.ReleaseNativeObject( ___wrappedseparator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCurrencySymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setCurrencySymbol_( Handle, CachedSelectors.setCurrencySymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDecimalSeparator_( string separator ) {
			RuntimeObject ___occuredException;
			var ___wrappedseparator = Runtime.CreateStringProxy( separator );
			NativeMethods.setDecimalSeparator_( Handle, CachedSelectors.setDecimalSeparator_, out ___occuredException, sizeof( IntPtr ), ___wrappedseparator );
			Runtime.ReleaseNativeObject( ___wrappedseparator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setExponentSymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setExponentSymbol_( Handle, CachedSelectors.setExponentSymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFormat_( string format ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			NativeMethods.setFormat_( Handle, CachedSelectors.setFormat_, out ___occuredException, sizeof( IntPtr ), ___wrappedformat );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFormatterBehavior_( NSNumberFormatterBehavior behavior ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFormatterBehavior_( Handle, CachedSelectors.setFormatterBehavior_, out ___occuredException, sizeof( NSNumberFormatterBehavior ), behavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFormatWidth_( uint width ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFormatWidth_( Handle, CachedSelectors.setFormatWidth_, out ___occuredException, sizeof( uint ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGeneratesDecimalNumbers_( bool numbers ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGeneratesDecimalNumbers_( Handle, CachedSelectors.setGeneratesDecimalNumbers_, out ___occuredException, sizeof( bool ), numbers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupingSeparator_( string separator ) {
			RuntimeObject ___occuredException;
			var ___wrappedseparator = Runtime.CreateStringProxy( separator );
			NativeMethods.setGroupingSeparator_( Handle, CachedSelectors.setGroupingSeparator_, out ___occuredException, sizeof( IntPtr ), ___wrappedseparator );
			Runtime.ReleaseNativeObject( ___wrappedseparator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupingSize_( uint size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroupingSize_( Handle, CachedSelectors.setGroupingSize_, out ___occuredException, sizeof( uint ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHasThousandSeparators_( bool separators ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHasThousandSeparators_( Handle, CachedSelectors.setHasThousandSeparators_, out ___occuredException, sizeof( bool ), separators );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setInternationalCurrencySymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setInternationalCurrencySymbol_( Handle, CachedSelectors.setInternationalCurrencySymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLocale_( NSLocale locale ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLocale_( Handle, CachedSelectors.setLocale_, out ___occuredException, sizeof( NSLocale ), locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLocalizationFromDefaults() {
			RuntimeObject ___occuredException;
			NativeMethods.setLocalizationFromDefaults( Handle, CachedSelectors.setLocalizationFromDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLocalizesFormat_( bool format ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLocalizesFormat_( Handle, CachedSelectors.setLocalizesFormat_, out ___occuredException, sizeof( bool ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMaximum_( NSNumber maximum ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMaximum_( Handle, CachedSelectors.setMaximum_, out ___occuredException, sizeof( NSNumber ), maximum );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMaximumFractionDigits_( uint digits ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMaximumFractionDigits_( Handle, CachedSelectors.setMaximumFractionDigits_, out ___occuredException, sizeof( uint ), digits );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMaximumIntegerDigits_( uint digits ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMaximumIntegerDigits_( Handle, CachedSelectors.setMaximumIntegerDigits_, out ___occuredException, sizeof( uint ), digits );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinimum_( NSNumber minimum ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMinimum_( Handle, CachedSelectors.setMinimum_, out ___occuredException, sizeof( NSNumber ), minimum );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinimumFractionDigits_( uint digits ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMinimumFractionDigits_( Handle, CachedSelectors.setMinimumFractionDigits_, out ___occuredException, sizeof( uint ), digits );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinimumIntegerDigits_( uint digits ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMinimumIntegerDigits_( Handle, CachedSelectors.setMinimumIntegerDigits_, out ___occuredException, sizeof( uint ), digits );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinusSign_( string sign ) {
			RuntimeObject ___occuredException;
			var ___wrappedsign = Runtime.CreateStringProxy( sign );
			NativeMethods.setMinusSign_( Handle, CachedSelectors.setMinusSign_, out ___occuredException, sizeof( IntPtr ), ___wrappedsign );
			Runtime.ReleaseNativeObject( ___wrappedsign );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMultiplier_( NSNumber multiplier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMultiplier_( Handle, CachedSelectors.setMultiplier_, out ___occuredException, sizeof( NSNumber ), multiplier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNegativeFormat_( string format ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			NativeMethods.setNegativeFormat_( Handle, CachedSelectors.setNegativeFormat_, out ___occuredException, sizeof( IntPtr ), ___wrappedformat );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNegativeInfinitySymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setNegativeInfinitySymbol_( Handle, CachedSelectors.setNegativeInfinitySymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNegativePrefix_( string prefix ) {
			RuntimeObject ___occuredException;
			var ___wrappedprefix = Runtime.CreateStringProxy( prefix );
			NativeMethods.setNegativePrefix_( Handle, CachedSelectors.setNegativePrefix_, out ___occuredException, sizeof( IntPtr ), ___wrappedprefix );
			Runtime.ReleaseNativeObject( ___wrappedprefix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNegativeSuffix_( string suffix ) {
			RuntimeObject ___occuredException;
			var ___wrappedsuffix = Runtime.CreateStringProxy( suffix );
			NativeMethods.setNegativeSuffix_( Handle, CachedSelectors.setNegativeSuffix_, out ___occuredException, sizeof( IntPtr ), ___wrappedsuffix );
			Runtime.ReleaseNativeObject( ___wrappedsuffix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNilSymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setNilSymbol_( Handle, CachedSelectors.setNilSymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNotANumberSymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setNotANumberSymbol_( Handle, CachedSelectors.setNotANumberSymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNumberStyle_( NSNumberFormatterStyle style ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNumberStyle_( Handle, CachedSelectors.setNumberStyle_, out ___occuredException, sizeof( NSNumberFormatterStyle ), style );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPaddingCharacter_( string character ) {
			RuntimeObject ___occuredException;
			var ___wrappedcharacter = Runtime.CreateStringProxy( character );
			NativeMethods.setPaddingCharacter_( Handle, CachedSelectors.setPaddingCharacter_, out ___occuredException, sizeof( IntPtr ), ___wrappedcharacter );
			Runtime.ReleaseNativeObject( ___wrappedcharacter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPaddingPosition_( NSNumberFormatterPadPosition position ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPaddingPosition_( Handle, CachedSelectors.setPaddingPosition_, out ___occuredException, sizeof( NSNumberFormatterPadPosition ), position );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPercentSymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setPercentSymbol_( Handle, CachedSelectors.setPercentSymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPerMillSymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setPerMillSymbol_( Handle, CachedSelectors.setPerMillSymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPlusSign_( string sign ) {
			RuntimeObject ___occuredException;
			var ___wrappedsign = Runtime.CreateStringProxy( sign );
			NativeMethods.setPlusSign_( Handle, CachedSelectors.setPlusSign_, out ___occuredException, sizeof( IntPtr ), ___wrappedsign );
			Runtime.ReleaseNativeObject( ___wrappedsign );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPositiveFormat_( string format ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			NativeMethods.setPositiveFormat_( Handle, CachedSelectors.setPositiveFormat_, out ___occuredException, sizeof( IntPtr ), ___wrappedformat );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPositiveInfinitySymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setPositiveInfinitySymbol_( Handle, CachedSelectors.setPositiveInfinitySymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPositivePrefix_( string prefix ) {
			RuntimeObject ___occuredException;
			var ___wrappedprefix = Runtime.CreateStringProxy( prefix );
			NativeMethods.setPositivePrefix_( Handle, CachedSelectors.setPositivePrefix_, out ___occuredException, sizeof( IntPtr ), ___wrappedprefix );
			Runtime.ReleaseNativeObject( ___wrappedprefix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPositiveSuffix_( string suffix ) {
			RuntimeObject ___occuredException;
			var ___wrappedsuffix = Runtime.CreateStringProxy( suffix );
			NativeMethods.setPositiveSuffix_( Handle, CachedSelectors.setPositiveSuffix_, out ___occuredException, sizeof( IntPtr ), ___wrappedsuffix );
			Runtime.ReleaseNativeObject( ___wrappedsuffix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRoundingBehavior_( NSDecimalNumberHandler behavior ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRoundingBehavior_( Handle, CachedSelectors.setRoundingBehavior_, out ___occuredException, sizeof( NSDecimalNumberHandler ), behavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRoundingIncrement_( NSNumber increment ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRoundingIncrement_( Handle, CachedSelectors.setRoundingIncrement_, out ___occuredException, sizeof( NSNumber ), increment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRoundingMode_( NSNumberFormatterRoundingMode mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRoundingMode_( Handle, CachedSelectors.setRoundingMode_, out ___occuredException, sizeof( NSNumberFormatterRoundingMode ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSecondaryGroupingSize_( uint size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSecondaryGroupingSize_( Handle, CachedSelectors.setSecondaryGroupingSize_, out ___occuredException, sizeof( uint ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextAttributesForNegativeInfinity_( NSDictionary infinity ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextAttributesForNegativeInfinity_( Handle, CachedSelectors.setTextAttributesForNegativeInfinity_, out ___occuredException, sizeof( NSDictionary ), infinity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextAttributesForNegativeValues_( NSDictionary values ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextAttributesForNegativeValues_( Handle, CachedSelectors.setTextAttributesForNegativeValues_, out ___occuredException, sizeof( NSDictionary ), values );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextAttributesForNil_( NSDictionary nil ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextAttributesForNil_( Handle, CachedSelectors.setTextAttributesForNil_, out ___occuredException, sizeof( NSDictionary ), nil );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextAttributesForNotANumber_( NSDictionary number ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextAttributesForNotANumber_( Handle, CachedSelectors.setTextAttributesForNotANumber_, out ___occuredException, sizeof( NSDictionary ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextAttributesForPositiveInfinity_( NSDictionary infinity ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextAttributesForPositiveInfinity_( Handle, CachedSelectors.setTextAttributesForPositiveInfinity_, out ___occuredException, sizeof( NSDictionary ), infinity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextAttributesForPositiveValues_( NSDictionary values ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextAttributesForPositiveValues_( Handle, CachedSelectors.setTextAttributesForPositiveValues_, out ___occuredException, sizeof( NSDictionary ), values );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextAttributesForZero_( NSDictionary zero ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextAttributesForZero_( Handle, CachedSelectors.setTextAttributesForZero_, out ___occuredException, sizeof( NSDictionary ), zero );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setThousandSeparator_( string separator ) {
			RuntimeObject ___occuredException;
			var ___wrappedseparator = Runtime.CreateStringProxy( separator );
			NativeMethods.setThousandSeparator_( Handle, CachedSelectors.setThousandSeparator_, out ___occuredException, sizeof( IntPtr ), ___wrappedseparator );
			Runtime.ReleaseNativeObject( ___wrappedseparator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUsesGroupingSeparator_( bool separator ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUsesGroupingSeparator_( Handle, CachedSelectors.setUsesGroupingSeparator_, out ___occuredException, sizeof( bool ), separator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setZeroSymbol_( string symbol ) {
			RuntimeObject ___occuredException;
			var ___wrappedsymbol = Runtime.CreateStringProxy( symbol );
			NativeMethods.setZeroSymbol_( Handle, CachedSelectors.setZeroSymbol_, out ___occuredException, sizeof( IntPtr ), ___wrappedsymbol );
			Runtime.ReleaseNativeObject( ___wrappedsymbol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string stringFromNumber_( NSNumber number ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringFromNumber_( Handle, CachedSelectors.stringFromNumber_, out ___occuredException, sizeof( NSNumber ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDictionary textAttributesForNegativeInfinity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textAttributesForNegativeInfinity( Handle, CachedSelectors.textAttributesForNegativeInfinity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary textAttributesForNegativeValues() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textAttributesForNegativeValues( Handle, CachedSelectors.textAttributesForNegativeValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary textAttributesForNil() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textAttributesForNil( Handle, CachedSelectors.textAttributesForNil, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary textAttributesForNotANumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textAttributesForNotANumber( Handle, CachedSelectors.textAttributesForNotANumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary textAttributesForPositiveInfinity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textAttributesForPositiveInfinity( Handle, CachedSelectors.textAttributesForPositiveInfinity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary textAttributesForPositiveValues() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textAttributesForPositiveValues( Handle, CachedSelectors.textAttributesForPositiveValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary textAttributesForZero() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textAttributesForZero( Handle, CachedSelectors.textAttributesForZero, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public string thousandSeparator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.thousandSeparator( Handle, CachedSelectors.thousandSeparator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool usesGroupingSeparator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.usesGroupingSeparator( Handle, CachedSelectors.usesGroupingSeparator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string zeroSymbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.zeroSymbol( Handle, CachedSelectors.zeroSymbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool allowsFloats( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool alwaysShowsDecimalSeparator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedStringForNil( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedStringForNotANumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedStringForZero( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currencyCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currencyDecimalSeparator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currencySymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decimalSeparator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int defaultFormatterBehavior( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr exponentSymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr format( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int formatterBehavior( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint formatWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool generatesDecimalNumbers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool getObjectValue_forString_range_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value, IntPtr forString, _NSRange[] range, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupingSeparator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint groupingSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasThousandSeparators( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr internationalCurrencySymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr locale( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool localizesFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr maximum( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint maximumFractionDigits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint maximumIntegerDigits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr minimum( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint minimumFractionDigits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint minimumIntegerDigits( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr minusSign( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr multiplier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr negativeFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr negativeInfinitySymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr negativePrefix( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr negativeSuffix( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nilSymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notANumberSymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr numberFromString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr paddingCharacter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int paddingPosition( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr percentSymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr perMillSymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr plusSign( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr positiveFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr positiveInfinitySymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr positivePrefix( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr positiveSuffix( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr roundingBehavior( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr roundingIncrement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int roundingMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint secondaryGroupingSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsFloats_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool floats );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlwaysShowsDecimalSeparator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool separator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributedStringForNil_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAttributedString nil );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributedStringForNotANumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAttributedString number );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributedStringForZero_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSAttributedString zero );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrencyCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrencyDecimalSeparator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr separator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrencySymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDecimalSeparator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr separator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultFormatterBehavior_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumberFormatterBehavior behavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setExponentSymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFormatterBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumberFormatterBehavior behavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFormatWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGeneratesDecimalNumbers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool numbers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGroupingSeparator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr separator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGroupingSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHasThousandSeparators_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool separators );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setInternationalCurrencySymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLocale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSLocale locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLocalizationFromDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLocalizesFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMaximum_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumber maximum );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMaximumFractionDigits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint digits );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMaximumIntegerDigits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint digits );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinimum_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumber minimum );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinimumFractionDigits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint digits );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinimumIntegerDigits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint digits );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinusSign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr sign );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMultiplier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumber multiplier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNegativeFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNegativeInfinitySymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNegativePrefix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr prefix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNegativeSuffix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr suffix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNilSymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNotANumberSymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNumberStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumberFormatterStyle style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPaddingCharacter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr character );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPaddingPosition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumberFormatterPadPosition position );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPercentSymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPerMillSymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPlusSign_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr sign );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPositiveFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPositiveInfinitySymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPositivePrefix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr prefix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPositiveSuffix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr suffix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRoundingBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimalNumberHandler behavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRoundingIncrement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumber increment );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRoundingMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumberFormatterRoundingMode mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSecondaryGroupingSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextAttributesForNegativeInfinity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary infinity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextAttributesForNegativeValues_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary values );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextAttributesForNil_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary nil );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextAttributesForNotANumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary number );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextAttributesForPositiveInfinity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary infinity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextAttributesForPositiveValues_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary values );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextAttributesForZero_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary zero );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setThousandSeparator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr separator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUsesGroupingSeparator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool separator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setZeroSymbol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr symbol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringFromNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSNumber number );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textAttributesForNegativeInfinity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textAttributesForNegativeValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textAttributesForNil( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textAttributesForNotANumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textAttributesForPositiveInfinity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textAttributesForPositiveValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textAttributesForZero( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr thousandSeparator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool usesGroupingSeparator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr zeroSymbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsFloats = "allowsFloats";
			public static readonly Selector alwaysShowsDecimalSeparator = "alwaysShowsDecimalSeparator";
			public static readonly Selector attributedStringForNil = "attributedStringForNil";
			public static readonly Selector attributedStringForNotANumber = "attributedStringForNotANumber";
			public static readonly Selector attributedStringForZero = "attributedStringForZero";
			public static readonly Selector currencyCode = "currencyCode";
			public static readonly Selector currencyDecimalSeparator = "currencyDecimalSeparator";
			public static readonly Selector currencySymbol = "currencySymbol";
			public static readonly Selector decimalSeparator = "decimalSeparator";
			public static readonly Selector defaultFormatterBehavior = "defaultFormatterBehavior";
			public static readonly Selector exponentSymbol = "exponentSymbol";
			public static readonly Selector format = "format";
			public static readonly Selector formatterBehavior = "formatterBehavior";
			public static readonly Selector formatWidth = "formatWidth";
			public static readonly Selector generatesDecimalNumbers = "generatesDecimalNumbers";
			public static readonly Selector getObjectValue_forString_range_error_ = "getObjectValue:forString:range:error:";
			public static readonly Selector groupingSeparator = "groupingSeparator";
			public static readonly Selector groupingSize = "groupingSize";
			public static readonly Selector hasThousandSeparators = "hasThousandSeparators";
			public static readonly Selector internationalCurrencySymbol = "internationalCurrencySymbol";
			public static readonly Selector locale = "locale";
			public static readonly Selector localizesFormat = "localizesFormat";
			public static readonly Selector maximum = "maximum";
			public static readonly Selector maximumFractionDigits = "maximumFractionDigits";
			public static readonly Selector maximumIntegerDigits = "maximumIntegerDigits";
			public static readonly Selector minimum = "minimum";
			public static readonly Selector minimumFractionDigits = "minimumFractionDigits";
			public static readonly Selector minimumIntegerDigits = "minimumIntegerDigits";
			public static readonly Selector minusSign = "minusSign";
			public static readonly Selector multiplier = "multiplier";
			public static readonly Selector negativeFormat = "negativeFormat";
			public static readonly Selector negativeInfinitySymbol = "negativeInfinitySymbol";
			public static readonly Selector negativePrefix = "negativePrefix";
			public static readonly Selector negativeSuffix = "negativeSuffix";
			public static readonly Selector nilSymbol = "nilSymbol";
			public static readonly Selector notANumberSymbol = "notANumberSymbol";
			public static readonly Selector numberFromString_ = "numberFromString:";
			public static readonly Selector numberStyle = "numberStyle";
			public static readonly Selector paddingCharacter = "paddingCharacter";
			public static readonly Selector paddingPosition = "paddingPosition";
			public static readonly Selector percentSymbol = "percentSymbol";
			public static readonly Selector perMillSymbol = "perMillSymbol";
			public static readonly Selector plusSign = "plusSign";
			public static readonly Selector positiveFormat = "positiveFormat";
			public static readonly Selector positiveInfinitySymbol = "positiveInfinitySymbol";
			public static readonly Selector positivePrefix = "positivePrefix";
			public static readonly Selector positiveSuffix = "positiveSuffix";
			public static readonly Selector roundingBehavior = "roundingBehavior";
			public static readonly Selector roundingIncrement = "roundingIncrement";
			public static readonly Selector roundingMode = "roundingMode";
			public static readonly Selector secondaryGroupingSize = "secondaryGroupingSize";
			public static readonly Selector setAllowsFloats_ = "setAllowsFloats:";
			public static readonly Selector setAlwaysShowsDecimalSeparator_ = "setAlwaysShowsDecimalSeparator:";
			public static readonly Selector setAttributedStringForNil_ = "setAttributedStringForNil:";
			public static readonly Selector setAttributedStringForNotANumber_ = "setAttributedStringForNotANumber:";
			public static readonly Selector setAttributedStringForZero_ = "setAttributedStringForZero:";
			public static readonly Selector setCurrencyCode_ = "setCurrencyCode:";
			public static readonly Selector setCurrencyDecimalSeparator_ = "setCurrencyDecimalSeparator:";
			public static readonly Selector setCurrencySymbol_ = "setCurrencySymbol:";
			public static readonly Selector setDecimalSeparator_ = "setDecimalSeparator:";
			public static readonly Selector setDefaultFormatterBehavior_ = "setDefaultFormatterBehavior:";
			public static readonly Selector setExponentSymbol_ = "setExponentSymbol:";
			public static readonly Selector setFormat_ = "setFormat:";
			public static readonly Selector setFormatterBehavior_ = "setFormatterBehavior:";
			public static readonly Selector setFormatWidth_ = "setFormatWidth:";
			public static readonly Selector setGeneratesDecimalNumbers_ = "setGeneratesDecimalNumbers:";
			public static readonly Selector setGroupingSeparator_ = "setGroupingSeparator:";
			public static readonly Selector setGroupingSize_ = "setGroupingSize:";
			public static readonly Selector setHasThousandSeparators_ = "setHasThousandSeparators:";
			public static readonly Selector setInternationalCurrencySymbol_ = "setInternationalCurrencySymbol:";
			public static readonly Selector setLocale_ = "setLocale:";
			public static readonly Selector setLocalizationFromDefaults = "setLocalizationFromDefaults";
			public static readonly Selector setLocalizesFormat_ = "setLocalizesFormat:";
			public static readonly Selector setMaximum_ = "setMaximum:";
			public static readonly Selector setMaximumFractionDigits_ = "setMaximumFractionDigits:";
			public static readonly Selector setMaximumIntegerDigits_ = "setMaximumIntegerDigits:";
			public static readonly Selector setMinimum_ = "setMinimum:";
			public static readonly Selector setMinimumFractionDigits_ = "setMinimumFractionDigits:";
			public static readonly Selector setMinimumIntegerDigits_ = "setMinimumIntegerDigits:";
			public static readonly Selector setMinusSign_ = "setMinusSign:";
			public static readonly Selector setMultiplier_ = "setMultiplier:";
			public static readonly Selector setNegativeFormat_ = "setNegativeFormat:";
			public static readonly Selector setNegativeInfinitySymbol_ = "setNegativeInfinitySymbol:";
			public static readonly Selector setNegativePrefix_ = "setNegativePrefix:";
			public static readonly Selector setNegativeSuffix_ = "setNegativeSuffix:";
			public static readonly Selector setNilSymbol_ = "setNilSymbol:";
			public static readonly Selector setNotANumberSymbol_ = "setNotANumberSymbol:";
			public static readonly Selector setNumberStyle_ = "setNumberStyle:";
			public static readonly Selector setPaddingCharacter_ = "setPaddingCharacter:";
			public static readonly Selector setPaddingPosition_ = "setPaddingPosition:";
			public static readonly Selector setPercentSymbol_ = "setPercentSymbol:";
			public static readonly Selector setPerMillSymbol_ = "setPerMillSymbol:";
			public static readonly Selector setPlusSign_ = "setPlusSign:";
			public static readonly Selector setPositiveFormat_ = "setPositiveFormat:";
			public static readonly Selector setPositiveInfinitySymbol_ = "setPositiveInfinitySymbol:";
			public static readonly Selector setPositivePrefix_ = "setPositivePrefix:";
			public static readonly Selector setPositiveSuffix_ = "setPositiveSuffix:";
			public static readonly Selector setRoundingBehavior_ = "setRoundingBehavior:";
			public static readonly Selector setRoundingIncrement_ = "setRoundingIncrement:";
			public static readonly Selector setRoundingMode_ = "setRoundingMode:";
			public static readonly Selector setSecondaryGroupingSize_ = "setSecondaryGroupingSize:";
			public static readonly Selector setTextAttributesForNegativeInfinity_ = "setTextAttributesForNegativeInfinity:";
			public static readonly Selector setTextAttributesForNegativeValues_ = "setTextAttributesForNegativeValues:";
			public static readonly Selector setTextAttributesForNil_ = "setTextAttributesForNil:";
			public static readonly Selector setTextAttributesForNotANumber_ = "setTextAttributesForNotANumber:";
			public static readonly Selector setTextAttributesForPositiveInfinity_ = "setTextAttributesForPositiveInfinity:";
			public static readonly Selector setTextAttributesForPositiveValues_ = "setTextAttributesForPositiveValues:";
			public static readonly Selector setTextAttributesForZero_ = "setTextAttributesForZero:";
			public static readonly Selector setThousandSeparator_ = "setThousandSeparator:";
			public static readonly Selector setUsesGroupingSeparator_ = "setUsesGroupingSeparator:";
			public static readonly Selector setZeroSymbol_ = "setZeroSymbol:";
			public static readonly Selector stringFromNumber_ = "stringFromNumber:";
			public static readonly Selector textAttributesForNegativeInfinity = "textAttributesForNegativeInfinity";
			public static readonly Selector textAttributesForNegativeValues = "textAttributesForNegativeValues";
			public static readonly Selector textAttributesForNil = "textAttributesForNil";
			public static readonly Selector textAttributesForNotANumber = "textAttributesForNotANumber";
			public static readonly Selector textAttributesForPositiveInfinity = "textAttributesForPositiveInfinity";
			public static readonly Selector textAttributesForPositiveValues = "textAttributesForPositiveValues";
			public static readonly Selector textAttributesForZero = "textAttributesForZero";
			public static readonly Selector thousandSeparator = "thousandSeparator";
			public static readonly Selector usesGroupingSeparator = "usesGroupingSeparator";
			public static readonly Selector zeroSymbol = "zeroSymbol";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public struct NSObject : IEquatable<NSObject> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSObject;
		public override int GetHashCode() {
			return Handle.GetHashCode();
		}
		public static implicit operator IntPtr( NSObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSObject?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSObject value1, NSObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSObject value1, NSObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSObject alloc() {
			return new NSObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		public override string ToString() {
			return Handle.InvokeString( Selectors.description );
		}
		unsafe public static bool accessInstanceVariablesDirectly() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessInstanceVariablesDirectly( ClassHandle, CachedSelectors.accessInstanceVariablesDirectly, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool automaticallyNotifiesObserversForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.automaticallyNotifiesObserversForKey_( ClassHandle, CachedSelectors.automaticallyNotifiesObserversForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject __autorelease() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__autorelease( ClassHandle, CachedSelectors.__autorelease, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void cancelPreviousPerformRequestsWithTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelPreviousPerformRequestsWithTarget_( ClassHandle, CachedSelectors.cancelPreviousPerformRequestsWithTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void cancelPreviousPerformRequestsWithTarget_selector_object_( NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelPreviousPerformRequestsWithTarget_selector_object_( ClassHandle, CachedSelectors.cancelPreviousPerformRequestsWithTarget_selector_object_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), target, selector, @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeClass __class() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__class( ClassHandle, CachedSelectors.__class, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NSArray classFallbacksForKeyedArchiver() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classFallbacksForKeyedArchiver( ClassHandle, CachedSelectors.classFallbacksForKeyedArchiver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NObjective.RuntimeClass classForKeyedUnarchiver() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForKeyedUnarchiver( ClassHandle, CachedSelectors.classForKeyedUnarchiver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char __conformsTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__conformsTo_( ClassHandle, CachedSelectors.__conformsTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool __conformsToProtocol_( Protocol protocol ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__conformsToProtocol_( ClassHandle, CachedSelectors.__conformsToProtocol_, out ___occuredException, sizeof( Protocol ), protocol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject __copy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__copy( ClassHandle, CachedSelectors.__copy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __debugDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__debugDescription( ClassHandle, CachedSelectors.__debugDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static string __description() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__description( ClassHandle, CachedSelectors.__description, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static NObjective.RuntimeObject detailedDescriptionForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.detailedDescriptionForClass_( ClassHandle, CachedSelectors.detailedDescriptionForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void __doesNotRecognizeSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.__doesNotRecognizeSelector_( ClassHandle, CachedSelectors.__doesNotRecognizeSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void flushAllKeyBindings() {
			RuntimeObject ___occuredException;
			NativeMethods.flushAllKeyBindings( ClassHandle, CachedSelectors.flushAllKeyBindings, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void flushClassKeyBindings() {
			RuntimeObject ___occuredException;
			NativeMethods.flushClassKeyBindings( ClassHandle, CachedSelectors.flushClassKeyBindings, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void __forwardInvocation_( NObjective.RuntimeObject invocation ) {
			RuntimeObject ___occuredException;
			NativeMethods.__forwardInvocation_( ClassHandle, CachedSelectors.__forwardInvocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), invocation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static uint __hash() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__hash( ClassHandle, CachedSelectors.__hash, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static char __implementsSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__implementsSelector_( ClassHandle, CachedSelectors.__implementsSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NSMethodSignature instanceMethodSignatureForSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.instanceMethodSignatureForSelector_( ClassHandle, CachedSelectors.instanceMethodSignatureForSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMethodSignature( ___result );
		}
		unsafe public static char instancesImplementSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.instancesImplementSelector_( ClassHandle, CachedSelectors.instancesImplementSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool instancesRespondToSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.instancesRespondToSelector_( ClassHandle, CachedSelectors.instancesRespondToSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isAncestorOfObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAncestorOfObject_( ClassHandle, CachedSelectors.isAncestorOfObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char __isEqual_( NObjective.RuntimeObject equal ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__isEqual_( ClassHandle, CachedSelectors.__isEqual_, out ___occuredException, sizeof( NObjective.RuntimeObject ), equal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char __isFault() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__isFault( ClassHandle, CachedSelectors.__isFault, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char __isKindOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__isKindOfClass_( ClassHandle, CachedSelectors.__isKindOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char __isMemberOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__isMemberOfClass_( ClassHandle, CachedSelectors.__isMemberOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char __isProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__isProxy( ClassHandle, CachedSelectors.__isProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isSubclassOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSubclassOfClass_( ClassHandle, CachedSelectors.isSubclassOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isSuperclassOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSuperclassOfClass_( ClassHandle, CachedSelectors.isSuperclassOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void load() {
			RuntimeObject ___occuredException;
			NativeMethods.load( ClassHandle, CachedSelectors.load, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject __methodSignatureForSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__methodSignatureForSelector_( ClassHandle, CachedSelectors.__methodSignatureForSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __mutableCopy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__mutableCopy( ClassHandle, CachedSelectors.__mutableCopy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject mutableCopyWithZone_( IntPtr zone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mutableCopyWithZone_( ClassHandle, CachedSelectors.mutableCopyWithZone_, out ___occuredException, sizeof( IntPtr ), zone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject @new() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@new( ClassHandle, CachedSelectors.@new, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __performSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__performSelector_( ClassHandle, CachedSelectors.__performSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __performSelector_withObject_( NObjective.Selector selector, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__performSelector_withObject_( ClassHandle, CachedSelectors.__performSelector_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __performSelector_withObject_withObject_( NObjective.Selector selector, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__performSelector_withObject_withObject_( ClassHandle, CachedSelectors.__performSelector_withObject_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), selector, withObject, withObject2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void poseAsClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			NativeMethods.poseAsClass_( ClassHandle, CachedSelectors.poseAsClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void __release() {
			RuntimeObject ___occuredException;
			NativeMethods.__release( ClassHandle, CachedSelectors.__release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject __replacementObjectForPortCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__replacementObjectForPortCoder_( ClassHandle, CachedSelectors.__replacementObjectForPortCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char __respondsToSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__respondsToSelector_( ClassHandle, CachedSelectors.__respondsToSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject __retain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__retain( ClassHandle, CachedSelectors.__retain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint __retainCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__retainCount( ClassHandle, CachedSelectors.__retainCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static NObjective.RuntimeObject __self() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__self( ClassHandle, CachedSelectors.__self, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void setKeys_triggerChangeNotificationsForDependentKey_( NSArray keys, string triggerChangeNotificationsForDependentKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedtriggerChangeNotificationsForDependentKey = Runtime.CreateStringProxy( triggerChangeNotificationsForDependentKey );
			NativeMethods.setKeys_triggerChangeNotificationsForDependentKey_( ClassHandle, CachedSelectors.setKeys_triggerChangeNotificationsForDependentKey_, out ___occuredException, sizeof( NSArray ) + sizeof( IntPtr ), keys, ___wrappedtriggerChangeNotificationsForDependentKey );
			Runtime.ReleaseNativeObject( ___wrappedtriggerChangeNotificationsForDependentKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setVersion_( int version ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVersion_( ClassHandle, CachedSelectors.setVersion_, out ___occuredException, sizeof( int ), version );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeClass __superclass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__superclass( ClassHandle, CachedSelectors.__superclass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool useStoredAccessor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useStoredAccessor( ClassHandle, CachedSelectors.useStoredAccessor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int version() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.version( ClassHandle, CachedSelectors.version, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void addObject_toBothSidesOfRelationshipWithKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject toBothSidesOfRelationshipWithKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.addObject_toBothSidesOfRelationshipWithKey_( Handle, CachedSelectors.addObject_toBothSidesOfRelationshipWithKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, toBothSidesOfRelationshipWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addObject_toPropertyWithKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject toPropertyWithKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.addObject_toPropertyWithKey_( Handle, CachedSelectors.addObject_toPropertyWithKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, toPropertyWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addObserver_forKeyPath_options_context_( NSObject observer, string forKeyPath, uint options, IntPtr context ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKeyPath = Runtime.CreateStringProxy( forKeyPath );
			NativeMethods.addObserver_forKeyPath_options_context_( Handle, CachedSelectors.addObserver_forKeyPath_options_context_, out ___occuredException, sizeof( NSObject ) + sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), observer, ___wrappedforKeyPath, options, context );
			Runtime.ReleaseNativeObject( ___wrappedforKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allPropertyKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPropertyKeys( Handle, CachedSelectors.allPropertyKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSArray attributeKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributeKeys( Handle, CachedSelectors.attributeKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject autorelease() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autorelease( Handle, CachedSelectors.autorelease, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject awakeAfterUsingCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.awakeAfterUsingCoder_( Handle, CachedSelectors.awakeAfterUsingCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeClass @class() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@class( Handle, CachedSelectors.@class, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint classCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classCode( Handle, CachedSelectors.classCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSClassDescription classDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classDescription( Handle, CachedSelectors.classDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSClassDescription( ___result );
		}
		unsafe public NObjective.RuntimeObject classDescriptionForDestinationKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classDescriptionForDestinationKey_( Handle, CachedSelectors.classDescriptionForDestinationKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeClass classForArchiver() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForArchiver( Handle, CachedSelectors.classForArchiver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeClass classForCoder() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForCoder( Handle, CachedSelectors.classForCoder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeClass classForKeyedArchiver() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForKeyedArchiver( Handle, CachedSelectors.classForKeyedArchiver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeClass classForPortCoder() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForPortCoder( Handle, CachedSelectors.classForPortCoder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string className() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.className( Handle, CachedSelectors.className, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void clearProperties() {
			RuntimeObject ___occuredException;
			NativeMethods.clearProperties( Handle, CachedSelectors.clearProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject coerceValue_forKey_( NObjective.RuntimeObject value, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			var ___result = NativeMethods.coerceValue_forKey_( Handle, CachedSelectors.coerceValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char conformsTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conformsTo_( Handle, CachedSelectors.conformsTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool conformsToProtocol_( Protocol protocol ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conformsToProtocol_( Handle, CachedSelectors.conformsToProtocol_, out ___occuredException, sizeof( Protocol ), protocol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject copy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.copy( Handle, CachedSelectors.copy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createKeyValueBindingForKey_typeMask_( NObjective.RuntimeObject key, uint typeMask ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createKeyValueBindingForKey_typeMask_( Handle, CachedSelectors.createKeyValueBindingForKey_typeMask_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), key, typeMask );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject debugDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.debugDescription( Handle, CachedSelectors.debugDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string description() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.description( Handle, CachedSelectors.description, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDictionary dictionaryWithValuesForKeys_( NSArray keys ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryWithValuesForKeys_( Handle, CachedSelectors.dictionaryWithValuesForKeys_, out ___occuredException, sizeof( NSArray ), keys );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public void didChange_valuesAtIndexes_forKey_( NSKeyValueChange change, NSIndexSet valuesAtIndexes, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.didChange_valuesAtIndexes_forKey_( Handle, CachedSelectors.didChange_valuesAtIndexes_forKey_, out ___occuredException, sizeof( NSKeyValueChange ) + sizeof( NSIndexSet ) + sizeof( IntPtr ), change, valuesAtIndexes, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void didChangeValueForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.didChangeValueForKey_( Handle, CachedSelectors.didChangeValueForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void didChangeValueForKey_withSetMutation_usingObjects_( string key, NSKeyValueSetMutationKind withSetMutation, NSSet usingObjects ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.didChangeValueForKey_withSetMutation_usingObjects_( Handle, CachedSelectors.didChangeValueForKey_withSetMutation_usingObjects_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSKeyValueSetMutationKind ) + sizeof( NSSet ), ___wrappedkey, withSetMutation, usingObjects );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool doesContain_( NObjective.RuntimeObject contain ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doesContain_( Handle, CachedSelectors.doesContain_, out ___occuredException, sizeof( NObjective.RuntimeObject ), contain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void doesNotRecognizeSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.doesNotRecognizeSelector_( Handle, CachedSelectors.doesNotRecognizeSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject entityName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.entityName( Handle, CachedSelectors.entityName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void flushKeyBindings() {
			RuntimeObject ___occuredException;
			NativeMethods.flushKeyBindings( Handle, CachedSelectors.flushKeyBindings, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public long forward__( NObjective.Selector forward, System.IntPtr unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.forward__( Handle, CachedSelectors.forward__, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( System.IntPtr ), forward, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void forwardInvocation_( NSInvocation invocation ) {
			RuntimeObject ___occuredException;
			NativeMethods.forwardInvocation_( Handle, CachedSelectors.forwardInvocation_, out ___occuredException, sizeof( NSInvocation ), invocation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject handleQueryWithUnboundKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.handleQueryWithUnboundKey_( Handle, CachedSelectors.handleQueryWithUnboundKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void handleTakeValue_forUnboundKey_( NObjective.RuntimeObject value, string forUnboundKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforUnboundKey = Runtime.CreateStringProxy( forUnboundKey );
			NativeMethods.handleTakeValue_forUnboundKey_( Handle, CachedSelectors.handleTakeValue_forUnboundKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedforUnboundKey );
			Runtime.ReleaseNativeObject( ___wrappedforUnboundKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint hash() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hash( Handle, CachedSelectors.hash, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public char implementsSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.implementsSelector_( Handle, CachedSelectors.implementsSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSObject init() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.init( Handle, CachedSelectors.init, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSObject( ___result );
		}
		unsafe public void insertValue_atIndex_inPropertyWithKey_( NObjective.RuntimeObject value, uint atIndex, string inPropertyWithKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedinPropertyWithKey = Runtime.CreateStringProxy( inPropertyWithKey );
			NativeMethods.insertValue_atIndex_inPropertyWithKey_( Handle, CachedSelectors.insertValue_atIndex_inPropertyWithKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( IntPtr ), value, atIndex, ___wrappedinPropertyWithKey );
			Runtime.ReleaseNativeObject( ___wrappedinPropertyWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertValue_inPropertyWithKey_( NObjective.RuntimeObject value, string inPropertyWithKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedinPropertyWithKey = Runtime.CreateStringProxy( inPropertyWithKey );
			NativeMethods.insertValue_inPropertyWithKey_( Handle, CachedSelectors.insertValue_inPropertyWithKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedinPropertyWithKey );
			Runtime.ReleaseNativeObject( ___wrappedinPropertyWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string inverseForRelationshipKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.inverseForRelationshipKey_( Handle, CachedSelectors.inverseForRelationshipKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool isCaseInsensitiveLike_( string like ) {
			RuntimeObject ___occuredException;
			var ___wrappedlike = Runtime.CreateStringProxy( like );
			var ___result = NativeMethods.isCaseInsensitiveLike_( Handle, CachedSelectors.isCaseInsensitiveLike_, out ___occuredException, sizeof( IntPtr ), ___wrappedlike );
			Runtime.ReleaseNativeObject( ___wrappedlike );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEqual_( NObjective.RuntimeObject equal ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqual_( Handle, CachedSelectors.isEqual_, out ___occuredException, sizeof( NObjective.RuntimeObject ), equal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualTo_( Handle, CachedSelectors.isEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isFault() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFault( Handle, CachedSelectors.isFault, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isGreaterThan_( NObjective.RuntimeObject than ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isGreaterThan_( Handle, CachedSelectors.isGreaterThan_, out ___occuredException, sizeof( NObjective.RuntimeObject ), than );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isGreaterThanOrEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isGreaterThanOrEqualTo_( Handle, CachedSelectors.isGreaterThanOrEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isKindOf_( NObjective.RuntimeObject of ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isKindOf_( Handle, CachedSelectors.isKindOf_, out ___occuredException, sizeof( NObjective.RuntimeObject ), of );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isKindOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isKindOfClass_( Handle, CachedSelectors.isKindOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isLessThan_( NObjective.RuntimeObject than ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLessThan_( Handle, CachedSelectors.isLessThan_, out ___occuredException, sizeof( NObjective.RuntimeObject ), than );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isLessThanOrEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLessThanOrEqualTo_( Handle, CachedSelectors.isLessThanOrEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isLike_( string like ) {
			RuntimeObject ___occuredException;
			var ___wrappedlike = Runtime.CreateStringProxy( like );
			var ___result = NativeMethods.isLike_( Handle, CachedSelectors.isLike_, out ___occuredException, sizeof( IntPtr ), ___wrappedlike );
			Runtime.ReleaseNativeObject( ___wrappedlike );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isMemberOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMemberOfClass_( Handle, CachedSelectors.isMemberOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isNotEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isNotEqualTo_( Handle, CachedSelectors.isNotEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isNSIDispatchProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isNSIDispatchProxy( Handle, CachedSelectors.isNSIDispatchProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isProxy( Handle, CachedSelectors.isProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isToManyKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isToManyKey_( Handle, CachedSelectors.isToManyKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject keyValueBindingForKey_typeMask_( NObjective.RuntimeObject key, uint typeMask ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyValueBindingForKey_typeMask_( Handle, CachedSelectors.keyValueBindingForKey_typeMask_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), key, typeMask );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSMethodSignature methodSignatureForSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.methodSignatureForSelector_( Handle, CachedSelectors.methodSignatureForSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMethodSignature( ___result );
		}
		unsafe public NSMutableArray mutableArrayValueForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.mutableArrayValueForKey_( Handle, CachedSelectors.mutableArrayValueForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableArray( ___result );
		}
		unsafe public NSMutableArray mutableArrayValueForKeyPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.mutableArrayValueForKeyPath_( Handle, CachedSelectors.mutableArrayValueForKeyPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableArray( ___result );
		}
		unsafe public NObjective.RuntimeObject mutableCopy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mutableCopy( Handle, CachedSelectors.mutableCopy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSMutableSet mutableSetValueForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.mutableSetValueForKey_( Handle, CachedSelectors.mutableSetValueForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableSet( ___result );
		}
		unsafe public NSMutableSet mutableSetValueForKeyPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.mutableSetValueForKeyPath_( Handle, CachedSelectors.mutableSetValueForKeyPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableSet( ___result );
		}
		unsafe public NSScriptObjectSpecifier objectSpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectSpecifier( Handle, CachedSelectors.objectSpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		unsafe public IntPtr observationInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.observationInfo( Handle, CachedSelectors.observationInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void observeValueForKeyPath_ofObject_change_context_( string path, NObjective.RuntimeObject ofObject, NSDictionary change, IntPtr context ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			NativeMethods.observeValueForKeyPath_ofObject_change_context_( Handle, CachedSelectors.observeValueForKeyPath_ofObject_change_context_, out ___occuredException, sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( NSDictionary ) + sizeof( IntPtr ), ___wrappedpath, ofObject, change, context );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char ownsDestinationObjectsForRelationshipKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ownsDestinationObjectsForRelationshipKey_( Handle, CachedSelectors.ownsDestinationObjectsForRelationshipKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void perform_withEachObjectInArray_( NObjective.Selector perform, NObjective.RuntimeObject withEachObjectInArray ) {
			RuntimeObject ___occuredException;
			NativeMethods.perform_withEachObjectInArray_( Handle, CachedSelectors.perform_withEachObjectInArray_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), perform, withEachObjectInArray );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject performSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performSelector_( Handle, CachedSelectors.performSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void performSelector_object_afterDelay_( NObjective.Selector selector, NObjective.RuntimeObject @object, double afterDelay ) {
			RuntimeObject ___occuredException;
			NativeMethods.performSelector_object_afterDelay_( Handle, CachedSelectors.performSelector_object_afterDelay_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( double ), selector, @object, afterDelay );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject performSelector_withObject_( NObjective.Selector selector, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performSelector_withObject_( Handle, CachedSelectors.performSelector_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void performSelector_withObject_afterDelay_( NObjective.Selector selector, NObjective.RuntimeObject withObject, double afterDelay ) {
			RuntimeObject ___occuredException;
			NativeMethods.performSelector_withObject_afterDelay_( Handle, CachedSelectors.performSelector_withObject_afterDelay_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( double ), selector, withObject, afterDelay );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void performSelector_withObject_afterDelay_inModes_( NObjective.Selector selector, NObjective.RuntimeObject withObject, double afterDelay, NSArray inModes ) {
			RuntimeObject ___occuredException;
			NativeMethods.performSelector_withObject_afterDelay_inModes_( Handle, CachedSelectors.performSelector_withObject_afterDelay_inModes_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( double ) + sizeof( NSArray ), selector, withObject, afterDelay, inModes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject performSelector_withObject_withObject_( NObjective.Selector selector, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performSelector_withObject_withObject_( Handle, CachedSelectors.performSelector_withObject_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), selector, withObject, withObject2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void performSelectorOnMainThread_withObject_waitUntilDone_( NObjective.Selector thread, NObjective.RuntimeObject withObject, bool waitUntilDone ) {
			RuntimeObject ___occuredException;
			NativeMethods.performSelectorOnMainThread_withObject_waitUntilDone_( Handle, CachedSelectors.performSelectorOnMainThread_withObject_waitUntilDone_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( bool ), thread, withObject, waitUntilDone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void performSelectorOnMainThread_withObject_waitUntilDone_modes_( NObjective.Selector thread, NObjective.RuntimeObject withObject, bool waitUntilDone, NSArray modes ) {
			RuntimeObject ___occuredException;
			NativeMethods.performSelectorOnMainThread_withObject_waitUntilDone_modes_( Handle, CachedSelectors.performSelectorOnMainThread_withObject_waitUntilDone_modes_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( bool ) + sizeof( NSArray ), thread, withObject, waitUntilDone, modes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject performv__( NObjective.Selector performv, System.IntPtr unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performv__( Handle, CachedSelectors.performv__, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( System.IntPtr ), performv, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObject_fromBothSidesOfRelationshipWithKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject fromBothSidesOfRelationshipWithKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObject_fromBothSidesOfRelationshipWithKey_( Handle, CachedSelectors.removeObject_fromBothSidesOfRelationshipWithKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, fromBothSidesOfRelationshipWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObject_fromPropertyWithKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject fromPropertyWithKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObject_fromPropertyWithKey_( Handle, CachedSelectors.removeObject_fromPropertyWithKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, fromPropertyWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObserver_forKeyPath_( NSObject observer, string forKeyPath ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKeyPath = Runtime.CreateStringProxy( forKeyPath );
			NativeMethods.removeObserver_forKeyPath_( Handle, CachedSelectors.removeObserver_forKeyPath_, out ___occuredException, sizeof( NSObject ) + sizeof( IntPtr ), observer, ___wrappedforKeyPath );
			Runtime.ReleaseNativeObject( ___wrappedforKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeValueAtIndex_fromPropertyWithKey_( uint index, string fromPropertyWithKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedfromPropertyWithKey = Runtime.CreateStringProxy( fromPropertyWithKey );
			NativeMethods.removeValueAtIndex_fromPropertyWithKey_( Handle, CachedSelectors.removeValueAtIndex_fromPropertyWithKey_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ), index, ___wrappedfromPropertyWithKey );
			Runtime.ReleaseNativeObject( ___wrappedfromPropertyWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject replacementObjectForArchiver_( NSArchiver archiver ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementObjectForArchiver_( Handle, CachedSelectors.replacementObjectForArchiver_, out ___occuredException, sizeof( NSArchiver ), archiver );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replacementObjectForCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementObjectForCoder_( Handle, CachedSelectors.replacementObjectForCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replacementObjectForKeyedArchiver_( NSKeyedArchiver archiver ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementObjectForKeyedArchiver_( Handle, CachedSelectors.replacementObjectForKeyedArchiver_, out ___occuredException, sizeof( NSKeyedArchiver ), archiver );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject replacementObjectForPortCoder_( NSPortCoder coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementObjectForPortCoder_( Handle, CachedSelectors.replacementObjectForPortCoder_, out ___occuredException, sizeof( NSPortCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void replaceValueAtIndex_inPropertyWithKey_withValue_( uint index, string inPropertyWithKey, NObjective.RuntimeObject withValue ) {
			RuntimeObject ___occuredException;
			var ___wrappedinPropertyWithKey = Runtime.CreateStringProxy( inPropertyWithKey );
			NativeMethods.replaceValueAtIndex_inPropertyWithKey_withValue_( Handle, CachedSelectors.replaceValueAtIndex_inPropertyWithKey_withValue_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), index, ___wrappedinPropertyWithKey, withValue );
			Runtime.ReleaseNativeObject( ___wrappedinPropertyWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char respondsTo_( NObjective.Selector to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.respondsTo_( Handle, CachedSelectors.respondsTo_, out ___occuredException, sizeof( NObjective.Selector ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool respondsToSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.respondsToSelector_( Handle, CachedSelectors.respondsToSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject retain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.retain( Handle, CachedSelectors.retain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint retainCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.retainCount( Handle, CachedSelectors.retainCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSDictionary scriptingProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingProperties( Handle, CachedSelectors.scriptingProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NObjective.RuntimeObject self() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.self( Handle, CachedSelectors.self, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setNilValueForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.setNilValueForKey_( Handle, CachedSelectors.setNilValueForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObservationInfo_( IntPtr info ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObservationInfo_( Handle, CachedSelectors.setObservationInfo_, out ___occuredException, sizeof( IntPtr ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScriptingProperties_( NSDictionary properties ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScriptingProperties_( Handle, CachedSelectors.setScriptingProperties_, out ___occuredException, sizeof( NSDictionary ), properties );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_forKey_( NObjective.RuntimeObject value, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.setValue_forKey_( Handle, CachedSelectors.setValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_forKeyPath_( NObjective.RuntimeObject value, string forKeyPath ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKeyPath = Runtime.CreateStringProxy( forKeyPath );
			NativeMethods.setValue_forKeyPath_( Handle, CachedSelectors.setValue_forKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedforKeyPath );
			Runtime.ReleaseNativeObject( ___wrappedforKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_forUndefinedKey_( NObjective.RuntimeObject value, string forUndefinedKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforUndefinedKey = Runtime.CreateStringProxy( forUndefinedKey );
			NativeMethods.setValue_forUndefinedKey_( Handle, CachedSelectors.setValue_forUndefinedKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedforUndefinedKey );
			Runtime.ReleaseNativeObject( ___wrappedforUndefinedKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValuesForKeysWithDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValuesForKeysWithDictionary_( Handle, CachedSelectors.setValuesForKeysWithDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject storedValueForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.storedValueForKey_( Handle, CachedSelectors.storedValueForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeClass superclass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.superclass( Handle, CachedSelectors.superclass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void takeStoredValue_forKey_( NObjective.RuntimeObject value, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.takeStoredValue_forKey_( Handle, CachedSelectors.takeStoredValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeStoredValuesFromDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeStoredValuesFromDictionary_( Handle, CachedSelectors.takeStoredValuesFromDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeValue_forKey_( NObjective.RuntimeObject value, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.takeValue_forKey_( Handle, CachedSelectors.takeValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeValue_forKeyPath_( NObjective.RuntimeObject value, string forKeyPath ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKeyPath = Runtime.CreateStringProxy( forKeyPath );
			NativeMethods.takeValue_forKeyPath_( Handle, CachedSelectors.takeValue_forKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedforKeyPath );
			Runtime.ReleaseNativeObject( ___wrappedforKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeValuesFromDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeValuesFromDictionary_( Handle, CachedSelectors.takeValuesFromDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray toManyRelationshipKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.toManyRelationshipKeys( Handle, CachedSelectors.toManyRelationshipKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray toOneRelationshipKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.toOneRelationshipKeys( Handle, CachedSelectors.toOneRelationshipKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void unableToSetNilForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.unableToSetNilForKey_( Handle, CachedSelectors.unableToSetNilForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject validateTakeValue_forKeyPath_( NObjective.RuntimeObject value, NObjective.RuntimeObject forKeyPath ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateTakeValue_forKeyPath_( Handle, CachedSelectors.validateTakeValue_forKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject validateValue_forKey_( System.IntPtr value, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateValue_forKey_( Handle, CachedSelectors.validateValue_forKey_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ), value, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool validateValue_forKey_error_( IntPtr value, string forKey, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			var ___result = NativeMethods.validateValue_forKey_error_( Handle, CachedSelectors.validateValue_forKey_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), value, ___wrappedforKey, ref error );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool validateValue_forKeyPath_error_( IntPtr value, string forKeyPath, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKeyPath = Runtime.CreateStringProxy( forKeyPath );
			var ___result = NativeMethods.validateValue_forKeyPath_error_( Handle, CachedSelectors.validateValue_forKeyPath_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), value, ___wrappedforKeyPath, ref error );
			Runtime.ReleaseNativeObject( ___wrappedforKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject valueAtIndex_inPropertyWithKey_( uint index, string inPropertyWithKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedinPropertyWithKey = Runtime.CreateStringProxy( inPropertyWithKey );
			var ___result = NativeMethods.valueAtIndex_inPropertyWithKey_( Handle, CachedSelectors.valueAtIndex_inPropertyWithKey_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ), index, ___wrappedinPropertyWithKey );
			Runtime.ReleaseNativeObject( ___wrappedinPropertyWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.valueForKey_( Handle, CachedSelectors.valueForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForKeyPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.valueForKeyPath_( Handle, CachedSelectors.valueForKeyPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForUndefinedKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.valueForUndefinedKey_( Handle, CachedSelectors.valueForUndefinedKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDictionary valuesForKeys_( NSArray keys ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valuesForKeys_( Handle, CachedSelectors.valuesForKeys_, out ___occuredException, sizeof( NSArray ), keys );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NObjective.RuntimeObject valueWithName_inPropertyWithKey_( string name, string inPropertyWithKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedinPropertyWithKey = Runtime.CreateStringProxy( inPropertyWithKey );
			var ___result = NativeMethods.valueWithName_inPropertyWithKey_( Handle, CachedSelectors.valueWithName_inPropertyWithKey_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedinPropertyWithKey );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedinPropertyWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueWithUniqueID_inPropertyWithKey_( NObjective.RuntimeObject id, string inPropertyWithKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedinPropertyWithKey = Runtime.CreateStringProxy( inPropertyWithKey );
			var ___result = NativeMethods.valueWithUniqueID_inPropertyWithKey_( Handle, CachedSelectors.valueWithUniqueID_inPropertyWithKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), id, ___wrappedinPropertyWithKey );
			Runtime.ReleaseNativeObject( ___wrappedinPropertyWithKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void willChange_valuesAtIndexes_forKey_( NSKeyValueChange change, NSIndexSet valuesAtIndexes, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.willChange_valuesAtIndexes_forKey_( Handle, CachedSelectors.willChange_valuesAtIndexes_forKey_, out ___occuredException, sizeof( NSKeyValueChange ) + sizeof( NSIndexSet ) + sizeof( IntPtr ), change, valuesAtIndexes, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void willChangeValueForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.willChangeValueForKey_( Handle, CachedSelectors.willChangeValueForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void willChangeValueForKey_withSetMutation_usingObjects_( string key, NSKeyValueSetMutationKind withSetMutation, NSSet usingObjects ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.willChangeValueForKey_withSetMutation_usingObjects_( Handle, CachedSelectors.willChangeValueForKey_withSetMutation_usingObjects_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSKeyValueSetMutationKind ) + sizeof( NSSet ), ___wrappedkey, withSetMutation, usingObjects );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __autorelease( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass __class( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __conformsTo_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool __conformsToProtocol_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, Protocol protocol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __copy( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __debugDescription( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __description( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void __doesNotRecognizeSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void __forwardInvocation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject invocation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint __hash( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __implementsSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __isEqual_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject equal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __isFault( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __isKindOfClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __isMemberOfClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __isProxy( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __methodSignatureForSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __mutableCopy( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __performSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __performSelector_withObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __performSelector_withObject_withObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void __release( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __replacementObjectForPortCoder_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __respondsToSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __retain( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint __retainCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __self( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass __superclass( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool accessInstanceVariablesDirectly( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObject_toBothSidesOfRelationshipWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject toBothSidesOfRelationshipWithKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObject_toPropertyWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject toPropertyWithKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObserver_forKeyPath_options_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSObject observer, IntPtr forKeyPath, uint options, IntPtr context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allPropertyKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributeKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool automaticallyNotifiesObserversForKey_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr autorelease( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr awakeAfterUsingCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelPreviousPerformRequestsWithTarget_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelPreviousPerformRequestsWithTarget_selector_object_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass @class( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint classCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDescriptionForDestinationKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classFallbacksForKeyedArchiver( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForArchiver( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForCoder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForKeyedArchiver( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForKeyedUnarchiver( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForPortCoder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr className( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr coerceValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char conformsTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool conformsToProtocol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, Protocol protocol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr copy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createKeyValueBindingForKey_typeMask_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, uint typeMask );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr debugDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr description( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr detailedDescriptionForClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryWithValuesForKeys_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray keys );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didChange_valuesAtIndexes_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSKeyValueChange change, NSIndexSet valuesAtIndexes, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didChangeValueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didChangeValueForKey_withSetMutation_usingObjects_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key, NSKeyValueSetMutationKind withSetMutation, NSSet usingObjects );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool doesContain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject contain );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doesNotRecognizeSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr entityName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void flushAllKeyBindings( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void flushClassKeyBindings( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void flushKeyBindings( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern long forward__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector forward, System.IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void forwardInvocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSInvocation invocation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr handleQueryWithUnboundKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleTakeValue_forUnboundKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr forUnboundKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint hash( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char implementsSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr init( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertValue_atIndex_inPropertyWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, uint atIndex, IntPtr inPropertyWithKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertValue_inPropertyWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr inPropertyWithKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr instanceMethodSignatureForSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char instancesImplementSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool instancesRespondToSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr inverseForRelationshipKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAncestorOfObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isCaseInsensitiveLike_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr like );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqual_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject equal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isFault( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isGreaterThan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject than );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isGreaterThanOrEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isKindOf_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject of );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isKindOfClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLessThan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject than );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLessThanOrEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLike_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr like );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isMemberOfClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isNotEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isNSIDispatchProxy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isProxy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSubclassOfClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSuperclassOfClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isToManyKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyValueBindingForKey_typeMask_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, uint typeMask );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void load( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr methodSignatureForSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutableArrayValueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutableArrayValueForKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutableCopy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutableCopyWithZone_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr zone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutableSetValueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mutableSetValueForKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @new( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectSpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr observationInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void observeValueForKeyPath_ofObject_change_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, NObjective.RuntimeObject ofObject, NSDictionary change, IntPtr context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char ownsDestinationObjectsForRelationshipKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void perform_withEachObjectInArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector perform, NObjective.RuntimeObject withEachObjectInArray );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr performSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performSelector_object_afterDelay_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject @object, double afterDelay );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr performSelector_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performSelector_withObject_afterDelay_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject, double afterDelay );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performSelector_withObject_afterDelay_inModes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject, double afterDelay, NSArray inModes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr performSelector_withObject_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performSelectorOnMainThread_withObject_waitUntilDone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector thread, NObjective.RuntimeObject withObject, bool waitUntilDone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performSelectorOnMainThread_withObject_waitUntilDone_modes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector thread, NObjective.RuntimeObject withObject, bool waitUntilDone, NSArray modes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr performv__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector performv, System.IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void poseAsClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObject_fromBothSidesOfRelationshipWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject fromBothSidesOfRelationshipWithKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObject_fromPropertyWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject fromPropertyWithKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObserver_forKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSObject observer, IntPtr forKeyPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeValueAtIndex_fromPropertyWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, IntPtr fromPropertyWithKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replacementObjectForArchiver_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArchiver archiver );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replacementObjectForCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replacementObjectForKeyedArchiver_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSKeyedArchiver archiver );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replacementObjectForPortCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPortCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceValueAtIndex_inPropertyWithKey_withValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, IntPtr inPropertyWithKey, NObjective.RuntimeObject withValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char respondsTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool respondsToSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr retain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint retainCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scriptingProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr self( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setKeys_triggerChangeNotificationsForDependentKey_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray keys, IntPtr triggerChangeNotificationsForDependentKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNilValueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObservationInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScriptingProperties_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary properties );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_forKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr forKeyPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_forUndefinedKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr forUndefinedKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValuesForKeysWithDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVersion_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int version );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr storedValueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass superclass( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeStoredValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeStoredValuesFromDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeValue_forKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr forKeyPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeValuesFromDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr toManyRelationshipKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr toOneRelationshipKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unableToSetNilForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool useStoredAccessor( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr validateTakeValue_forKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forKeyPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr validateValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr value, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool validateValue_forKey_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value, IntPtr forKey, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool validateValue_forKeyPath_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value, IntPtr forKeyPath, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueAtIndex_inPropertyWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, IntPtr inPropertyWithKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForUndefinedKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valuesForKeys_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray keys );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueWithName_inPropertyWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr inPropertyWithKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueWithUniqueID_inPropertyWithKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, IntPtr inPropertyWithKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int version( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void willChange_valuesAtIndexes_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSKeyValueChange change, NSIndexSet valuesAtIndexes, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void willChangeValueForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void willChangeValueForKey_withSetMutation_usingObjects_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key, NSKeyValueSetMutationKind withSetMutation, NSSet usingObjects );
		}
		static internal class CachedSelectors {
			public static readonly Selector __autorelease = "__autorelease";
			public static readonly Selector __class = "__class";
			public static readonly Selector __conformsTo_ = "__conformsTo:";
			public static readonly Selector __conformsToProtocol_ = "__conformsToProtocol:";
			public static readonly Selector __copy = "__copy";
			public static readonly Selector __debugDescription = "__debugDescription";
			public static readonly Selector __description = "__description";
			public static readonly Selector __doesNotRecognizeSelector_ = "__doesNotRecognizeSelector:";
			public static readonly Selector __forwardInvocation_ = "__forwardInvocation:";
			public static readonly Selector __hash = "__hash";
			public static readonly Selector __implementsSelector_ = "__implementsSelector:";
			public static readonly Selector __isEqual_ = "__isEqual:";
			public static readonly Selector __isFault = "__isFault";
			public static readonly Selector __isKindOfClass_ = "__isKindOfClass:";
			public static readonly Selector __isMemberOfClass_ = "__isMemberOfClass:";
			public static readonly Selector __isProxy = "__isProxy";
			public static readonly Selector __methodSignatureForSelector_ = "__methodSignatureForSelector:";
			public static readonly Selector __mutableCopy = "__mutableCopy";
			public static readonly Selector __performSelector_ = "__performSelector:";
			public static readonly Selector __performSelector_withObject_ = "__performSelector:withObject:";
			public static readonly Selector __performSelector_withObject_withObject_ = "__performSelector:withObject:withObject:";
			public static readonly Selector __release = "__release";
			public static readonly Selector __replacementObjectForPortCoder_ = "__replacementObjectForPortCoder:";
			public static readonly Selector __respondsToSelector_ = "__respondsToSelector:";
			public static readonly Selector __retain = "__retain";
			public static readonly Selector __retainCount = "__retainCount";
			public static readonly Selector __self = "__self";
			public static readonly Selector __superclass = "__superclass";
			public static readonly Selector accessInstanceVariablesDirectly = "accessInstanceVariablesDirectly";
			public static readonly Selector addObject_toBothSidesOfRelationshipWithKey_ = "addObject:toBothSidesOfRelationshipWithKey:";
			public static readonly Selector addObject_toPropertyWithKey_ = "addObject:toPropertyWithKey:";
			public static readonly Selector addObserver_forKeyPath_options_context_ = "addObserver:forKeyPath:options:context:";
			public static readonly Selector allPropertyKeys = "allPropertyKeys";
			public static readonly Selector attributeKeys = "attributeKeys";
			public static readonly Selector automaticallyNotifiesObserversForKey_ = "automaticallyNotifiesObserversForKey:";
			public static readonly Selector autorelease = "autorelease";
			public static readonly Selector awakeAfterUsingCoder_ = "awakeAfterUsingCoder:";
			public static readonly Selector cancelPreviousPerformRequestsWithTarget_ = "cancelPreviousPerformRequestsWithTarget:";
			public static readonly Selector cancelPreviousPerformRequestsWithTarget_selector_object_ = "cancelPreviousPerformRequestsWithTarget:selector:object:";
			public static readonly Selector @class = "class";
			public static readonly Selector classCode = "classCode";
			public static readonly Selector classDescription = "classDescription";
			public static readonly Selector classDescriptionForDestinationKey_ = "classDescriptionForDestinationKey:";
			public static readonly Selector classFallbacksForKeyedArchiver = "classFallbacksForKeyedArchiver";
			public static readonly Selector classForArchiver = "classForArchiver";
			public static readonly Selector classForCoder = "classForCoder";
			public static readonly Selector classForKeyedArchiver = "classForKeyedArchiver";
			public static readonly Selector classForKeyedUnarchiver = "classForKeyedUnarchiver";
			public static readonly Selector classForPortCoder = "classForPortCoder";
			public static readonly Selector className = "className";
			public static readonly Selector clearProperties = "clearProperties";
			public static readonly Selector coerceValue_forKey_ = "coerceValue:forKey:";
			public static readonly Selector conformsTo_ = "conformsTo:";
			public static readonly Selector conformsToProtocol_ = "conformsToProtocol:";
			public static readonly Selector copy = "copy";
			public static readonly Selector createKeyValueBindingForKey_typeMask_ = "createKeyValueBindingForKey:typeMask:";
			public static readonly Selector debugDescription = "debugDescription";
			public static readonly Selector description = "description";
			public static readonly Selector detailedDescriptionForClass_ = "detailedDescriptionForClass:";
			public static readonly Selector dictionaryWithValuesForKeys_ = "dictionaryWithValuesForKeys:";
			public static readonly Selector didChange_valuesAtIndexes_forKey_ = "didChange:valuesAtIndexes:forKey:";
			public static readonly Selector didChangeValueForKey_ = "didChangeValueForKey:";
			public static readonly Selector didChangeValueForKey_withSetMutation_usingObjects_ = "didChangeValueForKey:withSetMutation:usingObjects:";
			public static readonly Selector doesContain_ = "doesContain:";
			public static readonly Selector doesNotRecognizeSelector_ = "doesNotRecognizeSelector:";
			public static readonly Selector entityName = "entityName";
			public static readonly Selector flushAllKeyBindings = "flushAllKeyBindings";
			public static readonly Selector flushClassKeyBindings = "flushClassKeyBindings";
			public static readonly Selector flushKeyBindings = "flushKeyBindings";
			public static readonly Selector forward__ = "forward::";
			public static readonly Selector forwardInvocation_ = "forwardInvocation:";
			public static readonly Selector handleQueryWithUnboundKey_ = "handleQueryWithUnboundKey:";
			public static readonly Selector handleTakeValue_forUnboundKey_ = "handleTakeValue:forUnboundKey:";
			public static readonly Selector hash = "hash";
			public static readonly Selector implementsSelector_ = "implementsSelector:";
			public static readonly Selector init = "init";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector insertValue_atIndex_inPropertyWithKey_ = "insertValue:atIndex:inPropertyWithKey:";
			public static readonly Selector insertValue_inPropertyWithKey_ = "insertValue:inPropertyWithKey:";
			public static readonly Selector instanceMethodSignatureForSelector_ = "instanceMethodSignatureForSelector:";
			public static readonly Selector instancesImplementSelector_ = "instancesImplementSelector:";
			public static readonly Selector instancesRespondToSelector_ = "instancesRespondToSelector:";
			public static readonly Selector inverseForRelationshipKey_ = "inverseForRelationshipKey:";
			public static readonly Selector isAncestorOfObject_ = "isAncestorOfObject:";
			public static readonly Selector isCaseInsensitiveLike_ = "isCaseInsensitiveLike:";
			public static readonly Selector isEqual_ = "isEqual:";
			public static readonly Selector isEqualTo_ = "isEqualTo:";
			public static readonly Selector isFault = "isFault";
			public static readonly Selector isGreaterThan_ = "isGreaterThan:";
			public static readonly Selector isGreaterThanOrEqualTo_ = "isGreaterThanOrEqualTo:";
			public static readonly Selector isKindOf_ = "isKindOf:";
			public static readonly Selector isKindOfClass_ = "isKindOfClass:";
			public static readonly Selector isLessThan_ = "isLessThan:";
			public static readonly Selector isLessThanOrEqualTo_ = "isLessThanOrEqualTo:";
			public static readonly Selector isLike_ = "isLike:";
			public static readonly Selector isMemberOfClass_ = "isMemberOfClass:";
			public static readonly Selector isNotEqualTo_ = "isNotEqualTo:";
			public static readonly Selector isNSIDispatchProxy = "isNSIDispatchProxy";
			public static readonly Selector isProxy = "isProxy";
			public static readonly Selector isSubclassOfClass_ = "isSubclassOfClass:";
			public static readonly Selector isSuperclassOfClass_ = "isSuperclassOfClass:";
			public static readonly Selector isToManyKey_ = "isToManyKey:";
			public static readonly Selector keyValueBindingForKey_typeMask_ = "keyValueBindingForKey:typeMask:";
			public static readonly Selector load = "load";
			public static readonly Selector methodSignatureForSelector_ = "methodSignatureForSelector:";
			public static readonly Selector mutableArrayValueForKey_ = "mutableArrayValueForKey:";
			public static readonly Selector mutableArrayValueForKeyPath_ = "mutableArrayValueForKeyPath:";
			public static readonly Selector mutableCopy = "mutableCopy";
			public static readonly Selector mutableCopyWithZone_ = "mutableCopyWithZone:";
			public static readonly Selector mutableSetValueForKey_ = "mutableSetValueForKey:";
			public static readonly Selector mutableSetValueForKeyPath_ = "mutableSetValueForKeyPath:";
			public static readonly Selector @new = "new";
			public static readonly Selector objectSpecifier = "objectSpecifier";
			public static readonly Selector observationInfo = "observationInfo";
			public static readonly Selector observeValueForKeyPath_ofObject_change_context_ = "observeValueForKeyPath:ofObject:change:context:";
			public static readonly Selector ownsDestinationObjectsForRelationshipKey_ = "ownsDestinationObjectsForRelationshipKey:";
			public static readonly Selector perform_withEachObjectInArray_ = "perform:withEachObjectInArray:";
			public static readonly Selector performSelector_ = "performSelector:";
			public static readonly Selector performSelector_object_afterDelay_ = "performSelector:object:afterDelay:";
			public static readonly Selector performSelector_withObject_ = "performSelector:withObject:";
			public static readonly Selector performSelector_withObject_afterDelay_ = "performSelector:withObject:afterDelay:";
			public static readonly Selector performSelector_withObject_afterDelay_inModes_ = "performSelector:withObject:afterDelay:inModes:";
			public static readonly Selector performSelector_withObject_withObject_ = "performSelector:withObject:withObject:";
			public static readonly Selector performSelectorOnMainThread_withObject_waitUntilDone_ = "performSelectorOnMainThread:withObject:waitUntilDone:";
			public static readonly Selector performSelectorOnMainThread_withObject_waitUntilDone_modes_ = "performSelectorOnMainThread:withObject:waitUntilDone:modes:";
			public static readonly Selector performv__ = "performv::";
			public static readonly Selector poseAsClass_ = "poseAsClass:";
			public static readonly Selector release = "release";
			public static readonly Selector removeObject_fromBothSidesOfRelationshipWithKey_ = "removeObject:fromBothSidesOfRelationshipWithKey:";
			public static readonly Selector removeObject_fromPropertyWithKey_ = "removeObject:fromPropertyWithKey:";
			public static readonly Selector removeObserver_forKeyPath_ = "removeObserver:forKeyPath:";
			public static readonly Selector removeValueAtIndex_fromPropertyWithKey_ = "removeValueAtIndex:fromPropertyWithKey:";
			public static readonly Selector replacementObjectForArchiver_ = "replacementObjectForArchiver:";
			public static readonly Selector replacementObjectForCoder_ = "replacementObjectForCoder:";
			public static readonly Selector replacementObjectForKeyedArchiver_ = "replacementObjectForKeyedArchiver:";
			public static readonly Selector replacementObjectForPortCoder_ = "replacementObjectForPortCoder:";
			public static readonly Selector replaceValueAtIndex_inPropertyWithKey_withValue_ = "replaceValueAtIndex:inPropertyWithKey:withValue:";
			public static readonly Selector respondsTo_ = "respondsTo:";
			public static readonly Selector respondsToSelector_ = "respondsToSelector:";
			public static readonly Selector retain = "retain";
			public static readonly Selector retainCount = "retainCount";
			public static readonly Selector scriptingProperties = "scriptingProperties";
			public static readonly Selector self = "self";
			public static readonly Selector setKeys_triggerChangeNotificationsForDependentKey_ = "setKeys:triggerChangeNotificationsForDependentKey:";
			public static readonly Selector setNilValueForKey_ = "setNilValueForKey:";
			public static readonly Selector setObservationInfo_ = "setObservationInfo:";
			public static readonly Selector setScriptingProperties_ = "setScriptingProperties:";
			public static readonly Selector setValue_forKey_ = "setValue:forKey:";
			public static readonly Selector setValue_forKeyPath_ = "setValue:forKeyPath:";
			public static readonly Selector setValue_forUndefinedKey_ = "setValue:forUndefinedKey:";
			public static readonly Selector setValuesForKeysWithDictionary_ = "setValuesForKeysWithDictionary:";
			public static readonly Selector setVersion_ = "setVersion:";
			public static readonly Selector storedValueForKey_ = "storedValueForKey:";
			public static readonly Selector superclass = "superclass";
			public static readonly Selector takeStoredValue_forKey_ = "takeStoredValue:forKey:";
			public static readonly Selector takeStoredValuesFromDictionary_ = "takeStoredValuesFromDictionary:";
			public static readonly Selector takeValue_forKey_ = "takeValue:forKey:";
			public static readonly Selector takeValue_forKeyPath_ = "takeValue:forKeyPath:";
			public static readonly Selector takeValuesFromDictionary_ = "takeValuesFromDictionary:";
			public static readonly Selector toManyRelationshipKeys = "toManyRelationshipKeys";
			public static readonly Selector toOneRelationshipKeys = "toOneRelationshipKeys";
			public static readonly Selector unableToSetNilForKey_ = "unableToSetNilForKey:";
			public static readonly Selector useStoredAccessor = "useStoredAccessor";
			public static readonly Selector validateTakeValue_forKeyPath_ = "validateTakeValue:forKeyPath:";
			public static readonly Selector validateValue_forKey_ = "validateValue:forKey:";
			public static readonly Selector validateValue_forKey_error_ = "validateValue:forKey:error:";
			public static readonly Selector validateValue_forKeyPath_error_ = "validateValue:forKeyPath:error:";
			public static readonly Selector valueAtIndex_inPropertyWithKey_ = "valueAtIndex:inPropertyWithKey:";
			public static readonly Selector valueForKey_ = "valueForKey:";
			public static readonly Selector valueForKeyPath_ = "valueForKeyPath:";
			public static readonly Selector valueForUndefinedKey_ = "valueForUndefinedKey:";
			public static readonly Selector valuesForKeys_ = "valuesForKeys:";
			public static readonly Selector valueWithName_inPropertyWithKey_ = "valueWithName:inPropertyWithKey:";
			public static readonly Selector valueWithUniqueID_inPropertyWithKey_ = "valueWithUniqueID:inPropertyWithKey:";
			public static readonly Selector version = "version";
			public static readonly Selector willChange_valuesAtIndexes_forKey_ = "willChange:valuesAtIndexes:forKey:";
			public static readonly Selector willChangeValueForKey_ = "willChangeValueForKey:";
			public static readonly Selector willChangeValueForKey_withSetMutation_usingObjects_ = "willChangeValueForKey:withSetMutation:usingObjects:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectSpecifier ) )]
	public struct NSObjectSpecifier : IEquatable<NSObjectSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSObjectSpecifier;
		public static implicit operator IntPtr( NSObjectSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSObjectSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSObjectSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSObjectSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSObjectSpecifier value1, NSObjectSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSObjectSpecifier value1, NSObjectSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSObjectSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSObjectSpecifier alloc() {
			return new NSObjectSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSStream ) )]
	public struct NSOutputStream : IEquatable<NSOutputStream> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSOutputStream;
		public static implicit operator IntPtr( NSOutputStream value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSOutputStream value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSOutputStream?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSOutputStream value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSOutputStream value1, NSOutputStream value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSOutputStream value1, NSOutputStream value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSOutputStream( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSOutputStream alloc() {
			return new NSOutputStream( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject outputStreamToBuffer_capacity_( IntPtr buffer, uint capacity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outputStreamToBuffer_capacity_( ClassHandle, CachedSelectors.outputStreamToBuffer_capacity_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), buffer, capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject outputStreamToFileAtPath_append_( string path, bool append ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.outputStreamToFileAtPath_append_( ClassHandle, CachedSelectors.outputStreamToFileAtPath_append_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappedpath, append );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject outputStreamToMemory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outputStreamToMemory( ClassHandle, CachedSelectors.outputStreamToMemory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool hasSpaceAvailable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasSpaceAvailable( Handle, CachedSelectors.hasSpaceAvailable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int write_maxLength_( IntPtr write, uint maxLength ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.write_maxLength_( Handle, CachedSelectors.write_maxLength_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), write, maxLength );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasSpaceAvailable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outputStreamToBuffer_capacity_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr buffer, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outputStreamToFileAtPath_append_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, bool append );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outputStreamToMemory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int write_maxLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr write, uint maxLength );
		}
		static internal class CachedSelectors {
			public static readonly Selector hasSpaceAvailable = "hasSpaceAvailable";
			public static readonly Selector outputStreamToBuffer_capacity_ = "outputStreamToBuffer:capacity:";
			public static readonly Selector outputStreamToFileAtPath_append_ = "outputStreamToFileAtPath:append:";
			public static readonly Selector outputStreamToMemory = "outputStreamToMemory";
			public static readonly Selector write_maxLength_ = "write:maxLength:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSParser : IEquatable<NSParser> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSParser;
		public static implicit operator IntPtr( NSParser value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSParser value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSParser?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSParser value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSParser value1, NSParser value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSParser value1, NSParser value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSParser( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSParser alloc() {
			return new NSParser( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject parsedGrammarForString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parsedGrammarForString_( ClassHandle, CachedSelectors.parsedGrammarForString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject expect_( NObjective.RuntimeObject expect ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expect_( Handle, CachedSelectors.expect_, out ___occuredException, sizeof( NObjective.RuntimeObject ), expect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void expectEndOfInput() {
			RuntimeObject ___occuredException;
			NativeMethods.expectEndOfInput( Handle, CachedSelectors.expectEndOfInput, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void expectSeparatorEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			NativeMethods.expectSeparatorEqualTo_( Handle, CachedSelectors.expectSeparatorEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void expectTokenEqualTo_mask_( NObjective.RuntimeObject to, uint mask ) {
			RuntimeObject ___occuredException;
			NativeMethods.expectTokenEqualTo_mask_( Handle, CachedSelectors.expectTokenEqualTo_mask_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), to, mask );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSParser initWithGrammar_( NObjective.RuntimeObject grammar ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGrammar_( Handle, CachedSelectors.initWithGrammar_, out ___occuredException, sizeof( NObjective.RuntimeObject ), grammar );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSParser( ___result );
		}
		unsafe public void nextToken() {
			RuntimeObject ___occuredException;
			NativeMethods.nextToken( Handle, CachedSelectors.nextToken, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject parse_( NObjective.RuntimeObject parse ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parse_( Handle, CachedSelectors.parse_, out ___occuredException, sizeof( NObjective.RuntimeObject ), parse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseData( Handle, CachedSelectors.parseData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseDictionaryOfKey_value_( NObjective.RuntimeObject key, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseDictionaryOfKey_value_( Handle, CachedSelectors.parseDictionaryOfKey_value_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void parseError_( NObjective.RuntimeObject error ) {
			RuntimeObject ___occuredException;
			NativeMethods.parseError_( Handle, CachedSelectors.parseError_, out ___occuredException, sizeof( NObjective.RuntimeObject ), error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject parseMetaRuleBody() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseMetaRuleBody( Handle, CachedSelectors.parseMetaRuleBody, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseMetaSyntaxLeafResultShouldBeSkipped_( System.IntPtr skipped ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseMetaSyntaxLeafResultShouldBeSkipped_( Handle, CachedSelectors.parseMetaSyntaxLeafResultShouldBeSkipped_, out ___occuredException, sizeof( System.IntPtr ), skipped );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseMetaSyntaxSequence() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseMetaSyntaxSequence( Handle, CachedSelectors.parseMetaSyntaxSequence, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseNumber( Handle, CachedSelectors.parseNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseQuotedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseQuotedString( Handle, CachedSelectors.parseQuotedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseSeparator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseSeparator( Handle, CachedSelectors.parseSeparator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseSeparatorEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseSeparatorEqualTo_( Handle, CachedSelectors.parseSeparatorEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseString( Handle, CachedSelectors.parseString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseSuite_separator_allowOmitLastSeparator_( NObjective.RuntimeObject suite, NObjective.RuntimeObject separator, char allowOmitLastSeparator ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseSuite_separator_allowOmitLastSeparator_( Handle, CachedSelectors.parseSuite_separator_allowOmitLastSeparator_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), suite, separator, allowOmitLastSeparator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseSuiteOfPairsKey_separator_value_separator_allowOmitLastSeparator_( NObjective.RuntimeObject key, NObjective.RuntimeObject separator, NObjective.RuntimeObject value, NObjective.RuntimeObject separator2, char allowOmitLastSeparator ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseSuiteOfPairsKey_separator_value_separator_allowOmitLastSeparator_( Handle, CachedSelectors.parseSuiteOfPairsKey_separator_value_separator_allowOmitLastSeparator_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), key, separator, value, separator2, allowOmitLastSeparator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseTokenEqualTo_mask_( NObjective.RuntimeObject to, uint mask ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseTokenEqualTo_mask_( Handle, CachedSelectors.parseTokenEqualTo_mask_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), to, mask );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseTokenWithMask_( uint mask ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseTokenWithMask_( Handle, CachedSelectors.parseTokenWithMask_, out ___occuredException, sizeof( uint ), mask );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parseUnquotedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseUnquotedString( Handle, CachedSelectors.parseUnquotedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint peekTokenType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peekTokenType( Handle, CachedSelectors.peekTokenType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject peekTokenWithMask_( uint mask ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peekTokenWithMask_( Handle, CachedSelectors.peekTokenWithMask_, out ___occuredException, sizeof( uint ), mask );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setEnableFloatParsing_( char parsing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEnableFloatParsing_( Handle, CachedSelectors.setEnableFloatParsing_, out ___occuredException, sizeof( char ), parsing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEnableIntegerParsing_( char parsing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEnableIntegerParsing_( Handle, CachedSelectors.setEnableIntegerParsing_, out ___occuredException, sizeof( char ), parsing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMonoCharacterSeparatorCharacters_usualPunctuation_( NObjective.RuntimeObject characters, char usualPunctuation ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMonoCharacterSeparatorCharacters_usualPunctuation_( Handle, CachedSelectors.setMonoCharacterSeparatorCharacters_usualPunctuation_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), characters, usualPunctuation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMultipleCharacterSeparators_( NObjective.RuntimeObject separators ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMultipleCharacterSeparators_( Handle, CachedSelectors.setMultipleCharacterSeparators_, out ___occuredException, sizeof( NObjective.RuntimeObject ), separators );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setQuotingWithSingleQuote_double_( char quote, char @double ) {
			RuntimeObject ___occuredException;
			NativeMethods.setQuotingWithSingleQuote_double_( Handle, CachedSelectors.setQuotingWithSingleQuote_double_, out ___occuredException, sizeof( char ) + sizeof( char ), quote, @double );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.setString_( Handle, CachedSelectors.setString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUnquotedStringCharacters_lowerCaseLetters_upperCaseLetters_digits_( NObjective.RuntimeObject characters, char lowerCaseLetters, char upperCaseLetters, char digits ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUnquotedStringCharacters_lowerCaseLetters_upperCaseLetters_digits_( Handle, CachedSelectors.setUnquotedStringCharacters_lowerCaseLetters_upperCaseLetters_digits_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ), characters, lowerCaseLetters, upperCaseLetters, digits );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUnquotedStringStartCharacters_lowerCaseLetters_upperCaseLetters_digits_( NObjective.RuntimeObject characters, char lowerCaseLetters, char upperCaseLetters, char digits ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUnquotedStringStartCharacters_lowerCaseLetters_upperCaseLetters_digits_( Handle, CachedSelectors.setUnquotedStringStartCharacters_lowerCaseLetters_upperCaseLetters_digits_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ), characters, lowerCaseLetters, upperCaseLetters, digits );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject expect );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void expectEndOfInput( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void expectSeparatorEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void expectTokenEqualTo_mask_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to, uint mask );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGrammar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject grammar );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nextToken( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject parse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parsedGrammarForString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseDictionaryOfKey_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void parseError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseMetaRuleBody( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseMetaSyntaxLeafResultShouldBeSkipped_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr skipped );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseMetaSyntaxSequence( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseQuotedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseSeparator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseSeparatorEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseSuite_separator_allowOmitLastSeparator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject suite, NObjective.RuntimeObject separator, char allowOmitLastSeparator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseSuiteOfPairsKey_separator_value_separator_allowOmitLastSeparator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject separator, NObjective.RuntimeObject value, NObjective.RuntimeObject separator2, char allowOmitLastSeparator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseTokenEqualTo_mask_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to, uint mask );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseTokenWithMask_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint mask );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseUnquotedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint peekTokenType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr peekTokenWithMask_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint mask );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEnableFloatParsing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char parsing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEnableIntegerParsing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char parsing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMonoCharacterSeparatorCharacters_usualPunctuation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject characters, char usualPunctuation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMultipleCharacterSeparators_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject separators );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setQuotingWithSingleQuote_double_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char quote, char @double );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUnquotedStringCharacters_lowerCaseLetters_upperCaseLetters_digits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject characters, char lowerCaseLetters, char upperCaseLetters, char digits );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUnquotedStringStartCharacters_lowerCaseLetters_upperCaseLetters_digits_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject characters, char lowerCaseLetters, char upperCaseLetters, char digits );
		}
		static internal class CachedSelectors {
			public static readonly Selector expect_ = "expect:";
			public static readonly Selector expectEndOfInput = "expectEndOfInput";
			public static readonly Selector expectSeparatorEqualTo_ = "expectSeparatorEqualTo:";
			public static readonly Selector expectTokenEqualTo_mask_ = "expectTokenEqualTo:mask:";
			public static readonly Selector initWithGrammar_ = "initWithGrammar:";
			public static readonly Selector nextToken = "nextToken";
			public static readonly Selector parse_ = "parse:";
			public static readonly Selector parseData = "parseData";
			public static readonly Selector parsedGrammarForString_ = "parsedGrammarForString:";
			public static readonly Selector parseDictionaryOfKey_value_ = "parseDictionaryOfKey:value:";
			public static readonly Selector parseError_ = "parseError:";
			public static readonly Selector parseMetaRuleBody = "parseMetaRuleBody";
			public static readonly Selector parseMetaSyntaxLeafResultShouldBeSkipped_ = "parseMetaSyntaxLeafResultShouldBeSkipped:";
			public static readonly Selector parseMetaSyntaxSequence = "parseMetaSyntaxSequence";
			public static readonly Selector parseNumber = "parseNumber";
			public static readonly Selector parseQuotedString = "parseQuotedString";
			public static readonly Selector parseSeparator = "parseSeparator";
			public static readonly Selector parseSeparatorEqualTo_ = "parseSeparatorEqualTo:";
			public static readonly Selector parseString = "parseString";
			public static readonly Selector parseSuite_separator_allowOmitLastSeparator_ = "parseSuite:separator:allowOmitLastSeparator:";
			public static readonly Selector parseSuiteOfPairsKey_separator_value_separator_allowOmitLastSeparator_ = "parseSuiteOfPairsKey:separator:value:separator:allowOmitLastSeparator:";
			public static readonly Selector parseTokenEqualTo_mask_ = "parseTokenEqualTo:mask:";
			public static readonly Selector parseTokenWithMask_ = "parseTokenWithMask:";
			public static readonly Selector parseUnquotedString = "parseUnquotedString";
			public static readonly Selector peekTokenType = "peekTokenType";
			public static readonly Selector peekTokenWithMask_ = "peekTokenWithMask:";
			public static readonly Selector setEnableFloatParsing_ = "setEnableFloatParsing:";
			public static readonly Selector setEnableIntegerParsing_ = "setEnableIntegerParsing:";
			public static readonly Selector setMonoCharacterSeparatorCharacters_usualPunctuation_ = "setMonoCharacterSeparatorCharacters:usualPunctuation:";
			public static readonly Selector setMultipleCharacterSeparators_ = "setMultipleCharacterSeparators:";
			public static readonly Selector setQuotingWithSingleQuote_double_ = "setQuotingWithSingleQuote:double:";
			public static readonly Selector setString_ = "setString:";
			public static readonly Selector setUnquotedStringCharacters_lowerCaseLetters_upperCaseLetters_digits_ = "setUnquotedStringCharacters:lowerCaseLetters:upperCaseLetters:digits:";
			public static readonly Selector setUnquotedStringStartCharacters_lowerCaseLetters_upperCaseLetters_digits_ = "setUnquotedStringStartCharacters:lowerCaseLetters:upperCaseLetters:digits:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSString ) )]
	public struct NSPathStore2 : IEquatable<NSPathStore2> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPathStore2;
		public static implicit operator IntPtr( NSPathStore2 value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPathStore2 value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPathStore2?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPathStore2 value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPathStore2 value1, NSPathStore2 value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPathStore2 value1, NSPathStore2 value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPathStore2( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPathStore2 alloc() {
			return new NSPathStore2( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject pathStoreWithCharacters_length_( System.IntPtr characters, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathStoreWithCharacters_length_( ClassHandle, CachedSelectors.pathStoreWithCharacters_length_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), characters, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathStoreWithCharacters_length_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr characters, uint length );
		}
		static internal class CachedSelectors {
			public static readonly Selector pathStoreWithCharacters_length_ = "pathStoreWithCharacters:length:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSPipe : IEquatable<NSPipe> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPipe;
		public static implicit operator IntPtr( NSPipe value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPipe value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPipe?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPipe value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPipe value1, NSPipe value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPipe value1, NSPipe value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPipe( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPipe alloc() {
			return new NSPipe( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject pipe() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pipe( ClassHandle, CachedSelectors.pipe, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSFileHandle fileHandleForReading() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileHandleForReading( Handle, CachedSelectors.fileHandleForReading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFileHandle( ___result );
		}
		unsafe public NSFileHandle fileHandleForWriting() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileHandleForWriting( Handle, CachedSelectors.fileHandleForWriting, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSFileHandle( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileHandleForReading( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileHandleForWriting( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pipe( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector fileHandleForReading = "fileHandleForReading";
			public static readonly Selector fileHandleForWriting = "fileHandleForWriting";
			public static readonly Selector pipe = "pipe";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSArray ) )]
	public struct NSPlaceholderArray : IEquatable<NSPlaceholderArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPlaceholderArray;
		public static implicit operator IntPtr( NSPlaceholderArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPlaceholderArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPlaceholderArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPlaceholderArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPlaceholderArray value1, NSPlaceholderArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPlaceholderArray value1, NSPlaceholderArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPlaceholderArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPlaceholderArray alloc() {
			return new NSPlaceholderArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDictionary ) )]
	public struct NSPlaceholderDictionary : IEquatable<NSPlaceholderDictionary> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPlaceholderDictionary;
		public static implicit operator IntPtr( NSPlaceholderDictionary value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPlaceholderDictionary value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPlaceholderDictionary?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPlaceholderDictionary value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPlaceholderDictionary value1, NSPlaceholderDictionary value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPlaceholderDictionary value1, NSPlaceholderDictionary value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPlaceholderDictionary( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPlaceholderDictionary alloc() {
			return new NSPlaceholderDictionary( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableArray ) )]
	public struct NSPlaceholderMutableArray : IEquatable<NSPlaceholderMutableArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPlaceholderMutableArray;
		public static implicit operator IntPtr( NSPlaceholderMutableArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPlaceholderMutableArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPlaceholderMutableArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPlaceholderMutableArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPlaceholderMutableArray value1, NSPlaceholderMutableArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPlaceholderMutableArray value1, NSPlaceholderMutableArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPlaceholderMutableArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPlaceholderMutableArray alloc() {
			return new NSPlaceholderMutableArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableDictionary ) )]
	public struct NSPlaceholderMutableDictionary : IEquatable<NSPlaceholderMutableDictionary> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPlaceholderMutableDictionary;
		public static implicit operator IntPtr( NSPlaceholderMutableDictionary value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPlaceholderMutableDictionary value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPlaceholderMutableDictionary?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPlaceholderMutableDictionary value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPlaceholderMutableDictionary value1, NSPlaceholderMutableDictionary value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPlaceholderMutableDictionary value1, NSPlaceholderMutableDictionary value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPlaceholderMutableDictionary( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPlaceholderMutableDictionary alloc() {
			return new NSPlaceholderMutableDictionary( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableSet ) )]
	public struct NSPlaceholderMutableSet : IEquatable<NSPlaceholderMutableSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPlaceholderMutableSet;
		public static implicit operator IntPtr( NSPlaceholderMutableSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPlaceholderMutableSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPlaceholderMutableSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPlaceholderMutableSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPlaceholderMutableSet value1, NSPlaceholderMutableSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPlaceholderMutableSet value1, NSPlaceholderMutableSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPlaceholderMutableSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPlaceholderMutableSet alloc() {
			return new NSPlaceholderMutableSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableString ) )]
	public struct NSPlaceholderMutableString : IEquatable<NSPlaceholderMutableString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPlaceholderMutableString;
		public static implicit operator IntPtr( NSPlaceholderMutableString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPlaceholderMutableString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPlaceholderMutableString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPlaceholderMutableString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPlaceholderMutableString value1, NSPlaceholderMutableString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPlaceholderMutableString value1, NSPlaceholderMutableString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPlaceholderMutableString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPlaceholderMutableString alloc() {
			return new NSPlaceholderMutableString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSPlaceholderMutableString initWithBytes_length_encoding_( System.IntPtr bytes, uint length, uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBytes_length_encoding_( Handle, CachedSelectors.initWithBytes_length_encoding_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( uint ), bytes, length, encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPlaceholderMutableString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBytes_length_encoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr bytes, uint length, uint encoding );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithBytes_length_encoding_ = "initWithBytes:length:encoding:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPlaceholderValue ) )]
	public struct NSPlaceholderNumber : IEquatable<NSPlaceholderNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPlaceholderNumber;
		public static implicit operator IntPtr( NSPlaceholderNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPlaceholderNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPlaceholderNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPlaceholderNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPlaceholderNumber value1, NSPlaceholderNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPlaceholderNumber value1, NSPlaceholderNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPlaceholderNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPlaceholderNumber alloc() {
			return new NSPlaceholderNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSSet ) )]
	public struct NSPlaceholderSet : IEquatable<NSPlaceholderSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPlaceholderSet;
		public static implicit operator IntPtr( NSPlaceholderSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPlaceholderSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPlaceholderSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPlaceholderSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPlaceholderSet value1, NSPlaceholderSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPlaceholderSet value1, NSPlaceholderSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPlaceholderSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPlaceholderSet alloc() {
			return new NSPlaceholderSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSString ) )]
	public struct NSPlaceholderString : IEquatable<NSPlaceholderString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPlaceholderString;
		public static implicit operator IntPtr( NSPlaceholderString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPlaceholderString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPlaceholderString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPlaceholderString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPlaceholderString value1, NSPlaceholderString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPlaceholderString value1, NSPlaceholderString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPlaceholderString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPlaceholderString alloc() {
			return new NSPlaceholderString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSPlaceholderString initWithBytes_length_encoding_( System.IntPtr bytes, uint length, uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBytes_length_encoding_( Handle, CachedSelectors.initWithBytes_length_encoding_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( uint ), bytes, length, encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPlaceholderString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBytes_length_encoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr bytes, uint length, uint encoding );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithBytes_length_encoding_ = "initWithBytes:length:encoding:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSNumber ) )]
	public struct NSPlaceholderValue : IEquatable<NSPlaceholderValue> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPlaceholderValue;
		public static implicit operator IntPtr( NSPlaceholderValue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPlaceholderValue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPlaceholderValue?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPlaceholderValue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPlaceholderValue value1, NSPlaceholderValue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPlaceholderValue value1, NSPlaceholderValue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPlaceholderValue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPlaceholderValue alloc() {
			return new NSPlaceholderValue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSPort : IEquatable<NSPort> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPort;
		public static implicit operator IntPtr( NSPort value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPort value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPort?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPort value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPort value1, NSPort value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPort value1, NSPort value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPort( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPort alloc() {
			return new NSPort( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSPort port() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.port( ClassHandle, CachedSelectors.port, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public static NSPort portWithMachPort_( int port ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.portWithMachPort_( ClassHandle, CachedSelectors.portWithMachPort_, out ___occuredException, sizeof( int ), port );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public void addConnection_toRunLoop_forMode_( NSConnection connection, NSRunLoop toRunLoop, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.addConnection_toRunLoop_forMode_( Handle, CachedSelectors.addConnection_toRunLoop_forMode_, out ___occuredException, sizeof( NSConnection ) + sizeof( NSRunLoop ) + sizeof( IntPtr ), connection, toRunLoop, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSPort initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public NSPort initWithMachPort_( int port ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMachPort_( Handle, CachedSelectors.initWithMachPort_, out ___occuredException, sizeof( int ), port );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public void invalidate() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidate( Handle, CachedSelectors.invalidate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isValid() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isValid( Handle, CachedSelectors.isValid, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int machPort() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.machPort( Handle, CachedSelectors.machPort, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void removeConnection_fromRunLoop_forMode_( NSConnection connection, NSRunLoop fromRunLoop, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.removeConnection_fromRunLoop_forMode_( Handle, CachedSelectors.removeConnection_fromRunLoop_forMode_, out ___occuredException, sizeof( NSConnection ) + sizeof( NSRunLoop ) + sizeof( IntPtr ), connection, fromRunLoop, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeFromRunLoop_forMode_( NSRunLoop loop, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.removeFromRunLoop_forMode_( Handle, CachedSelectors.removeFromRunLoop_forMode_, out ___occuredException, sizeof( NSRunLoop ) + sizeof( IntPtr ), loop, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint reservedSpaceLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reservedSpaceLength( Handle, CachedSelectors.reservedSpaceLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void scheduleInRunLoop_forMode_( NSRunLoop loop, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.scheduleInRunLoop_forMode_( Handle, CachedSelectors.scheduleInRunLoop_forMode_, out ___occuredException, sizeof( NSRunLoop ) + sizeof( IntPtr ), loop, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool sendBeforeDate_components_from_reserved_( NSDate date, NSMutableArray components, NSPort @from, uint reserved ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendBeforeDate_components_from_reserved_( Handle, CachedSelectors.sendBeforeDate_components_from_reserved_, out ___occuredException, sizeof( NSDate ) + sizeof( NSMutableArray ) + sizeof( NSPort ) + sizeof( uint ), date, components, @from, reserved );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool sendBeforeDate_msgid_components_from_reserved_( NSDate date, uint msgid, NSMutableArray components, NSPort @from, uint reserved ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendBeforeDate_msgid_components_from_reserved_( Handle, CachedSelectors.sendBeforeDate_msgid_components_from_reserved_, out ___occuredException, sizeof( NSDate ) + sizeof( uint ) + sizeof( NSMutableArray ) + sizeof( NSPort ) + sizeof( uint ), date, msgid, components, @from, reserved );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addConnection_toRunLoop_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSConnection connection, NSRunLoop toRunLoop, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithMachPort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int port );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isValid( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int machPort( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr port( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr portWithMachPort_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int port );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeConnection_fromRunLoop_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSConnection connection, NSRunLoop fromRunLoop, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeFromRunLoop_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRunLoop loop, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint reservedSpaceLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scheduleInRunLoop_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRunLoop loop, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool sendBeforeDate_components_from_reserved_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date, NSMutableArray components, NSPort @from, uint reserved );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool sendBeforeDate_msgid_components_from_reserved_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date, uint msgid, NSMutableArray components, NSPort @from, uint reserved );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
		}
		static internal class CachedSelectors {
			public static readonly Selector addConnection_toRunLoop_forMode_ = "addConnection:toRunLoop:forMode:";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithMachPort_ = "initWithMachPort:";
			public static readonly Selector invalidate = "invalidate";
			public static readonly Selector isValid = "isValid";
			public static readonly Selector machPort = "machPort";
			public static readonly Selector port = "port";
			public static readonly Selector portWithMachPort_ = "portWithMachPort:";
			public static readonly Selector removeConnection_fromRunLoop_forMode_ = "removeConnection:fromRunLoop:forMode:";
			public static readonly Selector removeFromRunLoop_forMode_ = "removeFromRunLoop:forMode:";
			public static readonly Selector reservedSpaceLength = "reservedSpaceLength";
			public static readonly Selector scheduleInRunLoop_forMode_ = "scheduleInRunLoop:forMode:";
			public static readonly Selector sendBeforeDate_components_from_reserved_ = "sendBeforeDate:components:from:reserved:";
			public static readonly Selector sendBeforeDate_msgid_components_from_reserved_ = "sendBeforeDate:msgid:components:from:reserved:";
			public static readonly Selector setDelegate_ = "setDelegate:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCoder ) )]
	public struct NSPortCoder : IEquatable<NSPortCoder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPortCoder;
		public static implicit operator IntPtr( NSPortCoder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPortCoder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPortCoder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPortCoder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPortCoder value1, NSPortCoder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPortCoder value1, NSPortCoder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPortCoder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPortCoder alloc() {
			return new NSPortCoder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSPortCoder portCoderWithReceivePort_sendPort_components_( NSPort port, NSPort sendPort, NSArray components ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.portCoderWithReceivePort_sendPort_components_( ClassHandle, CachedSelectors.portCoderWithReceivePort_sendPort_components_, out ___occuredException, sizeof( NSPort ) + sizeof( NSPort ) + sizeof( NSArray ), port, sendPort, components );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPortCoder( ___result );
		}
		unsafe public NSConnection connection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connection( Handle, CachedSelectors.connection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSConnection( ___result );
		}
		unsafe public NSPort decodePortObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decodePortObject( Handle, CachedSelectors.decodePortObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public void dispatch() {
			RuntimeObject ___occuredException;
			NativeMethods.dispatch( Handle, CachedSelectors.dispatch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodePortObject_( NSPort @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodePortObject_( Handle, CachedSelectors.encodePortObject_, out ___occuredException, sizeof( NSPort ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSPortCoder initWithReceivePort_sendPort_components_( NSPort port, NSPort sendPort, NSArray components ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithReceivePort_sendPort_components_( Handle, CachedSelectors.initWithReceivePort_sendPort_components_, out ___occuredException, sizeof( NSPort ) + sizeof( NSPort ) + sizeof( NSArray ), port, sendPort, components );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPortCoder( ___result );
		}
		unsafe public bool isBycopy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isBycopy( Handle, CachedSelectors.isBycopy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isByref() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isByref( Handle, CachedSelectors.isByref, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decodePortObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dispatch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodePortObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPort @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithReceivePort_sendPort_components_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPort port, NSPort sendPort, NSArray components );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isBycopy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isByref( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr portCoderWithReceivePort_sendPort_components_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPort port, NSPort sendPort, NSArray components );
		}
		static internal class CachedSelectors {
			public static readonly Selector connection = "connection";
			public static readonly Selector decodePortObject = "decodePortObject";
			public static readonly Selector dispatch = "dispatch";
			public static readonly Selector encodePortObject_ = "encodePortObject:";
			public static readonly Selector initWithReceivePort_sendPort_components_ = "initWithReceivePort:sendPort:components:";
			public static readonly Selector isBycopy = "isBycopy";
			public static readonly Selector isByref = "isByref";
			public static readonly Selector portCoderWithReceivePort_sendPort_components_ = "portCoderWithReceivePort:sendPort:components:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSPortMessage : IEquatable<NSPortMessage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPortMessage;
		public static implicit operator IntPtr( NSPortMessage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPortMessage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPortMessage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPortMessage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPortMessage value1, NSPortMessage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPortMessage value1, NSPortMessage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPortMessage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPortMessage alloc() {
			return new NSPortMessage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSArray components() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.components( Handle, CachedSelectors.components, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSPortMessage initWithMachMessage_( System.IntPtr message ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMachMessage_( Handle, CachedSelectors.initWithMachMessage_, out ___occuredException, sizeof( System.IntPtr ), message );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPortMessage( ___result );
		}
		unsafe public NSPortMessage initWithReceivePort_sendPort_components_( NObjective.RuntimeObject port, NObjective.RuntimeObject sendPort, NObjective.RuntimeObject components ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithReceivePort_sendPort_components_( Handle, CachedSelectors.initWithReceivePort_sendPort_components_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), port, sendPort, components );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPortMessage( ___result );
		}
		unsafe public NSPortMessage initWithSendPort_receivePort_components_( NSPort port, NSPort receivePort, NSArray components ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSendPort_receivePort_components_( Handle, CachedSelectors.initWithSendPort_receivePort_components_, out ___occuredException, sizeof( NSPort ) + sizeof( NSPort ) + sizeof( NSArray ), port, receivePort, components );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPortMessage( ___result );
		}
		unsafe public uint msgid() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.msgid( Handle, CachedSelectors.msgid, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSPort receivePort() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.receivePort( Handle, CachedSelectors.receivePort, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public bool sendBeforeDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendBeforeDate_( Handle, CachedSelectors.sendBeforeDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSPort sendPort() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendPort( Handle, CachedSelectors.sendPort, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public void setMsgid_( uint msgid ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMsgid_( Handle, CachedSelectors.setMsgid_, out ___occuredException, sizeof( uint ), msgid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr components( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithMachMessage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr message );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithReceivePort_sendPort_components_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject port, NObjective.RuntimeObject sendPort, NObjective.RuntimeObject components );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSendPort_receivePort_components_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPort port, NSPort receivePort, NSArray components );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint msgid( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr receivePort( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool sendBeforeDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sendPort( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMsgid_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint msgid );
		}
		static internal class CachedSelectors {
			public static readonly Selector components = "components";
			public static readonly Selector initWithMachMessage_ = "initWithMachMessage:";
			public static readonly Selector initWithReceivePort_sendPort_components_ = "initWithReceivePort:sendPort:components:";
			public static readonly Selector initWithSendPort_receivePort_components_ = "initWithSendPort:receivePort:components:";
			public static readonly Selector msgid = "msgid";
			public static readonly Selector receivePort = "receivePort";
			public static readonly Selector sendBeforeDate_ = "sendBeforeDate:";
			public static readonly Selector sendPort = "sendPort";
			public static readonly Selector setMsgid_ = "setMsgid:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSPortNameServer : IEquatable<NSPortNameServer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPortNameServer;
		public static implicit operator IntPtr( NSPortNameServer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPortNameServer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPortNameServer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPortNameServer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPortNameServer value1, NSPortNameServer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPortNameServer value1, NSPortNameServer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPortNameServer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPortNameServer alloc() {
			return new NSPortNameServer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject defaultPortNameServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultPortNameServer( ClassHandle, CachedSelectors.defaultPortNameServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSPortNameServer systemDefaultPortNameServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemDefaultPortNameServer( ClassHandle, CachedSelectors.systemDefaultPortNameServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPortNameServer( ___result );
		}
		unsafe public NSPort portForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.portForName_( Handle, CachedSelectors.portForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public NSPort portForName_host_( string name, string host ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedhost = Runtime.CreateStringProxy( host );
			var ___result = NativeMethods.portForName_host_( Handle, CachedSelectors.portForName_host_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedhost );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedhost );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public NObjective.RuntimeObject portForName_onHost_( NObjective.RuntimeObject name, NObjective.RuntimeObject onHost ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.portForName_onHost_( Handle, CachedSelectors.portForName_onHost_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, onHost );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char registerPort_forName_( NObjective.RuntimeObject port, NObjective.RuntimeObject forName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.registerPort_forName_( Handle, CachedSelectors.registerPort_forName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), port, forName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool registerPort_name_( NSPort port, string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.registerPort_name_( Handle, CachedSelectors.registerPort_name_, out ___occuredException, sizeof( NSPort ) + sizeof( IntPtr ), port, ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool removePortForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.removePortForName_( Handle, CachedSelectors.removePortForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultPortNameServer( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr portForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr portForName_host_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr host );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr portForName_onHost_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject onHost );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char registerPort_forName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject port, NObjective.RuntimeObject forName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool registerPort_name_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPort port, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool removePortForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemDefaultPortNameServer( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector defaultPortNameServer = "defaultPortNameServer";
			public static readonly Selector portForName_ = "portForName:";
			public static readonly Selector portForName_host_ = "portForName:host:";
			public static readonly Selector portForName_onHost_ = "portForName:onHost:";
			public static readonly Selector registerPort_forName_ = "registerPort:forName:";
			public static readonly Selector registerPort_name_ = "registerPort:name:";
			public static readonly Selector removePortForName_ = "removePortForName:";
			public static readonly Selector systemDefaultPortNameServer = "systemDefaultPortNameServer";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSPositionalSpecifier : IEquatable<NSPositionalSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPositionalSpecifier;
		public static implicit operator IntPtr( NSPositionalSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPositionalSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPositionalSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPositionalSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPositionalSpecifier value1, NSPositionalSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPositionalSpecifier value1, NSPositionalSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPositionalSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPositionalSpecifier alloc() {
			return new NSPositionalSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void evaluate() {
			RuntimeObject ___occuredException;
			NativeMethods.evaluate( Handle, CachedSelectors.evaluate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSPositionalSpecifier initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPositionalSpecifier( ___result );
		}
		unsafe public NSPositionalSpecifier initWithPosition_objectSpecifier_( NSInsertionPosition position, NSScriptObjectSpecifier objectSpecifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPosition_objectSpecifier_( Handle, CachedSelectors.initWithPosition_objectSpecifier_, out ___occuredException, sizeof( NSInsertionPosition ) + sizeof( NSScriptObjectSpecifier ), position, objectSpecifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPositionalSpecifier( ___result );
		}
		unsafe public NObjective.RuntimeObject insertionContainer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertionContainer( Handle, CachedSelectors.insertionContainer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int insertionIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertionIndex( Handle, CachedSelectors.insertionIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string insertionKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertionKey( Handle, CachedSelectors.insertionKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool insertionReplaces() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertionReplaces( Handle, CachedSelectors.insertionReplaces, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setInsertionClassDescription_( NSScriptClassDescription description ) {
			RuntimeObject ___occuredException;
			NativeMethods.setInsertionClassDescription_( Handle, CachedSelectors.setInsertionClassDescription_, out ___occuredException, sizeof( NSScriptClassDescription ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void evaluate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPosition_objectSpecifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSInsertionPosition position, NSScriptObjectSpecifier objectSpecifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertionContainer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int insertionIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertionKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool insertionReplaces( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setInsertionClassDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptClassDescription description );
		}
		static internal class CachedSelectors {
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector evaluate = "evaluate";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithPosition_objectSpecifier_ = "initWithPosition:objectSpecifier:";
			public static readonly Selector insertionContainer = "insertionContainer";
			public static readonly Selector insertionIndex = "insertionIndex";
			public static readonly Selector insertionKey = "insertionKey";
			public static readonly Selector insertionReplaces = "insertionReplaces";
			public static readonly Selector setInsertionClassDescription_ = "setInsertionClassDescription:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSPredicate : IEquatable<NSPredicate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPredicate;
		public static implicit operator IntPtr( NSPredicate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPredicate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPredicate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPredicate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPredicate value1, NSPredicate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPredicate value1, NSPredicate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPredicate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPredicate alloc() {
			return new NSPredicate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		public static NSPredicate predicateWithFormat_( string format, params object[] variableArguments ) {
			return new NSPredicate( ClassHandle.InvokeIntPtrFast( CachedSelectors.predicateWithFormat_, CachedEncodings.__6F587D11, format, variableArguments ) );
		}
		unsafe public static NSPredicate predicateWithFormat_argumentArray_( string format, NSArray argumentArray ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			var ___result = NativeMethods.predicateWithFormat_argumentArray_( ClassHandle, CachedSelectors.predicateWithFormat_argumentArray_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSArray ), ___wrappedformat, argumentArray );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		unsafe public static NSPredicate predicateWithFormat_arguments_( string format, System.IntPtr arguments ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			var ___result = NativeMethods.predicateWithFormat_arguments_( ClassHandle, CachedSelectors.predicateWithFormat_arguments_, out ___occuredException, sizeof( IntPtr ) + sizeof( System.IntPtr ), ___wrappedformat, arguments );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		unsafe public static NSPredicate predicateWithValue_( bool value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateWithValue_( ClassHandle, CachedSelectors.predicateWithValue_, out ___occuredException, sizeof( bool ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		unsafe public void acceptVisitor_flags_( NObjective.RuntimeObject visitor, uint flags ) {
			RuntimeObject ___occuredException;
			NativeMethods.acceptVisitor_flags_( Handle, CachedSelectors.acceptVisitor_flags_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), visitor, flags );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool evaluateWithObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluateWithObject_( Handle, CachedSelectors.evaluateWithObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char evaluateWithObject_variableBindings_( NObjective.RuntimeObject @object, NObjective.RuntimeObject variableBindings ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluateWithObject_variableBindings_( Handle, CachedSelectors.evaluateWithObject_variableBindings_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, variableBindings );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject generateMetadataDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.generateMetadataDescription( Handle, CachedSelectors.generateMetadataDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSPredicate initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		unsafe public string predicateFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateFormat( Handle, CachedSelectors.predicateFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSPredicate predicateWithSubstitutionVariables_( NSDictionary variables ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateWithSubstitutionVariables_( Handle, CachedSelectors.predicateWithSubstitutionVariables_, out ___occuredException, sizeof( NSDictionary ), variables );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicate( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void acceptVisitor_flags_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visitor, uint flags );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool evaluateWithObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char evaluateWithObject_variableBindings_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject variableBindings );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr generateMetadataDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateWithFormat_argumentArray_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format, NSArray argumentArray );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateWithFormat_arguments_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format, System.IntPtr arguments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateWithSubstitutionVariables_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary variables );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateWithValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool value );
		}
		static internal class CachedEncodings {
			public static readonly RuntimeMethodEncoding __6F587D11 = "@12@0:4@8";
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptVisitor_flags_ = "acceptVisitor:flags:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector evaluateWithObject_ = "evaluateWithObject:";
			public static readonly Selector evaluateWithObject_variableBindings_ = "evaluateWithObject:variableBindings:";
			public static readonly Selector generateMetadataDescription = "generateMetadataDescription";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector predicateFormat = "predicateFormat";
			public static readonly Selector predicateWithFormat_ = "predicateWithFormat:";
			public static readonly Selector predicateWithFormat_argumentArray_ = "predicateWithFormat:argumentArray:";
			public static readonly Selector predicateWithFormat_arguments_ = "predicateWithFormat:arguments:";
			public static readonly Selector predicateWithSubstitutionVariables_ = "predicateWithSubstitutionVariables:";
			public static readonly Selector predicateWithValue_ = "predicateWithValue:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSPredicateOperator : IEquatable<NSPredicateOperator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPredicateOperator;
		public static implicit operator IntPtr( NSPredicateOperator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPredicateOperator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPredicateOperator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPredicateOperator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPredicateOperator value1, NSPredicateOperator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPredicateOperator value1, NSPredicateOperator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPredicateOperator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPredicateOperator alloc() {
			return new NSPredicateOperator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject operatorWithCustomSelector_modifier_( NObjective.Selector selector, int modifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.operatorWithCustomSelector_modifier_( ClassHandle, CachedSelectors.operatorWithCustomSelector_modifier_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( int ), selector, modifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject operatorWithType_modifier_options_( int type, int modifier, uint options ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.operatorWithType_modifier_options_( ClassHandle, CachedSelectors.operatorWithType_modifier_options_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( uint ), type, modifier, options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void acceptVisitor_flags_( NObjective.RuntimeObject visitor, uint flags ) {
			RuntimeObject ___occuredException;
			NativeMethods.acceptVisitor_flags_( Handle, CachedSelectors.acceptVisitor_flags_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), visitor, flags );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSPredicateOperator initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicateOperator( ___result );
		}
		unsafe public NSPredicateOperator initWithOperatorType_( int type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOperatorType_( Handle, CachedSelectors.initWithOperatorType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicateOperator( ___result );
		}
		unsafe public NSPredicateOperator initWithOperatorType_modifier_( int type, int modifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOperatorType_modifier_( Handle, CachedSelectors.initWithOperatorType_modifier_, out ___occuredException, sizeof( int ) + sizeof( int ), type, modifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPredicateOperator( ___result );
		}
		unsafe public int modifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modifier( Handle, CachedSelectors.modifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int operatorType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.operatorType( Handle, CachedSelectors.operatorType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint options() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.options( Handle, CachedSelectors.options, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public char performOperationUsingObject_andObject_( NObjective.RuntimeObject @object, NObjective.RuntimeObject andObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performOperationUsingObject_andObject_( Handle, CachedSelectors.performOperationUsingObject_andObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, andObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char performPrimitiveOperationUsingObject_andObject_( NObjective.RuntimeObject @object, NObjective.RuntimeObject andObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performPrimitiveOperationUsingObject_andObject_( Handle, CachedSelectors.performPrimitiveOperationUsingObject_andObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, andObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject predicateFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.predicateFormat( Handle, CachedSelectors.predicateFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.Selector selector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selector( Handle, CachedSelectors.selector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject symbol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.symbol( Handle, CachedSelectors.symbol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void acceptVisitor_flags_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visitor, uint flags );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOperatorType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOperatorType_modifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, int modifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int modifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int operatorType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr operatorWithCustomSelector_modifier_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, int modifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr operatorWithType_modifier_options_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, int modifier, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint options( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char performOperationUsingObject_andObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject andObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char performPrimitiveOperationUsingObject_andObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject andObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predicateFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector selector( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr symbol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptVisitor_flags_ = "acceptVisitor:flags:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithOperatorType_ = "initWithOperatorType:";
			public static readonly Selector initWithOperatorType_modifier_ = "initWithOperatorType:modifier:";
			public static readonly Selector modifier = "modifier";
			public static readonly Selector operatorType = "operatorType";
			public static readonly Selector operatorWithCustomSelector_modifier_ = "operatorWithCustomSelector:modifier:";
			public static readonly Selector operatorWithType_modifier_options_ = "operatorWithType:modifier:options:";
			public static readonly Selector options = "options";
			public static readonly Selector performOperationUsingObject_andObject_ = "performOperationUsingObject:andObject:";
			public static readonly Selector performPrimitiveOperationUsingObject_andObject_ = "performPrimitiveOperationUsingObject:andObject:";
			public static readonly Selector predicateFormat = "predicateFormat";
			public static readonly Selector selector = "selector";
			public static readonly Selector symbol = "symbol";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSProcessInfo : IEquatable<NSProcessInfo> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSProcessInfo;
		public static implicit operator IntPtr( NSProcessInfo value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSProcessInfo value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSProcessInfo?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSProcessInfo value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSProcessInfo value1, NSProcessInfo value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSProcessInfo value1, NSProcessInfo value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSProcessInfo( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSProcessInfo alloc() {
			return new NSProcessInfo( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSProcessInfo processInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.processInfo( ClassHandle, CachedSelectors.processInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSProcessInfo( ___result );
		}
		unsafe public NSArray arguments() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arguments( Handle, CachedSelectors.arguments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSDictionary environment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.environment( Handle, CachedSelectors.environment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public string globallyUniqueString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.globallyUniqueString( Handle, CachedSelectors.globallyUniqueString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string hostName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hostName( Handle, CachedSelectors.hostName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint operatingSystem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.operatingSystem( Handle, CachedSelectors.operatingSystem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string operatingSystemName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.operatingSystemName( Handle, CachedSelectors.operatingSystemName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string operatingSystemVersionString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.operatingSystemVersionString( Handle, CachedSelectors.operatingSystemVersionString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int processIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.processIdentifier( Handle, CachedSelectors.processIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string processName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.processName( Handle, CachedSelectors.processName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void setArguments_( NObjective.RuntimeObject arguments ) {
			RuntimeObject ___occuredException;
			NativeMethods.setArguments_( Handle, CachedSelectors.setArguments_, out ___occuredException, sizeof( NObjective.RuntimeObject ), arguments );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProcessName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.setProcessName_( Handle, CachedSelectors.setProcessName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject userFullName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userFullName( Handle, CachedSelectors.userFullName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject userHomeDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userHomeDirectory( Handle, CachedSelectors.userHomeDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject userName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userName( Handle, CachedSelectors.userName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arguments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr environment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr globallyUniqueString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hostName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint operatingSystem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr operatingSystemName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr operatingSystemVersionString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int processIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr processInfo( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr processName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setArguments_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject arguments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProcessName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userFullName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userHomeDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector arguments = "arguments";
			public static readonly Selector environment = "environment";
			public static readonly Selector globallyUniqueString = "globallyUniqueString";
			public static readonly Selector hostName = "hostName";
			public static readonly Selector operatingSystem = "operatingSystem";
			public static readonly Selector operatingSystemName = "operatingSystemName";
			public static readonly Selector operatingSystemVersionString = "operatingSystemVersionString";
			public static readonly Selector processIdentifier = "processIdentifier";
			public static readonly Selector processInfo = "processInfo";
			public static readonly Selector processName = "processName";
			public static readonly Selector setArguments_ = "setArguments:";
			public static readonly Selector setProcessName_ = "setProcessName:";
			public static readonly Selector userFullName = "userFullName";
			public static readonly Selector userHomeDirectory = "userHomeDirectory";
			public static readonly Selector userName = "userName";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSPropertyListSerialization : IEquatable<NSPropertyListSerialization> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPropertyListSerialization;
		public static implicit operator IntPtr( NSPropertyListSerialization value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPropertyListSerialization value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPropertyListSerialization?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPropertyListSerialization value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPropertyListSerialization value1, NSPropertyListSerialization value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPropertyListSerialization value1, NSPropertyListSerialization value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPropertyListSerialization( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPropertyListSerialization alloc() {
			return new NSPropertyListSerialization( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSData dataFromPropertyList_format_errorDescription_( NObjective.RuntimeObject list, NSPropertyListFormat format, ref string errorDescription ) {
			RuntimeObject ___occuredException;
			var ___wrappederrorDescription = Runtime.CreateStringProxy( errorDescription );
			var ___result = NativeMethods.dataFromPropertyList_format_errorDescription_( ClassHandle, CachedSelectors.dataFromPropertyList_format_errorDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NSPropertyListFormat ) + sizeof( IntPtr ), list, format, ref ___wrappederrorDescription );
			errorDescription = Runtime.UnwrapNSString( ___wrappederrorDescription );
			Runtime.ReleaseNativeObject( ___wrappederrorDescription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public static bool propertyList_isValidForFormat_( NObjective.RuntimeObject list, NSPropertyListFormat isValidForFormat ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyList_isValidForFormat_( ClassHandle, CachedSelectors.propertyList_isValidForFormat_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NSPropertyListFormat ), list, isValidForFormat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject propertyListFromData_mutabilityOption_format_errorDescription_( NSData data, NSPropertyListMutabilityOptions mutabilityOption, IntPtr format, ref string errorDescription ) {
			RuntimeObject ___occuredException;
			var ___wrappederrorDescription = Runtime.CreateStringProxy( errorDescription );
			var ___result = NativeMethods.propertyListFromData_mutabilityOption_format_errorDescription_( ClassHandle, CachedSelectors.propertyListFromData_mutabilityOption_format_errorDescription_, out ___occuredException, sizeof( NSData ) + sizeof( NSPropertyListMutabilityOptions ) + sizeof( IntPtr ) + sizeof( IntPtr ), data, mutabilityOption, format, ref ___wrappederrorDescription );
			errorDescription = Runtime.UnwrapNSString( ___wrappederrorDescription );
			Runtime.ReleaseNativeObject( ___wrappederrorDescription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataFromPropertyList_format_errorDescription_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list, NSPropertyListFormat format, ref IntPtr errorDescription );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool propertyList_isValidForFormat_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list, NSPropertyListFormat isValidForFormat );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyListFromData_mutabilityOption_format_errorDescription_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data, NSPropertyListMutabilityOptions mutabilityOption, IntPtr format, ref IntPtr errorDescription );
		}
		static internal class CachedSelectors {
			public static readonly Selector dataFromPropertyList_format_errorDescription_ = "dataFromPropertyList:format:errorDescription:";
			public static readonly Selector propertyList_isValidForFormat_ = "propertyList:isValidForFormat:";
			public static readonly Selector propertyListFromData_mutabilityOption_format_errorDescription_ = "propertyListFromData:mutabilityOption:format:errorDescription:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectSpecifier ) )]
	public struct NSPropertySpecifier : IEquatable<NSPropertySpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSPropertySpecifier;
		public static implicit operator IntPtr( NSPropertySpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSPropertySpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSPropertySpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSPropertySpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSPropertySpecifier value1, NSPropertySpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSPropertySpecifier value1, NSPropertySpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSPropertySpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSPropertySpecifier alloc() {
			return new NSPropertySpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSProxy ) )]
	public struct NSProtocolChecker : IEquatable<NSProtocolChecker> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSProtocolChecker;
		public static implicit operator IntPtr( NSProtocolChecker value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSProtocolChecker value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSProtocolChecker?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSProtocolChecker value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSProtocolChecker value1, NSProtocolChecker value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSProtocolChecker value1, NSProtocolChecker value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSProtocolChecker( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSProtocolChecker alloc() {
			return new NSProtocolChecker( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSProtocolChecker protocolCheckerWithTarget_protocol_( NSObject target, Protocol protocol ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protocolCheckerWithTarget_protocol_( ClassHandle, CachedSelectors.protocolCheckerWithTarget_protocol_, out ___occuredException, sizeof( NSObject ) + sizeof( Protocol ), target, protocol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSProtocolChecker( ___result );
		}
		unsafe public NObjective.RuntimeObject awakeAfterUsingCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.awakeAfterUsingCoder_( Handle, CachedSelectors.awakeAfterUsingCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSProtocolChecker initWithTarget_protocol_( NSObject target, Protocol protocol ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTarget_protocol_( Handle, CachedSelectors.initWithTarget_protocol_, out ___occuredException, sizeof( NSObject ) + sizeof( Protocol ), target, protocol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSProtocolChecker( ___result );
		}
		unsafe public Protocol protocol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protocol( Handle, CachedSelectors.protocol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new Protocol( ___result );
		}
		unsafe public NObjective.RuntimeObject replacementObjectForPortCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementObjectForPortCoder_( Handle, CachedSelectors.replacementObjectForPortCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr awakeAfterUsingCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTarget_protocol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSObject target, Protocol protocol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr protocol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr protocolCheckerWithTarget_protocol_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSObject target, Protocol protocol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replacementObjectForPortCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector awakeAfterUsingCoder_ = "awakeAfterUsingCoder:";
			public static readonly Selector initWithTarget_protocol_ = "initWithTarget:protocol:";
			public static readonly Selector protocol = "protocol";
			public static readonly Selector protocolCheckerWithTarget_protocol_ = "protocolCheckerWithTarget:protocol:";
			public static readonly Selector replacementObjectForPortCoder_ = "replacementObjectForPortCoder:";
			public static readonly Selector target = "target";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public struct NSProxy : IEquatable<NSProxy> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSProxy;
		public override int GetHashCode() {
			return Handle.GetHashCode();
		}
		public static implicit operator IntPtr( NSProxy value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSProxy value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSProxy?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSProxy value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSProxy value1, NSProxy value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSProxy value1, NSProxy value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSProxy( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSProxy alloc() {
			return new NSProxy( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		public override string ToString() {
			return Handle.InvokeString( Selectors.description );
		}
		unsafe public static NObjective.RuntimeObject __autorelease() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__autorelease( ClassHandle, CachedSelectors.__autorelease, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeClass __class() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__class( ClassHandle, CachedSelectors.__class, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject __debugDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__debugDescription( ClassHandle, CachedSelectors.__debugDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static bool isAncestorOfObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAncestorOfObject_( ClassHandle, CachedSelectors.isAncestorOfObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char __isFault() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__isFault( ClassHandle, CachedSelectors.__isFault, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char __isProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__isProxy( ClassHandle, CachedSelectors.__isProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isSubclassOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSubclassOfClass_( ClassHandle, CachedSelectors.isSubclassOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject __performSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__performSelector_( ClassHandle, CachedSelectors.__performSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __performSelector_withObject_( NObjective.Selector selector, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__performSelector_withObject_( ClassHandle, CachedSelectors.__performSelector_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject __performSelector_withObject_withObject_( NObjective.Selector selector, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__performSelector_withObject_withObject_( ClassHandle, CachedSelectors.__performSelector_withObject_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), selector, withObject, withObject2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void __release() {
			RuntimeObject ___occuredException;
			NativeMethods.__release( ClassHandle, CachedSelectors.__release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static bool __respondsToSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__respondsToSelector_( ClassHandle, CachedSelectors.__respondsToSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject __retain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__retain( ClassHandle, CachedSelectors.__retain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint __retainCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__retainCount( ClassHandle, CachedSelectors.__retainCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static NObjective.RuntimeObject __self() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__self( ClassHandle, CachedSelectors.__self, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject autorelease() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autorelease( Handle, CachedSelectors.autorelease, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeClass @class() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@class( Handle, CachedSelectors.@class, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char conformsToProtocol_( NObjective.RuntimeObject protocol ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conformsToProtocol_( Handle, CachedSelectors.conformsToProtocol_, out ___occuredException, sizeof( NObjective.RuntimeObject ), protocol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject debugDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.debugDescription( Handle, CachedSelectors.debugDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string description() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.description( Handle, CachedSelectors.description, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void doesNotRecognizeSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.doesNotRecognizeSelector_( Handle, CachedSelectors.doesNotRecognizeSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject forward__( NObjective.Selector forward, System.IntPtr unnamedParameter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.forward__( Handle, CachedSelectors.forward__, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( System.IntPtr ), forward, unnamedParameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void forwardInvocation_( NSInvocation invocation ) {
			RuntimeObject ___occuredException;
			NativeMethods.forwardInvocation_( Handle, CachedSelectors.forwardInvocation_, out ___occuredException, sizeof( NSInvocation ), invocation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint hash() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hash( Handle, CachedSelectors.hash, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public bool isEqual_( NObjective.RuntimeObject equal ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqual_( Handle, CachedSelectors.isEqual_, out ___occuredException, sizeof( NObjective.RuntimeObject ), equal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isFault() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFault( Handle, CachedSelectors.isFault, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isKindOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isKindOfClass_( Handle, CachedSelectors.isKindOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isMemberOfClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMemberOfClass_( Handle, CachedSelectors.isMemberOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isProxy( Handle, CachedSelectors.isProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSMethodSignature methodSignatureForSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.methodSignatureForSelector_( Handle, CachedSelectors.methodSignatureForSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMethodSignature( ___result );
		}
		unsafe public NObjective.RuntimeObject performSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performSelector_( Handle, CachedSelectors.performSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject performSelector_withObject_( NObjective.Selector selector, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performSelector_withObject_( Handle, CachedSelectors.performSelector_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject performSelector_withObject_withObject_( NObjective.Selector selector, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performSelector_withObject_withObject_( Handle, CachedSelectors.performSelector_withObject_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), selector, withObject, withObject2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void release() {
			RuntimeObject ___occuredException;
			NativeMethods.release( Handle, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char respondsToSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.respondsToSelector_( Handle, CachedSelectors.respondsToSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject retain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.retain( Handle, CachedSelectors.retain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint retainCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.retainCount( Handle, CachedSelectors.retainCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject self() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.self( Handle, CachedSelectors.self, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeClass superclass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.superclass( Handle, CachedSelectors.superclass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char willForwardSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.willForwardSelector_( Handle, CachedSelectors.willForwardSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __autorelease( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass __class( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __debugDescription( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __isFault( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char __isProxy( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __performSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __performSelector_withObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __performSelector_withObject_withObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void __release( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool __respondsToSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __retain( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint __retainCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __self( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr autorelease( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass @class( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char conformsToProtocol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr debugDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr description( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doesNotRecognizeSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr forward__( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector forward, System.IntPtr unnamedParameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void forwardInvocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSInvocation invocation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint hash( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAncestorOfObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqual_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject equal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isFault( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isKindOfClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isMemberOfClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isProxy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSubclassOfClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr methodSignatureForSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr performSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr performSelector_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr performSelector_withObject_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char respondsToSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr retain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint retainCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr self( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass superclass( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char willForwardSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
		}
		static internal class CachedSelectors {
			public static readonly Selector __autorelease = "__autorelease";
			public static readonly Selector __class = "__class";
			public static readonly Selector __debugDescription = "__debugDescription";
			public static readonly Selector __isFault = "__isFault";
			public static readonly Selector __isProxy = "__isProxy";
			public static readonly Selector __performSelector_ = "__performSelector:";
			public static readonly Selector __performSelector_withObject_ = "__performSelector:withObject:";
			public static readonly Selector __performSelector_withObject_withObject_ = "__performSelector:withObject:withObject:";
			public static readonly Selector __release = "__release";
			public static readonly Selector __respondsToSelector_ = "__respondsToSelector:";
			public static readonly Selector __retain = "__retain";
			public static readonly Selector __retainCount = "__retainCount";
			public static readonly Selector __self = "__self";
			public static readonly Selector autorelease = "autorelease";
			public static readonly Selector @class = "class";
			public static readonly Selector conformsToProtocol_ = "conformsToProtocol:";
			public static readonly Selector debugDescription = "debugDescription";
			public static readonly Selector description = "description";
			public static readonly Selector doesNotRecognizeSelector_ = "doesNotRecognizeSelector:";
			public static readonly Selector forward__ = "forward::";
			public static readonly Selector forwardInvocation_ = "forwardInvocation:";
			public static readonly Selector hash = "hash";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector isAncestorOfObject_ = "isAncestorOfObject:";
			public static readonly Selector isEqual_ = "isEqual:";
			public static readonly Selector isFault = "isFault";
			public static readonly Selector isKindOfClass_ = "isKindOfClass:";
			public static readonly Selector isMemberOfClass_ = "isMemberOfClass:";
			public static readonly Selector isProxy = "isProxy";
			public static readonly Selector isSubclassOfClass_ = "isSubclassOfClass:";
			public static readonly Selector methodSignatureForSelector_ = "methodSignatureForSelector:";
			public static readonly Selector performSelector_ = "performSelector:";
			public static readonly Selector performSelector_withObject_ = "performSelector:withObject:";
			public static readonly Selector performSelector_withObject_withObject_ = "performSelector:withObject:withObject:";
			public static readonly Selector release = "release";
			public static readonly Selector respondsToSelector_ = "respondsToSelector:";
			public static readonly Selector retain = "retain";
			public static readonly Selector retainCount = "retainCount";
			public static readonly Selector self = "self";
			public static readonly Selector superclass = "superclass";
			public static readonly Selector willForwardSelector_ = "willForwardSelector:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCommand ) )]
	public struct NSQuitCommand : IEquatable<NSQuitCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSQuitCommand;
		public static implicit operator IntPtr( NSQuitCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSQuitCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSQuitCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSQuitCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSQuitCommand value1, NSQuitCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSQuitCommand value1, NSQuitCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSQuitCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSQuitCommand alloc() {
			return new NSQuitCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSSaveOptions saveOptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.saveOptions( Handle, CachedSelectors.saveOptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSSaveOptions ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int saveOptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector saveOptions = "saveOptions";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectSpecifier ) )]
	public struct NSRandomSpecifier : IEquatable<NSRandomSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSRandomSpecifier;
		public static implicit operator IntPtr( NSRandomSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSRandomSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSRandomSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSRandomSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSRandomSpecifier value1, NSRandomSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSRandomSpecifier value1, NSRandomSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSRandomSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSRandomSpecifier alloc() {
			return new NSRandomSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectSpecifier ) )]
	public struct NSRangeSpecifier : IEquatable<NSRangeSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSRangeSpecifier;
		public static implicit operator IntPtr( NSRangeSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSRangeSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSRangeSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSRangeSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSRangeSpecifier value1, NSRangeSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSRangeSpecifier value1, NSRangeSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSRangeSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSRangeSpecifier alloc() {
			return new NSRangeSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptObjectSpecifier endSpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.endSpecifier( Handle, CachedSelectors.endSpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		unsafe public NSRangeSpecifier initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier_( NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, string key, NSScriptObjectSpecifier startSpecifier, NSScriptObjectSpecifier endSpecifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier_( Handle, CachedSelectors.initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier_, out ___occuredException, sizeof( NSScriptClassDescription ) + sizeof( NSScriptObjectSpecifier ) + sizeof( IntPtr ) + sizeof( NSScriptObjectSpecifier ) + sizeof( NSScriptObjectSpecifier ), description, containerSpecifier, ___wrappedkey, startSpecifier, endSpecifier );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSRangeSpecifier( ___result );
		}
		unsafe public void setEndSpecifier_( NSScriptObjectSpecifier specifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEndSpecifier_( Handle, CachedSelectors.setEndSpecifier_, out ___occuredException, sizeof( NSScriptObjectSpecifier ), specifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStartSpecifier_( NSScriptObjectSpecifier specifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStartSpecifier_( Handle, CachedSelectors.setStartSpecifier_, out ___occuredException, sizeof( NSScriptObjectSpecifier ), specifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSScriptObjectSpecifier startSpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startSpecifier( Handle, CachedSelectors.startSpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr endSpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, IntPtr key, NSScriptObjectSpecifier startSpecifier, NSScriptObjectSpecifier endSpecifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEndSpecifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptObjectSpecifier specifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStartSpecifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptObjectSpecifier specifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr startSpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector endSpecifier = "endSpecifier";
			public static readonly Selector initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier_ = "initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:";
			public static readonly Selector setEndSpecifier_ = "setEndSpecifier:";
			public static readonly Selector setStartSpecifier_ = "setStartSpecifier:";
			public static readonly Selector startSpecifier = "startSpecifier";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSRecursiveLock : IEquatable<NSRecursiveLock> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSRecursiveLock;
		public static implicit operator IntPtr( NSRecursiveLock value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSRecursiveLock value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSRecursiveLock?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSRecursiveLock value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSRecursiveLock value1, NSRecursiveLock value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSRecursiveLock value1, NSRecursiveLock value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSRecursiveLock( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSRecursiveLock alloc() {
			return new NSRecursiveLock( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public bool isLocking() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLocking( Handle, CachedSelectors.isLocking, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void @lock() {
			RuntimeObject ___occuredException;
			NativeMethods.@lock( Handle, CachedSelectors.@lock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool lockBeforeDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockBeforeDate_( Handle, CachedSelectors.lockBeforeDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool tryLock() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tryLock( Handle, CachedSelectors.tryLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLocking( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @lock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool lockBeforeDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool tryLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector isLocking = "isLocking";
			public static readonly Selector @lock = "lock";
			public static readonly Selector lockBeforeDate_ = "lockBeforeDate:";
			public static readonly Selector tryLock = "tryLock";
			public static readonly Selector unlock = "unlock";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSNumber ) )]
	public struct NSRefCountingNumber : IEquatable<NSRefCountingNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSRefCountingNumber;
		public static implicit operator IntPtr( NSRefCountingNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSRefCountingNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSRefCountingNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSRefCountingNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSRefCountingNumber value1, NSRefCountingNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSRefCountingNumber value1, NSRefCountingNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSRefCountingNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSRefCountingNumber alloc() {
			return new NSRefCountingNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectSpecifier ) )]
	public struct NSRelativeSpecifier : IEquatable<NSRelativeSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSRelativeSpecifier;
		public static implicit operator IntPtr( NSRelativeSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSRelativeSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSRelativeSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSRelativeSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSRelativeSpecifier value1, NSRelativeSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSRelativeSpecifier value1, NSRelativeSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSRelativeSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSRelativeSpecifier alloc() {
			return new NSRelativeSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptObjectSpecifier baseSpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.baseSpecifier( Handle, CachedSelectors.baseSpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		unsafe public NSRelativeSpecifier initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier_( NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, string key, NSRelativePosition relativePosition, NSScriptObjectSpecifier baseSpecifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier_( Handle, CachedSelectors.initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier_, out ___occuredException, sizeof( NSScriptClassDescription ) + sizeof( NSScriptObjectSpecifier ) + sizeof( IntPtr ) + sizeof( NSRelativePosition ) + sizeof( NSScriptObjectSpecifier ), description, containerSpecifier, ___wrappedkey, relativePosition, baseSpecifier );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSRelativeSpecifier( ___result );
		}
		unsafe public NSRelativePosition relativePosition() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.relativePosition( Handle, CachedSelectors.relativePosition, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSRelativePosition ) ___result;
		}
		unsafe public void setBaseSpecifier_( NSScriptObjectSpecifier specifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBaseSpecifier_( Handle, CachedSelectors.setBaseSpecifier_, out ___occuredException, sizeof( NSScriptObjectSpecifier ), specifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRelativePosition_( NSRelativePosition position ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRelativePosition_( Handle, CachedSelectors.setRelativePosition_, out ___occuredException, sizeof( NSRelativePosition ), position );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr baseSpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, IntPtr key, NSRelativePosition relativePosition, NSScriptObjectSpecifier baseSpecifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int relativePosition( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBaseSpecifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptObjectSpecifier specifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRelativePosition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRelativePosition position );
		}
		static internal class CachedSelectors {
			public static readonly Selector baseSpecifier = "baseSpecifier";
			public static readonly Selector initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier_ = "initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:";
			public static readonly Selector relativePosition = "relativePosition";
			public static readonly Selector setBaseSpecifier_ = "setBaseSpecifier:";
			public static readonly Selector setRelativePosition_ = "setRelativePosition:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSRLEArray : IEquatable<NSRLEArray> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSRLEArray;
		public static implicit operator IntPtr( NSRLEArray value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSRLEArray value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSRLEArray?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSRLEArray value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSRLEArray value1, NSRLEArray value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSRLEArray value1, NSRLEArray value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSRLEArray( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSRLEArray alloc() {
			return new NSRLEArray( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject objectAtRunIndex_length_( uint index, System.IntPtr length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectAtRunIndex_length_( Handle, CachedSelectors.objectAtRunIndex_length_, out ___occuredException, sizeof( uint ) + sizeof( System.IntPtr ), index, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectAtRunIndex_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, System.IntPtr length );
		}
		static internal class CachedSelectors {
			public static readonly Selector count = "count";
			public static readonly Selector objectAtRunIndex_length_ = "objectAtRunIndex:length:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSRunLoop : IEquatable<NSRunLoop> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSRunLoop;
		public static implicit operator IntPtr( NSRunLoop value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSRunLoop value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSRunLoop?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSRunLoop value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSRunLoop value1, NSRunLoop value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSRunLoop value1, NSRunLoop value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSRunLoop( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSRunLoop alloc() {
			return new NSRunLoop( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSRunLoop currentRunLoop() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentRunLoop( ClassHandle, CachedSelectors.currentRunLoop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSRunLoop( ___result );
		}
		unsafe public void acceptInputForMode_beforeDate_( string mode, NSDate beforeDate ) {
			RuntimeObject ___occuredException;
			var ___wrappedmode = Runtime.CreateStringProxy( mode );
			NativeMethods.acceptInputForMode_beforeDate_( Handle, CachedSelectors.acceptInputForMode_beforeDate_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSDate ), ___wrappedmode, beforeDate );
			Runtime.ReleaseNativeObject( ___wrappedmode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addPort_forMode_( NSPort port, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.addPort_forMode_( Handle, CachedSelectors.addPort_forMode_, out ___occuredException, sizeof( NSPort ) + sizeof( IntPtr ), port, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addTimer_forMode_( NSTimer timer, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.addTimer_forMode_( Handle, CachedSelectors.addTimer_forMode_, out ___occuredException, sizeof( NSTimer ) + sizeof( IntPtr ), timer, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allModes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allModes( Handle, CachedSelectors.allModes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void cancelPerformSelector_target_argument_( NObjective.Selector selector, NObjective.RuntimeObject target, NObjective.RuntimeObject argument ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelPerformSelector_target_argument_( Handle, CachedSelectors.cancelPerformSelector_target_argument_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), selector, target, argument );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelPerformSelectorsWithTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelPerformSelectorsWithTarget_( Handle, CachedSelectors.cancelPerformSelectorsWithTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void configureAsServer() {
			RuntimeObject ___occuredException;
			NativeMethods.configureAsServer( Handle, CachedSelectors.configureAsServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char containsPort_forMode_( NObjective.RuntimeObject port, NObjective.RuntimeObject forMode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsPort_forMode_( Handle, CachedSelectors.containsPort_forMode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), port, forMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char containsTimer_forMode_( NObjective.RuntimeObject timer, NObjective.RuntimeObject forMode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsTimer_forMode_( Handle, CachedSelectors.containsTimer_forMode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), timer, forMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string currentMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentMode( Handle, CachedSelectors.currentMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDate limitDateForMode_( string mode ) {
			RuntimeObject ___occuredException;
			var ___wrappedmode = Runtime.CreateStringProxy( mode );
			var ___result = NativeMethods.limitDateForMode_( Handle, CachedSelectors.limitDateForMode_, out ___occuredException, sizeof( IntPtr ), ___wrappedmode );
			Runtime.ReleaseNativeObject( ___wrappedmode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public void performSelector_target_argument_order_modes_( NObjective.Selector selector, NObjective.RuntimeObject target, NObjective.RuntimeObject argument, uint order, NSArray modes ) {
			RuntimeObject ___occuredException;
			NativeMethods.performSelector_target_argument_order_modes_( Handle, CachedSelectors.performSelector_target_argument_order_modes_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NSArray ), selector, target, argument, order, modes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject portsForMode_( NObjective.RuntimeObject mode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.portsForMode_( Handle, CachedSelectors.portsForMode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removePort_forMode_( NSPort port, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.removePort_forMode_( Handle, CachedSelectors.removePort_forMode_, out ___occuredException, sizeof( NSPort ) + sizeof( IntPtr ), port, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeTimer_forMode_( NObjective.RuntimeObject timer, NObjective.RuntimeObject forMode ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeTimer_forMode_( Handle, CachedSelectors.removeTimer_forMode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), timer, forMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void run() {
			RuntimeObject ___occuredException;
			NativeMethods.run( Handle, CachedSelectors.run, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char runBeforeDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.runBeforeDate_( Handle, CachedSelectors.runBeforeDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool runMode_beforeDate_( string mode, NSDate beforeDate ) {
			RuntimeObject ___occuredException;
			var ___wrappedmode = Runtime.CreateStringProxy( mode );
			var ___result = NativeMethods.runMode_beforeDate_( Handle, CachedSelectors.runMode_beforeDate_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSDate ), ___wrappedmode, beforeDate );
			Runtime.ReleaseNativeObject( ___wrappedmode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char runMode_untilDate_( NObjective.RuntimeObject mode, NObjective.RuntimeObject untilDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.runMode_untilDate_( Handle, CachedSelectors.runMode_untilDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), mode, untilDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void runUntilDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			NativeMethods.runUntilDate_( Handle, CachedSelectors.runUntilDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject timersForMode_( NObjective.RuntimeObject mode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timersForMode_( Handle, CachedSelectors.timersForMode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void acceptInputForMode_beforeDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr mode, NSDate beforeDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addPort_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPort port, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addTimer_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSTimer timer, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allModes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelPerformSelector_target_argument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject target, NObjective.RuntimeObject argument );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelPerformSelectorsWithTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void configureAsServer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsPort_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject port, NObjective.RuntimeObject forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsTimer_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject timer, NObjective.RuntimeObject forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentRunLoop( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr limitDateForMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performSelector_target_argument_order_modes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject target, NObjective.RuntimeObject argument, uint order, NSArray modes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr portsForMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removePort_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPort port, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeTimer_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject timer, NObjective.RuntimeObject forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void run( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char runBeforeDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool runMode_beforeDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr mode, NSDate beforeDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char runMode_untilDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mode, NObjective.RuntimeObject untilDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void runUntilDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timersForMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mode );
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptInputForMode_beforeDate_ = "acceptInputForMode:beforeDate:";
			public static readonly Selector addPort_forMode_ = "addPort:forMode:";
			public static readonly Selector addTimer_forMode_ = "addTimer:forMode:";
			public static readonly Selector allModes = "allModes";
			public static readonly Selector cancelPerformSelector_target_argument_ = "cancelPerformSelector:target:argument:";
			public static readonly Selector cancelPerformSelectorsWithTarget_ = "cancelPerformSelectorsWithTarget:";
			public static readonly Selector configureAsServer = "configureAsServer";
			public static readonly Selector containsPort_forMode_ = "containsPort:forMode:";
			public static readonly Selector containsTimer_forMode_ = "containsTimer:forMode:";
			public static readonly Selector currentMode = "currentMode";
			public static readonly Selector currentRunLoop = "currentRunLoop";
			public static readonly Selector limitDateForMode_ = "limitDateForMode:";
			public static readonly Selector performSelector_target_argument_order_modes_ = "performSelector:target:argument:order:modes:";
			public static readonly Selector portsForMode_ = "portsForMode:";
			public static readonly Selector removePort_forMode_ = "removePort:forMode:";
			public static readonly Selector removeTimer_forMode_ = "removeTimer:forMode:";
			public static readonly Selector run = "run";
			public static readonly Selector runBeforeDate_ = "runBeforeDate:";
			public static readonly Selector runMode_beforeDate_ = "runMode:beforeDate:";
			public static readonly Selector runMode_untilDate_ = "runMode:untilDate:";
			public static readonly Selector runUntilDate_ = "runUntilDate:";
			public static readonly Selector timersForMode_ = "timersForMode:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScanner : IEquatable<NSScanner> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScanner;
		public static implicit operator IntPtr( NSScanner value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScanner value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScanner?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScanner value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScanner value1, NSScanner value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScanner value1, NSScanner value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScanner( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScanner alloc() {
			return new NSScanner( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject localizedScannerWithString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.localizedScannerWithString_( ClassHandle, CachedSelectors.localizedScannerWithString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSScanner scannerWithString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.scannerWithString_( ClassHandle, CachedSelectors.scannerWithString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScanner( ___result );
		}
		unsafe public bool caseSensitive() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.caseSensitive( Handle, CachedSelectors.caseSensitive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSCharacterSet charactersToBeSkipped() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.charactersToBeSkipped( Handle, CachedSelectors.charactersToBeSkipped, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCharacterSet( ___result );
		}
		unsafe public NSScanner initWithString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.initWithString_( Handle, CachedSelectors.initWithString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScanner( ___result );
		}
		unsafe public bool isAtEnd() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAtEnd( Handle, CachedSelectors.isAtEnd, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSDictionary locale() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.locale( Handle, CachedSelectors.locale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public bool scanCharactersFromSet_intoString_( NSCharacterSet @set, ref string intoString ) {
			RuntimeObject ___occuredException;
			var ___wrappedintoString = Runtime.CreateStringProxy( intoString );
			var ___result = NativeMethods.scanCharactersFromSet_intoString_( Handle, CachedSelectors.scanCharactersFromSet_intoString_, out ___occuredException, sizeof( NSCharacterSet ) + sizeof( IntPtr ), @set, ref ___wrappedintoString );
			intoString = Runtime.UnwrapNSString( ___wrappedintoString );
			Runtime.ReleaseNativeObject( ___wrappedintoString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool scanDecimal_( NSDecimal[] @decimal ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scanDecimal_( Handle, CachedSelectors.scanDecimal_, out ___occuredException, sizeof( IntPtr ), @decimal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool scanDouble_( IntPtr @double ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scanDouble_( Handle, CachedSelectors.scanDouble_, out ___occuredException, sizeof( IntPtr ), @double );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool scanFloat_( IntPtr @float ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scanFloat_( Handle, CachedSelectors.scanFloat_, out ___occuredException, sizeof( IntPtr ), @float );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool scanHexInt_( IntPtr @int ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scanHexInt_( Handle, CachedSelectors.scanHexInt_, out ___occuredException, sizeof( IntPtr ), @int );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool scanInt_( IntPtr @int ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scanInt_( Handle, CachedSelectors.scanInt_, out ___occuredException, sizeof( IntPtr ), @int );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint scanLocation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scanLocation( Handle, CachedSelectors.scanLocation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public bool scanLongLong_( IntPtr @long ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scanLongLong_( Handle, CachedSelectors.scanLongLong_, out ___occuredException, sizeof( IntPtr ), @long );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool scanString_intoString_( string @string, ref string intoString ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___wrappedintoString = Runtime.CreateStringProxy( intoString );
			var ___result = NativeMethods.scanString_intoString_( Handle, CachedSelectors.scanString_intoString_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedstring, ref ___wrappedintoString );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			intoString = Runtime.UnwrapNSString( ___wrappedintoString );
			Runtime.ReleaseNativeObject( ___wrappedintoString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool scanUpToCharactersFromSet_intoString_( NSCharacterSet @set, ref string intoString ) {
			RuntimeObject ___occuredException;
			var ___wrappedintoString = Runtime.CreateStringProxy( intoString );
			var ___result = NativeMethods.scanUpToCharactersFromSet_intoString_( Handle, CachedSelectors.scanUpToCharactersFromSet_intoString_, out ___occuredException, sizeof( NSCharacterSet ) + sizeof( IntPtr ), @set, ref ___wrappedintoString );
			intoString = Runtime.UnwrapNSString( ___wrappedintoString );
			Runtime.ReleaseNativeObject( ___wrappedintoString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool scanUpToString_intoString_( string @string, ref string intoString ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___wrappedintoString = Runtime.CreateStringProxy( intoString );
			var ___result = NativeMethods.scanUpToString_intoString_( Handle, CachedSelectors.scanUpToString_intoString_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedstring, ref ___wrappedintoString );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			intoString = Runtime.UnwrapNSString( ___wrappedintoString );
			Runtime.ReleaseNativeObject( ___wrappedintoString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCaseSensitive_( bool sensitive ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCaseSensitive_( Handle, CachedSelectors.setCaseSensitive_, out ___occuredException, sizeof( bool ), sensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCharactersToBeSkipped_( NSCharacterSet skipped ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCharactersToBeSkipped_( Handle, CachedSelectors.setCharactersToBeSkipped_, out ___occuredException, sizeof( NSCharacterSet ), skipped );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLocale_( NSDictionary locale ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLocale_( Handle, CachedSelectors.setLocale_, out ___occuredException, sizeof( NSDictionary ), locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScanLocation_( uint location ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScanLocation_( Handle, CachedSelectors.setScanLocation_, out ___occuredException, sizeof( uint ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string @string() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@string( Handle, CachedSelectors.@string, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool caseSensitive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr charactersToBeSkipped( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAtEnd( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr locale( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedScannerWithString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool scanCharactersFromSet_intoString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCharacterSet @set, ref IntPtr intoString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool scanDecimal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDecimal[] @decimal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool scanDouble_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @double );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool scanFloat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @float );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool scanHexInt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @int );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool scanInt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @int );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint scanLocation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool scanLongLong_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @long );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scannerWithString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool scanString_intoString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, ref IntPtr intoString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool scanUpToCharactersFromSet_intoString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCharacterSet @set, ref IntPtr intoString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool scanUpToString_intoString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, ref IntPtr intoString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCaseSensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool sensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCharactersToBeSkipped_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCharacterSet skipped );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLocale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScanLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @string( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector caseSensitive = "caseSensitive";
			public static readonly Selector charactersToBeSkipped = "charactersToBeSkipped";
			public static readonly Selector initWithString_ = "initWithString:";
			public static readonly Selector isAtEnd = "isAtEnd";
			public static readonly Selector locale = "locale";
			public static readonly Selector localizedScannerWithString_ = "localizedScannerWithString:";
			public static readonly Selector scanCharactersFromSet_intoString_ = "scanCharactersFromSet:intoString:";
			public static readonly Selector scanDecimal_ = "scanDecimal:";
			public static readonly Selector scanDouble_ = "scanDouble:";
			public static readonly Selector scanFloat_ = "scanFloat:";
			public static readonly Selector scanHexInt_ = "scanHexInt:";
			public static readonly Selector scanInt_ = "scanInt:";
			public static readonly Selector scanLocation = "scanLocation";
			public static readonly Selector scanLongLong_ = "scanLongLong:";
			public static readonly Selector scannerWithString_ = "scannerWithString:";
			public static readonly Selector scanString_intoString_ = "scanString:intoString:";
			public static readonly Selector scanUpToCharactersFromSet_intoString_ = "scanUpToCharactersFromSet:intoString:";
			public static readonly Selector scanUpToString_intoString_ = "scanUpToString:intoString:";
			public static readonly Selector setCaseSensitive_ = "setCaseSensitive:";
			public static readonly Selector setCharactersToBeSkipped_ = "setCharactersToBeSkipped:";
			public static readonly Selector setLocale_ = "setLocale:";
			public static readonly Selector setScanLocation_ = "setScanLocation:";
			public static readonly Selector @string = "string";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptArgumentDescription : IEquatable<NSScriptArgumentDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptArgumentDescription;
		public static implicit operator IntPtr( NSScriptArgumentDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptArgumentDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptArgumentDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptArgumentDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptArgumentDescription value1, NSScriptArgumentDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptArgumentDescription value1, NSScriptArgumentDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptArgumentDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptArgumentDescription alloc() {
			return new NSScriptArgumentDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject argumentDescriptionFromName_implDeclaration_presoDeclaration_suiteName_commandName_( NObjective.RuntimeObject name, NObjective.RuntimeObject implDeclaration, NObjective.RuntimeObject presoDeclaration, NObjective.RuntimeObject suiteName, NObjective.RuntimeObject commandName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.argumentDescriptionFromName_implDeclaration_presoDeclaration_suiteName_commandName_( ClassHandle, CachedSelectors.argumentDescriptionFromName_implDeclaration_presoDeclaration_suiteName_commandName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, implDeclaration, presoDeclaration, suiteName, commandName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ushort appendParameterDeclarationsToAETEData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendParameterDeclarationsToAETEData_( Handle, CachedSelectors.appendParameterDeclarationsToAETEData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint appleEventCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventCode( Handle, CachedSelectors.appleEventCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject firstPresentableName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstPresentableName( Handle, CachedSelectors.firstPresentableName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptArgumentDescription initWithKey_appleEventCode_type_isOptional_presentableDescription_name_( NObjective.RuntimeObject key, uint appleEventCode, NObjective.RuntimeObject type, char isOptional, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_appleEventCode_type_isOptional_presentableDescription_name_( Handle, CachedSelectors.initWithKey_appleEventCode_type_isOptional_presentableDescription_name_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, appleEventCode, type, isOptional, presentableDescription, name
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptArgumentDescription( ___result );
		}
		unsafe public NSScriptArgumentDescription initWithKey_appleEventCode_type_isOptional_presentableDescription_nameOrNames_( NObjective.RuntimeObject key, uint appleEventCode, NObjective.RuntimeObject type, char isOptional, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject nameOrNames ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_appleEventCode_type_isOptional_presentableDescription_nameOrNames_( Handle, CachedSelectors.initWithKey_appleEventCode_type_isOptional_presentableDescription_nameOrNames_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, appleEventCode, type, isOptional, presentableDescription, nameOrNames
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptArgumentDescription( ___result );
		}
		unsafe public bool isOptional() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isOptional( Handle, CachedSelectors.isOptional, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject key() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.key( Handle, CachedSelectors.key, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject presentableDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.presentableDescription( Handle, CachedSelectors.presentableDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject presentableNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.presentableNames( Handle, CachedSelectors.presentableNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reconcileToSuiteRegistry_suiteName_commandName_( NObjective.RuntimeObject registry, NObjective.RuntimeObject suiteName, NObjective.RuntimeObject commandName ) {
			RuntimeObject ___occuredException;
			NativeMethods.reconcileToSuiteRegistry_suiteName_commandName_( Handle, CachedSelectors.reconcileToSuiteRegistry_suiteName_commandName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), registry, suiteName, commandName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject typeDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeDescription( Handle, CachedSelectors.typeDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort appendParameterDeclarationsToAETEData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr argumentDescriptionFromName_implDeclaration_presoDeclaration_suiteName_commandName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject implDeclaration, NObjective.RuntimeObject presoDeclaration, NObjective.RuntimeObject suiteName, NObjective.RuntimeObject commandName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstPresentableName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_appleEventCode_type_isOptional_presentableDescription_name_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, uint appleEventCode, NObjective.RuntimeObject type, char isOptional, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_appleEventCode_type_isOptional_presentableDescription_nameOrNames_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, uint appleEventCode, NObjective.RuntimeObject type, char isOptional, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject nameOrNames
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isOptional( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr key( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr presentableDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr presentableNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reconcileToSuiteRegistry_suiteName_commandName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject registry, NObjective.RuntimeObject suiteName, NObjective.RuntimeObject commandName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr typeDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendParameterDeclarationsToAETEData_ = "appendParameterDeclarationsToAETEData:";
			public static readonly Selector appleEventCode = "appleEventCode";
			public static readonly Selector argumentDescriptionFromName_implDeclaration_presoDeclaration_suiteName_commandName_ = "argumentDescriptionFromName:implDeclaration:presoDeclaration:suiteName:commandName:";
			public static readonly Selector firstPresentableName = "firstPresentableName";
			public static readonly Selector initWithKey_appleEventCode_type_isOptional_presentableDescription_name_ = "initWithKey:appleEventCode:type:isOptional:presentableDescription:name:";
			public static readonly Selector initWithKey_appleEventCode_type_isOptional_presentableDescription_nameOrNames_ = "initWithKey:appleEventCode:type:isOptional:presentableDescription:nameOrNames:";
			public static readonly Selector isOptional = "isOptional";
			public static readonly Selector key = "key";
			public static readonly Selector presentableDescription = "presentableDescription";
			public static readonly Selector presentableNames = "presentableNames";
			public static readonly Selector reconcileToSuiteRegistry_suiteName_commandName_ = "reconcileToSuiteRegistry:suiteName:commandName:";
			public static readonly Selector typeDescription = "typeDescription";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptPropertyDescription ) )]
	public struct NSScriptAttributeDescription : IEquatable<NSScriptAttributeDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptAttributeDescription;
		public static implicit operator IntPtr( NSScriptAttributeDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptAttributeDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptAttributeDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptAttributeDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptAttributeDescription value1, NSScriptAttributeDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptAttributeDescription value1, NSScriptAttributeDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptAttributeDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptAttributeDescription alloc() {
			return new NSScriptAttributeDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public ushort appendPropertyDeclarationsToAETEData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendPropertyDeclarationsToAETEData_( Handle, CachedSelectors.appendPropertyDeclarationsToAETEData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject firstPresentableName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstPresentableName( Handle, CachedSelectors.firstPresentableName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptAttributeDescription initWithKey_type_access_appleEventCode_presentableDescription_name_( NObjective.RuntimeObject key, NObjective.RuntimeObject type, uint access, uint appleEventCode, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_type_access_appleEventCode_presentableDescription_name_( Handle, CachedSelectors.initWithKey_type_access_appleEventCode_presentableDescription_name_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, type, access, appleEventCode, presentableDescription, name
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptAttributeDescription( ___result );
		}
		unsafe public NSScriptAttributeDescription initWithKey_type_isReadOnly_appleEventCode_presentableDescription_nameOrNames_( NObjective.RuntimeObject key, NObjective.RuntimeObject type, char isReadOnly, uint appleEventCode, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject nameOrNames ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_type_isReadOnly_appleEventCode_presentableDescription_nameOrNames_( Handle, CachedSelectors.initWithKey_type_isReadOnly_appleEventCode_presentableDescription_nameOrNames_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, type, isReadOnly, appleEventCode, presentableDescription, nameOrNames
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptAttributeDescription( ___result );
		}
		unsafe public NObjective.RuntimeObject presentableDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.presentableDescription( Handle, CachedSelectors.presentableDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject presentableNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.presentableNames( Handle, CachedSelectors.presentableNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort appendPropertyDeclarationsToAETEData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstPresentableName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_type_access_appleEventCode_presentableDescription_name_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject type, uint access, uint appleEventCode, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_type_isReadOnly_appleEventCode_presentableDescription_nameOrNames_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject type, char isReadOnly, uint appleEventCode, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject nameOrNames
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr presentableDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr presentableNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendPropertyDeclarationsToAETEData_ = "appendPropertyDeclarationsToAETEData:";
			public static readonly Selector firstPresentableName = "firstPresentableName";
			public static readonly Selector initWithKey_type_access_appleEventCode_presentableDescription_name_ = "initWithKey:type:access:appleEventCode:presentableDescription:name:";
			public static readonly Selector initWithKey_type_isReadOnly_appleEventCode_presentableDescription_nameOrNames_ = "initWithKey:type:isReadOnly:appleEventCode:presentableDescription:nameOrNames:";
			public static readonly Selector presentableDescription = "presentableDescription";
			public static readonly Selector presentableNames = "presentableNames";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSClassDescription ) )]
	public struct NSScriptClassDescription : IEquatable<NSScriptClassDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptClassDescription;
		public static implicit operator IntPtr( NSScriptClassDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptClassDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptClassDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptClassDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptClassDescription value1, NSScriptClassDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptClassDescription value1, NSScriptClassDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptClassDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptClassDescription alloc() {
			return new NSScriptClassDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint appleEventCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventCode( Handle, CachedSelectors.appleEventCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint appleEventCodeForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.appleEventCodeForKey_( Handle, CachedSelectors.appleEventCodeForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSScriptClassDescription classDescriptionForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.classDescriptionForKey_( Handle, CachedSelectors.classDescriptionForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptClassDescription( ___result );
		}
		unsafe public string defaultSubcontainerAttributeKey() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultSubcontainerAttributeKey( Handle, CachedSelectors.defaultSubcontainerAttributeKey, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject implementationClassName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.implementationClassName( Handle, CachedSelectors.implementationClassName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptClassDescription initWithSuiteName_className_dictionary_( string name, string className, NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedclassName = Runtime.CreateStringProxy( className );
			var ___result = NativeMethods.initWithSuiteName_className_dictionary_( Handle, CachedSelectors.initWithSuiteName_className_dictionary_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedname, ___wrappedclassName, dictionary );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedclassName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptClassDescription( ___result );
		}
		unsafe public bool isLocationRequiredToCreateForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.isLocationRequiredToCreateForKey_( Handle, CachedSelectors.isLocationRequiredToCreateForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isReadOnlyKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.isReadOnlyKey_( Handle, CachedSelectors.isReadOnlyKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string keyWithAppleEventCode_( uint code ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyWithAppleEventCode_( Handle, CachedSelectors.keyWithAppleEventCode_, out ___occuredException, sizeof( uint ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool matchesAppleEventCode_( uint code ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchesAppleEventCode_( Handle, CachedSelectors.matchesAppleEventCode_, out ___occuredException, sizeof( uint ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.Selector selectorForCommand_( NSScriptCommandDescription command ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectorForCommand_( Handle, CachedSelectors.selectorForCommand_, out ___occuredException, sizeof( NSScriptCommandDescription ), command );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string suiteName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suiteName( Handle, CachedSelectors.suiteName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSScriptClassDescription superclassDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.superclassDescription( Handle, CachedSelectors.superclassDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptClassDescription( ___result );
		}
		unsafe public bool supportsCommand_( NSScriptCommandDescription command ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportsCommand_( Handle, CachedSelectors.supportsCommand_, out ___occuredException, sizeof( NSScriptCommandDescription ), command );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string typeForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.typeForKey_( Handle, CachedSelectors.typeForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCodeForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDescriptionForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultSubcontainerAttributeKey( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr implementationClassName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSuiteName_className_dictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr className, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLocationRequiredToCreateForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isReadOnlyKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyWithAppleEventCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool matchesAppleEventCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector selectorForCommand_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptCommandDescription command );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr suiteName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr superclassDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool supportsCommand_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptCommandDescription command );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr typeForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
		}
		static internal class CachedSelectors {
			public static readonly Selector appleEventCode = "appleEventCode";
			public static readonly Selector appleEventCodeForKey_ = "appleEventCodeForKey:";
			public static readonly Selector classDescriptionForKey_ = "classDescriptionForKey:";
			public static readonly Selector defaultSubcontainerAttributeKey = "defaultSubcontainerAttributeKey";
			public static readonly Selector implementationClassName = "implementationClassName";
			public static readonly Selector initWithSuiteName_className_dictionary_ = "initWithSuiteName:className:dictionary:";
			public static readonly Selector isLocationRequiredToCreateForKey_ = "isLocationRequiredToCreateForKey:";
			public static readonly Selector isReadOnlyKey_ = "isReadOnlyKey:";
			public static readonly Selector keyWithAppleEventCode_ = "keyWithAppleEventCode:";
			public static readonly Selector matchesAppleEventCode_ = "matchesAppleEventCode:";
			public static readonly Selector selectorForCommand_ = "selectorForCommand:";
			public static readonly Selector suiteName = "suiteName";
			public static readonly Selector superclassDescription = "superclassDescription";
			public static readonly Selector supportsCommand_ = "supportsCommand:";
			public static readonly Selector typeForKey_ = "typeForKey:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptCoercionHandler : IEquatable<NSScriptCoercionHandler> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptCoercionHandler;
		public static implicit operator IntPtr( NSScriptCoercionHandler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptCoercionHandler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptCoercionHandler?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptCoercionHandler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptCoercionHandler value1, NSScriptCoercionHandler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptCoercionHandler value1, NSScriptCoercionHandler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptCoercionHandler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptCoercionHandler alloc() {
			return new NSScriptCoercionHandler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSScriptCoercionHandler sharedCoercionHandler() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedCoercionHandler( ClassHandle, CachedSelectors.sharedCoercionHandler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptCoercionHandler( ___result );
		}
		unsafe public NObjective.RuntimeObject coerceValue_toClass_( NObjective.RuntimeObject value, NObjective.RuntimeClass toClass ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.coerceValue_toClass_( Handle, CachedSelectors.coerceValue_toClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ), value, toClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void registerCoercer_selector_toConvertFromClass_toClass_( NObjective.RuntimeObject coercer, NObjective.Selector selector, NObjective.RuntimeClass toConvertFromClass, NObjective.RuntimeClass toClass ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerCoercer_selector_toConvertFromClass_toClass_( Handle, CachedSelectors.registerCoercer_selector_toConvertFromClass_toClass_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeClass ), coercer, selector, toConvertFromClass, toClass );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr coerceValue_toClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeClass toClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerCoercer_selector_toConvertFromClass_toClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coercer, NObjective.Selector selector, NObjective.RuntimeClass toConvertFromClass, NObjective.RuntimeClass toClass );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedCoercionHandler( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector coerceValue_toClass_ = "coerceValue:toClass:";
			public static readonly Selector registerCoercer_selector_toConvertFromClass_toClass_ = "registerCoercer:selector:toConvertFromClass:toClass:";
			public static readonly Selector sharedCoercionHandler = "sharedCoercionHandler";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptCommand : IEquatable<NSScriptCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptCommand;
		public static implicit operator IntPtr( NSScriptCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptCommand value1, NSScriptCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptCommand value1, NSScriptCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptCommand alloc() {
			return new NSScriptCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSScriptCommand currentCommand() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentCommand( ClassHandle, CachedSelectors.currentCommand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptCommand( ___result );
		}
		unsafe public NSAppleEventDescriptor appleEvent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEvent( Handle, CachedSelectors.appleEvent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAppleEventDescriptor( ___result );
		}
		unsafe public NSDictionary arguments() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arguments( Handle, CachedSelectors.arguments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSScriptCommandDescription commandDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.commandDescription( Handle, CachedSelectors.commandDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptCommandDescription( ___result );
		}
		unsafe public NObjective.RuntimeObject directParameter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directParameter( Handle, CachedSelectors.directParameter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSDictionary evaluatedArguments() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluatedArguments( Handle, CachedSelectors.evaluatedArguments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NObjective.RuntimeObject evaluatedReceivers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluatedReceivers( Handle, CachedSelectors.evaluatedReceivers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject executeCommand() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.executeCommand( Handle, CachedSelectors.executeCommand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptCommand initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptCommand( ___result );
		}
		unsafe public NSScriptCommand initWithCommandDescription_( NSScriptCommandDescription description ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCommandDescription_( Handle, CachedSelectors.initWithCommandDescription_, out ___occuredException, sizeof( NSScriptCommandDescription ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptCommand( ___result );
		}
		unsafe public bool isWellFormed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isWellFormed( Handle, CachedSelectors.isWellFormed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject performDefaultImplementation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performDefaultImplementation( Handle, CachedSelectors.performDefaultImplementation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptObjectSpecifier receiversSpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.receiversSpecifier( Handle, CachedSelectors.receiversSpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		unsafe public void resumeExecutionWithResult_( NObjective.RuntimeObject result ) {
			RuntimeObject ___occuredException;
			NativeMethods.resumeExecutionWithResult_( Handle, CachedSelectors.resumeExecutionWithResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ), result );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int scriptErrorNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptErrorNumber( Handle, CachedSelectors.scriptErrorNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string scriptErrorString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptErrorString( Handle, CachedSelectors.scriptErrorString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void setArguments_( NSDictionary arguments ) {
			RuntimeObject ___occuredException;
			NativeMethods.setArguments_( Handle, CachedSelectors.setArguments_, out ___occuredException, sizeof( NSDictionary ), arguments );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDirectParameter_( NObjective.RuntimeObject parameter ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDirectParameter_( Handle, CachedSelectors.setDirectParameter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), parameter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setReceiversSpecifier_( NSScriptObjectSpecifier specifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setReceiversSpecifier_( Handle, CachedSelectors.setReceiversSpecifier_, out ___occuredException, sizeof( NSScriptObjectSpecifier ), specifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScriptErrorNumber_( int number ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScriptErrorNumber_( Handle, CachedSelectors.setScriptErrorNumber_, out ___occuredException, sizeof( int ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScriptErrorString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.setScriptErrorString_( Handle, CachedSelectors.setScriptErrorString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void suspendExecution() {
			RuntimeObject ___occuredException;
			NativeMethods.suspendExecution( Handle, CachedSelectors.suspendExecution, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr appleEvent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arguments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commandDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentCommand( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directParameter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr evaluatedArguments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr evaluatedReceivers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr executeCommand( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCommandDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptCommandDescription description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isWellFormed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr performDefaultImplementation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr receiversSpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resumeExecutionWithResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject result );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int scriptErrorNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scriptErrorString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setArguments_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary arguments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDirectParameter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject parameter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setReceiversSpecifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptObjectSpecifier specifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScriptErrorNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int number );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScriptErrorString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void suspendExecution( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector appleEvent = "appleEvent";
			public static readonly Selector arguments = "arguments";
			public static readonly Selector commandDescription = "commandDescription";
			public static readonly Selector currentCommand = "currentCommand";
			public static readonly Selector directParameter = "directParameter";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector evaluatedArguments = "evaluatedArguments";
			public static readonly Selector evaluatedReceivers = "evaluatedReceivers";
			public static readonly Selector executeCommand = "executeCommand";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithCommandDescription_ = "initWithCommandDescription:";
			public static readonly Selector isWellFormed = "isWellFormed";
			public static readonly Selector performDefaultImplementation = "performDefaultImplementation";
			public static readonly Selector receiversSpecifier = "receiversSpecifier";
			public static readonly Selector resumeExecutionWithResult_ = "resumeExecutionWithResult:";
			public static readonly Selector scriptErrorNumber = "scriptErrorNumber";
			public static readonly Selector scriptErrorString = "scriptErrorString";
			public static readonly Selector setArguments_ = "setArguments:";
			public static readonly Selector setDirectParameter_ = "setDirectParameter:";
			public static readonly Selector setReceiversSpecifier_ = "setReceiversSpecifier:";
			public static readonly Selector setScriptErrorNumber_ = "setScriptErrorNumber:";
			public static readonly Selector setScriptErrorString_ = "setScriptErrorString:";
			public static readonly Selector suspendExecution = "suspendExecution";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptCommandConstructionContext : IEquatable<NSScriptCommandConstructionContext> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptCommandConstructionContext;
		public static implicit operator IntPtr( NSScriptCommandConstructionContext value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptCommandConstructionContext value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptCommandConstructionContext?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptCommandConstructionContext value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptCommandConstructionContext value1, NSScriptCommandConstructionContext value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptCommandConstructionContext value1, NSScriptCommandConstructionContext value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptCommandConstructionContext( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptCommandConstructionContext alloc() {
			return new NSScriptCommandConstructionContext( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void beginConstructionWithSuiteRegistry_( NObjective.RuntimeObject registry ) {
			RuntimeObject ___occuredException;
			NativeMethods.beginConstructionWithSuiteRegistry_( ClassHandle, CachedSelectors.beginConstructionWithSuiteRegistry_, out ___occuredException, sizeof( NObjective.RuntimeObject ), registry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject currentConstructionContext() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentConstructionContext( ClassHandle, CachedSelectors.currentConstructionContext, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void endConstruction() {
			RuntimeObject ___occuredException;
			NativeMethods.endConstruction( ClassHandle, CachedSelectors.endConstruction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setCurrentConstructionContext_( NObjective.RuntimeObject context ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCurrentConstructionContext_( ClassHandle, CachedSelectors.setCurrentConstructionContext_, out ___occuredException, sizeof( NObjective.RuntimeObject ), context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint errorExpectedType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.errorExpectedType( Handle, CachedSelectors.errorExpectedType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public short errorNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.errorNumber( Handle, CachedSelectors.errorNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject errorOffendingObjectDescriptor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.errorOffendingObjectDescriptor( Handle, CachedSelectors.errorOffendingObjectDescriptor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rangeContainerClassDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rangeContainerClassDescription( Handle, CachedSelectors.rangeContainerClassDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setErrorExpectedType_( uint type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setErrorExpectedType_( Handle, CachedSelectors.setErrorExpectedType_, out ___occuredException, sizeof( uint ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setErrorNumber_( short number ) {
			RuntimeObject ___occuredException;
			NativeMethods.setErrorNumber_( Handle, CachedSelectors.setErrorNumber_, out ___occuredException, sizeof( short ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setErrorOffendingObjectDescriptor_( NObjective.RuntimeObject descriptor ) {
			RuntimeObject ___occuredException;
			NativeMethods.setErrorOffendingObjectDescriptor_( Handle, CachedSelectors.setErrorOffendingObjectDescriptor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), descriptor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRangeContainerClassDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRangeContainerClassDescription_( Handle, CachedSelectors.setRangeContainerClassDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTestedObjectClassDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTestedObjectClassDescription_( Handle, CachedSelectors.setTestedObjectClassDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject suiteRegistry() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suiteRegistry( Handle, CachedSelectors.suiteRegistry, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject testedObjectClassDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.testedObjectClassDescription( Handle, CachedSelectors.testedObjectClassDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject topLevelObjectClassDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.topLevelObjectClassDescription( Handle, CachedSelectors.topLevelObjectClassDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void beginConstructionWithSuiteRegistry_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject registry );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentConstructionContext( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void endConstruction( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint errorExpectedType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short errorNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr errorOffendingObjectDescriptor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rangeContainerClassDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrentConstructionContext_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setErrorExpectedType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setErrorNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short number );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setErrorOffendingObjectDescriptor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject descriptor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRangeContainerClassDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTestedObjectClassDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr suiteRegistry( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr testedObjectClassDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr topLevelObjectClassDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector beginConstructionWithSuiteRegistry_ = "beginConstructionWithSuiteRegistry:";
			public static readonly Selector currentConstructionContext = "currentConstructionContext";
			public static readonly Selector endConstruction = "endConstruction";
			public static readonly Selector errorExpectedType = "errorExpectedType";
			public static readonly Selector errorNumber = "errorNumber";
			public static readonly Selector errorOffendingObjectDescriptor = "errorOffendingObjectDescriptor";
			public static readonly Selector rangeContainerClassDescription = "rangeContainerClassDescription";
			public static readonly Selector setCurrentConstructionContext_ = "setCurrentConstructionContext:";
			public static readonly Selector setErrorExpectedType_ = "setErrorExpectedType:";
			public static readonly Selector setErrorNumber_ = "setErrorNumber:";
			public static readonly Selector setErrorOffendingObjectDescriptor_ = "setErrorOffendingObjectDescriptor:";
			public static readonly Selector setRangeContainerClassDescription_ = "setRangeContainerClassDescription:";
			public static readonly Selector setTestedObjectClassDescription_ = "setTestedObjectClassDescription:";
			public static readonly Selector suiteRegistry = "suiteRegistry";
			public static readonly Selector testedObjectClassDescription = "testedObjectClassDescription";
			public static readonly Selector topLevelObjectClassDescription = "topLevelObjectClassDescription";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptCommandDescription : IEquatable<NSScriptCommandDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptCommandDescription;
		public static implicit operator IntPtr( NSScriptCommandDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptCommandDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptCommandDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptCommandDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptCommandDescription value1, NSScriptCommandDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptCommandDescription value1, NSScriptCommandDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptCommandDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptCommandDescription alloc() {
			return new NSScriptCommandDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint appleEventClassCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventClassCode( Handle, CachedSelectors.appleEventClassCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint appleEventCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventCode( Handle, CachedSelectors.appleEventCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint appleEventCodeForArgumentWithName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.appleEventCodeForArgumentWithName_( Handle, CachedSelectors.appleEventCodeForArgumentWithName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint appleEventCodeForReturnType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventCodeForReturnType( Handle, CachedSelectors.appleEventCodeForReturnType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSArray argumentNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.argumentNames( Handle, CachedSelectors.argumentNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public string commandClassName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.commandClassName( Handle, CachedSelectors.commandClassName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string commandName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.commandName( Handle, CachedSelectors.commandName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSScriptCommand createCommandInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createCommandInstance( Handle, CachedSelectors.createCommandInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptCommand( ___result );
		}
		unsafe public NSScriptCommand createCommandInstanceWithZone_( IntPtr zone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createCommandInstanceWithZone_( Handle, CachedSelectors.createCommandInstanceWithZone_, out ___occuredException, sizeof( IntPtr ), zone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptCommand( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSScriptCommandDescription initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptCommandDescription( ___result );
		}
		unsafe public NSScriptCommandDescription initWithSuiteName_commandName_dictionary_( string name, string commandName, NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedcommandName = Runtime.CreateStringProxy( commandName );
			var ___result = NativeMethods.initWithSuiteName_commandName_dictionary_( Handle, CachedSelectors.initWithSuiteName_commandName_dictionary_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSDictionary ), ___wrappedname, ___wrappedcommandName, dictionary );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedcommandName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptCommandDescription( ___result );
		}
		unsafe public bool isOptionalArgumentWithName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.isOptionalArgumentWithName_( Handle, CachedSelectors.isOptionalArgumentWithName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string returnType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.returnType( Handle, CachedSelectors.returnType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string suiteName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suiteName( Handle, CachedSelectors.suiteName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string typeForArgumentWithName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.typeForArgumentWithName_( Handle, CachedSelectors.typeForArgumentWithName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventClassCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCodeForArgumentWithName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCodeForReturnType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr argumentNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commandClassName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commandName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createCommandInstance( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createCommandInstanceWithZone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr zone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSuiteName_commandName_dictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr commandName, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isOptionalArgumentWithName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr returnType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr suiteName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr typeForArgumentWithName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
		}
		static internal class CachedSelectors {
			public static readonly Selector appleEventClassCode = "appleEventClassCode";
			public static readonly Selector appleEventCode = "appleEventCode";
			public static readonly Selector appleEventCodeForArgumentWithName_ = "appleEventCodeForArgumentWithName:";
			public static readonly Selector appleEventCodeForReturnType = "appleEventCodeForReturnType";
			public static readonly Selector argumentNames = "argumentNames";
			public static readonly Selector commandClassName = "commandClassName";
			public static readonly Selector commandName = "commandName";
			public static readonly Selector createCommandInstance = "createCommandInstance";
			public static readonly Selector createCommandInstanceWithZone_ = "createCommandInstanceWithZone:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithSuiteName_commandName_dictionary_ = "initWithSuiteName:commandName:dictionary:";
			public static readonly Selector isOptionalArgumentWithName_ = "isOptionalArgumentWithName:";
			public static readonly Selector returnType = "returnType";
			public static readonly Selector suiteName = "suiteName";
			public static readonly Selector typeForArgumentWithName_ = "typeForArgumentWithName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptTypeDescription ) )]
	public struct NSScriptComplexTypeDescription : IEquatable<NSScriptComplexTypeDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptComplexTypeDescription;
		public static implicit operator IntPtr( NSScriptComplexTypeDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptComplexTypeDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptComplexTypeDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptComplexTypeDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptComplexTypeDescription value1, NSScriptComplexTypeDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptComplexTypeDescription value1, NSScriptComplexTypeDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptComplexTypeDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptComplexTypeDescription alloc() {
			return new NSScriptComplexTypeDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject alternativeTypeDescriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alternativeTypeDescriptions( Handle, CachedSelectors.alternativeTypeDescriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptComplexTypeDescription initWithAppleEventCode_alernativeTypeDescriptions_( uint code, NObjective.RuntimeObject alernativeTypeDescriptions ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAppleEventCode_alernativeTypeDescriptions_( Handle, CachedSelectors.initWithAppleEventCode_alernativeTypeDescriptions_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), code, alernativeTypeDescriptions );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptComplexTypeDescription( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alternativeTypeDescriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAppleEventCode_alernativeTypeDescriptions_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code, NObjective.RuntimeObject alernativeTypeDescriptions );
		}
		static internal class CachedSelectors {
			public static readonly Selector alternativeTypeDescriptions = "alternativeTypeDescriptions";
			public static readonly Selector initWithAppleEventCode_alernativeTypeDescriptions_ = "initWithAppleEventCode:alernativeTypeDescriptions:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptRecordTypeDescription ) )]
	public struct NSScriptDeclaredRecordTypeDescription : IEquatable<NSScriptDeclaredRecordTypeDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptDeclaredRecordTypeDescription;
		public static implicit operator IntPtr( NSScriptDeclaredRecordTypeDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptDeclaredRecordTypeDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptDeclaredRecordTypeDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptDeclaredRecordTypeDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptDeclaredRecordTypeDescription value1, NSScriptDeclaredRecordTypeDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptDeclaredRecordTypeDescription value1, NSScriptDeclaredRecordTypeDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptDeclaredRecordTypeDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptDeclaredRecordTypeDescription alloc() {
			return new NSScriptDeclaredRecordTypeDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void appendObjectClassDeclarationToAETEData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendObjectClassDeclarationToAETEData_( Handle, CachedSelectors.appendObjectClassDeclarationToAETEData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject fieldDescriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fieldDescriptions( Handle, CachedSelectors.fieldDescriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptDeclaredRecordTypeDescription initWithName_appleEventCode_fieldDescriptions_presentableDescription_( NObjective.RuntimeObject name, uint appleEventCode, NObjective.RuntimeObject fieldDescriptions, NObjective.RuntimeObject presentableDescription ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithName_appleEventCode_fieldDescriptions_presentableDescription_( Handle, CachedSelectors.initWithName_appleEventCode_fieldDescriptions_presentableDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, appleEventCode, fieldDescriptions, presentableDescription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptDeclaredRecordTypeDescription( ___result );
		}
		unsafe public NObjective.RuntimeObject presentableDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.presentableDescription( Handle, CachedSelectors.presentableDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendObjectClassDeclarationToAETEData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fieldDescriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_appleEventCode_fieldDescriptions_presentableDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, uint appleEventCode, NObjective.RuntimeObject fieldDescriptions, NObjective.RuntimeObject presentableDescription );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr presentableDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendObjectClassDeclarationToAETEData_ = "appendObjectClassDeclarationToAETEData:";
			public static readonly Selector fieldDescriptions = "fieldDescriptions";
			public static readonly Selector initWithName_appleEventCode_fieldDescriptions_presentableDescription_ = "initWithName:appleEventCode:fieldDescriptions:presentableDescription:";
			public static readonly Selector presentableDescription = "presentableDescription";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptValueTypeDescription ) )]
	public struct NSScriptEnumerationDescription : IEquatable<NSScriptEnumerationDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptEnumerationDescription;
		public static implicit operator IntPtr( NSScriptEnumerationDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptEnumerationDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptEnumerationDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptEnumerationDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptEnumerationDescription value1, NSScriptEnumerationDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptEnumerationDescription value1, NSScriptEnumerationDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptEnumerationDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptEnumerationDescription alloc() {
			return new NSScriptEnumerationDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject enumerationDescriptionFromName_implDeclaration_presoDeclaration_( NObjective.RuntimeObject name, NObjective.RuntimeObject implDeclaration, NObjective.RuntimeObject presoDeclaration ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enumerationDescriptionFromName_implDeclaration_presoDeclaration_( ClassHandle, CachedSelectors.enumerationDescriptionFromName_implDeclaration_presoDeclaration_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, implDeclaration, presoDeclaration );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void appendEnumerationDeclarationToAETEData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendEnumerationDeclarationToAETEData_( Handle, CachedSelectors.appendEnumerationDeclarationToAETEData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject enumeratorDescriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enumeratorDescriptions( Handle, CachedSelectors.enumeratorDescriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptEnumerationDescription initWithName_appleEventCode_enumeratorDescriptions_( NObjective.RuntimeObject name, uint appleEventCode, NObjective.RuntimeObject enumeratorDescriptions ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithName_appleEventCode_enumeratorDescriptions_( Handle, CachedSelectors.initWithName_appleEventCode_enumeratorDescriptions_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ), name, appleEventCode, enumeratorDescriptions );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptEnumerationDescription( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendEnumerationDeclarationToAETEData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr enumerationDescriptionFromName_implDeclaration_presoDeclaration_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject implDeclaration, NObjective.RuntimeObject presoDeclaration );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr enumeratorDescriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_appleEventCode_enumeratorDescriptions_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, uint appleEventCode, NObjective.RuntimeObject enumeratorDescriptions );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendEnumerationDeclarationToAETEData_ = "appendEnumerationDeclarationToAETEData:";
			public static readonly Selector enumerationDescriptionFromName_implDeclaration_presoDeclaration_ = "enumerationDescriptionFromName:implDeclaration:presoDeclaration:";
			public static readonly Selector enumeratorDescriptions = "enumeratorDescriptions";
			public static readonly Selector initWithName_appleEventCode_enumeratorDescriptions_ = "initWithName:appleEventCode:enumeratorDescriptions:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptEnumeratorDescription : IEquatable<NSScriptEnumeratorDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptEnumeratorDescription;
		public static implicit operator IntPtr( NSScriptEnumeratorDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptEnumeratorDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptEnumeratorDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptEnumeratorDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptEnumeratorDescription value1, NSScriptEnumeratorDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptEnumeratorDescription value1, NSScriptEnumeratorDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptEnumeratorDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptEnumeratorDescription alloc() {
			return new NSScriptEnumeratorDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptEnumeratorDescription initWithAppleEventCode_presentableDescription_name_( uint code, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAppleEventCode_presentableDescription_name_( Handle, CachedSelectors.initWithAppleEventCode_presentableDescription_name_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), code, presentableDescription, name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptEnumeratorDescription( ___result );
		}
		unsafe public NSScriptEnumeratorDescription initWithAppleEventCode_presentableDescription_name_value_( uint code, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAppleEventCode_presentableDescription_name_value_( Handle, CachedSelectors.initWithAppleEventCode_presentableDescription_name_value_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), code, presentableDescription, name, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptEnumeratorDescription( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAppleEventCode_presentableDescription_name_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAppleEventCode_presentableDescription_name_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithAppleEventCode_presentableDescription_name_ = "initWithAppleEventCode:presentableDescription:name:";
			public static readonly Selector initWithAppleEventCode_presentableDescription_name_value_ = "initWithAppleEventCode:presentableDescription:name:value:";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptExecutionContext : IEquatable<NSScriptExecutionContext> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptExecutionContext;
		public static implicit operator IntPtr( NSScriptExecutionContext value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptExecutionContext value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptExecutionContext?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptExecutionContext value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptExecutionContext value1, NSScriptExecutionContext value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptExecutionContext value1, NSScriptExecutionContext value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptExecutionContext( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptExecutionContext alloc() {
			return new NSScriptExecutionContext( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSScriptExecutionContext sharedScriptExecutionContext() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedScriptExecutionContext( ClassHandle, CachedSelectors.sharedScriptExecutionContext, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptExecutionContext( ___result );
		}
		unsafe public NObjective.RuntimeObject objectBeingTested() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectBeingTested( Handle, CachedSelectors.objectBeingTested, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rangeContainerObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rangeContainerObject( Handle, CachedSelectors.rangeContainerObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setObjectBeingTested_( NObjective.RuntimeObject tested ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObjectBeingTested_( Handle, CachedSelectors.setObjectBeingTested_, out ___occuredException, sizeof( NObjective.RuntimeObject ), tested );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRangeContainerObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRangeContainerObject_( Handle, CachedSelectors.setRangeContainerObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTopLevelObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTopLevelObject_( Handle, CachedSelectors.setTopLevelObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject topLevelObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.topLevelObject( Handle, CachedSelectors.topLevelObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectBeingTested( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rangeContainerObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObjectBeingTested_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject tested );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRangeContainerObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTopLevelObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedScriptExecutionContext( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr topLevelObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector objectBeingTested = "objectBeingTested";
			public static readonly Selector rangeContainerObject = "rangeContainerObject";
			public static readonly Selector setObjectBeingTested_ = "setObjectBeingTested:";
			public static readonly Selector setRangeContainerObject_ = "setRangeContainerObject:";
			public static readonly Selector setTopLevelObject_ = "setTopLevelObject:";
			public static readonly Selector sharedScriptExecutionContext = "sharedScriptExecutionContext";
			public static readonly Selector topLevelObject = "topLevelObject";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectTypeDescription ) )]
	public struct NSScriptFakeObjectTypeDescription : IEquatable<NSScriptFakeObjectTypeDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptFakeObjectTypeDescription;
		public static implicit operator IntPtr( NSScriptFakeObjectTypeDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptFakeObjectTypeDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptFakeObjectTypeDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptFakeObjectTypeDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptFakeObjectTypeDescription value1, NSScriptFakeObjectTypeDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptFakeObjectTypeDescription value1, NSScriptFakeObjectTypeDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptFakeObjectTypeDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptFakeObjectTypeDescription alloc() {
			return new NSScriptFakeObjectTypeDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptFakeObjectTypeDescription initWithAppleEventCode_( uint code ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAppleEventCode_( Handle, CachedSelectors.initWithAppleEventCode_, out ___occuredException, sizeof( uint ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptFakeObjectTypeDescription( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAppleEventCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithAppleEventCode_ = "initWithAppleEventCode:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptingAppleEventHandler : IEquatable<NSScriptingAppleEventHandler> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptingAppleEventHandler;
		public static implicit operator IntPtr( NSScriptingAppleEventHandler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptingAppleEventHandler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptingAppleEventHandler?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptingAppleEventHandler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptingAppleEventHandler value1, NSScriptingAppleEventHandler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptingAppleEventHandler value1, NSScriptingAppleEventHandler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptingAppleEventHandler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptingAppleEventHandler alloc() {
			return new NSScriptingAppleEventHandler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedScriptingAppleEventHandler() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedScriptingAppleEventHandler( ClassHandle, CachedSelectors.sharedScriptingAppleEventHandler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void handleCommandEvent_withReplyEvent_( NObjective.RuntimeObject @event, NObjective.RuntimeObject withReplyEvent ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleCommandEvent_withReplyEvent_( Handle, CachedSelectors.handleCommandEvent_withReplyEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @event, withReplyEvent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleGetAETEEvent_withReplyEvent_( NObjective.RuntimeObject @event, NObjective.RuntimeObject withReplyEvent ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleGetAETEEvent_withReplyEvent_( Handle, CachedSelectors.handleGetAETEEvent_withReplyEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @event, withReplyEvent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void registerForCommandDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerForCommandDescription_( Handle, CachedSelectors.registerForCommandDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleCommandEvent_withReplyEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event, NObjective.RuntimeObject withReplyEvent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleGetAETEEvent_withReplyEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event, NObjective.RuntimeObject withReplyEvent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerForCommandDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedScriptingAppleEventHandler( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector handleCommandEvent_withReplyEvent_ = "handleCommandEvent:withReplyEvent:";
			public static readonly Selector handleGetAETEEvent_withReplyEvent_ = "handleGetAETEEvent:withReplyEvent:";
			public static readonly Selector registerForCommandDescription_ = "registerForCommandDescription:";
			public static readonly Selector sharedScriptingAppleEventHandler = "sharedScriptingAppleEventHandler";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptTypeDescription ) )]
	public struct NSScriptListTypeDescription : IEquatable<NSScriptListTypeDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptListTypeDescription;
		public static implicit operator IntPtr( NSScriptListTypeDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptListTypeDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptListTypeDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptListTypeDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptListTypeDescription value1, NSScriptListTypeDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptListTypeDescription value1, NSScriptListTypeDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptListTypeDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptListTypeDescription alloc() {
			return new NSScriptListTypeDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject elementTypeDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementTypeDescription( Handle, CachedSelectors.elementTypeDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptListTypeDescription initWithElementTypeDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithElementTypeDescription_( Handle, CachedSelectors.initWithElementTypeDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptListTypeDescription( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementTypeDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithElementTypeDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
		}
		static internal class CachedSelectors {
			public static readonly Selector elementTypeDescription = "elementTypeDescription";
			public static readonly Selector initWithElementTypeDescription_ = "initWithElementTypeDescription:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptObjectSpecifier : IEquatable<NSScriptObjectSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptObjectSpecifier;
		public static implicit operator IntPtr( NSScriptObjectSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptObjectSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptObjectSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptObjectSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptObjectSpecifier value1, NSScriptObjectSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptObjectSpecifier value1, NSScriptObjectSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptObjectSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptObjectSpecifier alloc() {
			return new NSScriptObjectSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptObjectSpecifier childSpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childSpecifier( Handle, CachedSelectors.childSpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		unsafe public NSScriptClassDescription containerClassDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containerClassDescription( Handle, CachedSelectors.containerClassDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptClassDescription( ___result );
		}
		unsafe public bool containerIsObjectBeingTested() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containerIsObjectBeingTested( Handle, CachedSelectors.containerIsObjectBeingTested, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool containerIsRangeContainerObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containerIsRangeContainerObject( Handle, CachedSelectors.containerIsRangeContainerObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSScriptObjectSpecifier containerSpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containerSpecifier( Handle, CachedSelectors.containerSpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int evaluationErrorNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluationErrorNumber( Handle, CachedSelectors.evaluationErrorNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSScriptObjectSpecifier evaluationErrorSpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluationErrorSpecifier( Handle, CachedSelectors.evaluationErrorSpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		unsafe public IntPtr indicesOfObjectsByEvaluatingWithContainer_count_( NObjective.RuntimeObject container, IntPtr count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indicesOfObjectsByEvaluatingWithContainer_count_( Handle, CachedSelectors.indicesOfObjectsByEvaluatingWithContainer_count_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), container, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSScriptObjectSpecifier initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		unsafe public NSScriptObjectSpecifier initWithContainerClassDescription_containerSpecifier_key_( NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.initWithContainerClassDescription_containerSpecifier_key_( Handle, CachedSelectors.initWithContainerClassDescription_containerSpecifier_key_, out ___occuredException, sizeof( NSScriptClassDescription ) + sizeof( NSScriptObjectSpecifier ) + sizeof( IntPtr ), description, containerSpecifier, ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		unsafe public NSScriptObjectSpecifier initWithContainerSpecifier_key_( NSScriptObjectSpecifier specifier, string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.initWithContainerSpecifier_key_( Handle, CachedSelectors.initWithContainerSpecifier_key_, out ___occuredException, sizeof( NSScriptObjectSpecifier ) + sizeof( IntPtr ), specifier, ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		unsafe public string key() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.key( Handle, CachedSelectors.key, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSScriptClassDescription keyClassDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyClassDescription( Handle, CachedSelectors.keyClassDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptClassDescription( ___result );
		}
		unsafe public NObjective.RuntimeObject objectsByEvaluatingSpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectsByEvaluatingSpecifier( Handle, CachedSelectors.objectsByEvaluatingSpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectsByEvaluatingWithContainers_( NObjective.RuntimeObject containers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectsByEvaluatingWithContainers_( Handle, CachedSelectors.objectsByEvaluatingWithContainers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), containers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setChildSpecifier_( NSScriptObjectSpecifier specifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChildSpecifier_( Handle, CachedSelectors.setChildSpecifier_, out ___occuredException, sizeof( NSScriptObjectSpecifier ), specifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setContainerClassDescription_( NSScriptClassDescription description ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContainerClassDescription_( Handle, CachedSelectors.setContainerClassDescription_, out ___occuredException, sizeof( NSScriptClassDescription ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setContainerIsObjectBeingTested_( bool tested ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContainerIsObjectBeingTested_( Handle, CachedSelectors.setContainerIsObjectBeingTested_, out ___occuredException, sizeof( bool ), tested );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setContainerIsRangeContainerObject_( bool @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContainerIsRangeContainerObject_( Handle, CachedSelectors.setContainerIsRangeContainerObject_, out ___occuredException, sizeof( bool ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setContainerSpecifier_( NSScriptObjectSpecifier specifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContainerSpecifier_( Handle, CachedSelectors.setContainerSpecifier_, out ___occuredException, sizeof( NSScriptObjectSpecifier ), specifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEvaluationErrorNumber_( int number ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEvaluationErrorNumber_( Handle, CachedSelectors.setEvaluationErrorNumber_, out ___occuredException, sizeof( int ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.setKey_( Handle, CachedSelectors.setKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr childSpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr containerClassDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool containerIsObjectBeingTested( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool containerIsRangeContainerObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr containerSpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int evaluationErrorNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr evaluationErrorSpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr indicesOfObjectsByEvaluatingWithContainer_count_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject container, IntPtr count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassDescription_containerSpecifier_key_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerSpecifier_key_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptObjectSpecifier specifier, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr key( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyClassDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectsByEvaluatingSpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectsByEvaluatingWithContainers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject containers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChildSpecifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptObjectSpecifier specifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContainerClassDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptClassDescription description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContainerIsObjectBeingTested_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool tested );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContainerIsRangeContainerObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContainerSpecifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptObjectSpecifier specifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEvaluationErrorNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int number );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
		}
		static internal class CachedSelectors {
			public static readonly Selector childSpecifier = "childSpecifier";
			public static readonly Selector containerClassDescription = "containerClassDescription";
			public static readonly Selector containerIsObjectBeingTested = "containerIsObjectBeingTested";
			public static readonly Selector containerIsRangeContainerObject = "containerIsRangeContainerObject";
			public static readonly Selector containerSpecifier = "containerSpecifier";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector evaluationErrorNumber = "evaluationErrorNumber";
			public static readonly Selector evaluationErrorSpecifier = "evaluationErrorSpecifier";
			public static readonly Selector indicesOfObjectsByEvaluatingWithContainer_count_ = "indicesOfObjectsByEvaluatingWithContainer:count:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithContainerClassDescription_containerSpecifier_key_ = "initWithContainerClassDescription:containerSpecifier:key:";
			public static readonly Selector initWithContainerSpecifier_key_ = "initWithContainerSpecifier:key:";
			public static readonly Selector key = "key";
			public static readonly Selector keyClassDescription = "keyClassDescription";
			public static readonly Selector objectsByEvaluatingSpecifier = "objectsByEvaluatingSpecifier";
			public static readonly Selector objectsByEvaluatingWithContainers_ = "objectsByEvaluatingWithContainers:";
			public static readonly Selector setChildSpecifier_ = "setChildSpecifier:";
			public static readonly Selector setContainerClassDescription_ = "setContainerClassDescription:";
			public static readonly Selector setContainerIsObjectBeingTested_ = "setContainerIsObjectBeingTested:";
			public static readonly Selector setContainerIsRangeContainerObject_ = "setContainerIsRangeContainerObject:";
			public static readonly Selector setContainerSpecifier_ = "setContainerSpecifier:";
			public static readonly Selector setEvaluationErrorNumber_ = "setEvaluationErrorNumber:";
			public static readonly Selector setKey_ = "setKey:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptTypeDescription ) )]
	public struct NSScriptObjectTypeDescription : IEquatable<NSScriptObjectTypeDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptObjectTypeDescription;
		public static implicit operator IntPtr( NSScriptObjectTypeDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptObjectTypeDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptObjectTypeDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptObjectTypeDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptObjectTypeDescription value1, NSScriptObjectTypeDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptObjectTypeDescription value1, NSScriptObjectTypeDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptObjectTypeDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptObjectTypeDescription alloc() {
			return new NSScriptObjectTypeDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptObjectTypeDescription initWithClassDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithClassDescription_( Handle, CachedSelectors.initWithClassDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectTypeDescription( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithClassDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithClassDescription_ = "initWithClassDescription:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptRecordTypeDescription ) )]
	public struct NSScriptPropertiesRecordTypeDescription : IEquatable<NSScriptPropertiesRecordTypeDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptPropertiesRecordTypeDescription;
		public static implicit operator IntPtr( NSScriptPropertiesRecordTypeDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptPropertiesRecordTypeDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptPropertiesRecordTypeDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptPropertiesRecordTypeDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptPropertiesRecordTypeDescription value1, NSScriptPropertiesRecordTypeDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptPropertiesRecordTypeDescription value1, NSScriptPropertiesRecordTypeDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptPropertiesRecordTypeDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptPropertiesRecordTypeDescription alloc() {
			return new NSScriptPropertiesRecordTypeDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptPropertiesRecordTypeDescription initWithContainerClassDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContainerClassDescription_( Handle, CachedSelectors.initWithContainerClassDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptPropertiesRecordTypeDescription( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassDescription_ = "initWithContainerClassDescription:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptPropertyDescription : IEquatable<NSScriptPropertyDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptPropertyDescription;
		public static implicit operator IntPtr( NSScriptPropertyDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptPropertyDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptPropertyDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptPropertyDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptPropertyDescription value1, NSScriptPropertyDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptPropertyDescription value1, NSScriptPropertyDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptPropertyDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptPropertyDescription alloc() {
			return new NSScriptPropertyDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject propertyDescriptionFromKey_implDeclaration_presoDeclaration_suiteName_className_( NObjective.RuntimeObject key, NObjective.RuntimeObject implDeclaration, NObjective.RuntimeObject presoDeclaration, NObjective.RuntimeObject suiteName, NObjective.RuntimeObject className ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyDescriptionFromKey_implDeclaration_presoDeclaration_suiteName_className_( ClassHandle, CachedSelectors.propertyDescriptionFromKey_implDeclaration_presoDeclaration_suiteName_className_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, implDeclaration, presoDeclaration, suiteName, className );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint access() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.access( Handle, CachedSelectors.access, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void appendElementClassDeclarationToAETEData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendElementClassDeclarationToAETEData_( Handle, CachedSelectors.appendElementClassDeclarationToAETEData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint appleEventCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventCode( Handle, CachedSelectors.appleEventCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject fullTypeName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fullTypeName( Handle, CachedSelectors.fullTypeName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptPropertyDescription initWithKey_type_access_( NObjective.RuntimeObject key, NObjective.RuntimeObject type, uint access ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_type_access_( Handle, CachedSelectors.initWithKey_type_access_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), key, type, access );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptPropertyDescription( ___result );
		}
		unsafe public NObjective.RuntimeObject key() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.key( Handle, CachedSelectors.key, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject presentableRelationshipClassName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.presentableRelationshipClassName( Handle, CachedSelectors.presentableRelationshipClassName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reconcileToSuiteRegistry_suiteName_className_( NObjective.RuntimeObject registry, NObjective.RuntimeObject suiteName, NObjective.RuntimeObject className ) {
			RuntimeObject ___occuredException;
			NativeMethods.reconcileToSuiteRegistry_suiteName_className_( Handle, CachedSelectors.reconcileToSuiteRegistry_suiteName_className_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), registry, suiteName, className );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTypeDescription_forReconcilingToSuiteRegistry_( NObjective.RuntimeObject description, NObjective.RuntimeObject forReconcilingToSuiteRegistry ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTypeDescription_forReconcilingToSuiteRegistry_( Handle, CachedSelectors.setTypeDescription_forReconcilingToSuiteRegistry_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), description, forReconcilingToSuiteRegistry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject typeDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeDescription( Handle, CachedSelectors.typeDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint access( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendElementClassDeclarationToAETEData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fullTypeName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_type_access_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject type, uint access );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr key( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr presentableRelationshipClassName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyDescriptionFromKey_implDeclaration_presoDeclaration_suiteName_className_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject implDeclaration, NObjective.RuntimeObject presoDeclaration, NObjective.RuntimeObject suiteName, NObjective.RuntimeObject className );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reconcileToSuiteRegistry_suiteName_className_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject registry, NObjective.RuntimeObject suiteName, NObjective.RuntimeObject className );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTypeDescription_forReconcilingToSuiteRegistry_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description, NObjective.RuntimeObject forReconcilingToSuiteRegistry );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr typeDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector access = "access";
			public static readonly Selector appendElementClassDeclarationToAETEData_ = "appendElementClassDeclarationToAETEData:";
			public static readonly Selector appleEventCode = "appleEventCode";
			public static readonly Selector fullTypeName = "fullTypeName";
			public static readonly Selector initWithKey_type_access_ = "initWithKey:type:access:";
			public static readonly Selector key = "key";
			public static readonly Selector presentableRelationshipClassName = "presentableRelationshipClassName";
			public static readonly Selector propertyDescriptionFromKey_implDeclaration_presoDeclaration_suiteName_className_ = "propertyDescriptionFromKey:implDeclaration:presoDeclaration:suiteName:className:";
			public static readonly Selector reconcileToSuiteRegistry_suiteName_className_ = "reconcileToSuiteRegistry:suiteName:className:";
			public static readonly Selector setTypeDescription_forReconcilingToSuiteRegistry_ = "setTypeDescription:forReconcilingToSuiteRegistry:";
			public static readonly Selector typeDescription = "typeDescription";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptRecordFieldDescription : IEquatable<NSScriptRecordFieldDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptRecordFieldDescription;
		public static implicit operator IntPtr( NSScriptRecordFieldDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptRecordFieldDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptRecordFieldDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptRecordFieldDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptRecordFieldDescription value1, NSScriptRecordFieldDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptRecordFieldDescription value1, NSScriptRecordFieldDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptRecordFieldDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptRecordFieldDescription alloc() {
			return new NSScriptRecordFieldDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void appendPropertyDeclarationToAETEData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendPropertyDeclarationToAETEData_( Handle, CachedSelectors.appendPropertyDeclarationToAETEData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint appleEventCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventCode( Handle, CachedSelectors.appleEventCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSScriptRecordFieldDescription initWithKey_type_appleEventCode_presentableDescription_name_( NObjective.RuntimeObject key, NObjective.RuntimeObject type, uint appleEventCode, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_type_appleEventCode_presentableDescription_name_( Handle, CachedSelectors.initWithKey_type_appleEventCode_presentableDescription_name_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, type, appleEventCode, presentableDescription, name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptRecordFieldDescription( ___result );
		}
		unsafe public NSScriptRecordFieldDescription initWithKey_typeDescription_appleEventCode_presentableDescription_name_( NObjective.RuntimeObject key, NObjective.RuntimeObject typeDescription, uint appleEventCode, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_typeDescription_appleEventCode_presentableDescription_name_( Handle, CachedSelectors.initWithKey_typeDescription_appleEventCode_presentableDescription_name_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, typeDescription, appleEventCode, presentableDescription, name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptRecordFieldDescription( ___result );
		}
		unsafe public NObjective.RuntimeObject key() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.key( Handle, CachedSelectors.key, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject presentableDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.presentableDescription( Handle, CachedSelectors.presentableDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject presentableName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.presentableName( Handle, CachedSelectors.presentableName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reconcileToSuiteRegistry_suiteName_recordTypeName_( NObjective.RuntimeObject registry, NObjective.RuntimeObject suiteName, NObjective.RuntimeObject recordTypeName ) {
			RuntimeObject ___occuredException;
			NativeMethods.reconcileToSuiteRegistry_suiteName_recordTypeName_( Handle, CachedSelectors.reconcileToSuiteRegistry_suiteName_recordTypeName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), registry, suiteName, recordTypeName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject typeDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeDescription( Handle, CachedSelectors.typeDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendPropertyDeclarationToAETEData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_type_appleEventCode_presentableDescription_name_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject type, uint appleEventCode, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_typeDescription_appleEventCode_presentableDescription_name_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject typeDescription, uint appleEventCode, NObjective.RuntimeObject presentableDescription, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr key( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr presentableDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr presentableName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reconcileToSuiteRegistry_suiteName_recordTypeName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject registry, NObjective.RuntimeObject suiteName, NObjective.RuntimeObject recordTypeName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr typeDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendPropertyDeclarationToAETEData_ = "appendPropertyDeclarationToAETEData:";
			public static readonly Selector appleEventCode = "appleEventCode";
			public static readonly Selector initWithKey_type_appleEventCode_presentableDescription_name_ = "initWithKey:type:appleEventCode:presentableDescription:name:";
			public static readonly Selector initWithKey_typeDescription_appleEventCode_presentableDescription_name_ = "initWithKey:typeDescription:appleEventCode:presentableDescription:name:";
			public static readonly Selector key = "key";
			public static readonly Selector presentableDescription = "presentableDescription";
			public static readonly Selector presentableName = "presentableName";
			public static readonly Selector reconcileToSuiteRegistry_suiteName_recordTypeName_ = "reconcileToSuiteRegistry:suiteName:recordTypeName:";
			public static readonly Selector typeDescription = "typeDescription";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptTypeDescription ) )]
	public struct NSScriptRecordTypeDescription : IEquatable<NSScriptRecordTypeDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptRecordTypeDescription;
		public static implicit operator IntPtr( NSScriptRecordTypeDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptRecordTypeDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptRecordTypeDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptRecordTypeDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptRecordTypeDescription value1, NSScriptRecordTypeDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptRecordTypeDescription value1, NSScriptRecordTypeDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptRecordTypeDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptRecordTypeDescription alloc() {
			return new NSScriptRecordTypeDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject fieldDescriptionForAppleEventCode_( uint code ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fieldDescriptionForAppleEventCode_( Handle, CachedSelectors.fieldDescriptionForAppleEventCode_, out ___occuredException, sizeof( uint ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject fieldDescriptionForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fieldDescriptionForKey_( Handle, CachedSelectors.fieldDescriptionForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fieldDescriptionForAppleEventCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fieldDescriptionForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
		}
		static internal class CachedSelectors {
			public static readonly Selector fieldDescriptionForAppleEventCode_ = "fieldDescriptionForAppleEventCode:";
			public static readonly Selector fieldDescriptionForKey_ = "fieldDescriptionForKey:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptSDEFElement : IEquatable<NSScriptSDEFElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptSDEFElement;
		public static implicit operator IntPtr( NSScriptSDEFElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptSDEFElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptSDEFElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptSDEFElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptSDEFElement value1, NSScriptSDEFElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptSDEFElement value1, NSScriptSDEFElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptSDEFElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptSDEFElement alloc() {
			return new NSScriptSDEFElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addDescription_forSubelementName_( NObjective.RuntimeObject description, NObjective.RuntimeObject forSubelementName ) {
			RuntimeObject ___occuredException;
			NativeMethods.addDescription_forSubelementName_( Handle, CachedSelectors.addDescription_forSubelementName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), description, forSubelementName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject attributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributes( Handle, CachedSelectors.attributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject descriptionForOptionalSubelementName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptionForOptionalSubelementName_( Handle, CachedSelectors.descriptionForOptionalSubelementName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptSDEFElement initWithName_attributes_( NObjective.RuntimeObject name, NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithName_attributes_( Handle, CachedSelectors.initWithName_attributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptSDEFElement( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject oneOrMoreDescriptionsForSubelementName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.oneOrMoreDescriptionsForSubelementName_( Handle, CachedSelectors.oneOrMoreDescriptionsForSubelementName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForOptionalAttributeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForOptionalAttributeKey_( Handle, CachedSelectors.valueForOptionalAttributeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForRequiredAttributeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForRequiredAttributeKey_( Handle, CachedSelectors.valueForRequiredAttributeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject zeroOrMoreDescriptionsForSubelementName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.zeroOrMoreDescriptionsForSubelementName_( Handle, CachedSelectors.zeroOrMoreDescriptionsForSubelementName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addDescription_forSubelementName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description, NObjective.RuntimeObject forSubelementName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionForOptionalSubelementName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_attributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr oneOrMoreDescriptionsForSubelementName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForOptionalAttributeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForRequiredAttributeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr zeroOrMoreDescriptionsForSubelementName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
		}
		static internal class CachedSelectors {
			public static readonly Selector addDescription_forSubelementName_ = "addDescription:forSubelementName:";
			public static readonly Selector attributes = "attributes";
			public static readonly Selector descriptionForOptionalSubelementName_ = "descriptionForOptionalSubelementName:";
			public static readonly Selector initWithName_attributes_ = "initWithName:attributes:";
			public static readonly Selector name = "name";
			public static readonly Selector oneOrMoreDescriptionsForSubelementName_ = "oneOrMoreDescriptionsForSubelementName:";
			public static readonly Selector valueForOptionalAttributeKey_ = "valueForOptionalAttributeKey:";
			public static readonly Selector valueForRequiredAttributeKey_ = "valueForRequiredAttributeKey:";
			public static readonly Selector zeroOrMoreDescriptionsForSubelementName_ = "zeroOrMoreDescriptionsForSubelementName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptSDEFParser : IEquatable<NSScriptSDEFParser> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptSDEFParser;
		public static implicit operator IntPtr( NSScriptSDEFParser value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptSDEFParser value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptSDEFParser?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptSDEFParser value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptSDEFParser value1, NSScriptSDEFParser value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptSDEFParser value1, NSScriptSDEFParser value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptSDEFParser( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptSDEFParser alloc() {
			return new NSScriptSDEFParser( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptSDEFParser initWithDataNoCopy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDataNoCopy_( Handle, CachedSelectors.initWithDataNoCopy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptSDEFParser( ___result );
		}
		unsafe public void parser_didEndElement_namespaceURI_qualifiedName_( NObjective.RuntimeObject parser, NObjective.RuntimeObject didEndElement, NObjective.RuntimeObject namespaceURI, NObjective.RuntimeObject qualifiedName ) {
			RuntimeObject ___occuredException;
			NativeMethods.parser_didEndElement_namespaceURI_qualifiedName_( Handle, CachedSelectors.parser_didEndElement_namespaceURI_qualifiedName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), parser, didEndElement, namespaceURI, qualifiedName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void parser_didStartElement_namespaceURI_qualifiedName_attributes_( NObjective.RuntimeObject parser, NObjective.RuntimeObject didStartElement, NObjective.RuntimeObject namespaceURI, NObjective.RuntimeObject qualifiedName, NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.parser_didStartElement_namespaceURI_qualifiedName_attributes_( Handle, CachedSelectors.parser_didStartElement_namespaceURI_qualifiedName_attributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), parser, didStartElement, namespaceURI, qualifiedName, attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void parser_parseErrorOccurred_( NObjective.RuntimeObject parser, NObjective.RuntimeObject parseErrorOccurred ) {
			RuntimeObject ___occuredException;
			NativeMethods.parser_parseErrorOccurred_( Handle, CachedSelectors.parser_parseErrorOccurred_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), parser, parseErrorOccurred );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBundle_( NObjective.RuntimeObject bundle ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBundle_( Handle, CachedSelectors.setBundle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), bundle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setParsesCocoaElements_( char elements ) {
			RuntimeObject ___occuredException;
			NativeMethods.setParsesCocoaElements_( Handle, CachedSelectors.setParsesCocoaElements_, out ___occuredException, sizeof( char ), elements );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject suiteDescriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suiteDescriptions( Handle, CachedSelectors.suiteDescriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDataNoCopy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void parser_didEndElement_namespaceURI_qualifiedName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject parser, NObjective.RuntimeObject didEndElement, NObjective.RuntimeObject namespaceURI, NObjective.RuntimeObject qualifiedName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void parser_didStartElement_namespaceURI_qualifiedName_attributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject parser, NObjective.RuntimeObject didStartElement, NObjective.RuntimeObject namespaceURI, NObjective.RuntimeObject qualifiedName, NObjective.RuntimeObject attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void parser_parseErrorOccurred_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject parser, NObjective.RuntimeObject parseErrorOccurred );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBundle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject bundle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setParsesCocoaElements_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char elements );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr suiteDescriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithDataNoCopy_ = "initWithDataNoCopy:";
			public static readonly Selector parser_didEndElement_namespaceURI_qualifiedName_ = "parser:didEndElement:namespaceURI:qualifiedName:";
			public static readonly Selector parser_didStartElement_namespaceURI_qualifiedName_attributes_ = "parser:didStartElement:namespaceURI:qualifiedName:attributes:";
			public static readonly Selector parser_parseErrorOccurred_ = "parser:parseErrorOccurred:";
			public static readonly Selector setBundle_ = "setBundle:";
			public static readonly Selector setParsesCocoaElements_ = "setParsesCocoaElements:";
			public static readonly Selector suiteDescriptions = "suiteDescriptions";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptSuiteDescription : IEquatable<NSScriptSuiteDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptSuiteDescription;
		public static implicit operator IntPtr( NSScriptSuiteDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptSuiteDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptSuiteDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptSuiteDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptSuiteDescription value1, NSScriptSuiteDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptSuiteDescription value1, NSScriptSuiteDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptSuiteDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptSuiteDescription alloc() {
			return new NSScriptSuiteDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static uint currentSuiteAppleEventCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentSuiteAppleEventCode( ClassHandle, CachedSelectors.currentSuiteAppleEventCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static NObjective.RuntimeObject currentSuiteTerminology() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentSuiteTerminology( ClassHandle, CachedSelectors.currentSuiteTerminology, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sortedClassDescriptions_( NObjective.RuntimeObject descriptions ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sortedClassDescriptions_( ClassHandle, CachedSelectors.sortedClassDescriptions_, out ___occuredException, sizeof( NObjective.RuntimeObject ), descriptions );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject suiteDescriptionFromPropertyListDeclaration_bundle_( NObjective.RuntimeObject declaration, NObjective.RuntimeObject bundle ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suiteDescriptionFromPropertyListDeclaration_bundle_( ClassHandle, CachedSelectors.suiteDescriptionFromPropertyListDeclaration_bundle_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), declaration, bundle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ushort appendRecordTypeDeclarationsToAETEData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendRecordTypeDeclarationsToAETEData_( Handle, CachedSelectors.appendRecordTypeDeclarationsToAETEData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public ushort appendSuiteDeclarationsToAETEData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appendSuiteDeclarationsToAETEData_( Handle, CachedSelectors.appendSuiteDeclarationsToAETEData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint appleEventCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventCode( Handle, CachedSelectors.appleEventCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject bundle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bundle( Handle, CachedSelectors.bundle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject classDescriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classDescriptions( Handle, CachedSelectors.classDescriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject classDescriptionsByName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classDescriptionsByName( Handle, CachedSelectors.classDescriptionsByName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject commandDescriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.commandDescriptions( Handle, CachedSelectors.commandDescriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject commandDescriptionsByName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.commandDescriptionsByName( Handle, CachedSelectors.commandDescriptionsByName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject firstPresentableName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstPresentableName( Handle, CachedSelectors.firstPresentableName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject presentableDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.presentableDescription( Handle, CachedSelectors.presentableDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject presentableNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.presentableNames( Handle, CachedSelectors.presentableNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reconcileSelfToSuiteRegistry_( NObjective.RuntimeObject registry ) {
			RuntimeObject ___occuredException;
			NativeMethods.reconcileSelfToSuiteRegistry_( Handle, CachedSelectors.reconcileSelfToSuiteRegistry_, out ___occuredException, sizeof( NObjective.RuntimeObject ), registry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reconcileSubdescriptionsToSuiteRegistry_( NObjective.RuntimeObject registry ) {
			RuntimeObject ___occuredException;
			NativeMethods.reconcileSubdescriptionsToSuiteRegistry_( Handle, CachedSelectors.reconcileSubdescriptionsToSuiteRegistry_, out ___occuredException, sizeof( NObjective.RuntimeObject ), registry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeClassDescriptions_( NObjective.RuntimeObject descriptions ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeClassDescriptions_( Handle, CachedSelectors.removeClassDescriptions_, out ___occuredException, sizeof( NObjective.RuntimeObject ), descriptions );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeCommandDescriptions_( NObjective.RuntimeObject descriptions ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeCommandDescriptions_( Handle, CachedSelectors.removeCommandDescriptions_, out ___occuredException, sizeof( NObjective.RuntimeObject ), descriptions );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setClassDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			NativeMethods.setClassDescription_( Handle, CachedSelectors.setClassDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCommandDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCommandDescription_( Handle, CachedSelectors.setCommandDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject typeDescriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeDescriptions( Handle, CachedSelectors.typeDescriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char usesUnnamedArguments() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.usesUnnamedArguments( Handle, CachedSelectors.usesUnnamedArguments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort appendRecordTypeDeclarationsToAETEData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort appendSuiteDeclarationsToAETEData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDescriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDescriptionsByName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commandDescriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commandDescriptionsByName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint currentSuiteAppleEventCode( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentSuiteTerminology( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstPresentableName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr presentableDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr presentableNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reconcileSelfToSuiteRegistry_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject registry );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reconcileSubdescriptionsToSuiteRegistry_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject registry );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeClassDescriptions_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject descriptions );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeCommandDescriptions_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject descriptions );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setClassDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCommandDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sortedClassDescriptions_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject descriptions );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr suiteDescriptionFromPropertyListDeclaration_bundle_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject declaration, NObjective.RuntimeObject bundle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr typeDescriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char usesUnnamedArguments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendRecordTypeDeclarationsToAETEData_ = "appendRecordTypeDeclarationsToAETEData:";
			public static readonly Selector appendSuiteDeclarationsToAETEData_ = "appendSuiteDeclarationsToAETEData:";
			public static readonly Selector appleEventCode = "appleEventCode";
			public static readonly Selector bundle = "bundle";
			public static readonly Selector classDescriptions = "classDescriptions";
			public static readonly Selector classDescriptionsByName = "classDescriptionsByName";
			public static readonly Selector commandDescriptions = "commandDescriptions";
			public static readonly Selector commandDescriptionsByName = "commandDescriptionsByName";
			public static readonly Selector currentSuiteAppleEventCode = "currentSuiteAppleEventCode";
			public static readonly Selector currentSuiteTerminology = "currentSuiteTerminology";
			public static readonly Selector firstPresentableName = "firstPresentableName";
			public static readonly Selector name = "name";
			public static readonly Selector presentableDescription = "presentableDescription";
			public static readonly Selector presentableNames = "presentableNames";
			public static readonly Selector reconcileSelfToSuiteRegistry_ = "reconcileSelfToSuiteRegistry:";
			public static readonly Selector reconcileSubdescriptionsToSuiteRegistry_ = "reconcileSubdescriptionsToSuiteRegistry:";
			public static readonly Selector removeClassDescriptions_ = "removeClassDescriptions:";
			public static readonly Selector removeCommandDescriptions_ = "removeCommandDescriptions:";
			public static readonly Selector setClassDescription_ = "setClassDescription:";
			public static readonly Selector setCommandDescription_ = "setCommandDescription:";
			public static readonly Selector sortedClassDescriptions_ = "sortedClassDescriptions:";
			public static readonly Selector suiteDescriptionFromPropertyListDeclaration_bundle_ = "suiteDescriptionFromPropertyListDeclaration:bundle:";
			public static readonly Selector typeDescriptions = "typeDescriptions";
			public static readonly Selector usesUnnamedArguments = "usesUnnamedArguments";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptSuiteRegistry : IEquatable<NSScriptSuiteRegistry> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptSuiteRegistry;
		public static implicit operator IntPtr( NSScriptSuiteRegistry value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptSuiteRegistry value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptSuiteRegistry?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptSuiteRegistry value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptSuiteRegistry value1, NSScriptSuiteRegistry value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptSuiteRegistry value1, NSScriptSuiteRegistry value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptSuiteRegistry( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptSuiteRegistry alloc() {
			return new NSScriptSuiteRegistry( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void setSharedScriptSuiteRegistry_( NSScriptSuiteRegistry registry ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSharedScriptSuiteRegistry_( ClassHandle, CachedSelectors.setSharedScriptSuiteRegistry_, out ___occuredException, sizeof( NSScriptSuiteRegistry ), registry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NSScriptSuiteRegistry sharedScriptSuiteRegistry() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedScriptSuiteRegistry( ClassHandle, CachedSelectors.sharedScriptSuiteRegistry, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptSuiteRegistry( ___result );
		}
		unsafe public NSData aeteResource_( string resource ) {
			RuntimeObject ___occuredException;
			var ___wrappedresource = Runtime.CreateStringProxy( resource );
			var ___result = NativeMethods.aeteResource_( Handle, CachedSelectors.aeteResource_, out ___occuredException, sizeof( IntPtr ), ___wrappedresource );
			Runtime.ReleaseNativeObject( ___wrappedresource );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public uint appleEventCodeForSuite_( string suite ) {
			RuntimeObject ___occuredException;
			var ___wrappedsuite = Runtime.CreateStringProxy( suite );
			var ___result = NativeMethods.appleEventCodeForSuite_( Handle, CachedSelectors.appleEventCodeForSuite_, out ___occuredException, sizeof( IntPtr ), ___wrappedsuite );
			Runtime.ReleaseNativeObject( ___wrappedsuite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSBundle bundleForSuite_( string suite ) {
			RuntimeObject ___occuredException;
			var ___wrappedsuite = Runtime.CreateStringProxy( suite );
			var ___result = NativeMethods.bundleForSuite_( Handle, CachedSelectors.bundleForSuite_, out ___occuredException, sizeof( IntPtr ), ___wrappedsuite );
			Runtime.ReleaseNativeObject( ___wrappedsuite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSBundle( ___result );
		}
		unsafe public NSDictionary classDescriptionsInSuite_( string suite ) {
			RuntimeObject ___occuredException;
			var ___wrappedsuite = Runtime.CreateStringProxy( suite );
			var ___result = NativeMethods.classDescriptionsInSuite_( Handle, CachedSelectors.classDescriptionsInSuite_, out ___occuredException, sizeof( IntPtr ), ___wrappedsuite );
			Runtime.ReleaseNativeObject( ___wrappedsuite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSScriptClassDescription classDescriptionWithAppleEventCode_( uint code ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classDescriptionWithAppleEventCode_( Handle, CachedSelectors.classDescriptionWithAppleEventCode_, out ___occuredException, sizeof( uint ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptClassDescription( ___result );
		}
		unsafe public NSDictionary commandDescriptionsInSuite_( string suite ) {
			RuntimeObject ___occuredException;
			var ___wrappedsuite = Runtime.CreateStringProxy( suite );
			var ___result = NativeMethods.commandDescriptionsInSuite_( Handle, CachedSelectors.commandDescriptionsInSuite_, out ___occuredException, sizeof( IntPtr ), ___wrappedsuite );
			Runtime.ReleaseNativeObject( ___wrappedsuite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSScriptCommandDescription commandDescriptionWithAppleEventClass_andAppleEventCode_( uint @class, uint andAppleEventCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.commandDescriptionWithAppleEventClass_andAppleEventCode_( Handle, CachedSelectors.commandDescriptionWithAppleEventClass_andAppleEventCode_, out ___occuredException, sizeof( uint ) + sizeof( uint ), @class, andAppleEventCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptCommandDescription( ___result );
		}
		unsafe public void loadSuitesFromBundle_( NSBundle bundle ) {
			RuntimeObject ___occuredException;
			NativeMethods.loadSuitesFromBundle_( Handle, CachedSelectors.loadSuitesFromBundle_, out ___occuredException, sizeof( NSBundle ), bundle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void loadSuiteWithDictionary_fromBundle_( NSDictionary dictionary, NSBundle fromBundle ) {
			RuntimeObject ___occuredException;
			NativeMethods.loadSuiteWithDictionary_fromBundle_( Handle, CachedSelectors.loadSuiteWithDictionary_fromBundle_, out ___occuredException, sizeof( NSDictionary ) + sizeof( NSBundle ), dictionary, fromBundle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void registerClassDescription_( NSScriptClassDescription description ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerClassDescription_( Handle, CachedSelectors.registerClassDescription_, out ___occuredException, sizeof( NSScriptClassDescription ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void registerCommandDescription_( NSScriptCommandDescription description ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerCommandDescription_( Handle, CachedSelectors.registerCommandDescription_, out ___occuredException, sizeof( NSScriptCommandDescription ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string suiteForAppleEventCode_( uint code ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suiteForAppleEventCode_( Handle, CachedSelectors.suiteForAppleEventCode_, out ___occuredException, sizeof( uint ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSArray suiteNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suiteNames( Handle, CachedSelectors.suiteNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr aeteResource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr resource );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCodeForSuite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr suite );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundleForSuite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr suite );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDescriptionsInSuite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr suite );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classDescriptionWithAppleEventCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commandDescriptionsInSuite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr suite );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commandDescriptionWithAppleEventClass_andAppleEventCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @class, uint andAppleEventCode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadSuitesFromBundle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSBundle bundle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadSuiteWithDictionary_fromBundle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary, NSBundle fromBundle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerClassDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptClassDescription description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerCommandDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptCommandDescription description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSharedScriptSuiteRegistry_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptSuiteRegistry registry );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedScriptSuiteRegistry( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr suiteForAppleEventCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr suiteNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector aeteResource_ = "aeteResource:";
			public static readonly Selector appleEventCodeForSuite_ = "appleEventCodeForSuite:";
			public static readonly Selector bundleForSuite_ = "bundleForSuite:";
			public static readonly Selector classDescriptionsInSuite_ = "classDescriptionsInSuite:";
			public static readonly Selector classDescriptionWithAppleEventCode_ = "classDescriptionWithAppleEventCode:";
			public static readonly Selector commandDescriptionsInSuite_ = "commandDescriptionsInSuite:";
			public static readonly Selector commandDescriptionWithAppleEventClass_andAppleEventCode_ = "commandDescriptionWithAppleEventClass:andAppleEventCode:";
			public static readonly Selector loadSuitesFromBundle_ = "loadSuitesFromBundle:";
			public static readonly Selector loadSuiteWithDictionary_fromBundle_ = "loadSuiteWithDictionary:fromBundle:";
			public static readonly Selector registerClassDescription_ = "registerClassDescription:";
			public static readonly Selector registerCommandDescription_ = "registerCommandDescription:";
			public static readonly Selector setSharedScriptSuiteRegistry_ = "setSharedScriptSuiteRegistry:";
			public static readonly Selector sharedScriptSuiteRegistry = "sharedScriptSuiteRegistry";
			public static readonly Selector suiteForAppleEventCode_ = "suiteForAppleEventCode:";
			public static readonly Selector suiteNames = "suiteNames";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptPropertyDescription ) )]
	public struct NSScriptToManyRelationshipDescription : IEquatable<NSScriptToManyRelationshipDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptToManyRelationshipDescription;
		public static implicit operator IntPtr( NSScriptToManyRelationshipDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptToManyRelationshipDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptToManyRelationshipDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptToManyRelationshipDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptToManyRelationshipDescription value1, NSScriptToManyRelationshipDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptToManyRelationshipDescription value1, NSScriptToManyRelationshipDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptToManyRelationshipDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptToManyRelationshipDescription alloc() {
			return new NSScriptToManyRelationshipDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject defaultKeyMarker() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultKeyMarker( ClassHandle, CachedSelectors.defaultKeyMarker, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptToManyRelationshipDescription initWithKey_type_isReadOnly_appleEventCode_isLocationRequiredToCreate_( NObjective.RuntimeObject key, NObjective.RuntimeObject type, char isReadOnly, uint appleEventCode, char isLocationRequiredToCreate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_type_isReadOnly_appleEventCode_isLocationRequiredToCreate_( Handle, CachedSelectors.initWithKey_type_isReadOnly_appleEventCode_isLocationRequiredToCreate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( uint ) + sizeof( char ), key, type, isReadOnly, appleEventCode, isLocationRequiredToCreate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptToManyRelationshipDescription( ___result );
		}
		unsafe public bool isLocationRequiredToCreate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLocationRequiredToCreate( Handle, CachedSelectors.isLocationRequiredToCreate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultKeyMarker( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_type_isReadOnly_appleEventCode_isLocationRequiredToCreate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject type, char isReadOnly, uint appleEventCode, char isLocationRequiredToCreate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLocationRequiredToCreate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector defaultKeyMarker = "defaultKeyMarker";
			public static readonly Selector initWithKey_type_isReadOnly_appleEventCode_isLocationRequiredToCreate_ = "initWithKey:type:isReadOnly:appleEventCode:isLocationRequiredToCreate:";
			public static readonly Selector isLocationRequiredToCreate = "isLocationRequiredToCreate";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptAttributeDescription ) )]
	public struct NSScriptToOneRelationshipDescription : IEquatable<NSScriptToOneRelationshipDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptToOneRelationshipDescription;
		public static implicit operator IntPtr( NSScriptToOneRelationshipDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptToOneRelationshipDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptToOneRelationshipDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptToOneRelationshipDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptToOneRelationshipDescription value1, NSScriptToOneRelationshipDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptToOneRelationshipDescription value1, NSScriptToOneRelationshipDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptToOneRelationshipDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptToOneRelationshipDescription alloc() {
			return new NSScriptToOneRelationshipDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public bool shouldBecomeAETEPropertyDeclaration() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldBecomeAETEPropertyDeclaration( Handle, CachedSelectors.shouldBecomeAETEPropertyDeclaration, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldBecomeAETEPropertyDeclaration( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector shouldBecomeAETEPropertyDeclaration = "shouldBecomeAETEPropertyDeclaration";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptTypeDescription : IEquatable<NSScriptTypeDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptTypeDescription;
		public static implicit operator IntPtr( NSScriptTypeDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptTypeDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptTypeDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptTypeDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptTypeDescription value1, NSScriptTypeDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptTypeDescription value1, NSScriptTypeDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptTypeDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptTypeDescription alloc() {
			return new NSScriptTypeDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint appleEventCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.appleEventCode( Handle, CachedSelectors.appleEventCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public bool isEnumeration() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEnumeration( Handle, CachedSelectors.isEnumeration, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isList( Handle, CachedSelectors.isList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objcClassName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objcClassName( Handle, CachedSelectors.objcClassName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.Selector objcCreationMethodSelector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objcCreationMethodSelector( Handle, CachedSelectors.objcCreationMethodSelector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.Selector objcDescriptorCreationMethodSelector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objcDescriptorCreationMethodSelector( Handle, CachedSelectors.objcDescriptorCreationMethodSelector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void reconcileToSuiteRegistry_suiteName_( NObjective.RuntimeObject registry, NObjective.RuntimeObject suiteName ) {
			RuntimeObject ___occuredException;
			NativeMethods.reconcileToSuiteRegistry_suiteName_( Handle, CachedSelectors.reconcileToSuiteRegistry_suiteName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), registry, suiteName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint appleEventCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEnumeration( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objcClassName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector objcCreationMethodSelector( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector objcDescriptorCreationMethodSelector( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reconcileToSuiteRegistry_suiteName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject registry, NObjective.RuntimeObject suiteName );
		}
		static internal class CachedSelectors {
			public static readonly Selector appleEventCode = "appleEventCode";
			public static readonly Selector isEnumeration = "isEnumeration";
			public static readonly Selector isList = "isList";
			public static readonly Selector name = "name";
			public static readonly Selector objcClassName = "objcClassName";
			public static readonly Selector objcCreationMethodSelector = "objcCreationMethodSelector";
			public static readonly Selector objcDescriptorCreationMethodSelector = "objcDescriptorCreationMethodSelector";
			public static readonly Selector reconcileToSuiteRegistry_suiteName_ = "reconcileToSuiteRegistry:suiteName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptTypeDescription ) )]
	public struct NSScriptValueTypeDescription : IEquatable<NSScriptValueTypeDescription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptValueTypeDescription;
		public static implicit operator IntPtr( NSScriptValueTypeDescription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptValueTypeDescription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptValueTypeDescription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptValueTypeDescription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptValueTypeDescription value1, NSScriptValueTypeDescription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptValueTypeDescription value1, NSScriptValueTypeDescription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptValueTypeDescription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptValueTypeDescription alloc() {
			return new NSScriptValueTypeDescription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject valueTypeDescriptionFromName_declaration_( NObjective.RuntimeObject name, NObjective.RuntimeObject declaration ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueTypeDescriptionFromName_declaration_( ClassHandle, CachedSelectors.valueTypeDescriptionFromName_declaration_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, declaration );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSScriptValueTypeDescription initWithName_appleEventCode_objcClassName_( NObjective.RuntimeObject name, uint appleEventCode, NObjective.RuntimeObject objcClassName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithName_appleEventCode_objcClassName_( Handle, CachedSelectors.initWithName_appleEventCode_objcClassName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ), name, appleEventCode, objcClassName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptValueTypeDescription( ___result );
		}
		unsafe public NObjective.Selector objcCreationMethodSelector2() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objcCreationMethodSelector2( Handle, CachedSelectors.objcCreationMethodSelector2, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.Selector objcDescriptorCreationMethodSelector2ForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objcDescriptorCreationMethodSelector2ForClass_( Handle, CachedSelectors.objcDescriptorCreationMethodSelector2ForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_appleEventCode_objcClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, uint appleEventCode, NObjective.RuntimeObject objcClassName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector objcCreationMethodSelector2( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector objcDescriptorCreationMethodSelector2ForClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueTypeDescriptionFromName_declaration_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject declaration );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithName_appleEventCode_objcClassName_ = "initWithName:appleEventCode:objcClassName:";
			public static readonly Selector objcCreationMethodSelector2 = "objcCreationMethodSelector2";
			public static readonly Selector objcDescriptorCreationMethodSelector2ForClass_ = "objcDescriptorCreationMethodSelector2ForClass:";
			public static readonly Selector valueTypeDescriptionFromName_declaration_ = "valueTypeDescriptionFromName:declaration:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSScriptWhoseTest : IEquatable<NSScriptWhoseTest> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSScriptWhoseTest;
		public static implicit operator IntPtr( NSScriptWhoseTest value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSScriptWhoseTest value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSScriptWhoseTest?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSScriptWhoseTest value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSScriptWhoseTest value1, NSScriptWhoseTest value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSScriptWhoseTest value1, NSScriptWhoseTest value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSScriptWhoseTest( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSScriptWhoseTest alloc() {
			return new NSScriptWhoseTest( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSScriptWhoseTest initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptWhoseTest( ___result );
		}
		unsafe public bool isTrue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isTrue( Handle, CachedSelectors.isTrue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isTrue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector isTrue = "isTrue";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSExpression ) )]
	public struct NSSelfExpression : IEquatable<NSSelfExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSelfExpression;
		public static implicit operator IntPtr( NSSelfExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSelfExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSelfExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSelfExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSelfExpression value1, NSSelfExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSelfExpression value1, NSSelfExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSelfExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSelfExpression alloc() {
			return new NSSelfExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSSerializer : IEquatable<NSSerializer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSerializer;
		public static implicit operator IntPtr( NSSerializer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSerializer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSerializer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSerializer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSerializer value1, NSSerializer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSerializer value1, NSSerializer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSerializer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSerializer alloc() {
			return new NSSerializer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject serializePropertyList_( NObjective.RuntimeObject list ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serializePropertyList_( ClassHandle, CachedSelectors.serializePropertyList_, out ___occuredException, sizeof( NObjective.RuntimeObject ), list );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void serializePropertyList_intoData_( NObjective.RuntimeObject list, NObjective.RuntimeObject intoData ) {
			RuntimeObject ___occuredException;
			NativeMethods.serializePropertyList_intoData_( ClassHandle, CachedSelectors.serializePropertyList_intoData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), list, intoData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr serializePropertyList_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void serializePropertyList_intoData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list, NObjective.RuntimeObject intoData );
		}
		static internal class CachedSelectors {
			public static readonly Selector serializePropertyList_ = "serializePropertyList:";
			public static readonly Selector serializePropertyList_intoData_ = "serializePropertyList:intoData:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSSet : IEquatable<NSSet> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSet;
		public static implicit operator IntPtr( NSSet value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSet value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSet?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSet value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSet value1, NSSet value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSet value1, NSSet value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSet( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSet alloc() {
			return new NSSet( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject @set() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@set( ClassHandle, CachedSelectors.@set, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSSet setWithArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setWithArray_( ClassHandle, CachedSelectors.setWithArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSet( ___result );
		}
		unsafe public static NSSet setWithObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setWithObject_( ClassHandle, CachedSelectors.setWithObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSet( ___result );
		}
		public static NSSet setWithObjects_( NObjective.RuntimeObject objects ) {
			return new NSSet( ClassHandle.InvokeIntPtrFast( CachedSelectors.setWithObjects_, CachedEncodings.__6F587D11, objects ) );
		}
		unsafe public static NSSet setWithObjects_count_( IntPtr objects, uint count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setWithObjects_count_( ClassHandle, CachedSelectors.setWithObjects_count_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), objects, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSet( ___result );
		}
		unsafe public static NSSet setWithSet_( NSSet @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setWithSet_( ClassHandle, CachedSelectors.setWithSet_, out ___occuredException, sizeof( NSSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSet( ___result );
		}
		unsafe public NSArray allObjects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allObjects( Handle, CachedSelectors.allObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject anyObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.anyObject( Handle, CachedSelectors.anyObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool containsObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsObject_( Handle, CachedSelectors.containsObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint countForObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countForObject_( Handle, CachedSelectors.countForObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string descriptionWithLocale_( NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptionWithLocale_( Handle, CachedSelectors.descriptionWithLocale_, out ___occuredException, sizeof( NSDictionary ), locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getObjects_( System.IntPtr objects ) {
			RuntimeObject ___occuredException;
			NativeMethods.getObjects_( Handle, CachedSelectors.getObjects_, out ___occuredException, sizeof( System.IntPtr ), objects );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSSet initWithArray_( NSArray array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithArray_( Handle, CachedSelectors.initWithArray_, out ___occuredException, sizeof( NSArray ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSet( ___result );
		}
		unsafe public NSSet initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSet( ___result );
		}
		public NSSet initWithObjects_( NObjective.RuntimeObject objects ) {
			return new NSSet( Handle.InvokeIntPtrFast( CachedSelectors.initWithObjects_, CachedEncodings.__6F587D11, objects ) );
		}
		unsafe public NSSet initWithObjects_count_( IntPtr objects, uint count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObjects_count_( Handle, CachedSelectors.initWithObjects_count_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), objects, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSet( ___result );
		}
		unsafe public NSSet initWithObjects_ex_count_( System.IntPtr objects_ex, uint count ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObjects_ex_count_( Handle, CachedSelectors.initWithObjects_ex_count_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), objects_ex, count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSet( ___result );
		}
		unsafe public NSSet initWithSet_( NSSet @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSet_( Handle, CachedSelectors.initWithSet_, out ___occuredException, sizeof( NSSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSet( ___result );
		}
		unsafe public NSSet initWithSet_copyItems_( NSSet @set, bool copyItems ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSet_copyItems_( Handle, CachedSelectors.initWithSet_copyItems_, out ___occuredException, sizeof( NSSet ) + sizeof( bool ), @set, copyItems );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSet( ___result );
		}
		unsafe public bool intersectsSet_( NSSet @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.intersectsSet_( Handle, CachedSelectors.intersectsSet_, out ___occuredException, sizeof( NSSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEqualToSet_( NSSet @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToSet_( Handle, CachedSelectors.isEqualToSet_, out ___occuredException, sizeof( NSSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSubsetOfSet_( NSSet @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSubsetOfSet_( Handle, CachedSelectors.isSubsetOfSet_, out ___occuredException, sizeof( NSSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void makeObjectsPerform_( NObjective.Selector perform ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeObjectsPerform_( Handle, CachedSelectors.makeObjectsPerform_, out ___occuredException, sizeof( NObjective.Selector ), perform );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeObjectsPerform_withObject_( NObjective.Selector perform, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeObjectsPerform_withObject_( Handle, CachedSelectors.makeObjectsPerform_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), perform, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeObjectsPerformSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeObjectsPerformSelector_( Handle, CachedSelectors.makeObjectsPerformSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeObjectsPerformSelector_withObject_( NObjective.Selector selector, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeObjectsPerformSelector_withObject_( Handle, CachedSelectors.makeObjectsPerformSelector_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject member_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.member_( Handle, CachedSelectors.member_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject members_notFoundMarker_( NObjective.RuntimeObject members, NObjective.RuntimeObject notFoundMarker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.members_notFoundMarker_( Handle, CachedSelectors.members_notFoundMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, notFoundMarker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSEnumerator objectEnumerator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectEnumerator( Handle, CachedSelectors.objectEnumerator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSEnumerator( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allObjects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr anyObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool containsObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint countForObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionWithLocale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getObjects_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr objects );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObjects_count_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr objects, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObjects_ex_count_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr objects_ex, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSet_copyItems_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSSet @set, bool copyItems );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool intersectsSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSubsetOfSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeObjectsPerform_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector perform );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeObjectsPerform_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector perform, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeObjectsPerformSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeObjectsPerformSelector_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr member_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr members_notFoundMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject notFoundMarker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectEnumerator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @set( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr setWithArray_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr setWithObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr setWithObjects_count_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr objects, uint count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr setWithSet_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSSet @set );
		}
		static internal class CachedEncodings {
			public static readonly RuntimeMethodEncoding __6F587D11 = "@12@0:4@8";
		}
		static internal class CachedSelectors {
			public static readonly Selector allObjects = "allObjects";
			public static readonly Selector anyObject = "anyObject";
			public static readonly Selector containsObject_ = "containsObject:";
			public static readonly Selector count = "count";
			public static readonly Selector countForObject_ = "countForObject:";
			public static readonly Selector descriptionWithLocale_ = "descriptionWithLocale:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector getObjects_ = "getObjects:";
			public static readonly Selector initWithArray_ = "initWithArray:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithObjects_ = "initWithObjects:";
			public static readonly Selector initWithObjects_count_ = "initWithObjects:count:";
			public static readonly Selector initWithObjects_ex_count_ = "initWithObjects_ex:count:";
			public static readonly Selector initWithSet_ = "initWithSet:";
			public static readonly Selector initWithSet_copyItems_ = "initWithSet:copyItems:";
			public static readonly Selector intersectsSet_ = "intersectsSet:";
			public static readonly Selector isEqualToSet_ = "isEqualToSet:";
			public static readonly Selector isSubsetOfSet_ = "isSubsetOfSet:";
			public static readonly Selector makeObjectsPerform_ = "makeObjectsPerform:";
			public static readonly Selector makeObjectsPerform_withObject_ = "makeObjectsPerform:withObject:";
			public static readonly Selector makeObjectsPerformSelector_ = "makeObjectsPerformSelector:";
			public static readonly Selector makeObjectsPerformSelector_withObject_ = "makeObjectsPerformSelector:withObject:";
			public static readonly Selector member_ = "member:";
			public static readonly Selector members_notFoundMarker_ = "members:notFoundMarker:";
			public static readonly Selector objectEnumerator = "objectEnumerator";
			public static readonly Selector @set = "set";
			public static readonly Selector setWithArray_ = "setWithArray:";
			public static readonly Selector setWithObject_ = "setWithObject:";
			public static readonly Selector setWithObjects_ = "setWithObjects:";
			public static readonly Selector setWithObjects_count_ = "setWithObjects:count:";
			public static readonly Selector setWithSet_ = "setWithSet:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptCommand ) )]
	public struct NSSetCommand : IEquatable<NSSetCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSetCommand;
		public static implicit operator IntPtr( NSSetCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSetCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSetCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSetCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSetCommand value1, NSSetCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSetCommand value1, NSSetCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSetCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSetCommand alloc() {
			return new NSSetCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSScriptObjectSpecifier keySpecifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keySpecifier( Handle, CachedSelectors.keySpecifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptObjectSpecifier( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keySpecifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector keySpecifier = "keySpecifier";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSRefCountingNumber ) )]
	public struct NSshortNumber : IEquatable<NSshortNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSshortNumber;
		public static implicit operator IntPtr( NSshortNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSshortNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSshortNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSshortNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSshortNumber value1, NSshortNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSshortNumber value1, NSshortNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSshortNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSshortNumber alloc() {
			return new NSshortNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDictionary ) )]
	public struct NSSimpleAttributeDictionary : IEquatable<NSSimpleAttributeDictionary> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSimpleAttributeDictionary;
		public static implicit operator IntPtr( NSSimpleAttributeDictionary value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSimpleAttributeDictionary value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSimpleAttributeDictionary?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSimpleAttributeDictionary value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSimpleAttributeDictionary value1, NSSimpleAttributeDictionary value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSimpleAttributeDictionary value1, NSSimpleAttributeDictionary value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSimpleAttributeDictionary( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSimpleAttributeDictionary alloc() {
			return new NSSimpleAttributeDictionary( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject emptyAttributeDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.emptyAttributeDictionary( ClassHandle, CachedSelectors.emptyAttributeDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject newWithDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newWithDictionary_( ClassHandle, CachedSelectors.newWithDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject newWithKey_object_( NObjective.RuntimeObject key, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newWithKey_object_( Handle, CachedSelectors.newWithKey_object_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint slotForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.slotForKey_( Handle, CachedSelectors.slotForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr emptyAttributeDictionary( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newWithDictionary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newWithKey_object_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint slotForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
		}
		static internal class CachedSelectors {
			public static readonly Selector emptyAttributeDictionary = "emptyAttributeDictionary";
			public static readonly Selector newWithDictionary_ = "newWithDictionary:";
			public static readonly Selector newWithKey_object_ = "newWithKey:object:";
			public static readonly Selector slotForKey_ = "slotForKey:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSEnumerator ) )]
	public struct NSSimpleAttributeDictionaryEnumerator : IEquatable<NSSimpleAttributeDictionaryEnumerator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSimpleAttributeDictionaryEnumerator;
		public static implicit operator IntPtr( NSSimpleAttributeDictionaryEnumerator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSimpleAttributeDictionaryEnumerator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSimpleAttributeDictionaryEnumerator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSimpleAttributeDictionaryEnumerator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSimpleAttributeDictionaryEnumerator value1, NSSimpleAttributeDictionaryEnumerator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSimpleAttributeDictionaryEnumerator value1, NSSimpleAttributeDictionaryEnumerator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSimpleAttributeDictionaryEnumerator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSimpleAttributeDictionaryEnumerator alloc() {
			return new NSSimpleAttributeDictionaryEnumerator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSSimpleAttributeDictionaryEnumerator initWithAttributeDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAttributeDictionary_( Handle, CachedSelectors.initWithAttributeDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSimpleAttributeDictionaryEnumerator( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAttributeDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithAttributeDictionary_ = "initWithAttributeDictionary:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSString ) )]
	public struct NSSimpleCString : IEquatable<NSSimpleCString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSimpleCString;
		public static implicit operator IntPtr( NSSimpleCString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSimpleCString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSimpleCString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSimpleCString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSimpleCString value1, NSSimpleCString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSimpleCString value1, NSSimpleCString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSimpleCString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSimpleCString alloc() {
			return new NSSimpleCString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSSimpleCString initWithCStringNoCopy_length_( System.IntPtr copy, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCStringNoCopy_length_( Handle, CachedSelectors.initWithCStringNoCopy_length_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), copy, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSimpleCString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCStringNoCopy_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr copy, uint length );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithCStringNoCopy_length_ = "initWithCStringNoCopy:length:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPort ) )]
	public struct NSSocketPort : IEquatable<NSSocketPort> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSocketPort;
		public static implicit operator IntPtr( NSSocketPort value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSocketPort value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSocketPort?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSocketPort value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSocketPort value1, NSSocketPort value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSocketPort value1, NSSocketPort value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSocketPort( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSocketPort alloc() {
			return new NSSocketPort( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char sendBeforeTime_streamData_components_to_from_msgid_reserved_( double time, NObjective.RuntimeObject streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject to, NObjective.RuntimeObject @from, uint msgid, uint reserved ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendBeforeTime_streamData_components_to_from_msgid_reserved_( ClassHandle, CachedSelectors.sendBeforeTime_streamData_components_to_from_msgid_reserved_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( uint ), time, streamData, components, to, @from, msgid, 
			reserved );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSData address() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.address( Handle, CachedSelectors.address, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public void handlePortMessage_( NObjective.RuntimeObject message ) {
			RuntimeObject ___occuredException;
			NativeMethods.handlePortMessage_( Handle, CachedSelectors.handlePortMessage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), message );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSSocketPort initRemoteWithProtocolFamily_socketType_protocol_address_( int family, int socketType, int protocol, NSData address ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initRemoteWithProtocolFamily_socketType_protocol_address_( Handle, CachedSelectors.initRemoteWithProtocolFamily_socketType_protocol_address_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( NSData ), family, socketType, protocol, address );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSocketPort( ___result );
		}
		unsafe public NSSocketPort initRemoteWithTCPPort_host_( ushort port, string host ) {
			RuntimeObject ___occuredException;
			var ___wrappedhost = Runtime.CreateStringProxy( host );
			var ___result = NativeMethods.initRemoteWithTCPPort_host_( Handle, CachedSelectors.initRemoteWithTCPPort_host_, out ___occuredException, sizeof( ushort ) + sizeof( IntPtr ), port, ___wrappedhost );
			Runtime.ReleaseNativeObject( ___wrappedhost );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSocketPort( ___result );
		}
		unsafe public NSSocketPort initWithProtocolFamily_socketType_protocol_address_( int family, int socketType, int protocol, NSData address ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProtocolFamily_socketType_protocol_address_( Handle, CachedSelectors.initWithProtocolFamily_socketType_protocol_address_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( NSData ), family, socketType, protocol, address );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSocketPort( ___result );
		}
		unsafe public NSSocketPort initWithProtocolFamily_socketType_protocol_socket_( int family, int socketType, int protocol, int socket ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProtocolFamily_socketType_protocol_socket_( Handle, CachedSelectors.initWithProtocolFamily_socketType_protocol_socket_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( int ), family, socketType, protocol, socket );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSocketPort( ___result );
		}
		unsafe public NSSocketPort initWithTCPPort_( ushort port ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTCPPort_( Handle, CachedSelectors.initWithTCPPort_, out ___occuredException, sizeof( ushort ), port );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSocketPort( ___result );
		}
		unsafe public int protocol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protocol( Handle, CachedSelectors.protocol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int protocolFamily() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protocolFamily( Handle, CachedSelectors.protocolFamily, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char sendBeforeTime_streamData_components_from_msgid_( double time, System.IntPtr streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject @from, uint msgid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendBeforeTime_streamData_components_from_msgid_( Handle, CachedSelectors.sendBeforeTime_streamData_components_from_msgid_, out ___occuredException, sizeof( double ) + sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), time, streamData, components, @from, msgid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject signature() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.signature( Handle, CachedSelectors.signature, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int socket() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.socket( Handle, CachedSelectors.socket, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int socketType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.socketType( Handle, CachedSelectors.socketType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr address( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handlePortMessage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject message );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initRemoteWithProtocolFamily_socketType_protocol_address_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int family, int socketType, int protocol, NSData address );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initRemoteWithTCPPort_host_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort port, IntPtr host );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProtocolFamily_socketType_protocol_address_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int family, int socketType, int protocol, NSData address );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProtocolFamily_socketType_protocol_socket_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int family, int socketType, int protocol, int socket );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTCPPort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort port );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int protocol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int protocolFamily( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sendBeforeTime_streamData_components_from_msgid_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double time, System.IntPtr streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject @from, uint msgid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sendBeforeTime_streamData_components_to_from_msgid_reserved_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double time, NObjective.RuntimeObject streamData, NObjective.RuntimeObject components, NObjective.RuntimeObject to, NObjective.RuntimeObject @from, uint msgid, 
			uint reserved );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr signature( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int socket( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int socketType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector address = "address";
			public static readonly Selector handlePortMessage_ = "handlePortMessage:";
			public static readonly Selector initRemoteWithProtocolFamily_socketType_protocol_address_ = "initRemoteWithProtocolFamily:socketType:protocol:address:";
			public static readonly Selector initRemoteWithTCPPort_host_ = "initRemoteWithTCPPort:host:";
			public static readonly Selector initWithProtocolFamily_socketType_protocol_address_ = "initWithProtocolFamily:socketType:protocol:address:";
			public static readonly Selector initWithProtocolFamily_socketType_protocol_socket_ = "initWithProtocolFamily:socketType:protocol:socket:";
			public static readonly Selector initWithTCPPort_ = "initWithTCPPort:";
			public static readonly Selector protocol = "protocol";
			public static readonly Selector protocolFamily = "protocolFamily";
			public static readonly Selector sendBeforeTime_streamData_components_from_msgid_ = "sendBeforeTime:streamData:components:from:msgid:";
			public static readonly Selector sendBeforeTime_streamData_components_to_from_msgid_reserved_ = "sendBeforeTime:streamData:components:to:from:msgid:reserved:";
			public static readonly Selector signature = "signature";
			public static readonly Selector socket = "socket";
			public static readonly Selector socketType = "socketType";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPortNameServer ) )]
	public struct NSSocketPortNameServer : IEquatable<NSSocketPortNameServer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSocketPortNameServer;
		public static implicit operator IntPtr( NSSocketPortNameServer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSocketPortNameServer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSocketPortNameServer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSocketPortNameServer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSocketPortNameServer value1, NSSocketPortNameServer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSocketPortNameServer value1, NSSocketPortNameServer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSocketPortNameServer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSocketPortNameServer alloc() {
			return new NSSocketPortNameServer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedInstance( ClassHandle, CachedSelectors.sharedInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ushort defaultNameServerPortNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultNameServerPortNumber( Handle, CachedSelectors.defaultNameServerPortNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void netService_didNotPublish_( NObjective.RuntimeObject service, NObjective.RuntimeObject didNotPublish ) {
			RuntimeObject ___occuredException;
			NativeMethods.netService_didNotPublish_( Handle, CachedSelectors.netService_didNotPublish_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, didNotPublish );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void netService_didNotResolve_( NObjective.RuntimeObject service, NObjective.RuntimeObject didNotResolve ) {
			RuntimeObject ___occuredException;
			NativeMethods.netService_didNotResolve_( Handle, CachedSelectors.netService_didNotResolve_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, didNotResolve );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void netServiceDidStop_( NObjective.RuntimeObject stop ) {
			RuntimeObject ___occuredException;
			NativeMethods.netServiceDidStop_( Handle, CachedSelectors.netServiceDidStop_, out ___occuredException, sizeof( NObjective.RuntimeObject ), stop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void netServiceWillPublish_( NObjective.RuntimeObject publish ) {
			RuntimeObject ___occuredException;
			NativeMethods.netServiceWillPublish_( Handle, CachedSelectors.netServiceWillPublish_, out ___occuredException, sizeof( NObjective.RuntimeObject ), publish );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void netServiceWillResolve_( NObjective.RuntimeObject resolve ) {
			RuntimeObject ___occuredException;
			NativeMethods.netServiceWillResolve_( Handle, CachedSelectors.netServiceWillResolve_, out ___occuredException, sizeof( NObjective.RuntimeObject ), resolve );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSPort portForName_host_nameServerPortNumber_( string name, string host, ushort nameServerPortNumber ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedhost = Runtime.CreateStringProxy( host );
			var ___result = NativeMethods.portForName_host_nameServerPortNumber_( Handle, CachedSelectors.portForName_host_nameServerPortNumber_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( ushort ), ___wrappedname, ___wrappedhost, nameServerPortNumber );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedhost );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPort( ___result );
		}
		unsafe public bool registerPort_name_nameServerPortNumber_( NSPort port, string name, ushort nameServerPortNumber ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.registerPort_name_nameServerPortNumber_( Handle, CachedSelectors.registerPort_name_nameServerPortNumber_, out ___occuredException, sizeof( NSPort ) + sizeof( IntPtr ) + sizeof( ushort ), port, ___wrappedname, nameServerPortNumber );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDefaultNameServerPortNumber_( ushort number ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultNameServerPortNumber_( Handle, CachedSelectors.setDefaultNameServerPortNumber_, out ___occuredException, sizeof( ushort ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort defaultNameServerPortNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void netService_didNotPublish_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject didNotPublish );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void netService_didNotResolve_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject didNotResolve );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void netServiceDidStop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject stop );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void netServiceWillPublish_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject publish );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void netServiceWillResolve_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject resolve );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr portForName_host_nameServerPortNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr host, ushort nameServerPortNumber );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool registerPort_name_nameServerPortNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPort port, IntPtr name, ushort nameServerPortNumber );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultNameServerPortNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort number );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedInstance( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector defaultNameServerPortNumber = "defaultNameServerPortNumber";
			public static readonly Selector netService_didNotPublish_ = "netService:didNotPublish:";
			public static readonly Selector netService_didNotResolve_ = "netService:didNotResolve:";
			public static readonly Selector netServiceDidStop_ = "netServiceDidStop:";
			public static readonly Selector netServiceWillPublish_ = "netServiceWillPublish:";
			public static readonly Selector netServiceWillResolve_ = "netServiceWillResolve:";
			public static readonly Selector portForName_host_nameServerPortNumber_ = "portForName:host:nameServerPortNumber:";
			public static readonly Selector registerPort_name_nameServerPortNumber_ = "registerPort:name:nameServerPortNumber:";
			public static readonly Selector setDefaultNameServerPortNumber_ = "setDefaultNameServerPortNumber:";
			public static readonly Selector sharedInstance = "sharedInstance";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSSortDescriptor : IEquatable<NSSortDescriptor> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSortDescriptor;
		public static implicit operator IntPtr( NSSortDescriptor value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSortDescriptor value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSortDescriptor?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSortDescriptor value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSortDescriptor value1, NSSortDescriptor value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSortDescriptor value1, NSSortDescriptor value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSortDescriptor( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSortDescriptor alloc() {
			return new NSSortDescriptor( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public bool @ascending() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@ascending( Handle, CachedSelectors.@ascending, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSComparisonResult compareObject_toObject_( NObjective.RuntimeObject @object, NObjective.RuntimeObject toObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareObject_toObject_( Handle, CachedSelectors.compareObject_toObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, toObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSSortDescriptor initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSortDescriptor( ___result );
		}
		unsafe public NSSortDescriptor initWithKey_ascending_( string key, bool @ascending ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.initWithKey_ascending_( Handle, CachedSelectors.initWithKey_ascending_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappedkey, @ascending );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSortDescriptor( ___result );
		}
		unsafe public NSSortDescriptor initWithKey_ascending_selector_( string key, bool @ascending, NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.initWithKey_ascending_selector_( Handle, CachedSelectors.initWithKey_ascending_selector_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( NObjective.Selector ), ___wrappedkey, @ascending, selector );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSortDescriptor( ___result );
		}
		unsafe public string key() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.key( Handle, CachedSelectors.key, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject reversedSortDescriptor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reversedSortDescriptor( Handle, CachedSelectors.reversedSortDescriptor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.Selector selector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selector( Handle, CachedSelectors.selector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool @ascending( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareObject_toObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject toObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_ascending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key, bool @ascending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_ascending_selector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key, bool @ascending, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr key( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr reversedSortDescriptor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector selector( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector @ascending = "ascending";
			public static readonly Selector compareObject_toObject_ = "compareObject:toObject:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithKey_ascending_ = "initWithKey:ascending:";
			public static readonly Selector initWithKey_ascending_selector_ = "initWithKey:ascending:selector:";
			public static readonly Selector key = "key";
			public static readonly Selector reversedSortDescriptor = "reversedSortDescriptor";
			public static readonly Selector selector = "selector";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptWhoseTest ) )]
	public struct NSSpecifierTest : IEquatable<NSSpecifierTest> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSpecifierTest;
		public static implicit operator IntPtr( NSSpecifierTest value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSpecifierTest value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSpecifierTest?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSpecifierTest value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSpecifierTest value1, NSSpecifierTest value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSpecifierTest value1, NSSpecifierTest value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSpecifierTest( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSpecifierTest alloc() {
			return new NSSpecifierTest( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSSpecifierTest initWithObjectSpecifier_comparisonOperator_testObject_( NSScriptObjectSpecifier specifier, NSTestComparisonOperation comparisonOperator, NObjective.RuntimeObject testObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObjectSpecifier_comparisonOperator_testObject_( Handle, CachedSelectors.initWithObjectSpecifier_comparisonOperator_testObject_, out ___occuredException, sizeof( NSScriptObjectSpecifier ) + sizeof( NSTestComparisonOperation ) + sizeof( NObjective.RuntimeObject ), specifier, comparisonOperator, testObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSpecifierTest( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObjectSpecifier_comparisonOperator_testObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptObjectSpecifier specifier, NSTestComparisonOperation comparisonOperator, NObjective.RuntimeObject testObject );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithObjectSpecifier_comparisonOperator_testObject_ = "initWithObjectSpecifier:comparisonOperator:testObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSSpellServer : IEquatable<NSSpellServer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSpellServer;
		public static implicit operator IntPtr( NSSpellServer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSpellServer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSpellServer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSpellServer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSpellServer value1, NSSpellServer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSpellServer value1, NSSpellServer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSpellServer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSpellServer alloc() {
			return new NSSpellServer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dictionaryInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryInfo_( Handle, CachedSelectors.dictionaryInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isWord_inDictionaries_caseSensitive_( NObjective.RuntimeObject word, NObjective.RuntimeObject inDictionaries, char caseSensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isWord_inDictionaries_caseSensitive_( Handle, CachedSelectors.isWord_inDictionaries_caseSensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), word, inDictionaries, caseSensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isWordInUserDictionaries_caseSensitive_( string dictionaries, bool caseSensitive ) {
			RuntimeObject ___occuredException;
			var ___wrappeddictionaries = Runtime.CreateStringProxy( dictionaries );
			var ___result = NativeMethods.isWordInUserDictionaries_caseSensitive_( Handle, CachedSelectors.isWordInUserDictionaries_caseSensitive_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappeddictionaries, caseSensitive );
			Runtime.ReleaseNativeObject( ___wrappeddictionaries );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject openUserDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.openUserDictionary_( Handle, CachedSelectors.openUserDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool registerLanguage_byVendor_( string language, string byVendor ) {
			RuntimeObject ___occuredException;
			var ___wrappedlanguage = Runtime.CreateStringProxy( language );
			var ___wrappedbyVendor = Runtime.CreateStringProxy( byVendor );
			var ___result = NativeMethods.registerLanguage_byVendor_( Handle, CachedSelectors.registerLanguage_byVendor_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedlanguage, ___wrappedbyVendor );
			Runtime.ReleaseNativeObject( ___wrappedlanguage );
			Runtime.ReleaseNativeObject( ___wrappedbyVendor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void run() {
			RuntimeObject ___occuredException;
			NativeMethods.run( Handle, CachedSelectors.run, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int sizeOfDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sizeOfDictionary_( Handle, CachedSelectors.sizeOfDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isWord_inDictionaries_caseSensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject word, NObjective.RuntimeObject inDictionaries, char caseSensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isWordInUserDictionaries_caseSensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr dictionaries, bool caseSensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr openUserDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool registerLanguage_byVendor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr language, IntPtr byVendor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void run( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int sizeOfDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
		}
		static internal class CachedSelectors {
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector dictionaryInfo_ = "dictionaryInfo:";
			public static readonly Selector isWord_inDictionaries_caseSensitive_ = "isWord:inDictionaries:caseSensitive:";
			public static readonly Selector isWordInUserDictionaries_caseSensitive_ = "isWordInUserDictionaries:caseSensitive:";
			public static readonly Selector openUserDictionary_ = "openUserDictionary:";
			public static readonly Selector registerLanguage_byVendor_ = "registerLanguage:byVendor:";
			public static readonly Selector run = "run";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector sizeOfDictionary_ = "sizeOfDictionary:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSStream : IEquatable<NSStream> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSStream;
		public static implicit operator IntPtr( NSStream value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSStream value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSStream?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSStream value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSStream value1, NSStream value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSStream value1, NSStream value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSStream( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSStream alloc() {
			return new NSStream( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void getStreamsToHost_port_inputStream_outputStream_( NSHost host, int port, ref NSInputStream inputStream, ref NSOutputStream outputStream ) {
			RuntimeObject ___occuredException;
			NativeMethods.getStreamsToHost_port_inputStream_outputStream_( ClassHandle, CachedSelectors.getStreamsToHost_port_inputStream_outputStream_, out ___occuredException, sizeof( NSHost ) + sizeof( int ) + sizeof( IntPtr ) + sizeof( IntPtr ), host, port, ref inputStream, ref outputStream );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void close() {
			RuntimeObject ___occuredException;
			NativeMethods.close( Handle, CachedSelectors.close, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void open() {
			RuntimeObject ___occuredException;
			NativeMethods.open( Handle, CachedSelectors.open, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject propertyForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.propertyForKey_( Handle, CachedSelectors.propertyForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeFromRunLoop_forMode_( NSRunLoop loop, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.removeFromRunLoop_forMode_( Handle, CachedSelectors.removeFromRunLoop_forMode_, out ___occuredException, sizeof( NSRunLoop ) + sizeof( IntPtr ), loop, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleInRunLoop_forMode_( NSRunLoop loop, string forMode ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMode = Runtime.CreateStringProxy( forMode );
			NativeMethods.scheduleInRunLoop_forMode_( Handle, CachedSelectors.scheduleInRunLoop_forMode_, out ___occuredException, sizeof( NSRunLoop ) + sizeof( IntPtr ), loop, ___wrappedforMode );
			Runtime.ReleaseNativeObject( ___wrappedforMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool setProperty_forKey_( NObjective.RuntimeObject property, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			var ___result = NativeMethods.setProperty_forKey_( Handle, CachedSelectors.setProperty_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), property, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSError streamError() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.streamError( Handle, CachedSelectors.streamError, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSError( ___result );
		}
		unsafe public NSStreamStatus streamStatus() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.streamStatus( Handle, CachedSelectors.streamStatus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSStreamStatus ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void close( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getStreamsToHost_port_inputStream_outputStream_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSHost host, int port, ref NSInputStream inputStream, ref NSOutputStream outputStream );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void open( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeFromRunLoop_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRunLoop loop, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scheduleInRunLoop_forMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSRunLoop loop, IntPtr forMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool setProperty_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr streamError( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int streamStatus( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector close = "close";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector getStreamsToHost_port_inputStream_outputStream_ = "getStreamsToHost:port:inputStream:outputStream:";
			public static readonly Selector open = "open";
			public static readonly Selector propertyForKey_ = "propertyForKey:";
			public static readonly Selector removeFromRunLoop_forMode_ = "removeFromRunLoop:forMode:";
			public static readonly Selector scheduleInRunLoop_forMode_ = "scheduleInRunLoop:forMode:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setProperty_forKey_ = "setProperty:forKey:";
			public static readonly Selector streamError = "streamError";
			public static readonly Selector streamStatus = "streamStatus";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSString : IEquatable<NSString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSString;
		public static implicit operator IntPtr( NSString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSString value1, NSString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSString value1, NSString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSString alloc() {
			return new NSString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static IntPtr availableStringEncodings() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.availableStringEncodings( ClassHandle, CachedSelectors.availableStringEncodings, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static uint defaultCStringEncoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultCStringEncoding( ClassHandle, CachedSelectors.defaultCStringEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static string localizedNameOfStringEncoding_( uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedNameOfStringEncoding_( ClassHandle, CachedSelectors.localizedNameOfStringEncoding_, out ___occuredException, sizeof( uint ), encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		public static NObjective.RuntimeObject localizedStringWithFormat_( string format ) {
			return ClassHandle.InvokeObjectFast( CachedSelectors.localizedStringWithFormat_, CachedEncodings.__6F587D11, format );
		}
		unsafe public static string pathWithComponents_( NSArray components ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathWithComponents_( ClassHandle, CachedSelectors.pathWithComponents_, out ___occuredException, sizeof( NSArray ), components );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static NObjective.RuntimeObject @string() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@string( ClassHandle, CachedSelectors.@string, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSString stringWithCharacters_length_( IntPtr characters, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithCharacters_length_( ClassHandle, CachedSelectors.stringWithCharacters_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), characters, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithContentsOfFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.stringWithContentsOfFile_( ClassHandle, CachedSelectors.stringWithContentsOfFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithContentsOfFile_encoding_error_( string file, uint encoding, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.stringWithContentsOfFile_encoding_error_( ClassHandle, CachedSelectors.stringWithContentsOfFile_encoding_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), ___wrappedfile, encoding, ref error );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithContentsOfFile_usedEncoding_error_( string file, IntPtr usedEncoding, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.stringWithContentsOfFile_usedEncoding_error_( ClassHandle, CachedSelectors.stringWithContentsOfFile_usedEncoding_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedfile, usedEncoding, ref error );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithContentsOfURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithContentsOfURL_( ClassHandle, CachedSelectors.stringWithContentsOfURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithContentsOfURL_encoding_error_( NSURL url, uint encoding, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithContentsOfURL_encoding_error_( ClassHandle, CachedSelectors.stringWithContentsOfURL_encoding_error_, out ___occuredException, sizeof( NSURL ) + sizeof( uint ) + sizeof( IntPtr ), url, encoding, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithContentsOfURL_usedEncoding_error_( NSURL url, IntPtr usedEncoding, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithContentsOfURL_usedEncoding_error_( ClassHandle, CachedSelectors.stringWithContentsOfURL_usedEncoding_error_, out ___occuredException, sizeof( NSURL ) + sizeof( IntPtr ) + sizeof( IntPtr ), url, usedEncoding, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithCString_( IntPtr @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithCString_( ClassHandle, CachedSelectors.stringWithCString_, out ___occuredException, sizeof( IntPtr ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithCString_encoding_( IntPtr @string, uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithCString_encoding_( ClassHandle, CachedSelectors.stringWithCString_encoding_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), @string, encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithCString_length_( IntPtr @string, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithCString_length_( ClassHandle, CachedSelectors.stringWithCString_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), @string, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		public static NSString stringWithFormat_( string format ) {
			return new NSString( ClassHandle.InvokeIntPtrFast( CachedSelectors.stringWithFormat_, CachedEncodings.__6F587D11, format ) );
		}
		unsafe public static NSString stringWithFormat_locale_( NObjective.RuntimeObject format, NObjective.RuntimeObject locale ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithFormat_locale_( ClassHandle, CachedSelectors.stringWithFormat_locale_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), format, locale );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.stringWithString_( ClassHandle, CachedSelectors.stringWithString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public static NSString stringWithUTF8String_( IntPtr @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringWithUTF8String_( ClassHandle, CachedSelectors.stringWithUTF8String_, out ___occuredException, sizeof( IntPtr ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public bool canBeConvertedToEncoding_( uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canBeConvertedToEncoding_( Handle, CachedSelectors.canBeConvertedToEncoding_, out ___occuredException, sizeof( uint ), encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject canonicalizeHTTPEncodingString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canonicalizeHTTPEncodingString( Handle, CachedSelectors.canonicalizeHTTPEncodingString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string capitalizedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.capitalizedString( Handle, CachedSelectors.capitalizedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSComparisonResult caseInsensitiveCompare_( string compare ) {
			RuntimeObject ___occuredException;
			var ___wrappedcompare = Runtime.CreateStringProxy( compare );
			var ___result = NativeMethods.caseInsensitiveCompare_( Handle, CachedSelectors.caseInsensitiveCompare_, out ___occuredException, sizeof( IntPtr ), ___wrappedcompare );
			Runtime.ReleaseNativeObject( ___wrappedcompare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public ushort characterAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.characterAtIndex_( Handle, CachedSelectors.characterAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string commonPrefixWithString_options_( string @string, uint options ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.commonPrefixWithString_options_( Handle, CachedSelectors.commonPrefixWithString_options_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), ___wrappedstring, options );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSComparisonResult compare_( string compare ) {
			RuntimeObject ___occuredException;
			var ___wrappedcompare = Runtime.CreateStringProxy( compare );
			var ___result = NativeMethods.compare_( Handle, CachedSelectors.compare_, out ___occuredException, sizeof( IntPtr ), ___wrappedcompare );
			Runtime.ReleaseNativeObject( ___wrappedcompare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public NSComparisonResult compare_options_( string compare, uint options ) {
			RuntimeObject ___occuredException;
			var ___wrappedcompare = Runtime.CreateStringProxy( compare );
			var ___result = NativeMethods.compare_options_( Handle, CachedSelectors.compare_options_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), ___wrappedcompare, options );
			Runtime.ReleaseNativeObject( ___wrappedcompare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public NSComparisonResult compare_options_range_( string compare, uint options, _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___wrappedcompare = Runtime.CreateStringProxy( compare );
			var ___result = NativeMethods.compare_options_range_( Handle, CachedSelectors.compare_options_range_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( _NSRange ), ___wrappedcompare, options, range );
			Runtime.ReleaseNativeObject( ___wrappedcompare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public NSComparisonResult compare_options_range_locale_( string compare, uint options, _NSRange range, NSDictionary locale ) {
			RuntimeObject ___occuredException;
			var ___wrappedcompare = Runtime.CreateStringProxy( compare );
			var ___result = NativeMethods.compare_options_range_locale_( Handle, CachedSelectors.compare_options_range_locale_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( _NSRange ) + sizeof( NSDictionary ), ___wrappedcompare, options, range, locale );
			Runtime.ReleaseNativeObject( ___wrappedcompare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public uint completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_( ref string @string, bool caseSensitive, ref NSArray matchesIntoArray, NSArray filterTypes ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_( Handle, CachedSelectors.completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( IntPtr ) + sizeof( NSArray ), ref ___wrappedstring, caseSensitive, ref matchesIntoArray, filterTypes );
			@string = Runtime.UnwrapNSString( ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSArray componentsSeparatedByString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.componentsSeparatedByString_( Handle, CachedSelectors.componentsSeparatedByString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public IntPtr cString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cString( Handle, CachedSelectors.cString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint cStringLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cStringLength( Handle, CachedSelectors.cStringLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public IntPtr cStringUsingEncoding_( uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cStringUsingEncoding_( Handle, CachedSelectors.cStringUsingEncoding_, out ___occuredException, sizeof( uint ), encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSData dataUsingEncoding_( uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataUsingEncoding_( Handle, CachedSelectors.dataUsingEncoding_, out ___occuredException, sizeof( uint ), encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSData dataUsingEncoding_allowLossyConversion_( uint encoding, bool allowLossyConversion ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataUsingEncoding_allowLossyConversion_( Handle, CachedSelectors.dataUsingEncoding_allowLossyConversion_, out ___occuredException, sizeof( uint ) + sizeof( bool ), encoding, allowLossyConversion );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public string decomposedStringWithCanonicalMapping() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decomposedStringWithCanonicalMapping( Handle, CachedSelectors.decomposedStringWithCanonicalMapping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string decomposedStringWithCompatibilityMapping() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.decomposedStringWithCompatibilityMapping( Handle, CachedSelectors.decomposedStringWithCompatibilityMapping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject displayableString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayableString( Handle, CachedSelectors.displayableString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public double doubleValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doubleValue( Handle, CachedSelectors.doubleValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint fastestEncoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fastestEncoding( Handle, CachedSelectors.fastestEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public IntPtr fileSystemRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileSystemRepresentation( Handle, CachedSelectors.fileSystemRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float floatValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.floatValue( Handle, CachedSelectors.floatValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void getCharacters_( IntPtr characters ) {
			RuntimeObject ___occuredException;
			NativeMethods.getCharacters_( Handle, CachedSelectors.getCharacters_, out ___occuredException, sizeof( IntPtr ), characters );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getCharacters_range_( IntPtr characters, _NSRange range ) {
			RuntimeObject ___occuredException;
			NativeMethods.getCharacters_range_( Handle, CachedSelectors.getCharacters_range_, out ___occuredException, sizeof( IntPtr ) + sizeof( _NSRange ), characters, range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getCString_( IntPtr @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.getCString_( Handle, CachedSelectors.getCString_, out ___occuredException, sizeof( IntPtr ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getCString_maxLength_( IntPtr @string, uint maxLength ) {
			RuntimeObject ___occuredException;
			NativeMethods.getCString_maxLength_( Handle, CachedSelectors.getCString_maxLength_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), @string, maxLength );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool getCString_maxLength_encoding_( IntPtr @string, uint maxLength, uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getCString_maxLength_encoding_( Handle, CachedSelectors.getCString_maxLength_encoding_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( uint ), @string, maxLength, encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void getCString_maxLength_range_remainingRange_( IntPtr @string, uint maxLength, _NSRange range, _NSRange[] remainingRange ) {
			RuntimeObject ___occuredException;
			NativeMethods.getCString_maxLength_range_remainingRange_( Handle, CachedSelectors.getCString_maxLength_range_remainingRange_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( _NSRange ) + sizeof( IntPtr ), @string, maxLength, range, remainingRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool getFileSystemRepresentation_maxLength_( IntPtr representation, uint maxLength ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getFileSystemRepresentation_maxLength_( Handle, CachedSelectors.getFileSystemRepresentation_maxLength_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), representation, maxLength );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void getLineStart_end_contentsEnd_forRange_( IntPtr start, IntPtr end, IntPtr contentsEnd, _NSRange forRange ) {
			RuntimeObject ___occuredException;
			NativeMethods.getLineStart_end_contentsEnd_forRange_( Handle, CachedSelectors.getLineStart_end_contentsEnd_forRange_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( _NSRange ), start, end, contentsEnd, forRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getParagraphStart_end_contentsEnd_forRange_( IntPtr start, IntPtr end, IntPtr contentsEnd, _NSRange forRange ) {
			RuntimeObject ___occuredException;
			NativeMethods.getParagraphStart_end_contentsEnd_forRange_( Handle, CachedSelectors.getParagraphStart_end_contentsEnd_forRange_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( _NSRange ), start, end, contentsEnd, forRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool hasPrefix_( string prefix ) {
			RuntimeObject ___occuredException;
			var ___wrappedprefix = Runtime.CreateStringProxy( prefix );
			var ___result = NativeMethods.hasPrefix_( Handle, CachedSelectors.hasPrefix_, out ___occuredException, sizeof( IntPtr ), ___wrappedprefix );
			Runtime.ReleaseNativeObject( ___wrappedprefix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool hasSuffix_( string suffix ) {
			RuntimeObject ___occuredException;
			var ___wrappedsuffix = Runtime.CreateStringProxy( suffix );
			var ___result = NativeMethods.hasSuffix_( Handle, CachedSelectors.hasSuffix_, out ___occuredException, sizeof( IntPtr ), ___wrappedsuffix );
			Runtime.ReleaseNativeObject( ___wrappedsuffix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSString initWithBytesNoCopy_length_encoding_freeWhenDone_( IntPtr copy, uint length, uint encoding, bool freeWhenDone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBytesNoCopy_length_encoding_freeWhenDone_( Handle, CachedSelectors.initWithBytesNoCopy_length_encoding_freeWhenDone_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( uint ) + sizeof( bool ), copy, length, encoding, freeWhenDone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithCharacters_length_( IntPtr characters, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCharacters_length_( Handle, CachedSelectors.initWithCharacters_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), characters, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithCharactersNoCopy_length_freeWhenDone_( IntPtr copy, uint length, bool freeWhenDone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCharactersNoCopy_length_freeWhenDone_( Handle, CachedSelectors.initWithCharactersNoCopy_length_freeWhenDone_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( bool ), copy, length, freeWhenDone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithContentsOfFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.initWithContentsOfFile_( Handle, CachedSelectors.initWithContentsOfFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithContentsOfFile_encoding_error_( string file, uint encoding, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.initWithContentsOfFile_encoding_error_( Handle, CachedSelectors.initWithContentsOfFile_encoding_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), ___wrappedfile, encoding, ref error );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithContentsOfFile_usedEncoding_error_( string file, IntPtr usedEncoding, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.initWithContentsOfFile_usedEncoding_error_( Handle, CachedSelectors.initWithContentsOfFile_usedEncoding_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedfile, usedEncoding, ref error );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithContentsOfURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_( Handle, CachedSelectors.initWithContentsOfURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithContentsOfURL_encoding_error_( NSURL url, uint encoding, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_encoding_error_( Handle, CachedSelectors.initWithContentsOfURL_encoding_error_, out ___occuredException, sizeof( NSURL ) + sizeof( uint ) + sizeof( IntPtr ), url, encoding, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithContentsOfURL_usedEncoding_error_( NSURL url, IntPtr usedEncoding, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_usedEncoding_error_( Handle, CachedSelectors.initWithContentsOfURL_usedEncoding_error_, out ___occuredException, sizeof( NSURL ) + sizeof( IntPtr ) + sizeof( IntPtr ), url, usedEncoding, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithCString_( IntPtr @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCString_( Handle, CachedSelectors.initWithCString_, out ___occuredException, sizeof( IntPtr ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithCString_encoding_( IntPtr @string, uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCString_encoding_( Handle, CachedSelectors.initWithCString_encoding_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), @string, encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithCString_length_( IntPtr @string, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCString_length_( Handle, CachedSelectors.initWithCString_length_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), @string, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithCStringNoCopy_length_freeWhenDone_( IntPtr copy, uint length, bool freeWhenDone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCStringNoCopy_length_freeWhenDone_( Handle, CachedSelectors.initWithCStringNoCopy_length_freeWhenDone_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( bool ), copy, length, freeWhenDone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithData_encoding_( NSData data, uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_encoding_( Handle, CachedSelectors.initWithData_encoding_, out ___occuredException, sizeof( NSData ) + sizeof( uint ), data, encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		public NSString initWithFormat_( string format ) {
			return new NSString( Handle.InvokeIntPtrFast( CachedSelectors.initWithFormat_, CachedEncodings.__6F587D11, format ) );
		}
		unsafe public NSString initWithFormat_arguments_( string format, System.IntPtr arguments ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			var ___result = NativeMethods.initWithFormat_arguments_( Handle, CachedSelectors.initWithFormat_arguments_, out ___occuredException, sizeof( IntPtr ) + sizeof( System.IntPtr ), ___wrappedformat, arguments );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		public NSString initWithFormat_locale_( string format, NSDictionary locale ) {
			return new NSString( Handle.InvokeIntPtrFast( CachedSelectors.initWithFormat_locale_, CachedEncodings.__19F8A84A, format, locale ) );
		}
		unsafe public NSString initWithFormat_locale_arguments_( string format, NSDictionary locale, System.IntPtr arguments ) {
			RuntimeObject ___occuredException;
			var ___wrappedformat = Runtime.CreateStringProxy( format );
			var ___result = NativeMethods.initWithFormat_locale_arguments_( Handle, CachedSelectors.initWithFormat_locale_arguments_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSDictionary ) + sizeof( System.IntPtr ), ___wrappedformat, locale, arguments );
			Runtime.ReleaseNativeObject( ___wrappedformat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.initWithString_( Handle, CachedSelectors.initWithString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public NSString initWithUTF8String_( IntPtr @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUTF8String_( Handle, CachedSelectors.initWithUTF8String_, out ___occuredException, sizeof( IntPtr ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSString( ___result );
		}
		unsafe public int intValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.intValue( Handle, CachedSelectors.intValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isAbsolutePath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAbsolutePath( Handle, CachedSelectors.isAbsolutePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEqualToString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.isEqualToString_( Handle, CachedSelectors.isEqualToString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string lastPathComponent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastPathComponent( Handle, CachedSelectors.lastPathComponent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint length() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.length( Handle, CachedSelectors.length, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint lengthOfBytesUsingEncoding_( uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lengthOfBytesUsingEncoding_( Handle, CachedSelectors.lengthOfBytesUsingEncoding_, out ___occuredException, sizeof( uint ), encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public _NSRange lineRangeForRange_( _NSRange range ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			NativeMethods.lineRangeForRange_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.lineRangeForRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSComparisonResult localizedCaseInsensitiveCompare_( string compare ) {
			RuntimeObject ___occuredException;
			var ___wrappedcompare = Runtime.CreateStringProxy( compare );
			var ___result = NativeMethods.localizedCaseInsensitiveCompare_( Handle, CachedSelectors.localizedCaseInsensitiveCompare_, out ___occuredException, sizeof( IntPtr ), ___wrappedcompare );
			Runtime.ReleaseNativeObject( ___wrappedcompare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public NSComparisonResult localizedCompare_( string compare ) {
			RuntimeObject ___occuredException;
			var ___wrappedcompare = Runtime.CreateStringProxy( compare );
			var ___result = NativeMethods.localizedCompare_( Handle, CachedSelectors.localizedCompare_, out ___occuredException, sizeof( IntPtr ), ___wrappedcompare );
			Runtime.ReleaseNativeObject( ___wrappedcompare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSComparisonResult ) ___result;
		}
		unsafe public IntPtr lossyCString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lossyCString( Handle, CachedSelectors.lossyCString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string lowercaseString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lowercaseString( Handle, CachedSelectors.lowercaseString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool matchesPattern_( NObjective.RuntimeObject pattern ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchesPattern_( Handle, CachedSelectors.matchesPattern_, out ___occuredException, sizeof( NObjective.RuntimeObject ), pattern );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool matchesPattern_caseInsensitive_( NObjective.RuntimeObject pattern, char caseInsensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchesPattern_caseInsensitive_( Handle, CachedSelectors.matchesPattern_caseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), pattern, caseInsensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint maximumLengthOfBytesUsingEncoding_( uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maximumLengthOfBytesUsingEncoding_( Handle, CachedSelectors.maximumLengthOfBytesUsingEncoding_, out ___occuredException, sizeof( uint ), encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public _NSRange paragraphRangeForRange_( _NSRange range ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			NativeMethods.paragraphRangeForRange_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.paragraphRangeForRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray pathComponents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathComponents( Handle, CachedSelectors.pathComponents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public string pathExtension() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathExtension( Handle, CachedSelectors.pathExtension, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string precomposedStringWithCanonicalMapping() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.precomposedStringWithCanonicalMapping( Handle, CachedSelectors.precomposedStringWithCanonicalMapping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string precomposedStringWithCompatibilityMapping() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.precomposedStringWithCompatibilityMapping( Handle, CachedSelectors.precomposedStringWithCompatibilityMapping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyList( Handle, CachedSelectors.propertyList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDictionary propertyListFromStringsFileFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyListFromStringsFileFormat( Handle, CachedSelectors.propertyListFromStringsFileFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NObjective.RuntimeObject quotedStringRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.quotedStringRepresentation( Handle, CachedSelectors.quotedStringRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public _NSRange rangeOfCharacterFromSet_( NSCharacterSet @set ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			NativeMethods.rangeOfCharacterFromSet_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.rangeOfCharacterFromSet_, out ___occuredException, sizeof( NSCharacterSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSRange rangeOfCharacterFromSet_options_( NSCharacterSet @set, uint options ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			NativeMethods.rangeOfCharacterFromSet_options_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.rangeOfCharacterFromSet_options_, out ___occuredException, sizeof( NSCharacterSet ) + sizeof( uint ), @set, options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSRange rangeOfCharacterFromSet_options_range_( NSCharacterSet @set, uint options, _NSRange range ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			NativeMethods.rangeOfCharacterFromSet_options_range_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.rangeOfCharacterFromSet_options_range_, out ___occuredException, sizeof( NSCharacterSet ) + sizeof( uint ) + sizeof( _NSRange ), @set, options, range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSRange rangeOfComposedCharacterSequenceAtIndex_( uint index ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			NativeMethods.rangeOfComposedCharacterSequenceAtIndex_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.rangeOfComposedCharacterSequenceAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSRange rangeOfString_( string @string ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.rangeOfString_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.rangeOfString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSRange rangeOfString_options_( string @string, uint options ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.rangeOfString_options_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.rangeOfString_options_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ), ___wrappedstring, options );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSRange rangeOfString_options_range_( string @string, uint options, _NSRange range ) {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.rangeOfString_options_range_( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.rangeOfString_options_range_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( _NSRange ), ___wrappedstring, options, range );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingBeginsWith_( NObjective.RuntimeObject with ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingBeginsWith_( Handle, CachedSelectors.scriptingBeginsWith_, out ___occuredException, sizeof( NObjective.RuntimeObject ), with );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingContains_( NObjective.RuntimeObject contains ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingContains_( Handle, CachedSelectors.scriptingContains_, out ___occuredException, sizeof( NObjective.RuntimeObject ), contains );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingEndsWith_( NObjective.RuntimeObject with ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingEndsWith_( Handle, CachedSelectors.scriptingEndsWith_, out ___occuredException, sizeof( NObjective.RuntimeObject ), with );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingIsEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingIsEqualTo_( Handle, CachedSelectors.scriptingIsEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingIsGreaterThan_( NObjective.RuntimeObject than ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingIsGreaterThan_( Handle, CachedSelectors.scriptingIsGreaterThan_, out ___occuredException, sizeof( NObjective.RuntimeObject ), than );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingIsGreaterThanOrEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingIsGreaterThanOrEqualTo_( Handle, CachedSelectors.scriptingIsGreaterThanOrEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingIsLessThan_( NObjective.RuntimeObject than ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingIsLessThan_( Handle, CachedSelectors.scriptingIsLessThan_, out ___occuredException, sizeof( NObjective.RuntimeObject ), than );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scriptingIsLessThanOrEqualTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptingIsLessThanOrEqualTo_( Handle, CachedSelectors.scriptingIsLessThanOrEqualTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint smallestEncoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smallestEncoding( Handle, CachedSelectors.smallestEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject standardizedURLPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.standardizedURLPath( Handle, CachedSelectors.standardizedURLPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string stringByAbbreviatingWithTildeInPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByAbbreviatingWithTildeInPath( Handle, CachedSelectors.stringByAbbreviatingWithTildeInPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject stringByAddingPercentEscapes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByAddingPercentEscapes( Handle, CachedSelectors.stringByAddingPercentEscapes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string stringByAddingPercentEscapesUsingEncoding_( uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByAddingPercentEscapesUsingEncoding_( Handle, CachedSelectors.stringByAddingPercentEscapesUsingEncoding_, out ___occuredException, sizeof( uint ), encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		public string stringByAppendingFormat_( string format, params object[] variableArguments ) {
			return Handle.InvokeStringFast( CachedSelectors.stringByAppendingFormat_, CachedEncodings.__6F587D11, format, variableArguments );
		}
		unsafe public string stringByAppendingPathComponent_( string component ) {
			RuntimeObject ___occuredException;
			var ___wrappedcomponent = Runtime.CreateStringProxy( component );
			var ___result = NativeMethods.stringByAppendingPathComponent_( Handle, CachedSelectors.stringByAppendingPathComponent_, out ___occuredException, sizeof( IntPtr ), ___wrappedcomponent );
			Runtime.ReleaseNativeObject( ___wrappedcomponent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string stringByAppendingPathExtension_( string extension ) {
			RuntimeObject ___occuredException;
			var ___wrappedextension = Runtime.CreateStringProxy( extension );
			var ___result = NativeMethods.stringByAppendingPathExtension_( Handle, CachedSelectors.stringByAppendingPathExtension_, out ___occuredException, sizeof( IntPtr ), ___wrappedextension );
			Runtime.ReleaseNativeObject( ___wrappedextension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string stringByAppendingString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.stringByAppendingString_( Handle, CachedSelectors.stringByAppendingString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject stringByConvertingPathToURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByConvertingPathToURL( Handle, CachedSelectors.stringByConvertingPathToURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringByConvertingURLToPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByConvertingURLToPath( Handle, CachedSelectors.stringByConvertingURLToPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string stringByDeletingLastPathComponent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByDeletingLastPathComponent( Handle, CachedSelectors.stringByDeletingLastPathComponent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string stringByDeletingPathExtension() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByDeletingPathExtension( Handle, CachedSelectors.stringByDeletingPathExtension, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string stringByExpandingTildeInPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByExpandingTildeInPath( Handle, CachedSelectors.stringByExpandingTildeInPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string stringByPaddingToLength_withString_startingAtIndex_( uint length, string withString, uint startingAtIndex ) {
			RuntimeObject ___occuredException;
			var ___wrappedwithString = Runtime.CreateStringProxy( withString );
			var ___result = NativeMethods.stringByPaddingToLength_withString_startingAtIndex_( Handle, CachedSelectors.stringByPaddingToLength_withString_startingAtIndex_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ) + sizeof( uint ), length, ___wrappedwithString, startingAtIndex );
			Runtime.ReleaseNativeObject( ___wrappedwithString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject stringByRemovingPercentEscapes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByRemovingPercentEscapes( Handle, CachedSelectors.stringByRemovingPercentEscapes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string stringByReplacingPercentEscapesUsingEncoding_( uint encoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByReplacingPercentEscapesUsingEncoding_( Handle, CachedSelectors.stringByReplacingPercentEscapesUsingEncoding_, out ___occuredException, sizeof( uint ), encoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string stringByResolvingSymlinksInPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByResolvingSymlinksInPath( Handle, CachedSelectors.stringByResolvingSymlinksInPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string stringByStandardizingPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByStandardizingPath( Handle, CachedSelectors.stringByStandardizingPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string stringByTrimmingCharactersInSet_( NSCharacterSet @set ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringByTrimmingCharactersInSet_( Handle, CachedSelectors.stringByTrimmingCharactersInSet_, out ___occuredException, sizeof( NSCharacterSet ), @set );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject stringMarkingUpcaseTransitionsWithDelimiter2_( NObjective.RuntimeObject delimiter2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringMarkingUpcaseTransitionsWithDelimiter2_( Handle, CachedSelectors.stringMarkingUpcaseTransitionsWithDelimiter2_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delimiter2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSArray stringsByAppendingPaths_( NSArray paths ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsByAppendingPaths_( Handle, CachedSelectors.stringsByAppendingPaths_, out ___occuredException, sizeof( NSArray ), paths );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public string substringFromIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.substringFromIndex_( Handle, CachedSelectors.substringFromIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string substringToIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.substringToIndex_( Handle, CachedSelectors.substringToIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string substringWithRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.substringWithRange_( Handle, CachedSelectors.substringWithRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string uppercaseString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uppercaseString( Handle, CachedSelectors.uppercaseString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject urlPathRelativeToPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.urlPathRelativeToPath_( Handle, CachedSelectors.urlPathRelativeToPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public IntPtr UTF8String() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.UTF8String( Handle, CachedSelectors.UTF8String, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool writeToFile_atomically_( string file, bool atomically ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.writeToFile_atomically_( Handle, CachedSelectors.writeToFile_atomically_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappedfile, atomically );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool writeToFile_atomically_encoding_error_( string file, bool atomically, uint encoding, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.writeToFile_atomically_encoding_error_( Handle, CachedSelectors.writeToFile_atomically_encoding_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( uint ) + sizeof( IntPtr ), ___wrappedfile, atomically, encoding, ref error );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool writeToURL_atomically_( NSURL url, bool atomically ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeToURL_atomically_( Handle, CachedSelectors.writeToURL_atomically_, out ___occuredException, sizeof( NSURL ) + sizeof( bool ), url, atomically );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool writeToURL_atomically_encoding_error_( NSURL url, bool atomically, uint encoding, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeToURL_atomically_encoding_error_( Handle, CachedSelectors.writeToURL_atomically_encoding_error_, out ___occuredException, sizeof( NSURL ) + sizeof( bool ) + sizeof( uint ) + sizeof( IntPtr ), url, atomically, encoding, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr availableStringEncodings( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canBeConvertedToEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr canonicalizeHTTPEncodingString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr capitalizedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int caseInsensitiveCompare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr compare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort characterAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commonPrefixWithString_options_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr compare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compare_options_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr compare, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compare_options_range_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr compare, uint options, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compare_options_range_locale_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr compare, uint options, _NSRange range, NSDictionary locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ref IntPtr @string, bool caseSensitive, ref NSArray matchesIntoArray, NSArray filterTypes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr componentsSeparatedByString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr cString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint cStringLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr cStringUsingEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataUsingEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataUsingEncoding_allowLossyConversion_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding, bool allowLossyConversion );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decomposedStringWithCanonicalMapping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr decomposedStringWithCompatibilityMapping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint defaultCStringEncoding( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayableString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double doubleValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fastestEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr fileSystemRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float floatValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getCharacters_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr characters );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getCharacters_range_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr characters, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getCString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getCString_maxLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint maxLength );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool getCString_maxLength_encoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint maxLength, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getCString_maxLength_range_remainingRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint maxLength, _NSRange range, _NSRange[] remainingRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool getFileSystemRepresentation_maxLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr representation, uint maxLength );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getLineStart_end_contentsEnd_forRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr start, IntPtr end, IntPtr contentsEnd, _NSRange forRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getParagraphStart_end_contentsEnd_forRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr start, IntPtr end, IntPtr contentsEnd, _NSRange forRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasPrefix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr prefix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasSuffix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr suffix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBytesNoCopy_length_encoding_freeWhenDone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr copy, uint length, uint encoding, bool freeWhenDone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCharacters_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr characters, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCharactersNoCopy_length_freeWhenDone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr copy, uint length, bool freeWhenDone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfFile_encoding_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, uint encoding, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfFile_usedEncoding_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, IntPtr usedEncoding, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_encoding_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, uint encoding, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_usedEncoding_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, IntPtr usedEncoding, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCString_encoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCString_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCStringNoCopy_length_freeWhenDone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr copy, uint length, bool freeWhenDone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_encoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithFormat_arguments_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format, System.IntPtr arguments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithFormat_locale_arguments_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr format, NSDictionary locale, System.IntPtr arguments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUTF8String_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int intValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAbsolutePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastPathComponent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint length( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint lengthOfBytesUsingEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void lineRangeForRange_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int localizedCaseInsensitiveCompare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr compare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int localizedCompare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr compare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedNameOfStringEncoding_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr lossyCString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lowercaseString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool matchesPattern_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pattern );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool matchesPattern_caseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pattern, char caseInsensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint maximumLengthOfBytesUsingEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void paragraphRangeForRange_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathComponents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathExtension( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathWithComponents_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray components );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr precomposedStringWithCanonicalMapping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr precomposedStringWithCompatibilityMapping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyListFromStringsFileFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr quotedStringRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void rangeOfCharacterFromSet_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCharacterSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void rangeOfCharacterFromSet_options_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCharacterSet @set, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void rangeOfCharacterFromSet_options_range_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCharacterSet @set, uint options, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void rangeOfComposedCharacterSequenceAtIndex_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void rangeOfString_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void rangeOfString_options_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void rangeOfString_options_range_( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint options, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingBeginsWith_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject with );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingContains_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject contains );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingEndsWith_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject with );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingIsEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingIsGreaterThan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject than );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingIsGreaterThanOrEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingIsLessThan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject than );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scriptingIsLessThanOrEqualTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint smallestEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr standardizedURLPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @string( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByAbbreviatingWithTildeInPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByAddingPercentEscapes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByAddingPercentEscapesUsingEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByAppendingPathComponent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr component );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByAppendingPathExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByAppendingString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByConvertingPathToURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByConvertingURLToPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByDeletingLastPathComponent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByDeletingPathExtension( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByExpandingTildeInPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByPaddingToLength_withString_startingAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint length, IntPtr withString, uint startingAtIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByRemovingPercentEscapes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByReplacingPercentEscapesUsingEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByResolvingSymlinksInPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByStandardizingPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByTrimmingCharactersInSet_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCharacterSet @set );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringMarkingUpcaseTransitionsWithDelimiter2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delimiter2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringsByAppendingPaths_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray paths );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithCharacters_length_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr characters, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithContentsOfFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithContentsOfFile_encoding_error_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, uint encoding, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithContentsOfFile_usedEncoding_error_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, IntPtr usedEncoding, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithContentsOfURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithContentsOfURL_encoding_error_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, uint encoding, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithContentsOfURL_usedEncoding_error_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, IntPtr usedEncoding, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithCString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithCString_encoding_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithCString_length_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithFormat_locale_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format, NObjective.RuntimeObject locale );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringWithUTF8String_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr substringFromIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr substringToIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr substringWithRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uppercaseString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr urlPathRelativeToPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr UTF8String( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToFile_atomically_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, bool atomically );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToFile_atomically_encoding_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file, bool atomically, uint encoding, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToURL_atomically_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, bool atomically );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeToURL_atomically_encoding_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, bool atomically, uint encoding, ref NSError error );
		}
		static internal class CachedEncodings {
			public static readonly RuntimeMethodEncoding __19F8A84A = "@16@0:4@8@12";
			public static readonly RuntimeMethodEncoding __6F587D11 = "@12@0:4@8";
		}
		static internal class CachedSelectors {
			public static readonly Selector availableStringEncodings = "availableStringEncodings";
			public static readonly Selector canBeConvertedToEncoding_ = "canBeConvertedToEncoding:";
			public static readonly Selector canonicalizeHTTPEncodingString = "canonicalizeHTTPEncodingString";
			public static readonly Selector capitalizedString = "capitalizedString";
			public static readonly Selector caseInsensitiveCompare_ = "caseInsensitiveCompare:";
			public static readonly Selector characterAtIndex_ = "characterAtIndex:";
			public static readonly Selector commonPrefixWithString_options_ = "commonPrefixWithString:options:";
			public static readonly Selector compare_ = "compare:";
			public static readonly Selector compare_options_ = "compare:options:";
			public static readonly Selector compare_options_range_ = "compare:options:range:";
			public static readonly Selector compare_options_range_locale_ = "compare:options:range:locale:";
			public static readonly Selector completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_ = "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:";
			public static readonly Selector componentsSeparatedByString_ = "componentsSeparatedByString:";
			public static readonly Selector cString = "cString";
			public static readonly Selector cStringLength = "cStringLength";
			public static readonly Selector cStringUsingEncoding_ = "cStringUsingEncoding:";
			public static readonly Selector dataUsingEncoding_ = "dataUsingEncoding:";
			public static readonly Selector dataUsingEncoding_allowLossyConversion_ = "dataUsingEncoding:allowLossyConversion:";
			public static readonly Selector decomposedStringWithCanonicalMapping = "decomposedStringWithCanonicalMapping";
			public static readonly Selector decomposedStringWithCompatibilityMapping = "decomposedStringWithCompatibilityMapping";
			public static readonly Selector defaultCStringEncoding = "defaultCStringEncoding";
			public static readonly Selector displayableString = "displayableString";
			public static readonly Selector doubleValue = "doubleValue";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector fastestEncoding = "fastestEncoding";
			public static readonly Selector fileSystemRepresentation = "fileSystemRepresentation";
			public static readonly Selector floatValue = "floatValue";
			public static readonly Selector getCharacters_ = "getCharacters:";
			public static readonly Selector getCharacters_range_ = "getCharacters:range:";
			public static readonly Selector getCString_ = "getCString:";
			public static readonly Selector getCString_maxLength_ = "getCString:maxLength:";
			public static readonly Selector getCString_maxLength_encoding_ = "getCString:maxLength:encoding:";
			public static readonly Selector getCString_maxLength_range_remainingRange_ = "getCString:maxLength:range:remainingRange:";
			public static readonly Selector getFileSystemRepresentation_maxLength_ = "getFileSystemRepresentation:maxLength:";
			public static readonly Selector getLineStart_end_contentsEnd_forRange_ = "getLineStart:end:contentsEnd:forRange:";
			public static readonly Selector getParagraphStart_end_contentsEnd_forRange_ = "getParagraphStart:end:contentsEnd:forRange:";
			public static readonly Selector hasPrefix_ = "hasPrefix:";
			public static readonly Selector hasSuffix_ = "hasSuffix:";
			public static readonly Selector initWithBytesNoCopy_length_encoding_freeWhenDone_ = "initWithBytesNoCopy:length:encoding:freeWhenDone:";
			public static readonly Selector initWithCharacters_length_ = "initWithCharacters:length:";
			public static readonly Selector initWithCharactersNoCopy_length_freeWhenDone_ = "initWithCharactersNoCopy:length:freeWhenDone:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithContentsOfFile_ = "initWithContentsOfFile:";
			public static readonly Selector initWithContentsOfFile_encoding_error_ = "initWithContentsOfFile:encoding:error:";
			public static readonly Selector initWithContentsOfFile_usedEncoding_error_ = "initWithContentsOfFile:usedEncoding:error:";
			public static readonly Selector initWithContentsOfURL_ = "initWithContentsOfURL:";
			public static readonly Selector initWithContentsOfURL_encoding_error_ = "initWithContentsOfURL:encoding:error:";
			public static readonly Selector initWithContentsOfURL_usedEncoding_error_ = "initWithContentsOfURL:usedEncoding:error:";
			public static readonly Selector initWithCString_ = "initWithCString:";
			public static readonly Selector initWithCString_encoding_ = "initWithCString:encoding:";
			public static readonly Selector initWithCString_length_ = "initWithCString:length:";
			public static readonly Selector initWithCStringNoCopy_length_freeWhenDone_ = "initWithCStringNoCopy:length:freeWhenDone:";
			public static readonly Selector initWithData_encoding_ = "initWithData:encoding:";
			public static readonly Selector initWithFormat_ = "initWithFormat:";
			public static readonly Selector initWithFormat_arguments_ = "initWithFormat:arguments:";
			public static readonly Selector initWithFormat_locale_ = "initWithFormat:locale:";
			public static readonly Selector initWithFormat_locale_arguments_ = "initWithFormat:locale:arguments:";
			public static readonly Selector initWithString_ = "initWithString:";
			public static readonly Selector initWithUTF8String_ = "initWithUTF8String:";
			public static readonly Selector intValue = "intValue";
			public static readonly Selector isAbsolutePath = "isAbsolutePath";
			public static readonly Selector isEqualToString_ = "isEqualToString:";
			public static readonly Selector lastPathComponent = "lastPathComponent";
			public static readonly Selector length = "length";
			public static readonly Selector lengthOfBytesUsingEncoding_ = "lengthOfBytesUsingEncoding:";
			public static readonly Selector lineRangeForRange_ = "lineRangeForRange:";
			public static readonly Selector localizedCaseInsensitiveCompare_ = "localizedCaseInsensitiveCompare:";
			public static readonly Selector localizedCompare_ = "localizedCompare:";
			public static readonly Selector localizedNameOfStringEncoding_ = "localizedNameOfStringEncoding:";
			public static readonly Selector localizedStringWithFormat_ = "localizedStringWithFormat:";
			public static readonly Selector lossyCString = "lossyCString";
			public static readonly Selector lowercaseString = "lowercaseString";
			public static readonly Selector matchesPattern_ = "matchesPattern:";
			public static readonly Selector matchesPattern_caseInsensitive_ = "matchesPattern:caseInsensitive:";
			public static readonly Selector maximumLengthOfBytesUsingEncoding_ = "maximumLengthOfBytesUsingEncoding:";
			public static readonly Selector paragraphRangeForRange_ = "paragraphRangeForRange:";
			public static readonly Selector pathComponents = "pathComponents";
			public static readonly Selector pathExtension = "pathExtension";
			public static readonly Selector pathWithComponents_ = "pathWithComponents:";
			public static readonly Selector precomposedStringWithCanonicalMapping = "precomposedStringWithCanonicalMapping";
			public static readonly Selector precomposedStringWithCompatibilityMapping = "precomposedStringWithCompatibilityMapping";
			public static readonly Selector propertyList = "propertyList";
			public static readonly Selector propertyListFromStringsFileFormat = "propertyListFromStringsFileFormat";
			public static readonly Selector quotedStringRepresentation = "quotedStringRepresentation";
			public static readonly Selector rangeOfCharacterFromSet_ = "rangeOfCharacterFromSet:";
			public static readonly Selector rangeOfCharacterFromSet_options_ = "rangeOfCharacterFromSet:options:";
			public static readonly Selector rangeOfCharacterFromSet_options_range_ = "rangeOfCharacterFromSet:options:range:";
			public static readonly Selector rangeOfComposedCharacterSequenceAtIndex_ = "rangeOfComposedCharacterSequenceAtIndex:";
			public static readonly Selector rangeOfString_ = "rangeOfString:";
			public static readonly Selector rangeOfString_options_ = "rangeOfString:options:";
			public static readonly Selector rangeOfString_options_range_ = "rangeOfString:options:range:";
			public static readonly Selector scriptingBeginsWith_ = "scriptingBeginsWith:";
			public static readonly Selector scriptingContains_ = "scriptingContains:";
			public static readonly Selector scriptingEndsWith_ = "scriptingEndsWith:";
			public static readonly Selector scriptingIsEqualTo_ = "scriptingIsEqualTo:";
			public static readonly Selector scriptingIsGreaterThan_ = "scriptingIsGreaterThan:";
			public static readonly Selector scriptingIsGreaterThanOrEqualTo_ = "scriptingIsGreaterThanOrEqualTo:";
			public static readonly Selector scriptingIsLessThan_ = "scriptingIsLessThan:";
			public static readonly Selector scriptingIsLessThanOrEqualTo_ = "scriptingIsLessThanOrEqualTo:";
			public static readonly Selector smallestEncoding = "smallestEncoding";
			public static readonly Selector standardizedURLPath = "standardizedURLPath";
			public static readonly Selector @string = "string";
			public static readonly Selector stringByAbbreviatingWithTildeInPath = "stringByAbbreviatingWithTildeInPath";
			public static readonly Selector stringByAddingPercentEscapes = "stringByAddingPercentEscapes";
			public static readonly Selector stringByAddingPercentEscapesUsingEncoding_ = "stringByAddingPercentEscapesUsingEncoding:";
			public static readonly Selector stringByAppendingFormat_ = "stringByAppendingFormat:";
			public static readonly Selector stringByAppendingPathComponent_ = "stringByAppendingPathComponent:";
			public static readonly Selector stringByAppendingPathExtension_ = "stringByAppendingPathExtension:";
			public static readonly Selector stringByAppendingString_ = "stringByAppendingString:";
			public static readonly Selector stringByConvertingPathToURL = "stringByConvertingPathToURL";
			public static readonly Selector stringByConvertingURLToPath = "stringByConvertingURLToPath";
			public static readonly Selector stringByDeletingLastPathComponent = "stringByDeletingLastPathComponent";
			public static readonly Selector stringByDeletingPathExtension = "stringByDeletingPathExtension";
			public static readonly Selector stringByExpandingTildeInPath = "stringByExpandingTildeInPath";
			public static readonly Selector stringByPaddingToLength_withString_startingAtIndex_ = "stringByPaddingToLength:withString:startingAtIndex:";
			public static readonly Selector stringByRemovingPercentEscapes = "stringByRemovingPercentEscapes";
			public static readonly Selector stringByReplacingPercentEscapesUsingEncoding_ = "stringByReplacingPercentEscapesUsingEncoding:";
			public static readonly Selector stringByResolvingSymlinksInPath = "stringByResolvingSymlinksInPath";
			public static readonly Selector stringByStandardizingPath = "stringByStandardizingPath";
			public static readonly Selector stringByTrimmingCharactersInSet_ = "stringByTrimmingCharactersInSet:";
			public static readonly Selector stringMarkingUpcaseTransitionsWithDelimiter2_ = "stringMarkingUpcaseTransitionsWithDelimiter2:";
			public static readonly Selector stringsByAppendingPaths_ = "stringsByAppendingPaths:";
			public static readonly Selector stringWithCharacters_length_ = "stringWithCharacters:length:";
			public static readonly Selector stringWithContentsOfFile_ = "stringWithContentsOfFile:";
			public static readonly Selector stringWithContentsOfFile_encoding_error_ = "stringWithContentsOfFile:encoding:error:";
			public static readonly Selector stringWithContentsOfFile_usedEncoding_error_ = "stringWithContentsOfFile:usedEncoding:error:";
			public static readonly Selector stringWithContentsOfURL_ = "stringWithContentsOfURL:";
			public static readonly Selector stringWithContentsOfURL_encoding_error_ = "stringWithContentsOfURL:encoding:error:";
			public static readonly Selector stringWithContentsOfURL_usedEncoding_error_ = "stringWithContentsOfURL:usedEncoding:error:";
			public static readonly Selector stringWithCString_ = "stringWithCString:";
			public static readonly Selector stringWithCString_encoding_ = "stringWithCString:encoding:";
			public static readonly Selector stringWithCString_length_ = "stringWithCString:length:";
			public static readonly Selector stringWithFormat_ = "stringWithFormat:";
			public static readonly Selector stringWithFormat_locale_ = "stringWithFormat:locale:";
			public static readonly Selector stringWithString_ = "stringWithString:";
			public static readonly Selector stringWithUTF8String_ = "stringWithUTF8String:";
			public static readonly Selector substringFromIndex_ = "substringFromIndex:";
			public static readonly Selector substringToIndex_ = "substringToIndex:";
			public static readonly Selector substringWithRange_ = "substringWithRange:";
			public static readonly Selector uppercaseString = "uppercaseString";
			public static readonly Selector urlPathRelativeToPath_ = "urlPathRelativeToPath:";
			public static readonly Selector UTF8String = "UTF8String";
			public static readonly Selector writeToFile_atomically_ = "writeToFile:atomically:";
			public static readonly Selector writeToFile_atomically_encoding_error_ = "writeToFile:atomically:encoding:error:";
			public static readonly Selector writeToURL_atomically_ = "writeToURL:atomically:";
			public static readonly Selector writeToURL_atomically_encoding_error_ = "writeToURL:atomically:encoding:error:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPredicateOperator ) )]
	public struct NSStringPredicateOperator : IEquatable<NSStringPredicateOperator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSStringPredicateOperator;
		public static implicit operator IntPtr( NSStringPredicateOperator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSStringPredicateOperator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSStringPredicateOperator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSStringPredicateOperator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSStringPredicateOperator value1, NSStringPredicateOperator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSStringPredicateOperator value1, NSStringPredicateOperator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSStringPredicateOperator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSStringPredicateOperator alloc() {
			return new NSStringPredicateOperator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint flags() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.flags( Handle, CachedSelectors.flags, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSStringPredicateOperator initWithOperatorType_modifier_variant_( int type, int modifier, uint variant ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOperatorType_modifier_variant_( Handle, CachedSelectors.initWithOperatorType_modifier_variant_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( uint ), type, modifier, variant );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSStringPredicateOperator( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint flags( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOperatorType_modifier_variant_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, int modifier, uint variant );
		}
		static internal class CachedSelectors {
			public static readonly Selector flags = "flags";
			public static readonly Selector initWithOperatorType_modifier_variant_ = "initWithOperatorType:modifier:variant:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSExpression ) )]
	public struct NSSubexpression : IEquatable<NSSubexpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSubexpression;
		public static implicit operator IntPtr( NSSubexpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSubexpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSubexpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSubexpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSubexpression value1, NSSubexpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSubexpression value1, NSSubexpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSubexpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSubexpression alloc() {
			return new NSSubexpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSSubexpression initForExpression_usingIteratorExpression_predicate_( NObjective.RuntimeObject expression, NObjective.RuntimeObject usingIteratorExpression, NObjective.RuntimeObject predicate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initForExpression_usingIteratorExpression_predicate_( Handle, CachedSelectors.initForExpression_usingIteratorExpression_predicate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), expression, usingIteratorExpression, predicate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSubexpression( ___result );
		}
		unsafe public NSSubexpression initForExpression_usingIteratorVariable_predicate_( NObjective.RuntimeObject expression, NObjective.RuntimeObject usingIteratorVariable, NObjective.RuntimeObject predicate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initForExpression_usingIteratorVariable_predicate_( Handle, CachedSelectors.initForExpression_usingIteratorVariable_predicate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), expression, usingIteratorVariable, predicate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSubexpression( ___result );
		}
		unsafe public NObjective.RuntimeObject variableExpression() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.variableExpression( Handle, CachedSelectors.variableExpression, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initForExpression_usingIteratorExpression_predicate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject expression, NObjective.RuntimeObject usingIteratorExpression, NObjective.RuntimeObject predicate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initForExpression_usingIteratorVariable_predicate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject expression, NObjective.RuntimeObject usingIteratorVariable, NObjective.RuntimeObject predicate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr variableExpression( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initForExpression_usingIteratorExpression_predicate_ = "initForExpression:usingIteratorExpression:predicate:";
			public static readonly Selector initForExpression_usingIteratorVariable_predicate_ = "initForExpression:usingIteratorVariable:predicate:";
			public static readonly Selector variableExpression = "variableExpression";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSData ) )]
	public struct NSSubrangeData : IEquatable<NSSubrangeData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSubrangeData;
		public static implicit operator IntPtr( NSSubrangeData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSubrangeData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSubrangeData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSubrangeData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSubrangeData value1, NSSubrangeData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSubrangeData value1, NSSubrangeData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSubrangeData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSubrangeData alloc() {
			return new NSSubrangeData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSStringPredicateOperator ) )]
	public struct NSSubstringPredicateOperator : IEquatable<NSSubstringPredicateOperator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSubstringPredicateOperator;
		public static implicit operator IntPtr( NSSubstringPredicateOperator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSubstringPredicateOperator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSubstringPredicateOperator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSubstringPredicateOperator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSubstringPredicateOperator value1, NSSubstringPredicateOperator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSubstringPredicateOperator value1, NSSubstringPredicateOperator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSubstringPredicateOperator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSubstringPredicateOperator alloc() {
			return new NSSubstringPredicateOperator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void createICUSubstringContext() {
			RuntimeObject ___occuredException;
			NativeMethods.createICUSubstringContext( Handle, CachedSelectors.createICUSubstringContext, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSSubstringPredicateOperator initWithOperatorType_modifier_variant_position_( int type, int modifier, uint variant, int position ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOperatorType_modifier_variant_position_( Handle, CachedSelectors.initWithOperatorType_modifier_variant_position_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( uint ) + sizeof( int ), type, modifier, variant, position );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSubstringPredicateOperator( ___result );
		}
		unsafe public uint position() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.position( Handle, CachedSelectors.position, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void createICUSubstringContext( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOperatorType_modifier_variant_position_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, int modifier, uint variant, int position );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint position( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector createICUSubstringContext = "createICUSubstringContext";
			public static readonly Selector initWithOperatorType_modifier_variant_position_ = "initWithOperatorType:modifier:variant:position:";
			public static readonly Selector position = "position";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSExpression ) )]
	public struct NSSymbolicExpression : IEquatable<NSSymbolicExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSymbolicExpression;
		public static implicit operator IntPtr( NSSymbolicExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSymbolicExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSymbolicExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSymbolicExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSymbolicExpression value1, NSSymbolicExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSymbolicExpression value1, NSSymbolicExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSymbolicExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSymbolicExpression alloc() {
			return new NSSymbolicExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSSymbolicExpression initWithString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_( Handle, CachedSelectors.initWithString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSymbolicExpression( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithString_ = "initWithString:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSSynchronousURLConnectionDelegate : IEquatable<NSSynchronousURLConnectionDelegate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSSynchronousURLConnectionDelegate;
		public static implicit operator IntPtr( NSSynchronousURLConnectionDelegate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSSynchronousURLConnectionDelegate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSSynchronousURLConnectionDelegate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSSynchronousURLConnectionDelegate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSSynchronousURLConnectionDelegate value1, NSSynchronousURLConnectionDelegate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSSynchronousURLConnectionDelegate value1, NSSynchronousURLConnectionDelegate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSSynchronousURLConnectionDelegate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSSynchronousURLConnectionDelegate alloc() {
			return new NSSynchronousURLConnectionDelegate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void connection_didFailWithError_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didFailWithError_( Handle, CachedSelectors.connection_didFailWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didFailWithError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveData_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveData_( Handle, CachedSelectors.connection_didReceiveData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveResponse ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveResponse_( Handle, CachedSelectors.connection_didReceiveResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject connection_willSendRequest_redirectResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connection_willSendRequest_redirectResponse_( Handle, CachedSelectors.connection_willSendRequest_redirectResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willSendRequest, redirectResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void connectionDidFinishLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectionDidFinishLoading_( Handle, CachedSelectors.connectionDidFinishLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject error() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.error( Handle, CachedSelectors.error, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSSynchronousURLConnectionDelegate initWithRequest_( NObjective.RuntimeObject request ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRequest_( Handle, CachedSelectors.initWithRequest_, out ___occuredException, sizeof( NObjective.RuntimeObject ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSSynchronousURLConnectionDelegate( ___result );
		}
		unsafe public NObjective.RuntimeObject resourceData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resourceData( Handle, CachedSelectors.resourceData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject response() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.response( Handle, CachedSelectors.response, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void run_( NObjective.RuntimeObject run ) {
			RuntimeObject ___occuredException;
			NativeMethods.run_( Handle, CachedSelectors.run_, out ___occuredException, sizeof( NObjective.RuntimeObject ), run );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didFailWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connection_willSendRequest_redirectResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connectionDidFinishLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr error( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRequest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resourceData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr response( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void run_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject run );
		}
		static internal class CachedSelectors {
			public static readonly Selector connection_didFailWithError_ = "connection:didFailWithError:";
			public static readonly Selector connection_didReceiveData_ = "connection:didReceiveData:";
			public static readonly Selector connection_didReceiveResponse_ = "connection:didReceiveResponse:";
			public static readonly Selector connection_willSendRequest_redirectResponse_ = "connection:willSendRequest:redirectResponse:";
			public static readonly Selector connectionDidFinishLoading_ = "connectionDidFinishLoading:";
			public static readonly Selector error = "error";
			public static readonly Selector initWithRequest_ = "initWithRequest:";
			public static readonly Selector resourceData = "resourceData";
			public static readonly Selector response = "response";
			public static readonly Selector run_ = "run:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSTask : IEquatable<NSTask> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSTask;
		public static implicit operator IntPtr( NSTask value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSTask value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSTask?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSTask value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSTask value1, NSTask value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSTask value1, NSTask value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSTask( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSTask alloc() {
			return new NSTask( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject currentTaskDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentTaskDictionary( ClassHandle, CachedSelectors.currentTaskDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject launchedTaskWithDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.launchedTaskWithDictionary_( ClassHandle, CachedSelectors.launchedTaskWithDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSTask launchedTaskWithLaunchPath_arguments_( string path, NSArray arguments ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.launchedTaskWithLaunchPath_arguments_( ClassHandle, CachedSelectors.launchedTaskWithLaunchPath_arguments_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSArray ), ___wrappedpath, arguments );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTask( ___result );
		}
		unsafe public NSArray arguments() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arguments( Handle, CachedSelectors.arguments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public string currentDirectoryPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentDirectoryPath( Handle, CachedSelectors.currentDirectoryPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSDictionary environment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.environment( Handle, CachedSelectors.environment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public void interrupt() {
			RuntimeObject ___occuredException;
			NativeMethods.interrupt( Handle, CachedSelectors.interrupt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isRunning() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isRunning( Handle, CachedSelectors.isRunning, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void launch() {
			RuntimeObject ___occuredException;
			NativeMethods.launch( Handle, CachedSelectors.launch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string launchPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.launchPath( Handle, CachedSelectors.launchPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int processIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.processIdentifier( Handle, CachedSelectors.processIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool resume() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resume( Handle, CachedSelectors.resume, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setArguments_( NSArray arguments ) {
			RuntimeObject ___occuredException;
			NativeMethods.setArguments_( Handle, CachedSelectors.setArguments_, out ___occuredException, sizeof( NSArray ), arguments );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCurrentDirectoryPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			NativeMethods.setCurrentDirectoryPath_( Handle, CachedSelectors.setCurrentDirectoryPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEnvironment_( NSDictionary environment ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEnvironment_( Handle, CachedSelectors.setEnvironment_, out ___occuredException, sizeof( NSDictionary ), environment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLaunchPath_( string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			NativeMethods.setLaunchPath_( Handle, CachedSelectors.setLaunchPath_, out ___occuredException, sizeof( IntPtr ), ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStandardError_( NObjective.RuntimeObject error ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStandardError_( Handle, CachedSelectors.setStandardError_, out ___occuredException, sizeof( NObjective.RuntimeObject ), error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStandardInput_( NObjective.RuntimeObject input ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStandardInput_( Handle, CachedSelectors.setStandardInput_, out ___occuredException, sizeof( NObjective.RuntimeObject ), input );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStandardOutput_( NObjective.RuntimeObject output ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStandardOutput_( Handle, CachedSelectors.setStandardOutput_, out ___occuredException, sizeof( NObjective.RuntimeObject ), output );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject standardError() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.standardError( Handle, CachedSelectors.standardError, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject standardInput() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.standardInput( Handle, CachedSelectors.standardInput, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject standardOutput() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.standardOutput( Handle, CachedSelectors.standardOutput, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool suspend() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suspend( Handle, CachedSelectors.suspend, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int suspendCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suspendCount( Handle, CachedSelectors.suspendCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void terminate() {
			RuntimeObject ___occuredException;
			NativeMethods.terminate( Handle, CachedSelectors.terminate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int terminationStatus() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.terminationStatus( Handle, CachedSelectors.terminationStatus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arguments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentDirectoryPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentTaskDictionary( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr environment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void interrupt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isRunning( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void launch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr launchedTaskWithDictionary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr launchedTaskWithLaunchPath_arguments_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, NSArray arguments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr launchPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int processIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool resume( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setArguments_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray arguments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrentDirectoryPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEnvironment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary environment );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLaunchPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStandardError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStandardInput_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject input );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStandardOutput_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject output );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr standardError( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr standardInput( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr standardOutput( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool suspend( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int suspendCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void terminate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int terminationStatus( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector arguments = "arguments";
			public static readonly Selector currentDirectoryPath = "currentDirectoryPath";
			public static readonly Selector currentTaskDictionary = "currentTaskDictionary";
			public static readonly Selector environment = "environment";
			public static readonly Selector interrupt = "interrupt";
			public static readonly Selector isRunning = "isRunning";
			public static readonly Selector launch = "launch";
			public static readonly Selector launchedTaskWithDictionary_ = "launchedTaskWithDictionary:";
			public static readonly Selector launchedTaskWithLaunchPath_arguments_ = "launchedTaskWithLaunchPath:arguments:";
			public static readonly Selector launchPath = "launchPath";
			public static readonly Selector processIdentifier = "processIdentifier";
			public static readonly Selector resume = "resume";
			public static readonly Selector setArguments_ = "setArguments:";
			public static readonly Selector setCurrentDirectoryPath_ = "setCurrentDirectoryPath:";
			public static readonly Selector setEnvironment_ = "setEnvironment:";
			public static readonly Selector setLaunchPath_ = "setLaunchPath:";
			public static readonly Selector setStandardError_ = "setStandardError:";
			public static readonly Selector setStandardInput_ = "setStandardInput:";
			public static readonly Selector setStandardOutput_ = "setStandardOutput:";
			public static readonly Selector standardError = "standardError";
			public static readonly Selector standardInput = "standardInput";
			public static readonly Selector standardOutput = "standardOutput";
			public static readonly Selector suspend = "suspend";
			public static readonly Selector suspendCount = "suspendCount";
			public static readonly Selector terminate = "terminate";
			public static readonly Selector terminationStatus = "terminationStatus";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSThread : IEquatable<NSThread> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSThread;
		public static implicit operator IntPtr( NSThread value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSThread value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSThread?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSThread value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSThread value1, NSThread value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSThread value1, NSThread value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSThread( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSThread alloc() {
			return new NSThread( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSThread currentThread() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentThread( ClassHandle, CachedSelectors.currentThread, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSThread( ___result );
		}
		unsafe public static void detachNewThreadSelector_toTarget_withObject_( NObjective.Selector selector, NObjective.RuntimeObject toTarget, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.detachNewThreadSelector_toTarget_withObject_( ClassHandle, CachedSelectors.detachNewThreadSelector_toTarget_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), selector, toTarget, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void exit() {
			RuntimeObject ___occuredException;
			NativeMethods.exit( ClassHandle, CachedSelectors.exit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static bool isMultiThreaded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMultiThreaded( ClassHandle, CachedSelectors.isMultiThreaded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject mapConversationToThread_( NObjective.RuntimeObject thread ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mapConversationToThread_( ClassHandle, CachedSelectors.mapConversationToThread_, out ___occuredException, sizeof( NObjective.RuntimeObject ), thread );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static bool setThreadPriority_( double priority ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setThreadPriority_( ClassHandle, CachedSelectors.setThreadPriority_, out ___occuredException, sizeof( double ), priority );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void sleepForTimeInterval_( double interval ) {
			RuntimeObject ___occuredException;
			NativeMethods.sleepForTimeInterval_( ClassHandle, CachedSelectors.sleepForTimeInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void sleepUntilDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			NativeMethods.sleepUntilDate_( ClassHandle, CachedSelectors.sleepUntilDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static double threadPriority() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.threadPriority( ClassHandle, CachedSelectors.threadPriority, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void addConversation_( NObjective.RuntimeObject conversation ) {
			RuntimeObject ___occuredException;
			NativeMethods.addConversation_( Handle, CachedSelectors.addConversation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), conversation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearConversationRequest() {
			RuntimeObject ___occuredException;
			NativeMethods.clearConversationRequest( Handle, CachedSelectors.clearConversationRequest, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject conversationRequest() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conversationRequest( Handle, CachedSelectors.conversationRequest, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lastConversation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastConversation( Handle, CachedSelectors.lastConversation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeConversation() {
			RuntimeObject ___occuredException;
			NativeMethods.removeConversation( Handle, CachedSelectors.removeConversation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject runLoop() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.runLoop( Handle, CachedSelectors.runLoop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setConversationRequest_( NObjective.RuntimeObject request ) {
			RuntimeObject ___occuredException;
			NativeMethods.setConversationRequest_( Handle, CachedSelectors.setConversationRequest_, out ___occuredException, sizeof( NObjective.RuntimeObject ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRunLoop_( NObjective.RuntimeObject loop ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRunLoop_( Handle, CachedSelectors.setRunLoop_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSMutableDictionary threadDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.threadDictionary( Handle, CachedSelectors.threadDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableDictionary( ___result );
		}
		unsafe public NObjective.RuntimeObject workQueue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.workQueue( Handle, CachedSelectors.workQueue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addConversation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject conversation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearConversationRequest( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr conversationRequest( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentThread( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detachNewThreadSelector_toTarget_withObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject toTarget, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void exit( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isMultiThreaded( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastConversation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mapConversationToThread_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject thread );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeConversation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr runLoop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setConversationRequest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRunLoop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loop );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool setThreadPriority_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double priority );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sleepForTimeInterval_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sleepUntilDate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr threadDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double threadPriority( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr workQueue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addConversation_ = "addConversation:";
			public static readonly Selector clearConversationRequest = "clearConversationRequest";
			public static readonly Selector conversationRequest = "conversationRequest";
			public static readonly Selector currentThread = "currentThread";
			public static readonly Selector detachNewThreadSelector_toTarget_withObject_ = "detachNewThreadSelector:toTarget:withObject:";
			public static readonly Selector exit = "exit";
			public static readonly Selector isMultiThreaded = "isMultiThreaded";
			public static readonly Selector lastConversation = "lastConversation";
			public static readonly Selector mapConversationToThread_ = "mapConversationToThread:";
			public static readonly Selector removeConversation = "removeConversation";
			public static readonly Selector runLoop = "runLoop";
			public static readonly Selector setConversationRequest_ = "setConversationRequest:";
			public static readonly Selector setRunLoop_ = "setRunLoop:";
			public static readonly Selector setThreadPriority_ = "setThreadPriority:";
			public static readonly Selector sleepForTimeInterval_ = "sleepForTimeInterval:";
			public static readonly Selector sleepUntilDate_ = "sleepUntilDate:";
			public static readonly Selector threadDictionary = "threadDictionary";
			public static readonly Selector threadPriority = "threadPriority";
			public static readonly Selector workQueue = "workQueue";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSTimer : IEquatable<NSTimer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSTimer;
		public static implicit operator IntPtr( NSTimer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSTimer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSTimer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSTimer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSTimer value1, NSTimer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSTimer value1, NSTimer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSTimer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSTimer alloc() {
			return new NSTimer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSTimer scheduledTimerWithTimeInterval_invocation_repeats_( double interval, NSInvocation invocation, bool repeats ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scheduledTimerWithTimeInterval_invocation_repeats_( ClassHandle, CachedSelectors.scheduledTimerWithTimeInterval_invocation_repeats_, out ___occuredException, sizeof( double ) + sizeof( NSInvocation ) + sizeof( bool ), interval, invocation, repeats );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimer( ___result );
		}
		unsafe public static NSTimer scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_( double interval, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject userInfo, bool repeats ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_( ClassHandle, CachedSelectors.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( bool ), interval, target, selector, userInfo, repeats );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimer( ___result );
		}
		unsafe public static NSTimer timerWithFireDate_target_selector_userInfo_( NObjective.RuntimeObject date, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject userInfo ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timerWithFireDate_target_selector_userInfo_( ClassHandle, CachedSelectors.timerWithFireDate_target_selector_userInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), date, target, selector, userInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimer( ___result );
		}
		unsafe public static NSTimer timerWithTimeInterval_invocation_repeats_( double interval, NSInvocation invocation, bool repeats ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timerWithTimeInterval_invocation_repeats_( ClassHandle, CachedSelectors.timerWithTimeInterval_invocation_repeats_, out ___occuredException, sizeof( double ) + sizeof( NSInvocation ) + sizeof( bool ), interval, invocation, repeats );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimer( ___result );
		}
		unsafe public static NSTimer timerWithTimeInterval_target_selector_userInfo_repeats_( double interval, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject userInfo, bool repeats ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timerWithTimeInterval_target_selector_userInfo_repeats_( ClassHandle, CachedSelectors.timerWithTimeInterval_target_selector_userInfo_repeats_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( bool ), interval, target, selector, userInfo, repeats );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimer( ___result );
		}
		unsafe public void fire() {
			RuntimeObject ___occuredException;
			NativeMethods.fire( Handle, CachedSelectors.fire, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSDate fireDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fireDate( Handle, CachedSelectors.fireDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDate( ___result );
		}
		unsafe public NSTimer initWithFireDate_interval_target_selector_userInfo_repeats_( NSDate date, double interval, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject userInfo, bool repeats ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithFireDate_interval_target_selector_userInfo_repeats_( Handle, CachedSelectors.initWithFireDate_interval_target_selector_userInfo_repeats_, out ___occuredException, sizeof( NSDate ) + sizeof( double ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( bool ), date, interval, target, selector, userInfo, repeats
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimer( ___result );
		}
		unsafe public void invalidate() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidate( Handle, CachedSelectors.invalidate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isValid() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isValid( Handle, CachedSelectors.isValid, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int order() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.order( Handle, CachedSelectors.order, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setFireDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFireDate_( Handle, CachedSelectors.setFireDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public double timeInterval() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeInterval( Handle, CachedSelectors.timeInterval, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject userInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userInfo( Handle, CachedSelectors.userInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void fire( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fireDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithFireDate_interval_target_selector_userInfo_repeats_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date, double interval, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject userInfo, bool repeats
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isValid( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int order( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scheduledTimerWithTimeInterval_invocation_repeats_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, NSInvocation invocation, bool repeats );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject userInfo, bool repeats );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFireDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double timeInterval( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timerWithFireDate_target_selector_userInfo_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timerWithTimeInterval_invocation_repeats_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, NSInvocation invocation, bool repeats );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timerWithTimeInterval_target_selector_userInfo_repeats_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject userInfo, bool repeats );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector fire = "fire";
			public static readonly Selector fireDate = "fireDate";
			public static readonly Selector initWithFireDate_interval_target_selector_userInfo_repeats_ = "initWithFireDate:interval:target:selector:userInfo:repeats:";
			public static readonly Selector invalidate = "invalidate";
			public static readonly Selector isValid = "isValid";
			public static readonly Selector order = "order";
			public static readonly Selector scheduledTimerWithTimeInterval_invocation_repeats_ = "scheduledTimerWithTimeInterval:invocation:repeats:";
			public static readonly Selector scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_ = "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:";
			public static readonly Selector setFireDate_ = "setFireDate:";
			public static readonly Selector timeInterval = "timeInterval";
			public static readonly Selector timerWithFireDate_target_selector_userInfo_ = "timerWithFireDate:target:selector:userInfo:";
			public static readonly Selector timerWithTimeInterval_invocation_repeats_ = "timerWithTimeInterval:invocation:repeats:";
			public static readonly Selector timerWithTimeInterval_target_selector_userInfo_repeats_ = "timerWithTimeInterval:target:selector:userInfo:repeats:";
			public static readonly Selector userInfo = "userInfo";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSTimeZone : IEquatable<NSTimeZone> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSTimeZone;
		public static implicit operator IntPtr( NSTimeZone value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSTimeZone value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSTimeZone?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSTimeZone value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSTimeZone value1, NSTimeZone value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSTimeZone value1, NSTimeZone value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSTimeZone( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSTimeZone alloc() {
			return new NSTimeZone( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSDictionary abbreviationDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abbreviationDictionary( ClassHandle, CachedSelectors.abbreviationDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public static NSTimeZone defaultTimeZone() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultTimeZone( ClassHandle, CachedSelectors.defaultTimeZone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public static NSArray knownTimeZoneNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.knownTimeZoneNames( ClassHandle, CachedSelectors.knownTimeZoneNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NSTimeZone localTimeZone() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localTimeZone( ClassHandle, CachedSelectors.localTimeZone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public static void resetSystemTimeZone() {
			RuntimeObject ___occuredException;
			NativeMethods.resetSystemTimeZone( ClassHandle, CachedSelectors.resetSystemTimeZone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setDefaultTimeZone_( NSTimeZone zone ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultTimeZone_( ClassHandle, CachedSelectors.setDefaultTimeZone_, out ___occuredException, sizeof( NSTimeZone ), zone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NSTimeZone systemTimeZone() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemTimeZone( ClassHandle, CachedSelectors.systemTimeZone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public static NObjective.RuntimeObject timeZoneForSecondsFromGMT_( int gmt ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeZoneForSecondsFromGMT_( ClassHandle, CachedSelectors.timeZoneForSecondsFromGMT_, out ___occuredException, sizeof( int ), gmt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSTimeZone timeZoneWithAbbreviation_( string abbreviation ) {
			RuntimeObject ___occuredException;
			var ___wrappedabbreviation = Runtime.CreateStringProxy( abbreviation );
			var ___result = NativeMethods.timeZoneWithAbbreviation_( ClassHandle, CachedSelectors.timeZoneWithAbbreviation_, out ___occuredException, sizeof( IntPtr ), ___wrappedabbreviation );
			Runtime.ReleaseNativeObject( ___wrappedabbreviation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public static NSTimeZone timeZoneWithName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.timeZoneWithName_( ClassHandle, CachedSelectors.timeZoneWithName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public static NSTimeZone timeZoneWithName_data_( string name, NSData data ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.timeZoneWithName_data_( ClassHandle, CachedSelectors.timeZoneWithName_data_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSData ), ___wrappedname, data );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public string abbreviation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abbreviation( Handle, CachedSelectors.abbreviation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string abbreviationForDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abbreviationForDate_( Handle, CachedSelectors.abbreviationForDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject abbreviationForTimeInterval_( double interval ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abbreviationForTimeInterval_( Handle, CachedSelectors.abbreviationForTimeInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSData data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSTimeZone initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public NSTimeZone initWithExactName_data_( NObjective.RuntimeObject name, NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithExactName_data_( Handle, CachedSelectors.initWithExactName_data_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public NSTimeZone initWithName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.initWithName_( Handle, CachedSelectors.initWithName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public NSTimeZone initWithName_data_( string name, NSData data ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.initWithName_data_( Handle, CachedSelectors.initWithName_data_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSData ), ___wrappedname, data );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZone( ___result );
		}
		unsafe public bool isDaylightSavingTime() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDaylightSavingTime( Handle, CachedSelectors.isDaylightSavingTime, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isDaylightSavingTimeForDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDaylightSavingTimeForDate_( Handle, CachedSelectors.isDaylightSavingTimeForDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isDaylightSavingTimeForTimeInterval_( double interval ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDaylightSavingTimeForTimeInterval_( Handle, CachedSelectors.isDaylightSavingTimeForTimeInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEqualToTimeZone_( NSTimeZone zone ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToTimeZone_( Handle, CachedSelectors.isEqualToTimeZone_, out ___occuredException, sizeof( NSTimeZone ), zone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int secondsFromGMT() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.secondsFromGMT( Handle, CachedSelectors.secondsFromGMT, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int secondsFromGMTForDate_( NSDate date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.secondsFromGMTForDate_( Handle, CachedSelectors.secondsFromGMTForDate_, out ___occuredException, sizeof( NSDate ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int secondsFromGMTForTimeInterval_( double interval ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.secondsFromGMTForTimeInterval_( Handle, CachedSelectors.secondsFromGMTForTimeInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abbreviation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abbreviationDictionary( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abbreviationForDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abbreviationForTimeInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultTimeZone( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithExactName_data_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_data_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDaylightSavingTime( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDaylightSavingTimeForDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDaylightSavingTimeForTimeInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToTimeZone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSTimeZone zone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr knownTimeZoneNames( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localTimeZone( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetSystemTimeZone( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int secondsFromGMT( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int secondsFromGMTForDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDate date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int secondsFromGMTForTimeInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultTimeZone_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSTimeZone zone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemTimeZone( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timeZoneForSecondsFromGMT_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int gmt );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timeZoneWithAbbreviation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr abbreviation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timeZoneWithName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr timeZoneWithName_data_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, NSData data );
		}
		static internal class CachedSelectors {
			public static readonly Selector abbreviation = "abbreviation";
			public static readonly Selector abbreviationDictionary = "abbreviationDictionary";
			public static readonly Selector abbreviationForDate_ = "abbreviationForDate:";
			public static readonly Selector abbreviationForTimeInterval_ = "abbreviationForTimeInterval:";
			public static readonly Selector data = "data";
			public static readonly Selector defaultTimeZone = "defaultTimeZone";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithExactName_data_ = "initWithExactName:data:";
			public static readonly Selector initWithName_ = "initWithName:";
			public static readonly Selector initWithName_data_ = "initWithName:data:";
			public static readonly Selector isDaylightSavingTime = "isDaylightSavingTime";
			public static readonly Selector isDaylightSavingTimeForDate_ = "isDaylightSavingTimeForDate:";
			public static readonly Selector isDaylightSavingTimeForTimeInterval_ = "isDaylightSavingTimeForTimeInterval:";
			public static readonly Selector isEqualToTimeZone_ = "isEqualToTimeZone:";
			public static readonly Selector knownTimeZoneNames = "knownTimeZoneNames";
			public static readonly Selector localTimeZone = "localTimeZone";
			public static readonly Selector name = "name";
			public static readonly Selector resetSystemTimeZone = "resetSystemTimeZone";
			public static readonly Selector secondsFromGMT = "secondsFromGMT";
			public static readonly Selector secondsFromGMTForDate_ = "secondsFromGMTForDate:";
			public static readonly Selector secondsFromGMTForTimeInterval_ = "secondsFromGMTForTimeInterval:";
			public static readonly Selector setDefaultTimeZone_ = "setDefaultTimeZone:";
			public static readonly Selector systemTimeZone = "systemTimeZone";
			public static readonly Selector timeZoneForSecondsFromGMT_ = "timeZoneForSecondsFromGMT:";
			public static readonly Selector timeZoneWithAbbreviation_ = "timeZoneWithAbbreviation:";
			public static readonly Selector timeZoneWithName_ = "timeZoneWithName:";
			public static readonly Selector timeZoneWithName_data_ = "timeZoneWithName:data:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCFTimeZone ) )]
	public struct NSTimeZoneDetail : IEquatable<NSTimeZoneDetail> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSTimeZoneDetail;
		public static implicit operator IntPtr( NSTimeZoneDetail value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSTimeZoneDetail value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSTimeZoneDetail?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSTimeZoneDetail value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSTimeZoneDetail value1, NSTimeZoneDetail value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSTimeZoneDetail value1, NSTimeZoneDetail value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSTimeZoneDetail( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSTimeZoneDetail alloc() {
			return new NSTimeZoneDetail( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSTimeZoneDetailDecoder : IEquatable<NSTimeZoneDetailDecoder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSTimeZoneDetailDecoder;
		public static implicit operator IntPtr( NSTimeZoneDetailDecoder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSTimeZoneDetailDecoder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSTimeZoneDetailDecoder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSTimeZoneDetailDecoder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSTimeZoneDetailDecoder value1, NSTimeZoneDetailDecoder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSTimeZoneDetailDecoder value1, NSTimeZoneDetailDecoder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSTimeZoneDetailDecoder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSTimeZoneDetailDecoder alloc() {
			return new NSTimeZoneDetailDecoder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSTimeZoneDetailDecoder initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSTimeZoneDetailDecoder( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithCoder_ = "initWithCoder:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPredicate ) )]
	public struct NSTruePredicate : IEquatable<NSTruePredicate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSTruePredicate;
		public static implicit operator IntPtr( NSTruePredicate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSTruePredicate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSTruePredicate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSTruePredicate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSTruePredicate value1, NSTruePredicate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSTruePredicate value1, NSTruePredicate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSTruePredicate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSTruePredicate alloc() {
			return new NSTruePredicate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCoder ) )]
	public struct NSUnarchiver : IEquatable<NSUnarchiver> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSUnarchiver;
		public static implicit operator IntPtr( NSUnarchiver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSUnarchiver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSUnarchiver?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSUnarchiver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSUnarchiver value1, NSUnarchiver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSUnarchiver value1, NSUnarchiver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSUnarchiver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSUnarchiver alloc() {
			return new NSUnarchiver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static string __classNameDecodedForArchiveClassName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.__classNameDecodedForArchiveClassName_( ClassHandle, CachedSelectors.__classNameDecodedForArchiveClassName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static void __decodeClassName_asClassName_( string name, string asClassName ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedasClassName = Runtime.CreateStringProxy( asClassName );
			NativeMethods.__decodeClassName_asClassName_( ClassHandle, CachedSelectors.__decodeClassName_asClassName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedasClassName );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedasClassName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject unarchiveObjectWithData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unarchiveObjectWithData_( ClassHandle, CachedSelectors.unarchiveObjectWithData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject unarchiveObjectWithFile_( string file ) {
			RuntimeObject ___occuredException;
			var ___wrappedfile = Runtime.CreateStringProxy( file );
			var ___result = NativeMethods.unarchiveObjectWithFile_( ClassHandle, CachedSelectors.unarchiveObjectWithFile_, out ___occuredException, sizeof( IntPtr ), ___wrappedfile );
			Runtime.ReleaseNativeObject( ___wrappedfile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string classNameDecodedForArchiveClassName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.classNameDecodedForArchiveClassName_( Handle, CachedSelectors.classNameDecodedForArchiveClassName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void decodeClassName_asClassName_( string name, string asClassName ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedasClassName = Runtime.CreateStringProxy( asClassName );
			NativeMethods.decodeClassName_asClassName_( Handle, CachedSelectors.decodeClassName_asClassName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedasClassName );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedasClassName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSUnarchiver initForReadingWithData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initForReadingWithData_( Handle, CachedSelectors.initForReadingWithData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSUnarchiver( ___result );
		}
		unsafe public bool isAtEnd() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAtEnd( Handle, CachedSelectors.isAtEnd, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void replaceObject_withObject_( NObjective.RuntimeObject @object, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObject_withObject_( Handle, CachedSelectors.replaceObject_withObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __classNameDecodedForArchiveClassName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void __decodeClassName_asClassName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr asClassName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classNameDecodedForArchiveClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decodeClassName_asClassName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr asClassName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initForReadingWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAtEnd( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObject_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr unarchiveObjectWithData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr unarchiveObjectWithFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr file );
		}
		static internal class CachedSelectors {
			public static readonly Selector __classNameDecodedForArchiveClassName_ = "__classNameDecodedForArchiveClassName:";
			public static readonly Selector __decodeClassName_asClassName_ = "__decodeClassName:asClassName:";
			public static readonly Selector classNameDecodedForArchiveClassName_ = "classNameDecodedForArchiveClassName:";
			public static readonly Selector data = "data";
			public static readonly Selector decodeClassName_asClassName_ = "decodeClassName:asClassName:";
			public static readonly Selector initForReadingWithData_ = "initForReadingWithData:";
			public static readonly Selector isAtEnd = "isAtEnd";
			public static readonly Selector replaceObject_withObject_ = "replaceObject:withObject:";
			public static readonly Selector unarchiveObjectWithData_ = "unarchiveObjectWithData:";
			public static readonly Selector unarchiveObjectWithFile_ = "unarchiveObjectWithFile:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSUndoManager : IEquatable<NSUndoManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSUndoManager;
		public static implicit operator IntPtr( NSUndoManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSUndoManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSUndoManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSUndoManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSUndoManager value1, NSUndoManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSUndoManager value1, NSUndoManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSUndoManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSUndoManager alloc() {
			return new NSUndoManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void beginUndoGrouping() {
			RuntimeObject ___occuredException;
			NativeMethods.beginUndoGrouping( Handle, CachedSelectors.beginUndoGrouping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool canRedo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canRedo( Handle, CachedSelectors.canRedo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool canUndo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canUndo( Handle, CachedSelectors.canUndo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void disableUndoRegistration() {
			RuntimeObject ___occuredException;
			NativeMethods.disableUndoRegistration( Handle, CachedSelectors.disableUndoRegistration, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void enableUndoRegistration() {
			RuntimeObject ___occuredException;
			NativeMethods.enableUndoRegistration( Handle, CachedSelectors.enableUndoRegistration, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void endUndoGrouping() {
			RuntimeObject ___occuredException;
			NativeMethods.endUndoGrouping( Handle, CachedSelectors.endUndoGrouping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int groupingLevel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupingLevel( Handle, CachedSelectors.groupingLevel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool groupsByEvent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsByEvent( Handle, CachedSelectors.groupsByEvent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isRedoing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isRedoing( Handle, CachedSelectors.isRedoing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isUndoing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isUndoing( Handle, CachedSelectors.isUndoing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isUndoRegistrationEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isUndoRegistrationEnabled( Handle, CachedSelectors.isUndoRegistrationEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint levelsOfUndo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.levelsOfUndo( Handle, CachedSelectors.levelsOfUndo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject prepareWithInvocationTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.prepareWithInvocationTarget_( Handle, CachedSelectors.prepareWithInvocationTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void redo() {
			RuntimeObject ___occuredException;
			NativeMethods.redo( Handle, CachedSelectors.redo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string redoActionName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.redoActionName( Handle, CachedSelectors.redoActionName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string redoMenuItemTitle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.redoMenuItemTitle( Handle, CachedSelectors.redoMenuItemTitle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string redoMenuTitleForUndoActionName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.redoMenuTitleForUndoActionName_( Handle, CachedSelectors.redoMenuTitleForUndoActionName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void registerUndoWithTarget_selector_arguments_argumentCount_( NObjective.RuntimeObject target, NObjective.Selector selector, System.IntPtr arguments, uint argumentCount ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerUndoWithTarget_selector_arguments_argumentCount_( Handle, CachedSelectors.registerUndoWithTarget_selector_arguments_argumentCount_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( System.IntPtr ) + sizeof( uint ), target, selector, arguments, argumentCount );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void registerUndoWithTarget_selector_object_( NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerUndoWithTarget_selector_object_( Handle, CachedSelectors.registerUndoWithTarget_selector_object_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), target, selector, @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllActions() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllActions( Handle, CachedSelectors.removeAllActions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllActionsWithTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllActionsWithTarget_( Handle, CachedSelectors.removeAllActionsWithTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray runLoopModes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.runLoopModes( Handle, CachedSelectors.runLoopModes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void setActionName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.setActionName_( Handle, CachedSelectors.setActionName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupsByEvent_( bool @event ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroupsByEvent_( Handle, CachedSelectors.setGroupsByEvent_, out ___occuredException, sizeof( bool ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLevelsOfUndo_( uint undo ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLevelsOfUndo_( Handle, CachedSelectors.setLevelsOfUndo_, out ___occuredException, sizeof( uint ), undo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRunLoopModes_( NSArray modes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRunLoopModes_( Handle, CachedSelectors.setRunLoopModes_, out ___occuredException, sizeof( NSArray ), modes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void undo() {
			RuntimeObject ___occuredException;
			NativeMethods.undo( Handle, CachedSelectors.undo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string undoActionName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.undoActionName( Handle, CachedSelectors.undoActionName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string undoMenuItemTitle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.undoMenuItemTitle( Handle, CachedSelectors.undoMenuItemTitle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string undoMenuTitleForUndoActionName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.undoMenuTitleForUndoActionName_( Handle, CachedSelectors.undoMenuTitleForUndoActionName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void undoNestedGroup() {
			RuntimeObject ___occuredException;
			NativeMethods.undoNestedGroup( Handle, CachedSelectors.undoNestedGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void beginUndoGrouping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canRedo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canUndo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void disableUndoRegistration( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enableUndoRegistration( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void endUndoGrouping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int groupingLevel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool groupsByEvent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isRedoing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isUndoing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isUndoRegistrationEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint levelsOfUndo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr prepareWithInvocationTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void redo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr redoActionName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr redoMenuItemTitle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr redoMenuTitleForUndoActionName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerUndoWithTarget_selector_arguments_argumentCount_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector selector, System.IntPtr arguments, uint argumentCount );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerUndoWithTarget_selector_object_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector selector, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllActions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllActionsWithTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr runLoopModes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setActionName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGroupsByEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool @event );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLevelsOfUndo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint undo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRunLoopModes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray modes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void undo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr undoActionName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr undoMenuItemTitle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr undoMenuTitleForUndoActionName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void undoNestedGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector beginUndoGrouping = "beginUndoGrouping";
			public static readonly Selector canRedo = "canRedo";
			public static readonly Selector canUndo = "canUndo";
			public static readonly Selector disableUndoRegistration = "disableUndoRegistration";
			public static readonly Selector enableUndoRegistration = "enableUndoRegistration";
			public static readonly Selector endUndoGrouping = "endUndoGrouping";
			public static readonly Selector groupingLevel = "groupingLevel";
			public static readonly Selector groupsByEvent = "groupsByEvent";
			public static readonly Selector isRedoing = "isRedoing";
			public static readonly Selector isUndoing = "isUndoing";
			public static readonly Selector isUndoRegistrationEnabled = "isUndoRegistrationEnabled";
			public static readonly Selector levelsOfUndo = "levelsOfUndo";
			public static readonly Selector prepareWithInvocationTarget_ = "prepareWithInvocationTarget:";
			public static readonly Selector redo = "redo";
			public static readonly Selector redoActionName = "redoActionName";
			public static readonly Selector redoMenuItemTitle = "redoMenuItemTitle";
			public static readonly Selector redoMenuTitleForUndoActionName_ = "redoMenuTitleForUndoActionName:";
			public static readonly Selector registerUndoWithTarget_selector_arguments_argumentCount_ = "registerUndoWithTarget:selector:arguments:argumentCount:";
			public static readonly Selector registerUndoWithTarget_selector_object_ = "registerUndoWithTarget:selector:object:";
			public static readonly Selector removeAllActions = "removeAllActions";
			public static readonly Selector removeAllActionsWithTarget_ = "removeAllActionsWithTarget:";
			public static readonly Selector runLoopModes = "runLoopModes";
			public static readonly Selector setActionName_ = "setActionName:";
			public static readonly Selector setGroupsByEvent_ = "setGroupsByEvent:";
			public static readonly Selector setLevelsOfUndo_ = "setLevelsOfUndo:";
			public static readonly Selector setRunLoopModes_ = "setRunLoopModes:";
			public static readonly Selector undo = "undo";
			public static readonly Selector undoActionName = "undoActionName";
			public static readonly Selector undoMenuItemTitle = "undoMenuItemTitle";
			public static readonly Selector undoMenuTitleForUndoActionName_ = "undoMenuTitleForUndoActionName:";
			public static readonly Selector undoNestedGroup = "undoNestedGroup";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectSpecifier ) )]
	public struct NSUniqueIDSpecifier : IEquatable<NSUniqueIDSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSUniqueIDSpecifier;
		public static implicit operator IntPtr( NSUniqueIDSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSUniqueIDSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSUniqueIDSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSUniqueIDSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSUniqueIDSpecifier value1, NSUniqueIDSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSUniqueIDSpecifier value1, NSUniqueIDSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSUniqueIDSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSUniqueIDSpecifier alloc() {
			return new NSUniqueIDSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSUniqueIDSpecifier initWithContainerClassDescription_containerSpecifier_key_uniqueID_( NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, string key, NObjective.RuntimeObject uniqueID ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.initWithContainerClassDescription_containerSpecifier_key_uniqueID_( Handle, CachedSelectors.initWithContainerClassDescription_containerSpecifier_key_uniqueID_, out ___occuredException, sizeof( NSScriptClassDescription ) + sizeof( NSScriptObjectSpecifier ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ), description, containerSpecifier, ___wrappedkey, uniqueID );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSUniqueIDSpecifier( ___result );
		}
		unsafe public void setUniqueID_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUniqueID_( Handle, CachedSelectors.setUniqueID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject uniqueID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueID( Handle, CachedSelectors.uniqueID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassDescription_containerSpecifier_key_uniqueID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, IntPtr key, NObjective.RuntimeObject uniqueID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUniqueID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uniqueID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithContainerClassDescription_containerSpecifier_key_uniqueID_ = "initWithContainerClassDescription:containerSpecifier:key:uniqueID:";
			public static readonly Selector setUniqueID_ = "setUniqueID:";
			public static readonly Selector uniqueID = "uniqueID";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSRefCountingNumber ) )]
	public struct NSunsignedIntNumber : IEquatable<NSunsignedIntNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSunsignedIntNumber;
		public static implicit operator IntPtr( NSunsignedIntNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSunsignedIntNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSunsignedIntNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSunsignedIntNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSunsignedIntNumber value1, NSunsignedIntNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSunsignedIntNumber value1, NSunsignedIntNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSunsignedIntNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSunsignedIntNumber alloc() {
			return new NSunsignedIntNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSRefCountingNumber ) )]
	public struct NSunsignedLongLongNumber : IEquatable<NSunsignedLongLongNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSunsignedLongLongNumber;
		public static implicit operator IntPtr( NSunsignedLongLongNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSunsignedLongLongNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSunsignedLongLongNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSunsignedLongLongNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSunsignedLongLongNumber value1, NSunsignedLongLongNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSunsignedLongLongNumber value1, NSunsignedLongLongNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSunsignedLongLongNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSunsignedLongLongNumber alloc() {
			return new NSunsignedLongLongNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSRefCountingNumber ) )]
	public struct NSunsignedShortNumber : IEquatable<NSunsignedShortNumber> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSunsignedShortNumber;
		public static implicit operator IntPtr( NSunsignedShortNumber value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSunsignedShortNumber value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSunsignedShortNumber?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSunsignedShortNumber value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSunsignedShortNumber value1, NSunsignedShortNumber value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSunsignedShortNumber value1, NSunsignedShortNumber value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSunsignedShortNumber( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSunsignedShortNumber alloc() {
			return new NSunsignedShortNumber( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSURL ) )]
	public struct NSURL : IEquatable<NSURL> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURL;
		public static implicit operator IntPtr( NSURL value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURL value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURL?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURL value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURL value1, NSURL value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURL value1, NSURL value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURL( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURL alloc() {
			return new NSURL( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( _NSURL ) )]
	public struct NSURL__ : IEquatable<NSURL__> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURL__;
		public static implicit operator IntPtr( NSURL__ value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURL__ value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURL__?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURL__ value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURL__ value1, NSURL__ value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURL__ value1, NSURL__ value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURL__( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURL__ alloc() {
			return new NSURL__( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLAuthenticationChallenge : IEquatable<NSURLAuthenticationChallenge> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLAuthenticationChallenge;
		public static implicit operator IntPtr( NSURLAuthenticationChallenge value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLAuthenticationChallenge value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLAuthenticationChallenge?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLAuthenticationChallenge value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLAuthenticationChallenge value1, NSURLAuthenticationChallenge value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLAuthenticationChallenge value1, NSURLAuthenticationChallenge value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLAuthenticationChallenge( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLAuthenticationChallenge alloc() {
			return new NSURLAuthenticationChallenge( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSError error() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.error( Handle, CachedSelectors.error, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSError( ___result );
		}
		unsafe public NSURLResponse failureResponse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.failureResponse( Handle, CachedSelectors.failureResponse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLResponse( ___result );
		}
		unsafe public NSURLAuthenticationChallenge initWithAuthenticationChallenge_sender_( NSURLAuthenticationChallenge challenge, NObjective.RuntimeObject sender ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAuthenticationChallenge_sender_( Handle, CachedSelectors.initWithAuthenticationChallenge_sender_, out ___occuredException, sizeof( NSURLAuthenticationChallenge ) + sizeof( NObjective.RuntimeObject ), challenge, sender );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLAuthenticationChallenge( ___result );
		}
		unsafe public NSURLAuthenticationChallenge initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_( NSURLProtectionSpace space, NSURLCredential proposedCredential, int previousFailureCount, NSURLResponse failureResponse, NSError error, NObjective.RuntimeObject sender ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_( Handle, CachedSelectors.initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_, out ___occuredException, sizeof( NSURLProtectionSpace ) + sizeof( NSURLCredential ) + sizeof( int ) + sizeof( NSURLResponse ) + sizeof( NSError ) + sizeof( NObjective.RuntimeObject ), space, proposedCredential, previousFailureCount, failureResponse, error, sender
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLAuthenticationChallenge( ___result );
		}
		unsafe public int previousFailureCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousFailureCount( Handle, CachedSelectors.previousFailureCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSURLCredential proposedCredential() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.proposedCredential( Handle, CachedSelectors.proposedCredential, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLCredential( ___result );
		}
		unsafe public NSURLProtectionSpace protectionSpace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protectionSpace( Handle, CachedSelectors.protectionSpace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLProtectionSpace( ___result );
		}
		unsafe public NObjective.RuntimeObject sender() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sender( Handle, CachedSelectors.sender, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr error( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr failureResponse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAuthenticationChallenge_sender_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLAuthenticationChallenge challenge, NObjective.RuntimeObject sender );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLProtectionSpace space, NSURLCredential proposedCredential, int previousFailureCount, NSURLResponse failureResponse, NSError error, NObjective.RuntimeObject sender
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int previousFailureCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr proposedCredential( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr protectionSpace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sender( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector error = "error";
			public static readonly Selector failureResponse = "failureResponse";
			public static readonly Selector initWithAuthenticationChallenge_sender_ = "initWithAuthenticationChallenge:sender:";
			public static readonly Selector initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_ = "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:";
			public static readonly Selector previousFailureCount = "previousFailureCount";
			public static readonly Selector proposedCredential = "proposedCredential";
			public static readonly Selector protectionSpace = "protectionSpace";
			public static readonly Selector sender = "sender";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLAuthenticationChallengeInternal : IEquatable<NSURLAuthenticationChallengeInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLAuthenticationChallengeInternal;
		public static implicit operator IntPtr( NSURLAuthenticationChallengeInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLAuthenticationChallengeInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLAuthenticationChallengeInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLAuthenticationChallengeInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLAuthenticationChallengeInternal value1, NSURLAuthenticationChallengeInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLAuthenticationChallengeInternal value1, NSURLAuthenticationChallengeInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLAuthenticationChallengeInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLAuthenticationChallengeInternal alloc() {
			return new NSURLAuthenticationChallengeInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSURLAuthenticationChallengeInternal initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_( NObjective.RuntimeObject space, NObjective.RuntimeObject proposedCredential, int previousFailureCount, NObjective.RuntimeObject failureResponse, NObjective.RuntimeObject error, NObjective.RuntimeObject sender ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_( Handle, CachedSelectors.initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), space, proposedCredential, previousFailureCount, failureResponse, error, sender
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLAuthenticationChallengeInternal( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject space, NObjective.RuntimeObject proposedCredential, int previousFailureCount, NObjective.RuntimeObject failureResponse, NObjective.RuntimeObject error, NObjective.RuntimeObject sender
			 );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_ = "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLAuthenticationChallengeState : IEquatable<NSURLAuthenticationChallengeState> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLAuthenticationChallengeState;
		public static implicit operator IntPtr( NSURLAuthenticationChallengeState value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLAuthenticationChallengeState value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLAuthenticationChallengeState?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLAuthenticationChallengeState value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLAuthenticationChallengeState value1, NSURLAuthenticationChallengeState value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLAuthenticationChallengeState value1, NSURLAuthenticationChallengeState value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLAuthenticationChallengeState( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLAuthenticationChallengeState alloc() {
			return new NSURLAuthenticationChallengeState( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLCache : IEquatable<NSURLCache> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLCache;
		public static implicit operator IntPtr( NSURLCache value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLCache value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLCache?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLCache value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLCache value1, NSURLCache value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLCache value1, NSURLCache value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLCache( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLCache alloc() {
			return new NSURLCache( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void setSharedURLCache_( NSURLCache cache ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSharedURLCache_( ClassHandle, CachedSelectors.setSharedURLCache_, out ___occuredException, sizeof( NSURLCache ), cache );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NSURLCache sharedURLCache() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedURLCache( ClassHandle, CachedSelectors.sharedURLCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLCache( ___result );
		}
		unsafe public NSCachedURLResponse cachedResponseForRequest_( NSURLRequest request ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedResponseForRequest_( Handle, CachedSelectors.cachedResponseForRequest_, out ___occuredException, sizeof( NSURLRequest ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCachedURLResponse( ___result );
		}
		unsafe public uint currentDiskUsage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentDiskUsage( Handle, CachedSelectors.currentDiskUsage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint currentMemoryUsage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentMemoryUsage( Handle, CachedSelectors.currentMemoryUsage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint diskCapacity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.diskCapacity( Handle, CachedSelectors.diskCapacity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSURLCache initWithMemoryCapacity_diskCapacity_diskPath_( uint capacity, uint diskCapacity, string diskPath ) {
			RuntimeObject ___occuredException;
			var ___wrappeddiskPath = Runtime.CreateStringProxy( diskPath );
			var ___result = NativeMethods.initWithMemoryCapacity_diskCapacity_diskPath_( Handle, CachedSelectors.initWithMemoryCapacity_diskCapacity_diskPath_, out ___occuredException, sizeof( uint ) + sizeof( uint ) + sizeof( IntPtr ), capacity, diskCapacity, ___wrappeddiskPath );
			Runtime.ReleaseNativeObject( ___wrappeddiskPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLCache( ___result );
		}
		unsafe public uint memoryCapacity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.memoryCapacity( Handle, CachedSelectors.memoryCapacity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void removeAllCachedResponses() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllCachedResponses( Handle, CachedSelectors.removeAllCachedResponses, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeCachedResponseForRequest_( NSURLRequest request ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeCachedResponseForRequest_( Handle, CachedSelectors.removeCachedResponseForRequest_, out ___occuredException, sizeof( NSURLRequest ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDiskCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDiskCapacity_( Handle, CachedSelectors.setDiskCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMemoryCapacity_( uint capacity ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMemoryCapacity_( Handle, CachedSelectors.setMemoryCapacity_, out ___occuredException, sizeof( uint ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void storeCachedResponse_forRequest_( NSCachedURLResponse response, NSURLRequest forRequest ) {
			RuntimeObject ___occuredException;
			NativeMethods.storeCachedResponse_forRequest_( Handle, CachedSelectors.storeCachedResponse_forRequest_, out ___occuredException, sizeof( NSCachedURLResponse ) + sizeof( NSURLRequest ), response, forRequest );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cachedResponseForRequest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint currentDiskUsage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint currentMemoryUsage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint diskCapacity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithMemoryCapacity_diskCapacity_diskPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity, uint diskCapacity, IntPtr diskPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint memoryCapacity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllCachedResponses( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeCachedResponseForRequest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDiskCapacity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMemoryCapacity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSharedURLCache_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLCache cache );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedURLCache( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void storeCachedResponse_forRequest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCachedURLResponse response, NSURLRequest forRequest );
		}
		static internal class CachedSelectors {
			public static readonly Selector cachedResponseForRequest_ = "cachedResponseForRequest:";
			public static readonly Selector currentDiskUsage = "currentDiskUsage";
			public static readonly Selector currentMemoryUsage = "currentMemoryUsage";
			public static readonly Selector diskCapacity = "diskCapacity";
			public static readonly Selector initWithMemoryCapacity_diskCapacity_diskPath_ = "initWithMemoryCapacity:diskCapacity:diskPath:";
			public static readonly Selector memoryCapacity = "memoryCapacity";
			public static readonly Selector removeAllCachedResponses = "removeAllCachedResponses";
			public static readonly Selector removeCachedResponseForRequest_ = "removeCachedResponseForRequest:";
			public static readonly Selector setDiskCapacity_ = "setDiskCapacity:";
			public static readonly Selector setMemoryCapacity_ = "setMemoryCapacity:";
			public static readonly Selector setSharedURLCache_ = "setSharedURLCache:";
			public static readonly Selector sharedURLCache = "sharedURLCache";
			public static readonly Selector storeCachedResponse_forRequest_ = "storeCachedResponse:forRequest:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLCacheInternal : IEquatable<NSURLCacheInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLCacheInternal;
		public static implicit operator IntPtr( NSURLCacheInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLCacheInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLCacheInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLCacheInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLCacheInternal value1, NSURLCacheInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLCacheInternal value1, NSURLCacheInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLCacheInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLCacheInternal alloc() {
			return new NSURLCacheInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLCacheNode : IEquatable<NSURLCacheNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLCacheNode;
		public static implicit operator IntPtr( NSURLCacheNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLCacheNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLCacheNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLCacheNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLCacheNode value1, NSURLCacheNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLCacheNode value1, NSURLCacheNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLCacheNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLCacheNode alloc() {
			return new NSURLCacheNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSURLCacheNode initWithCachedResponse_request_key_( NObjective.RuntimeObject response, NObjective.RuntimeObject request, NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCachedResponse_request_key_( Handle, CachedSelectors.initWithCachedResponse_request_key_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), response, request, key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLCacheNode( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCachedResponse_request_key_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject response, NObjective.RuntimeObject request, NObjective.RuntimeObject key );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithCachedResponse_request_key_ = "initWithCachedResponse:request:key:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLConnection : IEquatable<NSURLConnection> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLConnection;
		public static implicit operator IntPtr( NSURLConnection value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLConnection value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLConnection?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLConnection value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLConnection value1, NSURLConnection value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLConnection value1, NSURLConnection value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLConnection( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLConnection alloc() {
			return new NSURLConnection( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static bool canHandleRequest_( NSURLRequest request ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canHandleRequest_( ClassHandle, CachedSelectors.canHandleRequest_, out ___occuredException, sizeof( NSURLRequest ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NSURLConnection connectionWithRequest_delegate_( NSURLRequest request, NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connectionWithRequest_delegate_( ClassHandle, CachedSelectors.connectionWithRequest_delegate_, out ___occuredException, sizeof( NSURLRequest ) + sizeof( NObjective.RuntimeObject ), request, @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLConnection( ___result );
		}
		unsafe public static NSData sendSynchronousRequest_returningResponse_error_( NSURLRequest request, ref NSURLResponse returningResponse, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendSynchronousRequest_returningResponse_error_( ClassHandle, CachedSelectors.sendSynchronousRequest_returningResponse_error_, out ___occuredException, sizeof( NSURLRequest ) + sizeof( IntPtr ) + sizeof( IntPtr ), request, ref returningResponse, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public void cancel() {
			RuntimeObject ___occuredException;
			NativeMethods.cancel( Handle, CachedSelectors.cancel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelAuthenticationChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelAuthenticationChallenge_( Handle, CachedSelectors.cancelAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void continueWithoutCredentialForAuthenticationChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.continueWithoutCredentialForAuthenticationChallenge_( Handle, CachedSelectors.continueWithoutCredentialForAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char defersCallbacks() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defersCallbacks( Handle, CachedSelectors.defersCallbacks, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSURLConnection initWithRequest_delegate_( NSURLRequest request, NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRequest_delegate_( Handle, CachedSelectors.initWithRequest_delegate_, out ___occuredException, sizeof( NSURLRequest ) + sizeof( NObjective.RuntimeObject ), request, @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLConnection( ___result );
		}
		unsafe public NSURLConnection initWithRequest_delegate_priority_( NObjective.RuntimeObject request, NObjective.RuntimeObject @delegate, float priority ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRequest_delegate_priority_( Handle, CachedSelectors.initWithRequest_delegate_priority_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( float ), request, @delegate, priority );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLConnection( ___result );
		}
		unsafe public NObjective.RuntimeObject protocol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protocol( Handle, CachedSelectors.protocol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeFromOriginLoadSet() {
			RuntimeObject ___occuredException;
			NativeMethods.removeFromOriginLoadSet( Handle, CachedSelectors.removeFromOriginLoadSet, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject request() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.request( Handle, CachedSelectors.request, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject response() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.response( Handle, CachedSelectors.response, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void schedule() {
			RuntimeObject ___occuredException;
			NativeMethods.schedule( Handle, CachedSelectors.schedule, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefersCallbacks_( char callbacks ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefersCallbacks_( Handle, CachedSelectors.setDefersCallbacks_, out ___occuredException, sizeof( char ), callbacks );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void touch() {
			RuntimeObject ___occuredException;
			NativeMethods.touch( Handle, CachedSelectors.touch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void useCredential_forAuthenticationChallenge_( NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.useCredential_forAuthenticationChallenge_( Handle, CachedSelectors.useCredential_forAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), credential, forAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canHandleRequest_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connectionWithRequest_delegate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueWithoutCredentialForAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char defersCallbacks( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRequest_delegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRequest_delegate_priority_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request, NObjective.RuntimeObject @delegate, float priority );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr protocol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeFromOriginLoadSet( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr request( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr response( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void schedule( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sendSynchronousRequest_returningResponse_error_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request, ref NSURLResponse returningResponse, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefersCallbacks_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char callbacks );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void touch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void useCredential_forAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancel = "cancel";
			public static readonly Selector cancelAuthenticationChallenge_ = "cancelAuthenticationChallenge:";
			public static readonly Selector canHandleRequest_ = "canHandleRequest:";
			public static readonly Selector connectionWithRequest_delegate_ = "connectionWithRequest:delegate:";
			public static readonly Selector continueWithoutCredentialForAuthenticationChallenge_ = "continueWithoutCredentialForAuthenticationChallenge:";
			public static readonly Selector defersCallbacks = "defersCallbacks";
			public static readonly Selector initWithRequest_delegate_ = "initWithRequest:delegate:";
			public static readonly Selector initWithRequest_delegate_priority_ = "initWithRequest:delegate:priority:";
			public static readonly Selector protocol = "protocol";
			public static readonly Selector removeFromOriginLoadSet = "removeFromOriginLoadSet";
			public static readonly Selector request = "request";
			public static readonly Selector response = "response";
			public static readonly Selector schedule = "schedule";
			public static readonly Selector sendSynchronousRequest_returningResponse_error_ = "sendSynchronousRequest:returningResponse:error:";
			public static readonly Selector setDefersCallbacks_ = "setDefersCallbacks:";
			public static readonly Selector touch = "touch";
			public static readonly Selector useCredential_forAuthenticationChallenge_ = "useCredential:forAuthenticationChallenge:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLConnectionCallbackData : IEquatable<NSURLConnectionCallbackData> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLConnectionCallbackData;
		public static implicit operator IntPtr( NSURLConnectionCallbackData value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLConnectionCallbackData value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLConnectionCallbackData?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLConnectionCallbackData value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLConnectionCallbackData value1, NSURLConnectionCallbackData value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLConnectionCallbackData value1, NSURLConnectionCallbackData value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLConnectionCallbackData( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLConnectionCallbackData alloc() {
			return new NSURLConnectionCallbackData( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLConnectionDelegateProxy : IEquatable<NSURLConnectionDelegateProxy> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLConnectionDelegateProxy;
		public static implicit operator IntPtr( NSURLConnectionDelegateProxy value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLConnectionDelegateProxy value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLConnectionDelegateProxy?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLConnectionDelegateProxy value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLConnectionDelegateProxy value1, NSURLConnectionDelegateProxy value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLConnectionDelegateProxy value1, NSURLConnectionDelegateProxy value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLConnectionDelegateProxy( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLConnectionDelegateProxy alloc() {
			return new NSURLConnectionDelegateProxy( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void connection_didCancelAuthenticationChallenge_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didCancelAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didCancelAuthenticationChallenge_( Handle, CachedSelectors.connection_didCancelAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didCancelAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didFailWithError_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didFailWithError_( Handle, CachedSelectors.connection_didFailWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didFailWithError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveAuthenticationChallenge_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveAuthenticationChallenge_( Handle, CachedSelectors.connection_didReceiveAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveData_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveData_( Handle, CachedSelectors.connection_didReceiveData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveData_lengthReceived_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData, long lengthReceived ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveData_lengthReceived_( Handle, CachedSelectors.connection_didReceiveData_lengthReceived_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( long ), connection, didReceiveData, lengthReceived );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveResponse ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveResponse_( Handle, CachedSelectors.connection_didReceiveResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject connection_willCacheResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willCacheResponse ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connection_willCacheResponse_( Handle, CachedSelectors.connection_willCacheResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willCacheResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject connection_willSendRequest_redirectResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connection_willSendRequest_redirectResponse_( Handle, CachedSelectors.connection_willSendRequest_redirectResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willSendRequest, redirectResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void connection_willStopBufferingData_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willStopBufferingData ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_willStopBufferingData_( Handle, CachedSelectors.connection_willStopBufferingData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willStopBufferingData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connectionDidFinishLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectionDidFinishLoading_( Handle, CachedSelectors.connectionDidFinishLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didCancelAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didCancelAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didFailWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveData_lengthReceived_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData, long lengthReceived );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connection_willCacheResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willCacheResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connection_willSendRequest_redirectResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_willStopBufferingData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willStopBufferingData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connectionDidFinishLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
		}
		static internal class CachedSelectors {
			public static readonly Selector connection_didCancelAuthenticationChallenge_ = "connection:didCancelAuthenticationChallenge:";
			public static readonly Selector connection_didFailWithError_ = "connection:didFailWithError:";
			public static readonly Selector connection_didReceiveAuthenticationChallenge_ = "connection:didReceiveAuthenticationChallenge:";
			public static readonly Selector connection_didReceiveData_ = "connection:didReceiveData:";
			public static readonly Selector connection_didReceiveData_lengthReceived_ = "connection:didReceiveData:lengthReceived:";
			public static readonly Selector connection_didReceiveResponse_ = "connection:didReceiveResponse:";
			public static readonly Selector connection_willCacheResponse_ = "connection:willCacheResponse:";
			public static readonly Selector connection_willSendRequest_redirectResponse_ = "connection:willSendRequest:redirectResponse:";
			public static readonly Selector connection_willStopBufferingData_ = "connection:willStopBufferingData:";
			public static readonly Selector connectionDidFinishLoading_ = "connectionDidFinishLoading:";
			public static readonly Selector setDelegate_ = "setDelegate:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLHandle ) )]
	public struct NSURLConnectionHandle : IEquatable<NSURLConnectionHandle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLConnectionHandle;
		public static implicit operator IntPtr( NSURLConnectionHandle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLConnectionHandle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLConnectionHandle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLConnectionHandle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLConnectionHandle value1, NSURLConnectionHandle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLConnectionHandle value1, NSURLConnectionHandle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLConnectionHandle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLConnectionHandle alloc() {
			return new NSURLConnectionHandle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void connection_didFailLoadingWithError_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailLoadingWithError ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didFailLoadingWithError_( Handle, CachedSelectors.connection_didFailLoadingWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didFailLoadingWithError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveData_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveData_( Handle, CachedSelectors.connection_didReceiveData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connectionDidFinishLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectionDidFinishLoading_( Handle, CachedSelectors.connectionDidFinishLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didFailLoadingWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailLoadingWithError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connectionDidFinishLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
		}
		static internal class CachedSelectors {
			public static readonly Selector connection_didFailLoadingWithError_ = "connection:didFailLoadingWithError:";
			public static readonly Selector connection_didReceiveData_ = "connection:didReceiveData:";
			public static readonly Selector connectionDidFinishLoading_ = "connectionDidFinishLoading:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLConnectionInternal : IEquatable<NSURLConnectionInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLConnectionInternal;
		public static implicit operator IntPtr( NSURLConnectionInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLConnectionInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLConnectionInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLConnectionInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLConnectionInternal value1, NSURLConnectionInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLConnectionInternal value1, NSURLConnectionInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLConnectionInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLConnectionInternal alloc() {
			return new NSURLConnectionInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void prepareCallbacks() {
			RuntimeObject ___occuredException;
			NativeMethods.prepareCallbacks( Handle, CachedSelectors.prepareCallbacks, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject request() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.request( Handle, CachedSelectors.request, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject response() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.response( Handle, CachedSelectors.response, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void URLProtocol_cachedResponseIsValid_( NObjective.RuntimeObject protocol, NObjective.RuntimeObject cachedResponseIsValid ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLProtocol_cachedResponseIsValid_( Handle, CachedSelectors.URLProtocol_cachedResponseIsValid_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), protocol, cachedResponseIsValid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLProtocol_didCancelAuthenticationChallenge_( NObjective.RuntimeObject protocol, NObjective.RuntimeObject didCancelAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLProtocol_didCancelAuthenticationChallenge_( Handle, CachedSelectors.URLProtocol_didCancelAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), protocol, didCancelAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLProtocol_didFailWithError_( NObjective.RuntimeObject protocol, NObjective.RuntimeObject didFailWithError ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLProtocol_didFailWithError_( Handle, CachedSelectors.URLProtocol_didFailWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), protocol, didFailWithError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLProtocol_didLoadData_( NObjective.RuntimeObject protocol, NObjective.RuntimeObject didLoadData ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLProtocol_didLoadData_( Handle, CachedSelectors.URLProtocol_didLoadData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), protocol, didLoadData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLProtocol_didLoadData_lengthReceived_( NObjective.RuntimeObject protocol, NObjective.RuntimeObject didLoadData, long lengthReceived ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLProtocol_didLoadData_lengthReceived_( Handle, CachedSelectors.URLProtocol_didLoadData_lengthReceived_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( long ), protocol, didLoadData, lengthReceived );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLProtocol_didReceiveAuthenticationChallenge_( NObjective.RuntimeObject protocol, NObjective.RuntimeObject didReceiveAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLProtocol_didReceiveAuthenticationChallenge_( Handle, CachedSelectors.URLProtocol_didReceiveAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), protocol, didReceiveAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLProtocol_didReceiveResponse_cacheStoragePolicy_( NObjective.RuntimeObject protocol, NObjective.RuntimeObject didReceiveResponse, int cacheStoragePolicy ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLProtocol_didReceiveResponse_cacheStoragePolicy_( Handle, CachedSelectors.URLProtocol_didReceiveResponse_cacheStoragePolicy_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), protocol, didReceiveResponse, cacheStoragePolicy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLProtocol_wasRedirectedToRequest_redirectResponse_( NObjective.RuntimeObject protocol, NObjective.RuntimeObject wasRedirectedToRequest, NObjective.RuntimeObject redirectResponse ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLProtocol_wasRedirectedToRequest_redirectResponse_( Handle, CachedSelectors.URLProtocol_wasRedirectedToRequest_redirectResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), protocol, wasRedirectedToRequest, redirectResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLProtocolDidFinishLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLProtocolDidFinishLoading_( Handle, CachedSelectors.URLProtocolDidFinishLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void prepareCallbacks( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr request( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr response( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLProtocol_cachedResponseIsValid_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol, NObjective.RuntimeObject cachedResponseIsValid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLProtocol_didCancelAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol, NObjective.RuntimeObject didCancelAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLProtocol_didFailWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol, NObjective.RuntimeObject didFailWithError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLProtocol_didLoadData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol, NObjective.RuntimeObject didLoadData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLProtocol_didLoadData_lengthReceived_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol, NObjective.RuntimeObject didLoadData, long lengthReceived );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLProtocol_didReceiveAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol, NObjective.RuntimeObject didReceiveAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLProtocol_didReceiveResponse_cacheStoragePolicy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol, NObjective.RuntimeObject didReceiveResponse, int cacheStoragePolicy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLProtocol_wasRedirectedToRequest_redirectResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol, NObjective.RuntimeObject wasRedirectedToRequest, NObjective.RuntimeObject redirectResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLProtocolDidFinishLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
		}
		static internal class CachedSelectors {
			public static readonly Selector prepareCallbacks = "prepareCallbacks";
			public static readonly Selector request = "request";
			public static readonly Selector response = "response";
			public static readonly Selector URLProtocol_cachedResponseIsValid_ = "URLProtocol:cachedResponseIsValid:";
			public static readonly Selector URLProtocol_didCancelAuthenticationChallenge_ = "URLProtocol:didCancelAuthenticationChallenge:";
			public static readonly Selector URLProtocol_didFailWithError_ = "URLProtocol:didFailWithError:";
			public static readonly Selector URLProtocol_didLoadData_ = "URLProtocol:didLoadData:";
			public static readonly Selector URLProtocol_didLoadData_lengthReceived_ = "URLProtocol:didLoadData:lengthReceived:";
			public static readonly Selector URLProtocol_didReceiveAuthenticationChallenge_ = "URLProtocol:didReceiveAuthenticationChallenge:";
			public static readonly Selector URLProtocol_didReceiveResponse_cacheStoragePolicy_ = "URLProtocol:didReceiveResponse:cacheStoragePolicy:";
			public static readonly Selector URLProtocol_wasRedirectedToRequest_redirectResponse_ = "URLProtocol:wasRedirectedToRequest:redirectResponse:";
			public static readonly Selector URLProtocolDidFinishLoading_ = "URLProtocolDidFinishLoading:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLQueue ) )]
	public struct NSURLConnectionQueue : IEquatable<NSURLConnectionQueue> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLConnectionQueue;
		public static implicit operator IntPtr( NSURLConnectionQueue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLConnectionQueue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLConnectionQueue?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLConnectionQueue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLConnectionQueue value1, NSURLConnectionQueue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLConnectionQueue value1, NSURLConnectionQueue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLConnectionQueue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLConnectionQueue alloc() {
			return new NSURLConnectionQueue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void put_URL_( NObjective.RuntimeObject put, NObjective.RuntimeObject URL ) {
			RuntimeObject ___occuredException;
			NativeMethods.put_URL_( Handle, CachedSelectors.put_URL_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), put, URL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void put_URL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject put, NObjective.RuntimeObject URL );
		}
		static internal class CachedSelectors {
			public static readonly Selector put_URL_ = "put:URL:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLCredential : IEquatable<NSURLCredential> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLCredential;
		public static implicit operator IntPtr( NSURLCredential value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLCredential value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLCredential?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLCredential value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLCredential value1, NSURLCredential value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLCredential value1, NSURLCredential value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLCredential( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLCredential alloc() {
			return new NSURLCredential( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSURLCredential credentialWithUser_password_persistence_( string user, string password, NSURLCredentialPersistence persistence ) {
			RuntimeObject ___occuredException;
			var ___wrappeduser = Runtime.CreateStringProxy( user );
			var ___wrappedpassword = Runtime.CreateStringProxy( password );
			var ___result = NativeMethods.credentialWithUser_password_persistence_( ClassHandle, CachedSelectors.credentialWithUser_password_persistence_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSURLCredentialPersistence ), ___wrappeduser, ___wrappedpassword, persistence );
			Runtime.ReleaseNativeObject( ___wrappeduser );
			Runtime.ReleaseNativeObject( ___wrappedpassword );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLCredential( ___result );
		}
		unsafe public bool hasPassword() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasPassword( Handle, CachedSelectors.hasPassword, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSURLCredential initWithUser_password_persistence_( string user, string password, NSURLCredentialPersistence persistence ) {
			RuntimeObject ___occuredException;
			var ___wrappeduser = Runtime.CreateStringProxy( user );
			var ___wrappedpassword = Runtime.CreateStringProxy( password );
			var ___result = NativeMethods.initWithUser_password_persistence_( Handle, CachedSelectors.initWithUser_password_persistence_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSURLCredentialPersistence ), ___wrappeduser, ___wrappedpassword, persistence );
			Runtime.ReleaseNativeObject( ___wrappeduser );
			Runtime.ReleaseNativeObject( ___wrappedpassword );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLCredential( ___result );
		}
		unsafe public string password() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.password( Handle, CachedSelectors.password, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSURLCredentialPersistence persistence() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.persistence( Handle, CachedSelectors.persistence, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSURLCredentialPersistence ) ___result;
		}
		unsafe public string user() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.user( Handle, CachedSelectors.user, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr credentialWithUser_password_persistence_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr user, IntPtr password, NSURLCredentialPersistence persistence );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasPassword( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUser_password_persistence_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr user, IntPtr password, NSURLCredentialPersistence persistence );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr password( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int persistence( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr user( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector credentialWithUser_password_persistence_ = "credentialWithUser:password:persistence:";
			public static readonly Selector hasPassword = "hasPassword";
			public static readonly Selector initWithUser_password_persistence_ = "initWithUser:password:persistence:";
			public static readonly Selector password = "password";
			public static readonly Selector persistence = "persistence";
			public static readonly Selector user = "user";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLCredentialInternal : IEquatable<NSURLCredentialInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLCredentialInternal;
		public static implicit operator IntPtr( NSURLCredentialInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLCredentialInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLCredentialInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLCredentialInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLCredentialInternal value1, NSURLCredentialInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLCredentialInternal value1, NSURLCredentialInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLCredentialInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLCredentialInternal alloc() {
			return new NSURLCredentialInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLCredentialStorage : IEquatable<NSURLCredentialStorage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLCredentialStorage;
		public static implicit operator IntPtr( NSURLCredentialStorage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLCredentialStorage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLCredentialStorage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLCredentialStorage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLCredentialStorage value1, NSURLCredentialStorage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLCredentialStorage value1, NSURLCredentialStorage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLCredentialStorage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLCredentialStorage alloc() {
			return new NSURLCredentialStorage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSURLCredentialStorage sharedCredentialStorage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedCredentialStorage( ClassHandle, CachedSelectors.sharedCredentialStorage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLCredentialStorage( ___result );
		}
		unsafe public NSDictionary allCredentials() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allCredentials( Handle, CachedSelectors.allCredentials, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary credentialsForProtectionSpace_( NSURLProtectionSpace space ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.credentialsForProtectionSpace_( Handle, CachedSelectors.credentialsForProtectionSpace_, out ___occuredException, sizeof( NSURLProtectionSpace ), space );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSURLCredential defaultCredentialForProtectionSpace_( NSURLProtectionSpace space ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultCredentialForProtectionSpace_( Handle, CachedSelectors.defaultCredentialForProtectionSpace_, out ___occuredException, sizeof( NSURLProtectionSpace ), space );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLCredential( ___result );
		}
		unsafe public void removeCredential_forProtectionSpace_( NSURLCredential credential, NSURLProtectionSpace forProtectionSpace ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeCredential_forProtectionSpace_( Handle, CachedSelectors.removeCredential_forProtectionSpace_, out ___occuredException, sizeof( NSURLCredential ) + sizeof( NSURLProtectionSpace ), credential, forProtectionSpace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCredential_forProtectionSpace_( NSURLCredential credential, NSURLProtectionSpace forProtectionSpace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCredential_forProtectionSpace_( Handle, CachedSelectors.setCredential_forProtectionSpace_, out ___occuredException, sizeof( NSURLCredential ) + sizeof( NSURLProtectionSpace ), credential, forProtectionSpace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultCredential_forProtectionSpace_( NSURLCredential credential, NSURLProtectionSpace forProtectionSpace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultCredential_forProtectionSpace_( Handle, CachedSelectors.setDefaultCredential_forProtectionSpace_, out ___occuredException, sizeof( NSURLCredential ) + sizeof( NSURLProtectionSpace ), credential, forProtectionSpace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allCredentials( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr credentialsForProtectionSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLProtectionSpace space );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultCredentialForProtectionSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLProtectionSpace space );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeCredential_forProtectionSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLCredential credential, NSURLProtectionSpace forProtectionSpace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCredential_forProtectionSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLCredential credential, NSURLProtectionSpace forProtectionSpace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultCredential_forProtectionSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLCredential credential, NSURLProtectionSpace forProtectionSpace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedCredentialStorage( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allCredentials = "allCredentials";
			public static readonly Selector credentialsForProtectionSpace_ = "credentialsForProtectionSpace:";
			public static readonly Selector defaultCredentialForProtectionSpace_ = "defaultCredentialForProtectionSpace:";
			public static readonly Selector removeCredential_forProtectionSpace_ = "removeCredential:forProtectionSpace:";
			public static readonly Selector setCredential_forProtectionSpace_ = "setCredential:forProtectionSpace:";
			public static readonly Selector setDefaultCredential_forProtectionSpace_ = "setDefaultCredential:forProtectionSpace:";
			public static readonly Selector sharedCredentialStorage = "sharedCredentialStorage";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLCredentialStorageInternal : IEquatable<NSURLCredentialStorageInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLCredentialStorageInternal;
		public static implicit operator IntPtr( NSURLCredentialStorageInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLCredentialStorageInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLCredentialStorageInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLCredentialStorageInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLCredentialStorageInternal value1, NSURLCredentialStorageInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLCredentialStorageInternal value1, NSURLCredentialStorageInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLCredentialStorageInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLCredentialStorageInternal alloc() {
			return new NSURLCredentialStorageInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLDownload : IEquatable<NSURLDownload> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLDownload;
		public static implicit operator IntPtr( NSURLDownload value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLDownload value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLDownload?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLDownload value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLDownload value1, NSURLDownload value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLDownload value1, NSURLDownload value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLDownload( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLDownload alloc() {
			return new NSURLDownload( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static bool canResumeDownloadDecodedWithEncodingMIMEType_( string type ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___result = NativeMethods.canResumeDownloadDecodedWithEncodingMIMEType_( ClassHandle, CachedSelectors.canResumeDownloadDecodedWithEncodingMIMEType_, out ___occuredException, sizeof( IntPtr ), ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancel() {
			RuntimeObject ___occuredException;
			NativeMethods.cancel( Handle, CachedSelectors.cancel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelAuthenticationChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelAuthenticationChallenge_( Handle, CachedSelectors.cancelAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didCancelAuthenticationChallenge_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didCancelAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didCancelAuthenticationChallenge_( Handle, CachedSelectors.connection_didCancelAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didCancelAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didFailWithError_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didFailWithError_( Handle, CachedSelectors.connection_didFailWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didFailWithError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveAuthenticationChallenge_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveAuthenticationChallenge_( Handle, CachedSelectors.connection_didReceiveAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveData_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveData_( Handle, CachedSelectors.connection_didReceiveData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveData_lengthReceived_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData, long lengthReceived ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveData_lengthReceived_( Handle, CachedSelectors.connection_didReceiveData_lengthReceived_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( long ), connection, didReceiveData, lengthReceived );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connection_didReceiveResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveResponse ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_didReceiveResponse_( Handle, CachedSelectors.connection_didReceiveResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, didReceiveResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject connection_willCacheResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willCacheResponse ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connection_willCacheResponse_( Handle, CachedSelectors.connection_willCacheResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willCacheResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject connection_willSendRequest_redirectResponse_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.connection_willSendRequest_redirectResponse_( Handle, CachedSelectors.connection_willSendRequest_redirectResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willSendRequest, redirectResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void connectionDidFinishLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectionDidFinishLoading_( Handle, CachedSelectors.connectionDidFinishLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void continueWithoutCredentialForAuthenticationChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.continueWithoutCredentialForAuthenticationChallenge_( Handle, CachedSelectors.continueWithoutCredentialForAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool deletesFileUponFailure() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deletesFileUponFailure( Handle, CachedSelectors.deletesFileUponFailure, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSURLDownload initWithRequest_delegate_( NSURLRequest request, NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRequest_delegate_( Handle, CachedSelectors.initWithRequest_delegate_, out ___occuredException, sizeof( NSURLRequest ) + sizeof( NObjective.RuntimeObject ), request, @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLDownload( ___result );
		}
		unsafe public NSURLDownload initWithResumeData_delegate_path_( NSData data, NObjective.RuntimeObject @delegate, string path ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.initWithResumeData_delegate_path_( Handle, CachedSelectors.initWithResumeData_delegate_path_, out ___occuredException, sizeof( NSData ) + sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), data, @delegate, ___wrappedpath );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLDownload( ___result );
		}
		unsafe public NSURLRequest request() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.request( Handle, CachedSelectors.request, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLRequest( ___result );
		}
		unsafe public NSData resumeData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resumeData( Handle, CachedSelectors.resumeData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public void setDeletesFileUponFailure_( bool failure ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDeletesFileUponFailure_( Handle, CachedSelectors.setDeletesFileUponFailure_, out ___occuredException, sizeof( bool ), failure );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDestination_allowOverwrite_( string destination, bool allowOverwrite ) {
			RuntimeObject ___occuredException;
			var ___wrappeddestination = Runtime.CreateStringProxy( destination );
			NativeMethods.setDestination_allowOverwrite_( Handle, CachedSelectors.setDestination_allowOverwrite_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappeddestination, allowOverwrite );
			Runtime.ReleaseNativeObject( ___wrappeddestination );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void useCredential_forAuthenticationChallenge_( NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.useCredential_forAuthenticationChallenge_( Handle, CachedSelectors.useCredential_forAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), credential, forAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canResumeDownloadDecodedWithEncodingMIMEType_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didCancelAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didCancelAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didFailWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didFailWithError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveData_lengthReceived_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveData, long lengthReceived );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_didReceiveResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject didReceiveResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connection_willCacheResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willCacheResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr connection_willSendRequest_redirectResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connectionDidFinishLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueWithoutCredentialForAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool deletesFileUponFailure( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRequest_delegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithResumeData_delegate_path_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data, NObjective.RuntimeObject @delegate, IntPtr path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr request( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resumeData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDeletesFileUponFailure_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool failure );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDestination_allowOverwrite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr destination, bool allowOverwrite );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void useCredential_forAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancel = "cancel";
			public static readonly Selector cancelAuthenticationChallenge_ = "cancelAuthenticationChallenge:";
			public static readonly Selector canResumeDownloadDecodedWithEncodingMIMEType_ = "canResumeDownloadDecodedWithEncodingMIMEType:";
			public static readonly Selector connection_didCancelAuthenticationChallenge_ = "connection:didCancelAuthenticationChallenge:";
			public static readonly Selector connection_didFailWithError_ = "connection:didFailWithError:";
			public static readonly Selector connection_didReceiveAuthenticationChallenge_ = "connection:didReceiveAuthenticationChallenge:";
			public static readonly Selector connection_didReceiveData_ = "connection:didReceiveData:";
			public static readonly Selector connection_didReceiveData_lengthReceived_ = "connection:didReceiveData:lengthReceived:";
			public static readonly Selector connection_didReceiveResponse_ = "connection:didReceiveResponse:";
			public static readonly Selector connection_willCacheResponse_ = "connection:willCacheResponse:";
			public static readonly Selector connection_willSendRequest_redirectResponse_ = "connection:willSendRequest:redirectResponse:";
			public static readonly Selector connectionDidFinishLoading_ = "connectionDidFinishLoading:";
			public static readonly Selector continueWithoutCredentialForAuthenticationChallenge_ = "continueWithoutCredentialForAuthenticationChallenge:";
			public static readonly Selector deletesFileUponFailure = "deletesFileUponFailure";
			public static readonly Selector initWithRequest_delegate_ = "initWithRequest:delegate:";
			public static readonly Selector initWithResumeData_delegate_path_ = "initWithResumeData:delegate:path:";
			public static readonly Selector request = "request";
			public static readonly Selector resumeData = "resumeData";
			public static readonly Selector setDeletesFileUponFailure_ = "setDeletesFileUponFailure:";
			public static readonly Selector setDestination_allowOverwrite_ = "setDestination:allowOverwrite:";
			public static readonly Selector useCredential_forAuthenticationChallenge_ = "useCredential:forAuthenticationChallenge:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLDownloadInternal : IEquatable<NSURLDownloadInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLDownloadInternal;
		public static implicit operator IntPtr( NSURLDownloadInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLDownloadInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLDownloadInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLDownloadInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLDownloadInternal value1, NSURLDownloadInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLDownloadInternal value1, NSURLDownloadInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLDownloadInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLDownloadInternal alloc() {
			return new NSURLDownloadInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLFileTypeMappings : IEquatable<NSURLFileTypeMappings> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLFileTypeMappings;
		public static implicit operator IntPtr( NSURLFileTypeMappings value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLFileTypeMappings value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLFileTypeMappings?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLFileTypeMappings value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLFileTypeMappings value1, NSURLFileTypeMappings value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLFileTypeMappings value1, NSURLFileTypeMappings value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLFileTypeMappings( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLFileTypeMappings alloc() {
			return new NSURLFileTypeMappings( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedMappings() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedMappings( ClassHandle, CachedSelectors.sharedMappings, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject extensionsForMIMEType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.extensionsForMIMEType_( Handle, CachedSelectors.extensionsForMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject MIMETypeForExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.MIMETypeForExtension_( Handle, CachedSelectors.MIMETypeForExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject preferredExtensionForMIMEType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preferredExtensionForMIMEType_( Handle, CachedSelectors.preferredExtensionForMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr extensionsForMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr MIMETypeForExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preferredExtensionForMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedMappings( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector extensionsForMIMEType_ = "extensionsForMIMEType:";
			public static readonly Selector MIMETypeForExtension_ = "MIMETypeForExtension:";
			public static readonly Selector preferredExtensionForMIMEType_ = "preferredExtensionForMIMEType:";
			public static readonly Selector sharedMappings = "sharedMappings";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLFileTypeMappingsInternal : IEquatable<NSURLFileTypeMappingsInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLFileTypeMappingsInternal;
		public static implicit operator IntPtr( NSURLFileTypeMappingsInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLFileTypeMappingsInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLFileTypeMappingsInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLFileTypeMappingsInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLFileTypeMappingsInternal value1, NSURLFileTypeMappingsInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLFileTypeMappingsInternal value1, NSURLFileTypeMappingsInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLFileTypeMappingsInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLFileTypeMappingsInternal alloc() {
			return new NSURLFileTypeMappingsInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLHandle : IEquatable<NSURLHandle> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLHandle;
		public static implicit operator IntPtr( NSURLHandle value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLHandle value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLHandle?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLHandle value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLHandle value1, NSURLHandle value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLHandle value1, NSURLHandle value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLHandle( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLHandle alloc() {
			return new NSURLHandle( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSURLHandle cachedHandleForURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedHandleForURL_( ClassHandle, CachedSelectors.cachedHandleForURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLHandle( ___result );
		}
		unsafe public static bool canInitWithURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canInitWithURL_( ClassHandle, CachedSelectors.canInitWithURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void registerURLHandleClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerURLHandleClass_( ClassHandle, CachedSelectors.registerURLHandleClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeClass URLHandleClassForURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLHandleClassForURL_( ClassHandle, CachedSelectors.URLHandleClassForURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void addClient_( NObjective.RuntimeObject client ) {
			RuntimeObject ___occuredException;
			NativeMethods.addClient_( Handle, CachedSelectors.addClient_, out ___occuredException, sizeof( NObjective.RuntimeObject ), client );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSData availableResourceData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.availableResourceData( Handle, CachedSelectors.availableResourceData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public void backgroundLoadDidFailWithReason_( string reason ) {
			RuntimeObject ___occuredException;
			var ___wrappedreason = Runtime.CreateStringProxy( reason );
			NativeMethods.backgroundLoadDidFailWithReason_( Handle, CachedSelectors.backgroundLoadDidFailWithReason_, out ___occuredException, sizeof( IntPtr ), ___wrappedreason );
			Runtime.ReleaseNativeObject( ___wrappedreason );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void beginLoadInBackground() {
			RuntimeObject ___occuredException;
			NativeMethods.beginLoadInBackground( Handle, CachedSelectors.beginLoadInBackground, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelLoadInBackground() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelLoadInBackground( Handle, CachedSelectors.cancelLoadInBackground, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void didLoadBytes_loadComplete_( NSData bytes, bool loadComplete ) {
			RuntimeObject ___occuredException;
			NativeMethods.didLoadBytes_loadComplete_( Handle, CachedSelectors.didLoadBytes_loadComplete_, out ___occuredException, sizeof( NSData ) + sizeof( bool ), bytes, loadComplete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void endLoadInBackground() {
			RuntimeObject ___occuredException;
			NativeMethods.endLoadInBackground( Handle, CachedSelectors.endLoadInBackground, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public long expectedResourceDataSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expectedResourceDataSize( Handle, CachedSelectors.expectedResourceDataSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string failureReason() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.failureReason( Handle, CachedSelectors.failureReason, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void flushCachedData() {
			RuntimeObject ___occuredException;
			NativeMethods.flushCachedData( Handle, CachedSelectors.flushCachedData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSURLHandle initWithURL_cached_( NSURL url, bool cached ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_cached_( Handle, CachedSelectors.initWithURL_cached_, out ___occuredException, sizeof( NSURL ) + sizeof( bool ), url, cached );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLHandle( ___result );
		}
		unsafe public void loadInBackground() {
			RuntimeObject ___occuredException;
			NativeMethods.loadInBackground( Handle, CachedSelectors.loadInBackground, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSData loadInForeground() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.loadInForeground( Handle, CachedSelectors.loadInForeground, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.propertyForKey_( Handle, CachedSelectors.propertyForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyForKeyIfAvailable_( string available ) {
			RuntimeObject ___occuredException;
			var ___wrappedavailable = Runtime.CreateStringProxy( available );
			var ___result = NativeMethods.propertyForKeyIfAvailable_( Handle, CachedSelectors.propertyForKeyIfAvailable_, out ___occuredException, sizeof( IntPtr ), ___wrappedavailable );
			Runtime.ReleaseNativeObject( ___wrappedavailable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeClient_( NObjective.RuntimeObject client ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeClient_( Handle, CachedSelectors.removeClient_, out ___occuredException, sizeof( NObjective.RuntimeObject ), client );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSData resourceData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resourceData( Handle, CachedSelectors.resourceData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSURLHandleStatus status() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.status( Handle, CachedSelectors.status, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSURLHandleStatus ) ___result;
		}
		unsafe public bool writeData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeData_( Handle, CachedSelectors.writeData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool writeProperty_forKey_( NObjective.RuntimeObject property, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			var ___result = NativeMethods.writeProperty_forKey_( Handle, CachedSelectors.writeProperty_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), property, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addClient_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject client );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr availableResourceData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void backgroundLoadDidFailWithReason_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr reason );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void beginLoadInBackground( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cachedHandleForURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelLoadInBackground( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canInitWithURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didLoadBytes_loadComplete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData bytes, bool loadComplete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void endLoadInBackground( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern long expectedResourceDataSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr failureReason( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void flushCachedData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURL_cached_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, bool cached );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadInBackground( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr loadInForeground( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyForKeyIfAvailable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr available );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerURLHandleClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeClient_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject client );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resourceData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int status( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass URLHandleClassForURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool writeProperty_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, IntPtr forKey );
		}
		static internal class CachedSelectors {
			public static readonly Selector addClient_ = "addClient:";
			public static readonly Selector availableResourceData = "availableResourceData";
			public static readonly Selector backgroundLoadDidFailWithReason_ = "backgroundLoadDidFailWithReason:";
			public static readonly Selector beginLoadInBackground = "beginLoadInBackground";
			public static readonly Selector cachedHandleForURL_ = "cachedHandleForURL:";
			public static readonly Selector cancelLoadInBackground = "cancelLoadInBackground";
			public static readonly Selector canInitWithURL_ = "canInitWithURL:";
			public static readonly Selector didLoadBytes_loadComplete_ = "didLoadBytes:loadComplete:";
			public static readonly Selector endLoadInBackground = "endLoadInBackground";
			public static readonly Selector expectedResourceDataSize = "expectedResourceDataSize";
			public static readonly Selector failureReason = "failureReason";
			public static readonly Selector flushCachedData = "flushCachedData";
			public static readonly Selector initWithURL_cached_ = "initWithURL:cached:";
			public static readonly Selector loadInBackground = "loadInBackground";
			public static readonly Selector loadInForeground = "loadInForeground";
			public static readonly Selector propertyForKey_ = "propertyForKey:";
			public static readonly Selector propertyForKeyIfAvailable_ = "propertyForKeyIfAvailable:";
			public static readonly Selector registerURLHandleClass_ = "registerURLHandleClass:";
			public static readonly Selector removeClient_ = "removeClient:";
			public static readonly Selector resourceData = "resourceData";
			public static readonly Selector status = "status";
			public static readonly Selector URLHandleClassForURL_ = "URLHandleClassForURL:";
			public static readonly Selector writeData_ = "writeData:";
			public static readonly Selector writeProperty_forKey_ = "writeProperty:forKey:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLProtocol ) )]
	public struct NSURLHandleProtocol : IEquatable<NSURLHandleProtocol> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLHandleProtocol;
		public static implicit operator IntPtr( NSURLHandleProtocol value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLHandleProtocol value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLHandleProtocol?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLHandleProtocol value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLHandleProtocol value1, NSURLHandleProtocol value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLHandleProtocol value1, NSURLHandleProtocol value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLHandleProtocol( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLHandleProtocol alloc() {
			return new NSURLHandleProtocol( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void URLHandle_resourceDataDidBecomeAvailable_( NObjective.RuntimeObject handle, NObjective.RuntimeObject resourceDataDidBecomeAvailable ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLHandle_resourceDataDidBecomeAvailable_( Handle, CachedSelectors.URLHandle_resourceDataDidBecomeAvailable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), handle, resourceDataDidBecomeAvailable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLHandle_resourceDidFailLoadingWithReason_( NObjective.RuntimeObject handle, NObjective.RuntimeObject resourceDidFailLoadingWithReason ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLHandle_resourceDidFailLoadingWithReason_( Handle, CachedSelectors.URLHandle_resourceDidFailLoadingWithReason_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), handle, resourceDidFailLoadingWithReason );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLHandleResourceDidBeginLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLHandleResourceDidBeginLoading_( Handle, CachedSelectors.URLHandleResourceDidBeginLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLHandleResourceDidCancelLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLHandleResourceDidCancelLoading_( Handle, CachedSelectors.URLHandleResourceDidCancelLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void URLHandleResourceDidFinishLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.URLHandleResourceDidFinishLoading_( Handle, CachedSelectors.URLHandleResourceDidFinishLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLHandle_resourceDataDidBecomeAvailable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject handle, NObjective.RuntimeObject resourceDataDidBecomeAvailable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLHandle_resourceDidFailLoadingWithReason_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject handle, NObjective.RuntimeObject resourceDidFailLoadingWithReason );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLHandleResourceDidBeginLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLHandleResourceDidCancelLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void URLHandleResourceDidFinishLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
		}
		static internal class CachedSelectors {
			public static readonly Selector URLHandle_resourceDataDidBecomeAvailable_ = "URLHandle:resourceDataDidBecomeAvailable:";
			public static readonly Selector URLHandle_resourceDidFailLoadingWithReason_ = "URLHandle:resourceDidFailLoadingWithReason:";
			public static readonly Selector URLHandleResourceDidBeginLoading_ = "URLHandleResourceDidBeginLoading:";
			public static readonly Selector URLHandleResourceDidCancelLoading_ = "URLHandleResourceDidCancelLoading:";
			public static readonly Selector URLHandleResourceDidFinishLoading_ = "URLHandleResourceDidFinishLoading:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLHostNameAddressInfo : IEquatable<NSURLHostNameAddressInfo> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLHostNameAddressInfo;
		public static implicit operator IntPtr( NSURLHostNameAddressInfo value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLHostNameAddressInfo value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLHostNameAddressInfo?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLHostNameAddressInfo value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLHostNameAddressInfo value1, NSURLHostNameAddressInfo value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLHostNameAddressInfo value1, NSURLHostNameAddressInfo value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLHostNameAddressInfo( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLHostNameAddressInfo alloc() {
			return new NSURLHostNameAddressInfo( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject addressInfoForHost_( NObjective.RuntimeObject host ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressInfoForHost_( ClassHandle, CachedSelectors.addressInfoForHost_, out ___occuredException, sizeof( NObjective.RuntimeObject ), host );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void asyncResolveWithCallbackClient_( NObjective.RuntimeObject client ) {
			RuntimeObject ___occuredException;
			NativeMethods.asyncResolveWithCallbackClient_( ClassHandle, CachedSelectors.asyncResolveWithCallbackClient_, out ___occuredException, sizeof( NObjective.RuntimeObject ), client );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addressInfoForHost_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject host );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void asyncResolveWithCallbackClient_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject client );
		}
		static internal class CachedSelectors {
			public static readonly Selector addressInfoForHost_ = "addressInfoForHost:";
			public static readonly Selector asyncResolveWithCallbackClient_ = "asyncResolveWithCallbackClient:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLCredential ) )]
	public struct NSURLKeychainCredential : IEquatable<NSURLKeychainCredential> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLKeychainCredential;
		public static implicit operator IntPtr( NSURLKeychainCredential value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLKeychainCredential value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLKeychainCredential?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLKeychainCredential value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLKeychainCredential value1, NSURLKeychainCredential value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLKeychainCredential value1, NSURLKeychainCredential value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLKeychainCredential( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLKeychainCredential alloc() {
			return new NSURLKeychainCredential( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLKeychainCredentialInternal : IEquatable<NSURLKeychainCredentialInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLKeychainCredentialInternal;
		public static implicit operator IntPtr( NSURLKeychainCredentialInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLKeychainCredentialInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLKeychainCredentialInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLKeychainCredentialInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLKeychainCredentialInternal value1, NSURLKeychainCredentialInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLKeychainCredentialInternal value1, NSURLKeychainCredentialInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLKeychainCredentialInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLKeychainCredentialInternal alloc() {
			return new NSURLKeychainCredentialInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLKeychainCredentialStorage : IEquatable<NSURLKeychainCredentialStorage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLKeychainCredentialStorage;
		public static implicit operator IntPtr( NSURLKeychainCredentialStorage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLKeychainCredentialStorage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLKeychainCredentialStorage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLKeychainCredentialStorage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLKeychainCredentialStorage value1, NSURLKeychainCredentialStorage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLKeychainCredentialStorage value1, NSURLKeychainCredentialStorage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLKeychainCredentialStorage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLKeychainCredentialStorage alloc() {
			return new NSURLKeychainCredentialStorage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addCredential_forProtectionSpace_( NObjective.RuntimeObject credential, NObjective.RuntimeObject forProtectionSpace ) {
			RuntimeObject ___occuredException;
			NativeMethods.addCredential_forProtectionSpace_( Handle, CachedSelectors.addCredential_forProtectionSpace_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), credential, forProtectionSpace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allCredentials() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allCredentials( Handle, CachedSelectors.allCredentials, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject credentialsForProtectionSpace_( NObjective.RuntimeObject space ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.credentialsForProtectionSpace_( Handle, CachedSelectors.credentialsForProtectionSpace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), space );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject defaultCredentialForProtectionSpace_( NObjective.RuntimeObject space ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultCredentialForProtectionSpace_( Handle, CachedSelectors.defaultCredentialForProtectionSpace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), space );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasCredentials() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasCredentials( Handle, CachedSelectors.hasCredentials, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSURLKeychainCredentialStorage initWithNotificationObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithNotificationObject_( Handle, CachedSelectors.initWithNotificationObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLKeychainCredentialStorage( ___result );
		}
		unsafe public void removeCredential_forProtectionSpace_( NObjective.RuntimeObject credential, NObjective.RuntimeObject forProtectionSpace ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeCredential_forProtectionSpace_( Handle, CachedSelectors.removeCredential_forProtectionSpace_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), credential, forProtectionSpace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultCredential_forProtectionSpace_( NObjective.RuntimeObject credential, NObjective.RuntimeObject forProtectionSpace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultCredential_forProtectionSpace_( Handle, CachedSelectors.setDefaultCredential_forProtectionSpace_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), credential, forProtectionSpace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addCredential_forProtectionSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject credential, NObjective.RuntimeObject forProtectionSpace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allCredentials( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr credentialsForProtectionSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject space );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultCredentialForProtectionSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject space );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasCredentials( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithNotificationObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeCredential_forProtectionSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject credential, NObjective.RuntimeObject forProtectionSpace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultCredential_forProtectionSpace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject credential, NObjective.RuntimeObject forProtectionSpace );
		}
		static internal class CachedSelectors {
			public static readonly Selector addCredential_forProtectionSpace_ = "addCredential:forProtectionSpace:";
			public static readonly Selector allCredentials = "allCredentials";
			public static readonly Selector credentialsForProtectionSpace_ = "credentialsForProtectionSpace:";
			public static readonly Selector defaultCredentialForProtectionSpace_ = "defaultCredentialForProtectionSpace:";
			public static readonly Selector hasCredentials = "hasCredentials";
			public static readonly Selector initWithNotificationObject_ = "initWithNotificationObject:";
			public static readonly Selector removeCredential_forProtectionSpace_ = "removeCredential:forProtectionSpace:";
			public static readonly Selector setDefaultCredential_forProtectionSpace_ = "setDefaultCredential:forProtectionSpace:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLKeychainCredentialStorageInternal : IEquatable<NSURLKeychainCredentialStorageInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLKeychainCredentialStorageInternal;
		public static implicit operator IntPtr( NSURLKeychainCredentialStorageInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLKeychainCredentialStorageInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLKeychainCredentialStorageInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLKeychainCredentialStorageInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLKeychainCredentialStorageInternal value1, NSURLKeychainCredentialStorageInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLKeychainCredentialStorageInternal value1, NSURLKeychainCredentialStorageInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLKeychainCredentialStorageInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLKeychainCredentialStorageInternal alloc() {
			return new NSURLKeychainCredentialStorageInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSURLKeychainCredentialStorageInternal initWithNotificationObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithNotificationObject_( Handle, CachedSelectors.initWithNotificationObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLKeychainCredentialStorageInternal( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithNotificationObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithNotificationObject_ = "initWithNotificationObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLKeyValuePair : IEquatable<NSURLKeyValuePair> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLKeyValuePair;
		public static implicit operator IntPtr( NSURLKeyValuePair value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLKeyValuePair value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLKeyValuePair?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLKeyValuePair value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLKeyValuePair value1, NSURLKeyValuePair value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLKeyValuePair value1, NSURLKeyValuePair value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLKeyValuePair( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLKeyValuePair alloc() {
			return new NSURLKeyValuePair( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject pair() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pair( ClassHandle, CachedSelectors.pair, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject pairWithKey_value_( NObjective.RuntimeObject key, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pairWithKey_value_( ClassHandle, CachedSelectors.pairWithKey_value_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSURLKeyValuePair initWithKey_value_( NObjective.RuntimeObject key, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKey_value_( Handle, CachedSelectors.initWithKey_value_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLKeyValuePair( ___result );
		}
		unsafe public NObjective.RuntimeObject key() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.key( Handle, CachedSelectors.key, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.setKey_( Handle, CachedSelectors.setKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKey_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr key( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pair( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pairWithKey_value_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithKey_value_ = "initWithKey:value:";
			public static readonly Selector key = "key";
			public static readonly Selector pair = "pair";
			public static readonly Selector pairWithKey_value_ = "pairWithKey:value:";
			public static readonly Selector setKey_ = "setKey:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLMonitor : IEquatable<NSURLMonitor> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLMonitor;
		public static implicit operator IntPtr( NSURLMonitor value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLMonitor value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLMonitor?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLMonitor value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLMonitor value1, NSURLMonitor value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLMonitor value1, NSURLMonitor value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLMonitor( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLMonitor alloc() {
			return new NSURLMonitor( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void broadcast() {
			RuntimeObject ___occuredException;
			NativeMethods.broadcast( Handle, CachedSelectors.broadcast, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void @lock() {
			RuntimeObject ___occuredException;
			NativeMethods.@lock( Handle, CachedSelectors.@lock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void signal() {
			RuntimeObject ___occuredException;
			NativeMethods.signal( Handle, CachedSelectors.signal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void wait() {
			RuntimeObject ___occuredException;
			NativeMethods.wait( Handle, CachedSelectors.wait, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char waitInterval_( double interval ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.waitInterval_( Handle, CachedSelectors.waitInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char waitUntilDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.waitUntilDate_( Handle, CachedSelectors.waitUntilDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void broadcast( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @lock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void signal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void wait( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char waitInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char waitUntilDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
		}
		static internal class CachedSelectors {
			public static readonly Selector broadcast = "broadcast";
			public static readonly Selector @lock = "lock";
			public static readonly Selector signal = "signal";
			public static readonly Selector unlock = "unlock";
			public static readonly Selector wait = "wait";
			public static readonly Selector waitInterval_ = "waitInterval:";
			public static readonly Selector waitUntilDate_ = "waitUntilDate:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLProtectionSpace : IEquatable<NSURLProtectionSpace> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLProtectionSpace;
		public static implicit operator IntPtr( NSURLProtectionSpace value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLProtectionSpace value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLProtectionSpace?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLProtectionSpace value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLProtectionSpace value1, NSURLProtectionSpace value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLProtectionSpace value1, NSURLProtectionSpace value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLProtectionSpace( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLProtectionSpace alloc() {
			return new NSURLProtectionSpace( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public string authenticationMethod() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.authenticationMethod( Handle, CachedSelectors.authenticationMethod, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string host() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.host( Handle, CachedSelectors.host, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSURLProtectionSpace initWithHost_port_protocol_realm_authenticationMethod_( string host, int port, string protocol, string realm, string authenticationMethod ) {
			RuntimeObject ___occuredException;
			var ___wrappedhost = Runtime.CreateStringProxy( host );
			var ___wrappedprotocol = Runtime.CreateStringProxy( protocol );
			var ___wrappedrealm = Runtime.CreateStringProxy( realm );
			var ___wrappedauthenticationMethod = Runtime.CreateStringProxy( authenticationMethod );
			var ___result = NativeMethods.initWithHost_port_protocol_realm_authenticationMethod_( Handle, CachedSelectors.initWithHost_port_protocol_realm_authenticationMethod_, out ___occuredException, sizeof( IntPtr ) + sizeof( int ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedhost, port, ___wrappedprotocol, ___wrappedrealm, ___wrappedauthenticationMethod );
			Runtime.ReleaseNativeObject( ___wrappedhost );
			Runtime.ReleaseNativeObject( ___wrappedprotocol );
			Runtime.ReleaseNativeObject( ___wrappedrealm );
			Runtime.ReleaseNativeObject( ___wrappedauthenticationMethod );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLProtectionSpace( ___result );
		}
		unsafe public NSURLProtectionSpace initWithProxyHost_port_type_realm_authenticationMethod_( string host, int port, string type, string realm, string authenticationMethod ) {
			RuntimeObject ___occuredException;
			var ___wrappedhost = Runtime.CreateStringProxy( host );
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___wrappedrealm = Runtime.CreateStringProxy( realm );
			var ___wrappedauthenticationMethod = Runtime.CreateStringProxy( authenticationMethod );
			var ___result = NativeMethods.initWithProxyHost_port_type_realm_authenticationMethod_( Handle, CachedSelectors.initWithProxyHost_port_type_realm_authenticationMethod_, out ___occuredException, sizeof( IntPtr ) + sizeof( int ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedhost, port, ___wrappedtype, ___wrappedrealm, ___wrappedauthenticationMethod );
			Runtime.ReleaseNativeObject( ___wrappedhost );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedrealm );
			Runtime.ReleaseNativeObject( ___wrappedauthenticationMethod );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLProtectionSpace( ___result );
		}
		unsafe public int port() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.port( Handle, CachedSelectors.port, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string protocol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protocol( Handle, CachedSelectors.protocol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string proxyType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.proxyType( Handle, CachedSelectors.proxyType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string realm() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.realm( Handle, CachedSelectors.realm, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool receivesCredentialSecurely() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.receivesCredentialSecurely( Handle, CachedSelectors.receivesCredentialSecurely, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr authenticationMethod( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr host( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithHost_port_protocol_realm_authenticationMethod_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr host, int port, IntPtr protocol, IntPtr realm, IntPtr authenticationMethod );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProxyHost_port_type_realm_authenticationMethod_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr host, int port, IntPtr type, IntPtr realm, IntPtr authenticationMethod );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int port( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr protocol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr proxyType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr realm( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool receivesCredentialSecurely( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector authenticationMethod = "authenticationMethod";
			public static readonly Selector host = "host";
			public static readonly Selector initWithHost_port_protocol_realm_authenticationMethod_ = "initWithHost:port:protocol:realm:authenticationMethod:";
			public static readonly Selector initWithProxyHost_port_type_realm_authenticationMethod_ = "initWithProxyHost:port:type:realm:authenticationMethod:";
			public static readonly Selector port = "port";
			public static readonly Selector protocol = "protocol";
			public static readonly Selector proxyType = "proxyType";
			public static readonly Selector realm = "realm";
			public static readonly Selector receivesCredentialSecurely = "receivesCredentialSecurely";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLProtectionSpaceInternal : IEquatable<NSURLProtectionSpaceInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLProtectionSpaceInternal;
		public static implicit operator IntPtr( NSURLProtectionSpaceInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLProtectionSpaceInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLProtectionSpaceInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLProtectionSpaceInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLProtectionSpaceInternal value1, NSURLProtectionSpaceInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLProtectionSpaceInternal value1, NSURLProtectionSpaceInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLProtectionSpaceInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLProtectionSpaceInternal alloc() {
			return new NSURLProtectionSpaceInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLProtocol : IEquatable<NSURLProtocol> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLProtocol;
		public static implicit operator IntPtr( NSURLProtocol value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLProtocol value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLProtocol?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLProtocol value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLProtocol value1, NSURLProtocol value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLProtocol value1, NSURLProtocol value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLProtocol( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLProtocol alloc() {
			return new NSURLProtocol( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static bool canInitWithRequest_( NSURLRequest request ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canInitWithRequest_( ClassHandle, CachedSelectors.canInitWithRequest_, out ___occuredException, sizeof( NSURLRequest ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NSURLRequest canonicalRequestForRequest_( NSURLRequest request ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canonicalRequestForRequest_( ClassHandle, CachedSelectors.canonicalRequestForRequest_, out ___occuredException, sizeof( NSURLRequest ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLRequest( ___result );
		}
		unsafe public static NObjective.RuntimeObject propertyForKey_inRequest_( string key, NSURLRequest inRequest ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.propertyForKey_inRequest_( ClassHandle, CachedSelectors.propertyForKey_inRequest_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSURLRequest ), ___wrappedkey, inRequest );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static bool registerClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.registerClass_( ClassHandle, CachedSelectors.registerClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool requestIsCacheEquivalent_toRequest_( NSURLRequest equivalent, NSURLRequest toRequest ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requestIsCacheEquivalent_toRequest_( ClassHandle, CachedSelectors.requestIsCacheEquivalent_toRequest_, out ___occuredException, sizeof( NSURLRequest ) + sizeof( NSURLRequest ), equivalent, toRequest );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void setProperty_forKey_inRequest_( NObjective.RuntimeObject property, string forKey, NSMutableURLRequest inRequest ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.setProperty_forKey_inRequest_( ClassHandle, CachedSelectors.setProperty_forKey_inRequest_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ) + sizeof( NSMutableURLRequest ), property, ___wrappedforKey, inRequest );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void unregisterClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			NativeMethods.unregisterClass_( ClassHandle, CachedSelectors.unregisterClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSCachedURLResponse cachedResponse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedResponse( Handle, CachedSelectors.cachedResponse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSCachedURLResponse( ___result );
		}
		unsafe public NObjective.RuntimeObject client() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.client( Handle, CachedSelectors.client, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSURLProtocol initWithRequest_cachedResponse_client_( NSURLRequest request, NSCachedURLResponse cachedResponse, NObjective.RuntimeObject client ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRequest_cachedResponse_client_( Handle, CachedSelectors.initWithRequest_cachedResponse_client_, out ___occuredException, sizeof( NSURLRequest ) + sizeof( NSCachedURLResponse ) + sizeof( NObjective.RuntimeObject ), request, cachedResponse, client );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLProtocol( ___result );
		}
		unsafe public NSURLRequest request() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.request( Handle, CachedSelectors.request, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLRequest( ___result );
		}
		unsafe public void startLoading() {
			RuntimeObject ___occuredException;
			NativeMethods.startLoading( Handle, CachedSelectors.startLoading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopLoading() {
			RuntimeObject ___occuredException;
			NativeMethods.stopLoading( Handle, CachedSelectors.stopLoading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cachedResponse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canInitWithRequest_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr canonicalRequestForRequest_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr client( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRequest_cachedResponse_client_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request, NSCachedURLResponse cachedResponse, NObjective.RuntimeObject client );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyForKey_inRequest_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key, NSURLRequest inRequest );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool registerClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr request( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool requestIsCacheEquivalent_toRequest_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest equivalent, NSURLRequest toRequest );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProperty_forKey_inRequest_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, IntPtr forKey, NSMutableURLRequest inRequest );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startLoading( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopLoading( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unregisterClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
		}
		static internal class CachedSelectors {
			public static readonly Selector cachedResponse = "cachedResponse";
			public static readonly Selector canInitWithRequest_ = "canInitWithRequest:";
			public static readonly Selector canonicalRequestForRequest_ = "canonicalRequestForRequest:";
			public static readonly Selector client = "client";
			public static readonly Selector initWithRequest_cachedResponse_client_ = "initWithRequest:cachedResponse:client:";
			public static readonly Selector propertyForKey_inRequest_ = "propertyForKey:inRequest:";
			public static readonly Selector registerClass_ = "registerClass:";
			public static readonly Selector request = "request";
			public static readonly Selector requestIsCacheEquivalent_toRequest_ = "requestIsCacheEquivalent:toRequest:";
			public static readonly Selector setProperty_forKey_inRequest_ = "setProperty:forKey:inRequest:";
			public static readonly Selector startLoading = "startLoading";
			public static readonly Selector stopLoading = "stopLoading";
			public static readonly Selector unregisterClass_ = "unregisterClass:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLProtocolInternal : IEquatable<NSURLProtocolInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLProtocolInternal;
		public static implicit operator IntPtr( NSURLProtocolInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLProtocolInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLProtocolInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLProtocolInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLProtocolInternal value1, NSURLProtocolInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLProtocolInternal value1, NSURLProtocolInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLProtocolInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLProtocolInternal alloc() {
			return new NSURLProtocolInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLQueue : IEquatable<NSURLQueue> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLQueue;
		public static implicit operator IntPtr( NSURLQueue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLQueue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLQueue?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLQueue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLQueue value1, NSURLQueue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLQueue value1, NSURLQueue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLQueue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLQueue alloc() {
			return new NSURLQueue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int indexOf_( NObjective.RuntimeObject of ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOf_( Handle, CachedSelectors.indexOf_, out ___occuredException, sizeof( NObjective.RuntimeObject ), of );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEmpty() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEmpty( Handle, CachedSelectors.isEmpty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject peek() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peek( Handle, CachedSelectors.peek, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject peekAt_( int at ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peekAt_( Handle, CachedSelectors.peekAt_, out ___occuredException, sizeof( int ), at );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void put_( NObjective.RuntimeObject put ) {
			RuntimeObject ___occuredException;
			NativeMethods.put_( Handle, CachedSelectors.put_, out ___occuredException, sizeof( NObjective.RuntimeObject ), put );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char remove_( NObjective.RuntimeObject @remove ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.remove_( Handle, CachedSelectors.remove_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @remove );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setWaitOnTake_( char take ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWaitOnTake_( Handle, CachedSelectors.setWaitOnTake_, out ___occuredException, sizeof( char ), take );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject take() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.take( Handle, CachedSelectors.take, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char waitOnTake() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.waitOnTake( Handle, CachedSelectors.waitOnTake, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int indexOf_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject of );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEmpty( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr peek( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr peekAt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int at );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void put_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject put );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char remove_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @remove );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWaitOnTake_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char take );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr take( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char waitOnTake( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector clear = "clear";
			public static readonly Selector count = "count";
			public static readonly Selector indexOf_ = "indexOf:";
			public static readonly Selector isEmpty = "isEmpty";
			public static readonly Selector peek = "peek";
			public static readonly Selector peekAt_ = "peekAt:";
			public static readonly Selector put_ = "put:";
			public static readonly Selector remove_ = "remove:";
			public static readonly Selector setWaitOnTake_ = "setWaitOnTake:";
			public static readonly Selector take = "take";
			public static readonly Selector waitOnTake = "waitOnTake";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLReadWriteLock : IEquatable<NSURLReadWriteLock> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLReadWriteLock;
		public static implicit operator IntPtr( NSURLReadWriteLock value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLReadWriteLock value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLReadWriteLock?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLReadWriteLock value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLReadWriteLock value1, NSURLReadWriteLock value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLReadWriteLock value1, NSURLReadWriteLock value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLReadWriteLock( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLReadWriteLock alloc() {
			return new NSURLReadWriteLock( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void @lock() {
			RuntimeObject ___occuredException;
			NativeMethods.@lock( Handle, CachedSelectors.@lock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void readLock() {
			RuntimeObject ___occuredException;
			NativeMethods.readLock( Handle, CachedSelectors.readLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void readUnlock() {
			RuntimeObject ___occuredException;
			NativeMethods.readUnlock( Handle, CachedSelectors.readUnlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeLock() {
			RuntimeObject ___occuredException;
			NativeMethods.writeLock( Handle, CachedSelectors.writeLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeUnlock() {
			RuntimeObject ___occuredException;
			NativeMethods.writeUnlock( Handle, CachedSelectors.writeUnlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @lock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void readLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void readUnlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeUnlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector @lock = "lock";
			public static readonly Selector readLock = "readLock";
			public static readonly Selector readUnlock = "readUnlock";
			public static readonly Selector unlock = "unlock";
			public static readonly Selector writeLock = "writeLock";
			public static readonly Selector writeUnlock = "writeUnlock";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLRecursiveReadWriteLock : IEquatable<NSURLRecursiveReadWriteLock> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLRecursiveReadWriteLock;
		public static implicit operator IntPtr( NSURLRecursiveReadWriteLock value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLRecursiveReadWriteLock value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLRecursiveReadWriteLock?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLRecursiveReadWriteLock value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLRecursiveReadWriteLock value1, NSURLRecursiveReadWriteLock value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLRecursiveReadWriteLock value1, NSURLRecursiveReadWriteLock value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLRecursiveReadWriteLock( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLRecursiveReadWriteLock alloc() {
			return new NSURLRecursiveReadWriteLock( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void @lock() {
			RuntimeObject ___occuredException;
			NativeMethods.@lock( Handle, CachedSelectors.@lock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void readLock() {
			RuntimeObject ___occuredException;
			NativeMethods.readLock( Handle, CachedSelectors.readLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void readUnlock() {
			RuntimeObject ___occuredException;
			NativeMethods.readUnlock( Handle, CachedSelectors.readUnlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeLock() {
			RuntimeObject ___occuredException;
			NativeMethods.writeLock( Handle, CachedSelectors.writeLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeUnlock() {
			RuntimeObject ___occuredException;
			NativeMethods.writeUnlock( Handle, CachedSelectors.writeUnlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @lock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void readLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void readUnlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeUnlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector @lock = "lock";
			public static readonly Selector readLock = "readLock";
			public static readonly Selector readUnlock = "readUnlock";
			public static readonly Selector unlock = "unlock";
			public static readonly Selector writeLock = "writeLock";
			public static readonly Selector writeUnlock = "writeUnlock";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLRequest : IEquatable<NSURLRequest> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLRequest;
		public static implicit operator IntPtr( NSURLRequest value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLRequest value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLRequest?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLRequest value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLRequest value1, NSURLRequest value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLRequest value1, NSURLRequest value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLRequest( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLRequest alloc() {
			return new NSURLRequest( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char allowsAnyHTTPSCertificateForHost_( NObjective.RuntimeObject host ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsAnyHTTPSCertificateForHost_( ClassHandle, CachedSelectors.allowsAnyHTTPSCertificateForHost_, out ___occuredException, sizeof( NObjective.RuntimeObject ), host );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static double defaultTimeoutInterval() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultTimeoutInterval( ClassHandle, CachedSelectors.defaultTimeoutInterval, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject requestWithURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requestWithURL_( ClassHandle, CachedSelectors.requestWithURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject requestWithURL_cachePolicy_timeoutInterval_( NSURL url, NSURLRequestCachePolicy cachePolicy, double timeoutInterval ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requestWithURL_cachePolicy_timeoutInterval_( ClassHandle, CachedSelectors.requestWithURL_cachePolicy_timeoutInterval_, out ___occuredException, sizeof( NSURL ) + sizeof( NSURLRequestCachePolicy ) + sizeof( double ), url, cachePolicy, timeoutInterval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void setAllowsAnyHTTPSCertificate_forHost_( char certificate, NObjective.RuntimeObject forHost ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsAnyHTTPSCertificate_forHost_( ClassHandle, CachedSelectors.setAllowsAnyHTTPSCertificate_forHost_, out ___occuredException, sizeof( char ) + sizeof( NObjective.RuntimeObject ), certificate, forHost );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setDefaultTimeoutInterval_( double interval ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultTimeoutInterval_( ClassHandle, CachedSelectors.setDefaultTimeoutInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSDictionary allHTTPHeaderFields() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allHTTPHeaderFields( Handle, CachedSelectors.allHTTPHeaderFields, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSURLRequestCachePolicy cachePolicy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachePolicy( Handle, CachedSelectors.cachePolicy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSURLRequestCachePolicy ) ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSData HTTPBody() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPBody( Handle, CachedSelectors.HTTPBody, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSInputStream HTTPBodyStream() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPBodyStream( Handle, CachedSelectors.HTTPBodyStream, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSInputStream( ___result );
		}
		unsafe public NObjective.RuntimeObject HTTPBodyStreamForTransmission() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPBodyStreamForTransmission( Handle, CachedSelectors.HTTPBodyStreamForTransmission, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject HTTPContentType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPContentType( Handle, CachedSelectors.HTTPContentType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject HTTPCookiePolicyBaseURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPCookiePolicyBaseURL( Handle, CachedSelectors.HTTPCookiePolicyBaseURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject HTTPExtraCookies() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPExtraCookies( Handle, CachedSelectors.HTTPExtraCookies, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string HTTPMethod() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPMethod( Handle, CachedSelectors.HTTPMethod, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint HTTPPageNotFoundCacheLifetime() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPPageNotFoundCacheLifetime( Handle, CachedSelectors.HTTPPageNotFoundCacheLifetime, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject HTTPReferrer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPReferrer( Handle, CachedSelectors.HTTPReferrer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool HTTPShouldHandleCookies() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPShouldHandleCookies( Handle, CachedSelectors.HTTPShouldHandleCookies, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char HTTPShouldHandleMixedReplace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPShouldHandleMixedReplace( Handle, CachedSelectors.HTTPShouldHandleMixedReplace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject HTTPUserAgent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTTPUserAgent( Handle, CachedSelectors.HTTPUserAgent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSURLRequest initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLRequest( ___result );
		}
		unsafe public NSURLRequest initWithURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_( Handle, CachedSelectors.initWithURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLRequest( ___result );
		}
		unsafe public NSURLRequest initWithURL_cachePolicy_timeoutInterval_( NSURL url, NSURLRequestCachePolicy cachePolicy, double timeoutInterval ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_cachePolicy_timeoutInterval_( Handle, CachedSelectors.initWithURL_cachePolicy_timeoutInterval_, out ___occuredException, sizeof( NSURL ) + sizeof( NSURLRequestCachePolicy ) + sizeof( double ), url, cachePolicy, timeoutInterval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLRequest( ___result );
		}
		unsafe public NSURL mainDocumentURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainDocumentURL( Handle, CachedSelectors.mainDocumentURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURL( ___result );
		}
		unsafe public char performsContentDecoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performsContentDecoding( Handle, CachedSelectors.performsContentDecoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setPerformsContentDecoding_( char decoding ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPerformsContentDecoding_( Handle, CachedSelectors.setPerformsContentDecoding_, out ___occuredException, sizeof( char ), decoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public double timeoutInterval() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeoutInterval( Handle, CachedSelectors.timeoutInterval, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSURL URL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URL( Handle, CachedSelectors.URL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURL( ___result );
		}
		unsafe public string valueForHTTPHeaderField_( string field ) {
			RuntimeObject ___occuredException;
			var ___wrappedfield = Runtime.CreateStringProxy( field );
			var ___result = NativeMethods.valueForHTTPHeaderField_( Handle, CachedSelectors.valueForHTTPHeaderField_, out ___occuredException, sizeof( IntPtr ), ___wrappedfield );
			Runtime.ReleaseNativeObject( ___wrappedfield );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allHTTPHeaderFields( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsAnyHTTPSCertificateForHost_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject host );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int cachePolicy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double defaultTimeoutInterval( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr HTTPBody( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr HTTPBodyStream( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr HTTPBodyStreamForTransmission( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr HTTPContentType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr HTTPCookiePolicyBaseURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr HTTPExtraCookies( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr HTTPMethod( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint HTTPPageNotFoundCacheLifetime( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr HTTPReferrer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool HTTPShouldHandleCookies( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char HTTPShouldHandleMixedReplace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr HTTPUserAgent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURL_cachePolicy_timeoutInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, NSURLRequestCachePolicy cachePolicy, double timeoutInterval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainDocumentURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char performsContentDecoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requestWithURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requestWithURL_cachePolicy_timeoutInterval_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, NSURLRequestCachePolicy cachePolicy, double timeoutInterval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsAnyHTTPSCertificate_forHost_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char certificate, NObjective.RuntimeObject forHost );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultTimeoutInterval_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPerformsContentDecoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char decoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double timeoutInterval( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForHTTPHeaderField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr field );
		}
		static internal class CachedSelectors {
			public static readonly Selector allHTTPHeaderFields = "allHTTPHeaderFields";
			public static readonly Selector allowsAnyHTTPSCertificateForHost_ = "allowsAnyHTTPSCertificateForHost:";
			public static readonly Selector cachePolicy = "cachePolicy";
			public static readonly Selector defaultTimeoutInterval = "defaultTimeoutInterval";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector HTTPBody = "HTTPBody";
			public static readonly Selector HTTPBodyStream = "HTTPBodyStream";
			public static readonly Selector HTTPBodyStreamForTransmission = "HTTPBodyStreamForTransmission";
			public static readonly Selector HTTPContentType = "HTTPContentType";
			public static readonly Selector HTTPCookiePolicyBaseURL = "HTTPCookiePolicyBaseURL";
			public static readonly Selector HTTPExtraCookies = "HTTPExtraCookies";
			public static readonly Selector HTTPMethod = "HTTPMethod";
			public static readonly Selector HTTPPageNotFoundCacheLifetime = "HTTPPageNotFoundCacheLifetime";
			public static readonly Selector HTTPReferrer = "HTTPReferrer";
			public static readonly Selector HTTPShouldHandleCookies = "HTTPShouldHandleCookies";
			public static readonly Selector HTTPShouldHandleMixedReplace = "HTTPShouldHandleMixedReplace";
			public static readonly Selector HTTPUserAgent = "HTTPUserAgent";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithURL_ = "initWithURL:";
			public static readonly Selector initWithURL_cachePolicy_timeoutInterval_ = "initWithURL:cachePolicy:timeoutInterval:";
			public static readonly Selector mainDocumentURL = "mainDocumentURL";
			public static readonly Selector performsContentDecoding = "performsContentDecoding";
			public static readonly Selector requestWithURL_ = "requestWithURL:";
			public static readonly Selector requestWithURL_cachePolicy_timeoutInterval_ = "requestWithURL:cachePolicy:timeoutInterval:";
			public static readonly Selector setAllowsAnyHTTPSCertificate_forHost_ = "setAllowsAnyHTTPSCertificate:forHost:";
			public static readonly Selector setDefaultTimeoutInterval_ = "setDefaultTimeoutInterval:";
			public static readonly Selector setPerformsContentDecoding_ = "setPerformsContentDecoding:";
			public static readonly Selector timeoutInterval = "timeoutInterval";
			public static readonly Selector URL = "URL";
			public static readonly Selector valueForHTTPHeaderField_ = "valueForHTTPHeaderField:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLRequestInternal : IEquatable<NSURLRequestInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLRequestInternal;
		public static implicit operator IntPtr( NSURLRequestInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLRequestInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLRequestInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLRequestInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLRequestInternal value1, NSURLRequestInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLRequestInternal value1, NSURLRequestInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLRequestInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLRequestInternal alloc() {
			return new NSURLRequestInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLResponse : IEquatable<NSURLResponse> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLResponse;
		public static implicit operator IntPtr( NSURLResponse value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLResponse value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLResponse?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLResponse value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLResponse value1, NSURLResponse value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLResponse value1, NSURLResponse value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLResponse( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLResponse alloc() {
			return new NSURLResponse( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public long expectedContentLength() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expectedContentLength( Handle, CachedSelectors.expectedContentLength, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSURLResponse initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLResponse( ___result );
		}
		unsafe public NSURLResponse initWithURL_MIMEType_expectedContentLength_textEncodingName_( NSURL url, string MIMEType, int expectedContentLength, string textEncodingName ) {
			RuntimeObject ___occuredException;
			var ___wrappedMIMEType = Runtime.CreateStringProxy( MIMEType );
			var ___wrappedtextEncodingName = Runtime.CreateStringProxy( textEncodingName );
			var ___result = NativeMethods.initWithURL_MIMEType_expectedContentLength_textEncodingName_( Handle, CachedSelectors.initWithURL_MIMEType_expectedContentLength_textEncodingName_, out ___occuredException, sizeof( NSURL ) + sizeof( IntPtr ) + sizeof( int ) + sizeof( IntPtr ), url, ___wrappedMIMEType, expectedContentLength, ___wrappedtextEncodingName );
			Runtime.ReleaseNativeObject( ___wrappedMIMEType );
			Runtime.ReleaseNativeObject( ___wrappedtextEncodingName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLResponse( ___result );
		}
		unsafe public string MIMEType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.MIMEType( Handle, CachedSelectors.MIMEType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string suggestedFilename() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suggestedFilename( Handle, CachedSelectors.suggestedFilename, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string textEncodingName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textEncodingName( Handle, CachedSelectors.textEncodingName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSURL URL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URL( Handle, CachedSelectors.URL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURL( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern long expectedContentLength( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURL_MIMEType_expectedContentLength_textEncodingName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, IntPtr MIMEType, int expectedContentLength, IntPtr textEncodingName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr MIMEType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr suggestedFilename( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textEncodingName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector expectedContentLength = "expectedContentLength";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithURL_MIMEType_expectedContentLength_textEncodingName_ = "initWithURL:MIMEType:expectedContentLength:textEncodingName:";
			public static readonly Selector MIMEType = "MIMEType";
			public static readonly Selector suggestedFilename = "suggestedFilename";
			public static readonly Selector textEncodingName = "textEncodingName";
			public static readonly Selector URL = "URL";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLResponseInternal : IEquatable<NSURLResponseInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLResponseInternal;
		public static implicit operator IntPtr( NSURLResponseInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLResponseInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLResponseInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLResponseInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLResponseInternal value1, NSURLResponseInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLResponseInternal value1, NSURLResponseInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLResponseInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLResponseInternal alloc() {
			return new NSURLResponseInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSURLResponseInternal initWithURL_MIMEType_expectedContentLength_textEncodingName_( NObjective.RuntimeObject url, NObjective.RuntimeObject MIMEType, int expectedContentLength, NObjective.RuntimeObject textEncodingName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_MIMEType_expectedContentLength_textEncodingName_( Handle, CachedSelectors.initWithURL_MIMEType_expectedContentLength_textEncodingName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), url, MIMEType, expectedContentLength, textEncodingName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLResponseInternal( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURL_MIMEType_expectedContentLength_textEncodingName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, NObjective.RuntimeObject MIMEType, int expectedContentLength, NObjective.RuntimeObject textEncodingName );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithURL_MIMEType_expectedContentLength_textEncodingName_ = "initWithURL:MIMEType:expectedContentLength:textEncodingName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLSpinLock : IEquatable<NSURLSpinLock> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLSpinLock;
		public static implicit operator IntPtr( NSURLSpinLock value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLSpinLock value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLSpinLock?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLSpinLock value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLSpinLock value1, NSURLSpinLock value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLSpinLock value1, NSURLSpinLock value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLSpinLock( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLSpinLock alloc() {
			return new NSURLSpinLock( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void @lock() {
			RuntimeObject ___occuredException;
			NativeMethods.@lock( Handle, CachedSelectors.@lock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @lock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector @lock = "lock";
			public static readonly Selector unlock = "unlock";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSURLUpload : IEquatable<NSURLUpload> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLUpload;
		public static implicit operator IntPtr( NSURLUpload value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLUpload value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLUpload?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLUpload value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLUpload value1, NSURLUpload value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLUpload value1, NSURLUpload value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLUpload( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLUpload alloc() {
			return new NSURLUpload( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void cancel() {
			RuntimeObject ___occuredException;
			NativeMethods.cancel( Handle, CachedSelectors.cancel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void continueWithoutCredentialForAuthenticationChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.continueWithoutCredentialForAuthenticationChallenge_( Handle, CachedSelectors.continueWithoutCredentialForAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSURLUpload initWithSource_destination_delegate_( NObjective.RuntimeObject source, NObjective.RuntimeObject destination, NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSource_destination_delegate_( Handle, CachedSelectors.initWithSource_destination_delegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), source, destination, @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLUpload( ___result );
		}
		unsafe public void useCredential_forAuthenticationChallenge_( NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.useCredential_forAuthenticationChallenge_( Handle, CachedSelectors.useCredential_forAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), credential, forAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueWithoutCredentialForAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSource_destination_delegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject source, NObjective.RuntimeObject destination, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void useCredential_forAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject credential, NObjective.RuntimeObject forAuthenticationChallenge );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancel = "cancel";
			public static readonly Selector continueWithoutCredentialForAuthenticationChallenge_ = "continueWithoutCredentialForAuthenticationChallenge:";
			public static readonly Selector initWithSource_destination_delegate_ = "initWithSource:destination:delegate:";
			public static readonly Selector useCredential_forAuthenticationChallenge_ = "useCredential:forAuthenticationChallenge:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLAuthenticationChallenge ) )]
	public struct NSURLUploadAuthenticationChallenge : IEquatable<NSURLUploadAuthenticationChallenge> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSURLUploadAuthenticationChallenge;
		public static implicit operator IntPtr( NSURLUploadAuthenticationChallenge value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSURLUploadAuthenticationChallenge value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSURLUploadAuthenticationChallenge?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSURLUploadAuthenticationChallenge value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSURLUploadAuthenticationChallenge value1, NSURLUploadAuthenticationChallenge value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSURLUploadAuthenticationChallenge value1, NSURLUploadAuthenticationChallenge value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSURLUploadAuthenticationChallenge( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSURLUploadAuthenticationChallenge alloc() {
			return new NSURLUploadAuthenticationChallenge( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject upload() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.upload( Handle, CachedSelectors.upload, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr upload( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector upload = "upload";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSUserDefaults : IEquatable<NSUserDefaults> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSUserDefaults;
		public static implicit operator IntPtr( NSUserDefaults value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSUserDefaults value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSUserDefaults?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSUserDefaults value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSUserDefaults value1, NSUserDefaults value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSUserDefaults value1, NSUserDefaults value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSUserDefaults( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSUserDefaults alloc() {
			return new NSUserDefaults( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void resetStandardUserDefaults() {
			RuntimeObject ___occuredException;
			NativeMethods.resetStandardUserDefaults( ClassHandle, CachedSelectors.resetStandardUserDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setStandardUserDefaults_( NObjective.RuntimeObject defaults ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStandardUserDefaults_( ClassHandle, CachedSelectors.setStandardUserDefaults_, out ___occuredException, sizeof( NObjective.RuntimeObject ), defaults );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NSUserDefaults standardUserDefaults() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.standardUserDefaults( ClassHandle, CachedSelectors.standardUserDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSUserDefaults( ___result );
		}
		unsafe public void addSuiteNamed_( string named ) {
			RuntimeObject ___occuredException;
			var ___wrappednamed = Runtime.CreateStringProxy( named );
			NativeMethods.addSuiteNamed_( Handle, CachedSelectors.addSuiteNamed_, out ___occuredException, sizeof( IntPtr ), ___wrappednamed );
			Runtime.ReleaseNativeObject( ___wrappednamed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray arrayForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.arrayForKey_( Handle, CachedSelectors.arrayForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public bool boolForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.boolForKey_( Handle, CachedSelectors.boolForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSData dataForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.dataForKey_( Handle, CachedSelectors.dataForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSDictionary dictionaryForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.dictionaryForKey_( Handle, CachedSelectors.dictionaryForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSDictionary dictionaryRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryRepresentation( Handle, CachedSelectors.dictionaryRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public double doubleForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doubleForKey_( Handle, CachedSelectors.doubleForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float floatForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.floatForKey_( Handle, CachedSelectors.floatForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSUserDefaults initWithUser_( string user ) {
			RuntimeObject ___occuredException;
			var ___wrappeduser = Runtime.CreateStringProxy( user );
			var ___result = NativeMethods.initWithUser_( Handle, CachedSelectors.initWithUser_, out ___occuredException, sizeof( IntPtr ), ___wrappeduser );
			Runtime.ReleaseNativeObject( ___wrappeduser );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSUserDefaults( ___result );
		}
		unsafe public int integerForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.integerForKey_( Handle, CachedSelectors.integerForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public long longForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.longForKey_( Handle, CachedSelectors.longForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject objectForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.objectForKey_( Handle, CachedSelectors.objectForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectForKey_inDomain_( NObjective.RuntimeObject key, NObjective.RuntimeObject inDomain ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectForKey_inDomain_( Handle, CachedSelectors.objectForKey_inDomain_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, inDomain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool objectIsForcedForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.objectIsForcedForKey_( Handle, CachedSelectors.objectIsForcedForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool objectIsForcedForKey_inDomain_( string key, string inDomain ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___wrappedinDomain = Runtime.CreateStringProxy( inDomain );
			var ___result = NativeMethods.objectIsForcedForKey_inDomain_( Handle, CachedSelectors.objectIsForcedForKey_inDomain_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedkey, ___wrappedinDomain );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedinDomain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSDictionary persistentDomainForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.persistentDomainForName_( Handle, CachedSelectors.persistentDomainForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSArray persistentDomainNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.persistentDomainNames( Handle, CachedSelectors.persistentDomainNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void registerDefaults_( NSDictionary defaults ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerDefaults_( Handle, CachedSelectors.registerDefaults_, out ___occuredException, sizeof( NSDictionary ), defaults );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			NativeMethods.removeObjectForKey_( Handle, CachedSelectors.removeObjectForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectForKey_inDomain_( NObjective.RuntimeObject key, NObjective.RuntimeObject inDomain ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectForKey_inDomain_( Handle, CachedSelectors.removeObjectForKey_inDomain_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, inDomain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removePersistentDomainForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.removePersistentDomainForName_( Handle, CachedSelectors.removePersistentDomainForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeSuiteNamed_( string named ) {
			RuntimeObject ___occuredException;
			var ___wrappednamed = Runtime.CreateStringProxy( named );
			NativeMethods.removeSuiteNamed_( Handle, CachedSelectors.removeSuiteNamed_, out ___occuredException, sizeof( IntPtr ), ___wrappednamed );
			Runtime.ReleaseNativeObject( ___wrappednamed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeVolatileDomainForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.removeVolatileDomainForName_( Handle, CachedSelectors.removeVolatileDomainForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject searchList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchList( Handle, CachedSelectors.searchList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setBool_forKey_( bool @bool, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.setBool_forKey_( Handle, CachedSelectors.setBool_forKey_, out ___occuredException, sizeof( bool ) + sizeof( IntPtr ), @bool, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDouble_forKey_( double @double, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDouble_forKey_( Handle, CachedSelectors.setDouble_forKey_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ), @double, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFloat_forKey_( float @float, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.setFloat_forKey_( Handle, CachedSelectors.setFloat_forKey_, out ___occuredException, sizeof( float ) + sizeof( IntPtr ), @float, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setInteger_forKey_( int integer, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.setInteger_forKey_( Handle, CachedSelectors.setInteger_forKey_, out ___occuredException, sizeof( int ) + sizeof( IntPtr ), integer, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLong_forKey_( long @long, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLong_forKey_( Handle, CachedSelectors.setLong_forKey_, out ___occuredException, sizeof( long ) + sizeof( NObjective.RuntimeObject ), @long, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObject_forKey_( NObjective.RuntimeObject @object, string forKey ) {
			RuntimeObject ___occuredException;
			var ___wrappedforKey = Runtime.CreateStringProxy( forKey );
			NativeMethods.setObject_forKey_( Handle, CachedSelectors.setObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), @object, ___wrappedforKey );
			Runtime.ReleaseNativeObject( ___wrappedforKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObject_forKey_inDomain_( NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey, NObjective.RuntimeObject inDomain ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObject_forKey_inDomain_( Handle, CachedSelectors.setObject_forKey_inDomain_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, forKey, inDomain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPersistentDomain_forName_( NSDictionary domain, string forName ) {
			RuntimeObject ___occuredException;
			var ___wrappedforName = Runtime.CreateStringProxy( forName );
			NativeMethods.setPersistentDomain_forName_( Handle, CachedSelectors.setPersistentDomain_forName_, out ___occuredException, sizeof( NSDictionary ) + sizeof( IntPtr ), domain, ___wrappedforName );
			Runtime.ReleaseNativeObject( ___wrappedforName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchList_( NObjective.RuntimeObject list ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchList_( Handle, CachedSelectors.setSearchList_, out ___occuredException, sizeof( NObjective.RuntimeObject ), list );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVolatileDomain_forName_( NSDictionary domain, string forName ) {
			RuntimeObject ___occuredException;
			var ___wrappedforName = Runtime.CreateStringProxy( forName );
			NativeMethods.setVolatileDomain_forName_( Handle, CachedSelectors.setVolatileDomain_forName_, out ___occuredException, sizeof( NSDictionary ) + sizeof( IntPtr ), domain, ___wrappedforName );
			Runtime.ReleaseNativeObject( ___wrappedforName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray stringArrayForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.stringArrayForKey_( Handle, CachedSelectors.stringArrayForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public string stringForKey_( string key ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.stringForKey_( Handle, CachedSelectors.stringForKey_, out ___occuredException, sizeof( IntPtr ), ___wrappedkey );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool synchronize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.synchronize( Handle, CachedSelectors.synchronize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSDictionary volatileDomainForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.volatileDomainForName_( Handle, CachedSelectors.volatileDomainForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public NSArray volatileDomainNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.volatileDomainNames( Handle, CachedSelectors.volatileDomainNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addSuiteNamed_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr named );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool boolForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double doubleForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float floatForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUser_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr user );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int integerForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern long longForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectForKey_inDomain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject inDomain );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool objectIsForcedForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool objectIsForcedForKey_inDomain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key, IntPtr inDomain );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr persistentDomainForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr persistentDomainNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerDefaults_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary defaults );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectForKey_inDomain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject inDomain );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removePersistentDomainForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeSuiteNamed_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr named );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeVolatileDomainForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetStandardUserDefaults( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBool_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool @bool, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDouble_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double @double, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFloat_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @float, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setInteger_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int integer, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLong_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, long @long, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObject_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, IntPtr forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObject_forKey_inDomain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey, NObjective.RuntimeObject inDomain );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPersistentDomain_forName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary domain, IntPtr forName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSearchList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStandardUserDefaults_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject defaults );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVolatileDomain_forName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary domain, IntPtr forName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr standardUserDefaults( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringArrayForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool synchronize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr volatileDomainForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr volatileDomainNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addSuiteNamed_ = "addSuiteNamed:";
			public static readonly Selector arrayForKey_ = "arrayForKey:";
			public static readonly Selector boolForKey_ = "boolForKey:";
			public static readonly Selector dataForKey_ = "dataForKey:";
			public static readonly Selector dictionaryForKey_ = "dictionaryForKey:";
			public static readonly Selector dictionaryRepresentation = "dictionaryRepresentation";
			public static readonly Selector doubleForKey_ = "doubleForKey:";
			public static readonly Selector floatForKey_ = "floatForKey:";
			public static readonly Selector initWithUser_ = "initWithUser:";
			public static readonly Selector integerForKey_ = "integerForKey:";
			public static readonly Selector longForKey_ = "longForKey:";
			public static readonly Selector objectForKey_ = "objectForKey:";
			public static readonly Selector objectForKey_inDomain_ = "objectForKey:inDomain:";
			public static readonly Selector objectIsForcedForKey_ = "objectIsForcedForKey:";
			public static readonly Selector objectIsForcedForKey_inDomain_ = "objectIsForcedForKey:inDomain:";
			public static readonly Selector persistentDomainForName_ = "persistentDomainForName:";
			public static readonly Selector persistentDomainNames = "persistentDomainNames";
			public static readonly Selector registerDefaults_ = "registerDefaults:";
			public static readonly Selector removeObjectForKey_ = "removeObjectForKey:";
			public static readonly Selector removeObjectForKey_inDomain_ = "removeObjectForKey:inDomain:";
			public static readonly Selector removePersistentDomainForName_ = "removePersistentDomainForName:";
			public static readonly Selector removeSuiteNamed_ = "removeSuiteNamed:";
			public static readonly Selector removeVolatileDomainForName_ = "removeVolatileDomainForName:";
			public static readonly Selector resetStandardUserDefaults = "resetStandardUserDefaults";
			public static readonly Selector searchList = "searchList";
			public static readonly Selector setBool_forKey_ = "setBool:forKey:";
			public static readonly Selector setDouble_forKey_ = "setDouble:forKey:";
			public static readonly Selector setFloat_forKey_ = "setFloat:forKey:";
			public static readonly Selector setInteger_forKey_ = "setInteger:forKey:";
			public static readonly Selector setLong_forKey_ = "setLong:forKey:";
			public static readonly Selector setObject_forKey_ = "setObject:forKey:";
			public static readonly Selector setObject_forKey_inDomain_ = "setObject:forKey:inDomain:";
			public static readonly Selector setPersistentDomain_forName_ = "setPersistentDomain:forName:";
			public static readonly Selector setSearchList_ = "setSearchList:";
			public static readonly Selector setStandardUserDefaults_ = "setStandardUserDefaults:";
			public static readonly Selector setVolatileDomain_forName_ = "setVolatileDomain:forName:";
			public static readonly Selector standardUserDefaults = "standardUserDefaults";
			public static readonly Selector stringArrayForKey_ = "stringArrayForKey:";
			public static readonly Selector stringForKey_ = "stringForKey:";
			public static readonly Selector synchronize = "synchronize";
			public static readonly Selector volatileDomainForName_ = "volatileDomainForName:";
			public static readonly Selector volatileDomainNames = "volatileDomainNames";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSValue : IEquatable<NSValue> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSValue;
		public static implicit operator IntPtr( NSValue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSValue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSValue?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSValue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSValue value1, NSValue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSValue value1, NSValue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSValue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSValue alloc() {
			return new NSValue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSValue value_withObjCType_( IntPtr value, IntPtr withObjCType ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value_withObjCType_( ClassHandle, CachedSelectors.value_withObjCType_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), value, withObjCType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValue( ___result );
		}
		unsafe public static NSValue valueWithBytes_objCType_( IntPtr bytes, IntPtr objCType ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueWithBytes_objCType_( ClassHandle, CachedSelectors.valueWithBytes_objCType_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), bytes, objCType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValue( ___result );
		}
		unsafe public static NSValue valueWithNonretainedObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueWithNonretainedObject_( ClassHandle, CachedSelectors.valueWithNonretainedObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValue( ___result );
		}
		unsafe public static NSValue valueWithPoint_( _NSPoint point ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueWithPoint_( ClassHandle, CachedSelectors.valueWithPoint_, out ___occuredException, sizeof( _NSPoint ), point );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValue( ___result );
		}
		unsafe public static NSValue valueWithPointer_( IntPtr pointer ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueWithPointer_( ClassHandle, CachedSelectors.valueWithPointer_, out ___occuredException, sizeof( IntPtr ), pointer );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValue( ___result );
		}
		unsafe public static NSValue valueWithRange_( _NSRange range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueWithRange_( ClassHandle, CachedSelectors.valueWithRange_, out ___occuredException, sizeof( _NSRange ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValue( ___result );
		}
		unsafe public static NSValue valueWithRect_( _NSRect rect ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueWithRect_( ClassHandle, CachedSelectors.valueWithRect_, out ___occuredException, sizeof( _NSRect ), rect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValue( ___result );
		}
		unsafe public static NSValue valueWithSize_( _NSSize size ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueWithSize_( ClassHandle, CachedSelectors.valueWithSize_, out ___occuredException, sizeof( _NSSize ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValue( ___result );
		}
		unsafe public NObjective.RuntimeObject classForCoder() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForCoder( Handle, CachedSelectors.classForCoder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void getValue_( IntPtr value ) {
			RuntimeObject ___occuredException;
			NativeMethods.getValue_( Handle, CachedSelectors.getValue_, out ___occuredException, sizeof( IntPtr ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSValue initWithBytes_objCType_( IntPtr bytes, IntPtr objCType ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithBytes_objCType_( Handle, CachedSelectors.initWithBytes_objCType_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), bytes, objCType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValue( ___result );
		}
		unsafe public NSValue initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValue( ___result );
		}
		unsafe public bool isEqualToValue_( NSValue value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqualToValue_( Handle, CachedSelectors.isEqualToValue_, out ___occuredException, sizeof( NSValue ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nonretainedObjectValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nonretainedObjectValue( Handle, CachedSelectors.nonretainedObjectValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public IntPtr objCType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objCType( Handle, CachedSelectors.objCType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public IntPtr pointerValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pointerValue( Handle, CachedSelectors.pointerValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSPoint pointValue() {
			_NSPoint ___result;
			RuntimeObject ___occuredException;
			NativeMethods.pointValue( out ___result, sizeof( _NSPoint ), Handle, CachedSelectors.pointValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSRange rangeValue() {
			_NSRange ___result;
			RuntimeObject ___occuredException;
			NativeMethods.rangeValue( out ___result, sizeof( _NSRange ), Handle, CachedSelectors.rangeValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSRect rectValue() {
			_NSRect ___result;
			RuntimeObject ___occuredException;
			NativeMethods.rectValue( out ___result, sizeof( _NSRect ), Handle, CachedSelectors.rectValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public _NSSize sizeValue() {
			_NSSize ___result;
			RuntimeObject ___occuredException;
			NativeMethods.sizeValue( out ___result, sizeof( _NSSize ), Handle, CachedSelectors.sizeValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr classForCoder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void getValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithBytes_objCType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bytes, IntPtr objCType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqualToValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSValue value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nonretainedObjectValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr objCType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr pointerValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void pointValue( out _NSPoint ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void rangeValue( out _NSRange ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void rectValue( out _NSRect ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_stret_eh2" )]
			public static extern void sizeValue( out _NSSize ___structAddress, int ___structSize, RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value_withObjCType_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value, IntPtr withObjCType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueWithBytes_objCType_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr bytes, IntPtr objCType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueWithNonretainedObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueWithPoint_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSPoint point );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueWithPointer_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr pointer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueWithRange_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRange range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueWithRect_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRect rect );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueWithSize_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSSize size );
		}
		static internal class CachedSelectors {
			public static readonly Selector classForCoder = "classForCoder";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector getValue_ = "getValue:";
			public static readonly Selector initWithBytes_objCType_ = "initWithBytes:objCType:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector isEqualToValue_ = "isEqualToValue:";
			public static readonly Selector nonretainedObjectValue = "nonretainedObjectValue";
			public static readonly Selector objCType = "objCType";
			public static readonly Selector pointerValue = "pointerValue";
			public static readonly Selector pointValue = "pointValue";
			public static readonly Selector rangeValue = "rangeValue";
			public static readonly Selector rectValue = "rectValue";
			public static readonly Selector sizeValue = "sizeValue";
			public static readonly Selector value_withObjCType_ = "value:withObjCType:";
			public static readonly Selector valueWithBytes_objCType_ = "valueWithBytes:objCType:";
			public static readonly Selector valueWithNonretainedObject_ = "valueWithNonretainedObject:";
			public static readonly Selector valueWithPoint_ = "valueWithPoint:";
			public static readonly Selector valueWithPointer_ = "valueWithPointer:";
			public static readonly Selector valueWithRange_ = "valueWithRange:";
			public static readonly Selector valueWithRect_ = "valueWithRect:";
			public static readonly Selector valueWithSize_ = "valueWithSize:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSValueDecoder : IEquatable<NSValueDecoder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSValueDecoder;
		public static implicit operator IntPtr( NSValueDecoder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSValueDecoder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSValueDecoder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSValueDecoder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSValueDecoder value1, NSValueDecoder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSValueDecoder value1, NSValueDecoder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSValueDecoder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSValueDecoder alloc() {
			return new NSValueDecoder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSValueDecoder initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValueDecoder( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithCoder_ = "initWithCoder:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSValueTransformer : IEquatable<NSValueTransformer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSValueTransformer;
		public static implicit operator IntPtr( NSValueTransformer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSValueTransformer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSValueTransformer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSValueTransformer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSValueTransformer value1, NSValueTransformer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSValueTransformer value1, NSValueTransformer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSValueTransformer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSValueTransformer alloc() {
			return new NSValueTransformer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static bool allowsReverseTransformation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsReverseTransformation( ClassHandle, CachedSelectors.allowsReverseTransformation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void setValueTransformer_forName_( NSValueTransformer transformer, string forName ) {
			RuntimeObject ___occuredException;
			var ___wrappedforName = Runtime.CreateStringProxy( forName );
			NativeMethods.setValueTransformer_forName_( ClassHandle, CachedSelectors.setValueTransformer_forName_, out ___occuredException, sizeof( NSValueTransformer ) + sizeof( IntPtr ), transformer, ___wrappedforName );
			Runtime.ReleaseNativeObject( ___wrappedforName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeClass transformedValueClass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transformedValueClass( ClassHandle, CachedSelectors.transformedValueClass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NSValueTransformer valueTransformerForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.valueTransformerForName_( ClassHandle, CachedSelectors.valueTransformerForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSValueTransformer( ___result );
		}
		unsafe public static NSArray valueTransformerNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueTransformerNames( ClassHandle, CachedSelectors.valueTransformerNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject reverseTransformedValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reverseTransformedValue_( Handle, CachedSelectors.reverseTransformedValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject transformedValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transformedValue_( Handle, CachedSelectors.transformedValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool allowsReverseTransformation( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr reverseTransformedValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValueTransformer_forName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSValueTransformer transformer, IntPtr forName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr transformedValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass transformedValueClass( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueTransformerForName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueTransformerNames( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsReverseTransformation = "allowsReverseTransformation";
			public static readonly Selector reverseTransformedValue_ = "reverseTransformedValue:";
			public static readonly Selector setValueTransformer_forName_ = "setValueTransformer:forName:";
			public static readonly Selector transformedValue_ = "transformedValue:";
			public static readonly Selector transformedValueClass = "transformedValueClass";
			public static readonly Selector valueTransformerForName_ = "valueTransformerForName:";
			public static readonly Selector valueTransformerNames = "valueTransformerNames";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSExpression ) )]
	public struct NSVariableAssignmentExpression : IEquatable<NSVariableAssignmentExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSVariableAssignmentExpression;
		public static implicit operator IntPtr( NSVariableAssignmentExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSVariableAssignmentExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSVariableAssignmentExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSVariableAssignmentExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSVariableAssignmentExpression value1, NSVariableAssignmentExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSVariableAssignmentExpression value1, NSVariableAssignmentExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSVariableAssignmentExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSVariableAssignmentExpression alloc() {
			return new NSVariableAssignmentExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject assignmentVariable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.assignmentVariable( Handle, CachedSelectors.assignmentVariable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSVariableAssignmentExpression initWithAssignmentExpression_expression_( NObjective.RuntimeObject expression, NObjective.RuntimeObject expression2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAssignmentExpression_expression_( Handle, CachedSelectors.initWithAssignmentExpression_expression_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), expression, expression2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSVariableAssignmentExpression( ___result );
		}
		unsafe public NSVariableAssignmentExpression initWithAssignmentVariable_expression_( NObjective.RuntimeObject variable, NObjective.RuntimeObject expression ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAssignmentVariable_expression_( Handle, CachedSelectors.initWithAssignmentVariable_expression_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), variable, expression );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSVariableAssignmentExpression( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr assignmentVariable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAssignmentExpression_expression_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject expression, NObjective.RuntimeObject expression2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAssignmentVariable_expression_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject variable, NObjective.RuntimeObject expression );
		}
		static internal class CachedSelectors {
			public static readonly Selector assignmentVariable = "assignmentVariable";
			public static readonly Selector initWithAssignmentExpression_expression_ = "initWithAssignmentExpression:expression:";
			public static readonly Selector initWithAssignmentVariable_expression_ = "initWithAssignmentVariable:expression:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSExpression ) )]
	public struct NSVariableExpression : IEquatable<NSVariableExpression> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSVariableExpression;
		public static implicit operator IntPtr( NSVariableExpression value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSVariableExpression value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSVariableExpression?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSVariableExpression value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSVariableExpression value1, NSVariableExpression value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSVariableExpression value1, NSVariableExpression value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSVariableExpression( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSVariableExpression alloc() {
			return new NSVariableExpression( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSVariableExpression initWithObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithObject_( Handle, CachedSelectors.initWithObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSVariableExpression( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithObject_ = "initWithObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptObjectSpecifier ) )]
	public struct NSWhoseSpecifier : IEquatable<NSWhoseSpecifier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSWhoseSpecifier;
		public static implicit operator IntPtr( NSWhoseSpecifier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSWhoseSpecifier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSWhoseSpecifier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSWhoseSpecifier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSWhoseSpecifier value1, NSWhoseSpecifier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSWhoseSpecifier value1, NSWhoseSpecifier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSWhoseSpecifier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSWhoseSpecifier alloc() {
			return new NSWhoseSpecifier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char canCreateCollapsedSpecifierFromAbsolutePositionRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canCreateCollapsedSpecifierFromAbsolutePositionRecord_( ClassHandle, CachedSelectors.canCreateCollapsedSpecifierFromAbsolutePositionRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char canCreateCollapsedSpecifierFromRangeRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canCreateCollapsedSpecifierFromRangeRecord_( ClassHandle, CachedSelectors.canCreateCollapsedSpecifierFromRangeRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSWhoseSubelementIdentifier endSubelementIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.endSubelementIdentifier( Handle, CachedSelectors.endSubelementIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSWhoseSubelementIdentifier ) ___result;
		}
		unsafe public int endSubelementIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.endSubelementIndex( Handle, CachedSelectors.endSubelementIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSWhoseSpecifier initWithContainerClassDescription_containerSpecifier_key_test_( NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, string key, NSScriptWhoseTest test ) {
			RuntimeObject ___occuredException;
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.initWithContainerClassDescription_containerSpecifier_key_test_( Handle, CachedSelectors.initWithContainerClassDescription_containerSpecifier_key_test_, out ___occuredException, sizeof( NSScriptClassDescription ) + sizeof( NSScriptObjectSpecifier ) + sizeof( IntPtr ) + sizeof( NSScriptWhoseTest ), description, containerSpecifier, ___wrappedkey, test );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSWhoseSpecifier( ___result );
		}
		unsafe public void setEndSubelementIdentifier_( NSWhoseSubelementIdentifier identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEndSubelementIdentifier_( Handle, CachedSelectors.setEndSubelementIdentifier_, out ___occuredException, sizeof( NSWhoseSubelementIdentifier ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEndSubelementIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEndSubelementIndex_( Handle, CachedSelectors.setEndSubelementIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStartSubelementIdentifier_( NSWhoseSubelementIdentifier identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStartSubelementIdentifier_( Handle, CachedSelectors.setStartSubelementIdentifier_, out ___occuredException, sizeof( NSWhoseSubelementIdentifier ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStartSubelementIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStartSubelementIndex_( Handle, CachedSelectors.setStartSubelementIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTest_( NSScriptWhoseTest test ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTest_( Handle, CachedSelectors.setTest_, out ___occuredException, sizeof( NSScriptWhoseTest ), test );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSWhoseSubelementIdentifier startSubelementIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startSubelementIdentifier( Handle, CachedSelectors.startSubelementIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSWhoseSubelementIdentifier ) ___result;
		}
		unsafe public int startSubelementIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startSubelementIndex( Handle, CachedSelectors.startSubelementIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSScriptWhoseTest test() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.test( Handle, CachedSelectors.test, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSScriptWhoseTest( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canCreateCollapsedSpecifierFromAbsolutePositionRecord_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canCreateCollapsedSpecifierFromRangeRecord_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int endSubelementIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int endSubelementIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContainerClassDescription_containerSpecifier_key_test_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptClassDescription description, NSScriptObjectSpecifier containerSpecifier, IntPtr key, NSScriptWhoseTest test );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEndSubelementIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSWhoseSubelementIdentifier identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEndSubelementIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStartSubelementIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSWhoseSubelementIdentifier identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStartSubelementIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSScriptWhoseTest test );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int startSubelementIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int startSubelementIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr test( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector canCreateCollapsedSpecifierFromAbsolutePositionRecord_ = "canCreateCollapsedSpecifierFromAbsolutePositionRecord:";
			public static readonly Selector canCreateCollapsedSpecifierFromRangeRecord_ = "canCreateCollapsedSpecifierFromRangeRecord:";
			public static readonly Selector endSubelementIdentifier = "endSubelementIdentifier";
			public static readonly Selector endSubelementIndex = "endSubelementIndex";
			public static readonly Selector initWithContainerClassDescription_containerSpecifier_key_test_ = "initWithContainerClassDescription:containerSpecifier:key:test:";
			public static readonly Selector setEndSubelementIdentifier_ = "setEndSubelementIdentifier:";
			public static readonly Selector setEndSubelementIndex_ = "setEndSubelementIndex:";
			public static readonly Selector setStartSubelementIdentifier_ = "setStartSubelementIdentifier:";
			public static readonly Selector setStartSubelementIndex_ = "setStartSubelementIndex:";
			public static readonly Selector setTest_ = "setTest:";
			public static readonly Selector startSubelementIdentifier = "startSubelementIdentifier";
			public static readonly Selector startSubelementIndex = "startSubelementIndex";
			public static readonly Selector test = "test";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScriptWhoseTest ) )]
	public struct NSWhoseTest : IEquatable<NSWhoseTest> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSWhoseTest;
		public static implicit operator IntPtr( NSWhoseTest value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSWhoseTest value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSWhoseTest?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSWhoseTest value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSWhoseTest value1, NSWhoseTest value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSWhoseTest value1, NSWhoseTest value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSWhoseTest( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSWhoseTest alloc() {
			return new NSWhoseTest( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSXMLDTDNode ) )]
	public struct NSXMLAttributeDeclaration : IEquatable<NSXMLAttributeDeclaration> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLAttributeDeclaration;
		public static implicit operator IntPtr( NSXMLAttributeDeclaration value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLAttributeDeclaration value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLAttributeDeclaration?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLAttributeDeclaration value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLAttributeDeclaration value1, NSXMLAttributeDeclaration value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLAttributeDeclaration value1, NSXMLAttributeDeclaration value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLAttributeDeclaration( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLAttributeDeclaration alloc() {
			return new NSXMLAttributeDeclaration( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addEnumeration_( NObjective.RuntimeObject enumeration ) {
			RuntimeObject ___occuredException;
			NativeMethods.addEnumeration_( Handle, CachedSelectors.addEnumeration_, out ___occuredException, sizeof( NObjective.RuntimeObject ), enumeration );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int defaultType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultType( Handle, CachedSelectors.defaultType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject elementName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementName( Handle, CachedSelectors.elementName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject enumerations() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enumerations( Handle, CachedSelectors.enumerations, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDefaultType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultType_( Handle, CachedSelectors.setDefaultType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setElementName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setElementName_( Handle, CachedSelectors.setElementName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addEnumeration_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject enumeration );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int defaultType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr enumerations( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setElementName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
		}
		static internal class CachedSelectors {
			public static readonly Selector addEnumeration_ = "addEnumeration:";
			public static readonly Selector defaultType = "defaultType";
			public static readonly Selector elementName = "elementName";
			public static readonly Selector enumerations = "enumerations";
			public static readonly Selector setDefaultType_ = "setDefaultType:";
			public static readonly Selector setElementName_ = "setElementName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMutableArray ) )]
	public struct NSXMLChildren : IEquatable<NSXMLChildren> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLChildren;
		public static implicit operator IntPtr( NSXMLChildren value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLChildren value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLChildren?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLChildren value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLChildren value1, NSXMLChildren value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLChildren value1, NSXMLChildren value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLChildren( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLChildren alloc() {
			return new NSXMLChildren( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void makeStale() {
			RuntimeObject ___occuredException;
			NativeMethods.makeStale( Handle, CachedSelectors.makeStale, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject reallyAddObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reallyAddObject_( Handle, CachedSelectors.reallyAddObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject reallyInsertObject_atIndex_( NObjective.RuntimeObject @object, uint atIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reallyInsertObject_atIndex_( Handle, CachedSelectors.reallyInsertObject_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @object, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject reallyRemoveAllObjects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reallyRemoveAllObjects( Handle, CachedSelectors.reallyRemoveAllObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject reallyRemoveObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reallyRemoveObject_( Handle, CachedSelectors.reallyRemoveObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject reallyRemoveObjectAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reallyRemoveObjectAtIndex_( Handle, CachedSelectors.reallyRemoveObjectAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject reallyReplaceObjectAtIndex_withObject_( uint index, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reallyReplaceObjectAtIndex_withObject_( Handle, CachedSelectors.reallyReplaceObjectAtIndex_withObject_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), index, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeStale( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr reallyAddObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr reallyInsertObject_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr reallyRemoveAllObjects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr reallyRemoveObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr reallyRemoveObjectAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr reallyReplaceObjectAtIndex_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject withObject );
		}
		static internal class CachedSelectors {
			public static readonly Selector makeStale = "makeStale";
			public static readonly Selector reallyAddObject_ = "reallyAddObject:";
			public static readonly Selector reallyInsertObject_atIndex_ = "reallyInsertObject:atIndex:";
			public static readonly Selector reallyRemoveAllObjects = "reallyRemoveAllObjects";
			public static readonly Selector reallyRemoveObject_ = "reallyRemoveObject:";
			public static readonly Selector reallyRemoveObjectAtIndex_ = "reallyRemoveObjectAtIndex:";
			public static readonly Selector reallyReplaceObjectAtIndex_withObject_ = "reallyReplaceObjectAtIndex:withObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSXMLContext : IEquatable<NSXMLContext> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLContext;
		public static implicit operator IntPtr( NSXMLContext value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLContext value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLContext?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLContext value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLContext value1, NSXMLContext value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLContext value1, NSXMLContext value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLContext( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLContext alloc() {
			return new NSXMLContext( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject defaultNamespaceForPrefix_( NObjective.RuntimeObject prefix ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultNamespaceForPrefix_( ClassHandle, CachedSelectors.defaultNamespaceForPrefix_, out ___occuredException, sizeof( NObjective.RuntimeObject ), prefix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultNamespaceForURI_( NObjective.RuntimeObject uri ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultNamespaceForURI_( ClassHandle, CachedSelectors.defaultNamespaceForURI_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uri );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static bool isEmptyHTMLElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEmptyHTMLElement_( ClassHandle, CachedSelectors.isEmptyHTMLElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isSingleAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSingleAttribute_( ClassHandle, CachedSelectors.isSingleAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject normalizeWhitespace_( NObjective.RuntimeObject whitespace ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.normalizeWhitespace_( ClassHandle, CachedSelectors.normalizeWhitespace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), whitespace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject stringForObjectValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringForObjectValue_( ClassHandle, CachedSelectors.stringForObjectValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultNamespaceForPrefix_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject prefix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultNamespaceForURI_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uri );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEmptyHTMLElement_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSingleAttribute_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr normalizeWhitespace_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject whitespace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringForObjectValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
		}
		static internal class CachedSelectors {
			public static readonly Selector defaultNamespaceForPrefix_ = "defaultNamespaceForPrefix:";
			public static readonly Selector defaultNamespaceForURI_ = "defaultNamespaceForURI:";
			public static readonly Selector isEmptyHTMLElement_ = "isEmptyHTMLElement:";
			public static readonly Selector isSingleAttribute_ = "isSingleAttribute:";
			public static readonly Selector normalizeWhitespace_ = "normalizeWhitespace:";
			public static readonly Selector stringForObjectValue_ = "stringForObjectValue:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSXMLNode ) )]
	public struct NSXMLDocument : IEquatable<NSXMLDocument> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLDocument;
		public static implicit operator IntPtr( NSXMLDocument value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLDocument value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLDocument?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLDocument value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLDocument value1, NSXMLDocument value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLDocument value1, NSXMLDocument value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLDocument( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLDocument alloc() {
			return new NSXMLDocument( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeClass replacementClassForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementClassForClass_( ClassHandle, CachedSelectors.replacementClassForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void addChild_( NSXMLNode child ) {
			RuntimeObject ___occuredException;
			NativeMethods.addChild_( Handle, CachedSelectors.addChild_, out ___occuredException, sizeof( NSXMLNode ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string characterEncoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.characterEncoding( Handle, CachedSelectors.characterEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint countOfChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countOfChildren( Handle, CachedSelectors.countOfChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSXMLDocumentContentKind documentContentKind() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentContentKind( Handle, CachedSelectors.documentContentKind, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSXMLDocumentContentKind ) ___result;
		}
		unsafe public NSXMLDTD DTD() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.DTD( Handle, CachedSelectors.DTD, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDTD( ___result );
		}
		unsafe public NSXMLDocument initWithContentsOfURL_options_error_( NSURL url, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_options_error_( Handle, CachedSelectors.initWithContentsOfURL_options_error_, out ___occuredException, sizeof( NSURL ) + sizeof( uint ) + sizeof( IntPtr ), url, options, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDocument( ___result );
		}
		unsafe public NSXMLDocument initWithData_options_error_( NSData data, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_options_error_( Handle, CachedSelectors.initWithData_options_error_, out ___occuredException, sizeof( NSData ) + sizeof( uint ) + sizeof( IntPtr ), data, options, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDocument( ___result );
		}
		unsafe public NSXMLDocument initWithRootElement_( NSXMLElement element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRootElement_( Handle, CachedSelectors.initWithRootElement_, out ___occuredException, sizeof( NSXMLElement ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDocument( ___result );
		}
		unsafe public NSXMLDocument initWithXMLString_options_error_( string @string, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.initWithXMLString_options_error_( Handle, CachedSelectors.initWithXMLString_options_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( uint ) + sizeof( IntPtr ), ___wrappedstring, options, ref error );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDocument( ___result );
		}
		unsafe public void insertChild_atIndex_( NSXMLNode child, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertChild_atIndex_( Handle, CachedSelectors.insertChild_atIndex_, out ___occuredException, sizeof( NSXMLNode ) + sizeof( uint ), child, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertChildren_atIndex_( NSArray children, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertChildren_atIndex_( Handle, CachedSelectors.insertChildren_atIndex_, out ___occuredException, sizeof( NSArray ) + sizeof( uint ), children, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertObject_inChildrenAtIndex_( NObjective.RuntimeObject @object, uint inChildrenAtIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertObject_inChildrenAtIndex_( Handle, CachedSelectors.insertObject_inChildrenAtIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @object, inChildrenAtIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isStandalone() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isStandalone( Handle, CachedSelectors.isStandalone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string MIMEType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.MIMEType( Handle, CachedSelectors.MIMEType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject objectByApplyingXSLT_arguments_error_( NSData xslt, NSDictionary arguments, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectByApplyingXSLT_arguments_error_( Handle, CachedSelectors.objectByApplyingXSLT_arguments_error_, out ___occuredException, sizeof( NSData ) + sizeof( NSDictionary ) + sizeof( IntPtr ), xslt, arguments, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectByApplyingXSLT_error_( NObjective.RuntimeObject xslt, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectByApplyingXSLT_error_( Handle, CachedSelectors.objectByApplyingXSLT_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), xslt, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectByApplyingXSLTAtURL_arguments_error_( NSURL url, NSDictionary arguments, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectByApplyingXSLTAtURL_arguments_error_( Handle, CachedSelectors.objectByApplyingXSLTAtURL_arguments_error_, out ___occuredException, sizeof( NSURL ) + sizeof( NSDictionary ) + sizeof( IntPtr ), url, arguments, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectByApplyingXSLTAtURL_error_( NObjective.RuntimeObject url, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectByApplyingXSLTAtURL_error_( Handle, CachedSelectors.objectByApplyingXSLTAtURL_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectByApplyingXSLTString_arguments_error_( string @string, NSDictionary arguments, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.objectByApplyingXSLTString_arguments_error_( Handle, CachedSelectors.objectByApplyingXSLTString_arguments_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSDictionary ) + sizeof( IntPtr ), ___wrappedstring, arguments, ref error );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectInChildrenAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectInChildrenAtIndex_( Handle, CachedSelectors.objectInChildrenAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeChildAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeChildAtIndex_( Handle, CachedSelectors.removeChildAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectFromChildrenAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectFromChildrenAtIndex_( Handle, CachedSelectors.removeObjectFromChildrenAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceChildAtIndex_withNode_( uint index, NSXMLNode withNode ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceChildAtIndex_withNode_( Handle, CachedSelectors.replaceChildAtIndex_withNode_, out ___occuredException, sizeof( uint ) + sizeof( NSXMLNode ), index, withNode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceObjectInChildrenAtIndex_withObject_( uint index, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObjectInChildrenAtIndex_withObject_( Handle, CachedSelectors.replaceObjectInChildrenAtIndex_withObject_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), index, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSXMLElement rootElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rootElement( Handle, CachedSelectors.rootElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLElement( ___result );
		}
		unsafe public void setCharacterEncoding_( string encoding ) {
			RuntimeObject ___occuredException;
			var ___wrappedencoding = Runtime.CreateStringProxy( encoding );
			NativeMethods.setCharacterEncoding_( Handle, CachedSelectors.setCharacterEncoding_, out ___occuredException, sizeof( IntPtr ), ___wrappedencoding );
			Runtime.ReleaseNativeObject( ___wrappedencoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChildren_( NSArray children ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChildren_( Handle, CachedSelectors.setChildren_, out ___occuredException, sizeof( NSArray ), children );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDocumentContentKind_( NSXMLDocumentContentKind kind ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDocumentContentKind_( Handle, CachedSelectors.setDocumentContentKind_, out ___occuredException, sizeof( NSXMLDocumentContentKind ), kind );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDTD_( NSXMLDTD dtd ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDTD_( Handle, CachedSelectors.setDTD_, out ___occuredException, sizeof( NSXMLDTD ), dtd );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMIMEType_( string type ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			NativeMethods.setMIMEType_( Handle, CachedSelectors.setMIMEType_, out ___occuredException, sizeof( IntPtr ), ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRootElement_( NSXMLNode element ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRootElement_( Handle, CachedSelectors.setRootElement_, out ___occuredException, sizeof( NSXMLNode ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStandalone_( bool standalone ) {
			RuntimeObject ___occuredException;
			NativeMethods.setStandalone_( Handle, CachedSelectors.setStandalone_, out ___occuredException, sizeof( bool ), standalone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVersion_( string version ) {
			RuntimeObject ___occuredException;
			var ___wrappedversion = Runtime.CreateStringProxy( version );
			NativeMethods.setVersion_( Handle, CachedSelectors.setVersion_, out ___occuredException, sizeof( IntPtr ), ___wrappedversion );
			Runtime.ReleaseNativeObject( ___wrappedversion );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool validateAndReturnError_( ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateAndReturnError_( Handle, CachedSelectors.validateAndReturnError_, out ___occuredException, sizeof( IntPtr ), ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string version() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.version( Handle, CachedSelectors.version, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSData XMLDataWithOptions_( uint options ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.XMLDataWithOptions_( Handle, CachedSelectors.XMLDataWithOptions_, out ___occuredException, sizeof( uint ), options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNode child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr characterEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint countOfChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int documentContentKind( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr DTD( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, uint options, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data, uint options, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRootElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLElement element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithXMLString_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, uint options, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertChild_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNode child, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertChildren_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray children, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertObject_inChildrenAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, uint inChildrenAtIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isStandalone( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr MIMEType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectByApplyingXSLT_arguments_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData xslt, NSDictionary arguments, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectByApplyingXSLT_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject xslt, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectByApplyingXSLTAtURL_arguments_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, NSDictionary arguments, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectByApplyingXSLTAtURL_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectByApplyingXSLTString_arguments_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, NSDictionary arguments, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectInChildrenAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeChildAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectFromChildrenAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceChildAtIndex_withNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NSXMLNode withNode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass replacementClassForClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObjectInChildrenAtIndex_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rootElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCharacterEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr encoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChildren_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray children );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDocumentContentKind_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLDocumentContentKind kind );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDTD_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLDTD dtd );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRootElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNode element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStandalone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool standalone );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVersion_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr version );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool validateAndReturnError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr version( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr XMLDataWithOptions_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint options );
		}
		static internal class CachedSelectors {
			public static readonly Selector addChild_ = "addChild:";
			public static readonly Selector characterEncoding = "characterEncoding";
			public static readonly Selector countOfChildren = "countOfChildren";
			public static readonly Selector documentContentKind = "documentContentKind";
			public static readonly Selector DTD = "DTD";
			public static readonly Selector initWithContentsOfURL_options_error_ = "initWithContentsOfURL:options:error:";
			public static readonly Selector initWithData_options_error_ = "initWithData:options:error:";
			public static readonly Selector initWithRootElement_ = "initWithRootElement:";
			public static readonly Selector initWithXMLString_options_error_ = "initWithXMLString:options:error:";
			public static readonly Selector insertChild_atIndex_ = "insertChild:atIndex:";
			public static readonly Selector insertChildren_atIndex_ = "insertChildren:atIndex:";
			public static readonly Selector insertObject_inChildrenAtIndex_ = "insertObject:inChildrenAtIndex:";
			public static readonly Selector isStandalone = "isStandalone";
			public static readonly Selector MIMEType = "MIMEType";
			public static readonly Selector objectByApplyingXSLT_arguments_error_ = "objectByApplyingXSLT:arguments:error:";
			public static readonly Selector objectByApplyingXSLT_error_ = "objectByApplyingXSLT:error:";
			public static readonly Selector objectByApplyingXSLTAtURL_arguments_error_ = "objectByApplyingXSLTAtURL:arguments:error:";
			public static readonly Selector objectByApplyingXSLTAtURL_error_ = "objectByApplyingXSLTAtURL:error:";
			public static readonly Selector objectByApplyingXSLTString_arguments_error_ = "objectByApplyingXSLTString:arguments:error:";
			public static readonly Selector objectInChildrenAtIndex_ = "objectInChildrenAtIndex:";
			public static readonly Selector removeChildAtIndex_ = "removeChildAtIndex:";
			public static readonly Selector removeObjectFromChildrenAtIndex_ = "removeObjectFromChildrenAtIndex:";
			public static readonly Selector replaceChildAtIndex_withNode_ = "replaceChildAtIndex:withNode:";
			public static readonly Selector replacementClassForClass_ = "replacementClassForClass:";
			public static readonly Selector replaceObjectInChildrenAtIndex_withObject_ = "replaceObjectInChildrenAtIndex:withObject:";
			public static readonly Selector rootElement = "rootElement";
			public static readonly Selector setCharacterEncoding_ = "setCharacterEncoding:";
			public static readonly Selector setChildren_ = "setChildren:";
			public static readonly Selector setDocumentContentKind_ = "setDocumentContentKind:";
			public static readonly Selector setDTD_ = "setDTD:";
			public static readonly Selector setMIMEType_ = "setMIMEType:";
			public static readonly Selector setRootElement_ = "setRootElement:";
			public static readonly Selector setStandalone_ = "setStandalone:";
			public static readonly Selector setVersion_ = "setVersion:";
			public static readonly Selector validateAndReturnError_ = "validateAndReturnError:";
			public static readonly Selector version = "version";
			public static readonly Selector XMLDataWithOptions_ = "XMLDataWithOptions:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSXMLNode ) )]
	public struct NSXMLDTD : IEquatable<NSXMLDTD> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLDTD;
		public static implicit operator IntPtr( NSXMLDTD value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLDTD value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLDTD?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLDTD value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLDTD value1, NSXMLDTD value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLDTD value1, NSXMLDTD value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLDTD( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLDTD alloc() {
			return new NSXMLDTD( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NSXMLDTDNode predefinedEntityDeclarationForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.predefinedEntityDeclarationForName_( ClassHandle, CachedSelectors.predefinedEntityDeclarationForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDTDNode( ___result );
		}
		unsafe public void addChild_( NSXMLNode child ) {
			RuntimeObject ___occuredException;
			NativeMethods.addChild_( Handle, CachedSelectors.addChild_, out ___occuredException, sizeof( NSXMLNode ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSXMLDTDNode attributeDeclarationForName_elementName_( string name, string elementName ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedelementName = Runtime.CreateStringProxy( elementName );
			var ___result = NativeMethods.attributeDeclarationForName_elementName_( Handle, CachedSelectors.attributeDeclarationForName_elementName_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedelementName );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedelementName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDTDNode( ___result );
		}
		unsafe public uint countOfChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countOfChildren( Handle, CachedSelectors.countOfChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSXMLDTDNode elementDeclarationForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.elementDeclarationForName_( Handle, CachedSelectors.elementDeclarationForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDTDNode( ___result );
		}
		unsafe public NSXMLDTDNode entityDeclarationForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.entityDeclarationForName_( Handle, CachedSelectors.entityDeclarationForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDTDNode( ___result );
		}
		unsafe public NSXMLDTD initWithContentsOfURL_options_error_( NSURL url, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_options_error_( Handle, CachedSelectors.initWithContentsOfURL_options_error_, out ___occuredException, sizeof( NSURL ) + sizeof( uint ) + sizeof( IntPtr ), url, options, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDTD( ___result );
		}
		unsafe public NSXMLDTD initWithData_options_error_( NSData data, uint options, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_options_error_( Handle, CachedSelectors.initWithData_options_error_, out ___occuredException, sizeof( NSData ) + sizeof( uint ) + sizeof( IntPtr ), data, options, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDTD( ___result );
		}
		unsafe public void insertChild_atIndex_( NSXMLNode child, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertChild_atIndex_( Handle, CachedSelectors.insertChild_atIndex_, out ___occuredException, sizeof( NSXMLNode ) + sizeof( uint ), child, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertChildren_atIndex_( NSArray children, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertChildren_atIndex_( Handle, CachedSelectors.insertChildren_atIndex_, out ___occuredException, sizeof( NSArray ) + sizeof( uint ), children, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertObject_inChildrenAtIndex_( NObjective.RuntimeObject @object, uint inChildrenAtIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertObject_inChildrenAtIndex_( Handle, CachedSelectors.insertObject_inChildrenAtIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @object, inChildrenAtIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSXMLDTDNode notationDeclarationForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.notationDeclarationForName_( Handle, CachedSelectors.notationDeclarationForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDTDNode( ___result );
		}
		unsafe public NObjective.RuntimeObject objectInChildrenAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectInChildrenAtIndex_( Handle, CachedSelectors.objectInChildrenAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string publicID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicID( Handle, CachedSelectors.publicID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void removeChildAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeChildAtIndex_( Handle, CachedSelectors.removeChildAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectFromChildrenAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectFromChildrenAtIndex_( Handle, CachedSelectors.removeObjectFromChildrenAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceChildAtIndex_withNode_( uint index, NSXMLNode withNode ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceChildAtIndex_withNode_( Handle, CachedSelectors.replaceChildAtIndex_withNode_, out ___occuredException, sizeof( uint ) + sizeof( NSXMLNode ), index, withNode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceObjectInChildrenAtIndex_withObject_( uint index, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObjectInChildrenAtIndex_withObject_( Handle, CachedSelectors.replaceObjectInChildrenAtIndex_withObject_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), index, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChildren_( NSArray children ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChildren_( Handle, CachedSelectors.setChildren_, out ___occuredException, sizeof( NSArray ), children );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPublicID_( string id ) {
			RuntimeObject ___occuredException;
			var ___wrappedid = Runtime.CreateStringProxy( id );
			NativeMethods.setPublicID_( Handle, CachedSelectors.setPublicID_, out ___occuredException, sizeof( IntPtr ), ___wrappedid );
			Runtime.ReleaseNativeObject( ___wrappedid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSystemID_( string id ) {
			RuntimeObject ___occuredException;
			var ___wrappedid = Runtime.CreateStringProxy( id );
			NativeMethods.setSystemID_( Handle, CachedSelectors.setSystemID_, out ___occuredException, sizeof( IntPtr ), ___wrappedid );
			Runtime.ReleaseNativeObject( ___wrappedid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string systemID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemID( Handle, CachedSelectors.systemID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNode child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributeDeclarationForName_elementName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr elementName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint countOfChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementDeclarationForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr entityDeclarationForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, uint options, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data, uint options, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertChild_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNode child, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertChildren_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray children, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertObject_inChildrenAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, uint inChildrenAtIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notationDeclarationForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectInChildrenAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predefinedEntityDeclarationForName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr publicID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeChildAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectFromChildrenAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceChildAtIndex_withNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NSXMLNode withNode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObjectInChildrenAtIndex_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChildren_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray children );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPublicID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSystemID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addChild_ = "addChild:";
			public static readonly Selector attributeDeclarationForName_elementName_ = "attributeDeclarationForName:elementName:";
			public static readonly Selector countOfChildren = "countOfChildren";
			public static readonly Selector elementDeclarationForName_ = "elementDeclarationForName:";
			public static readonly Selector entityDeclarationForName_ = "entityDeclarationForName:";
			public static readonly Selector initWithContentsOfURL_options_error_ = "initWithContentsOfURL:options:error:";
			public static readonly Selector initWithData_options_error_ = "initWithData:options:error:";
			public static readonly Selector insertChild_atIndex_ = "insertChild:atIndex:";
			public static readonly Selector insertChildren_atIndex_ = "insertChildren:atIndex:";
			public static readonly Selector insertObject_inChildrenAtIndex_ = "insertObject:inChildrenAtIndex:";
			public static readonly Selector notationDeclarationForName_ = "notationDeclarationForName:";
			public static readonly Selector objectInChildrenAtIndex_ = "objectInChildrenAtIndex:";
			public static readonly Selector predefinedEntityDeclarationForName_ = "predefinedEntityDeclarationForName:";
			public static readonly Selector publicID = "publicID";
			public static readonly Selector removeChildAtIndex_ = "removeChildAtIndex:";
			public static readonly Selector removeObjectFromChildrenAtIndex_ = "removeObjectFromChildrenAtIndex:";
			public static readonly Selector replaceChildAtIndex_withNode_ = "replaceChildAtIndex:withNode:";
			public static readonly Selector replaceObjectInChildrenAtIndex_withObject_ = "replaceObjectInChildrenAtIndex:withObject:";
			public static readonly Selector setChildren_ = "setChildren:";
			public static readonly Selector setPublicID_ = "setPublicID:";
			public static readonly Selector setSystemID_ = "setSystemID:";
			public static readonly Selector systemID = "systemID";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSXMLNode ) )]
	public struct NSXMLDTDNode : IEquatable<NSXMLDTDNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLDTDNode;
		public static implicit operator IntPtr( NSXMLDTDNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLDTDNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLDTDNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLDTDNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLDTDNode value1, NSXMLDTDNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLDTDNode value1, NSXMLDTDNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLDTDNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLDTDNode alloc() {
			return new NSXMLDTDNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSXMLDTDNodeKind DTDKind() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.DTDKind( Handle, CachedSelectors.DTDKind, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSXMLDTDNodeKind ) ___result;
		}
		unsafe public NSXMLDTDNode initWithXMLString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.initWithXMLString_( Handle, CachedSelectors.initWithXMLString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDTDNode( ___result );
		}
		unsafe public bool isExternal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isExternal( Handle, CachedSelectors.isExternal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string notationName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notationName( Handle, CachedSelectors.notationName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string publicID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicID( Handle, CachedSelectors.publicID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void setDTDKind_( NSXMLDTDNodeKind kind ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDTDKind_( Handle, CachedSelectors.setDTDKind_, out ___occuredException, sizeof( NSXMLDTDNodeKind ), kind );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNotationName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.setNotationName_( Handle, CachedSelectors.setNotationName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPublicID_( string id ) {
			RuntimeObject ___occuredException;
			var ___wrappedid = Runtime.CreateStringProxy( id );
			NativeMethods.setPublicID_( Handle, CachedSelectors.setPublicID_, out ___occuredException, sizeof( IntPtr ), ___wrappedid );
			Runtime.ReleaseNativeObject( ___wrappedid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSystemID_( string id ) {
			RuntimeObject ___occuredException;
			var ___wrappedid = Runtime.CreateStringProxy( id );
			NativeMethods.setSystemID_( Handle, CachedSelectors.setSystemID_, out ___occuredException, sizeof( IntPtr ), ___wrappedid );
			Runtime.ReleaseNativeObject( ___wrappedid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string systemID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemID( Handle, CachedSelectors.systemID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int DTDKind( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithXMLString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isExternal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr notationName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr publicID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDTDKind_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLDTDNodeKind kind );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNotationName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPublicID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSystemID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector DTDKind = "DTDKind";
			public static readonly Selector initWithXMLString_ = "initWithXMLString:";
			public static readonly Selector isExternal = "isExternal";
			public static readonly Selector notationName = "notationName";
			public static readonly Selector publicID = "publicID";
			public static readonly Selector setDTDKind_ = "setDTDKind:";
			public static readonly Selector setNotationName_ = "setNotationName:";
			public static readonly Selector setPublicID_ = "setPublicID:";
			public static readonly Selector setSystemID_ = "setSystemID:";
			public static readonly Selector systemID = "systemID";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSXMLNode ) )]
	public struct NSXMLElement : IEquatable<NSXMLElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLElement;
		public static implicit operator IntPtr( NSXMLElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLElement value1, NSXMLElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLElement value1, NSXMLElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLElement alloc() {
			return new NSXMLElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addAttribute_( NSXMLNode attribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.addAttribute_( Handle, CachedSelectors.addAttribute_, out ___occuredException, sizeof( NSXMLNode ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addChild_( NSXMLNode child ) {
			RuntimeObject ___occuredException;
			NativeMethods.addChild_( Handle, CachedSelectors.addChild_, out ___occuredException, sizeof( NSXMLNode ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addNamespace_( NSXMLNode @namespace ) {
			RuntimeObject ___occuredException;
			NativeMethods.addNamespace_( Handle, CachedSelectors.addNamespace_, out ___occuredException, sizeof( NSXMLNode ), @namespace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSXMLNode attributeForLocalName_URI_( string name, string URI ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedURI = Runtime.CreateStringProxy( URI );
			var ___result = NativeMethods.attributeForLocalName_URI_( Handle, CachedSelectors.attributeForLocalName_URI_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedURI );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedURI );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public NSXMLNode attributeForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.attributeForName_( Handle, CachedSelectors.attributeForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public NSArray attributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributes( Handle, CachedSelectors.attributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public uint countOfAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countOfAttributes( Handle, CachedSelectors.countOfAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint countOfChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countOfChildren( Handle, CachedSelectors.countOfChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint countOfNamespaces() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.countOfNamespaces( Handle, CachedSelectors.countOfNamespaces, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSArray elementsForLocalName_URI_( string name, string URI ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedURI = Runtime.CreateStringProxy( URI );
			var ___result = NativeMethods.elementsForLocalName_URI_( Handle, CachedSelectors.elementsForLocalName_URI_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedURI );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedURI );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray elementsForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.elementsForName_( Handle, CachedSelectors.elementsForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSXMLElement initWithLocalName_URI_( NObjective.RuntimeObject name, NObjective.RuntimeObject URI ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLocalName_URI_( Handle, CachedSelectors.initWithLocalName_URI_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, URI );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLElement( ___result );
		}
		unsafe public NSXMLElement initWithName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.initWithName_( Handle, CachedSelectors.initWithName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLElement( ___result );
		}
		unsafe public NSXMLElement initWithName_stringValue_( string name, string stringValue ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedstringValue = Runtime.CreateStringProxy( stringValue );
			var ___result = NativeMethods.initWithName_stringValue_( Handle, CachedSelectors.initWithName_stringValue_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedstringValue );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedstringValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLElement( ___result );
		}
		unsafe public NSXMLElement initWithName_URI_( string name, string URI ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedURI = Runtime.CreateStringProxy( URI );
			var ___result = NativeMethods.initWithName_URI_( Handle, CachedSelectors.initWithName_URI_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedURI );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedURI );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLElement( ___result );
		}
		unsafe public NSXMLElement initWithXMLString_error_( string @string, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.initWithXMLString_error_( Handle, CachedSelectors.initWithXMLString_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedstring, ref error );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLElement( ___result );
		}
		unsafe public void insertChild_atIndex_( NSXMLNode child, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertChild_atIndex_( Handle, CachedSelectors.insertChild_atIndex_, out ___occuredException, sizeof( NSXMLNode ) + sizeof( uint ), child, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertChildren_atIndex_( NSArray children, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertChildren_atIndex_( Handle, CachedSelectors.insertChildren_atIndex_, out ___occuredException, sizeof( NSArray ) + sizeof( uint ), children, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertObject_inAttributesAtIndex_( NObjective.RuntimeObject @object, uint inAttributesAtIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertObject_inAttributesAtIndex_( Handle, CachedSelectors.insertObject_inAttributesAtIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @object, inAttributesAtIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertObject_inChildrenAtIndex_( NObjective.RuntimeObject @object, uint inChildrenAtIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertObject_inChildrenAtIndex_( Handle, CachedSelectors.insertObject_inChildrenAtIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @object, inChildrenAtIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertObject_inNamespacesAtIndex_( NObjective.RuntimeObject @object, uint inNamespacesAtIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertObject_inNamespacesAtIndex_( Handle, CachedSelectors.insertObject_inNamespacesAtIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), @object, inNamespacesAtIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSXMLNode namespaceForPrefix_( string prefix ) {
			RuntimeObject ___occuredException;
			var ___wrappedprefix = Runtime.CreateStringProxy( prefix );
			var ___result = NativeMethods.namespaceForPrefix_( Handle, CachedSelectors.namespaceForPrefix_, out ___occuredException, sizeof( IntPtr ), ___wrappedprefix );
			Runtime.ReleaseNativeObject( ___wrappedprefix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public NSArray namespaces() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.namespaces( Handle, CachedSelectors.namespaces, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void normalizeAdjacentTextNodesPreservingCDATA_( bool cdata ) {
			RuntimeObject ___occuredException;
			NativeMethods.normalizeAdjacentTextNodesPreservingCDATA_( Handle, CachedSelectors.normalizeAdjacentTextNodesPreservingCDATA_, out ___occuredException, sizeof( bool ), cdata );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject objectInAttributesAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectInAttributesAtIndex_( Handle, CachedSelectors.objectInAttributesAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectInChildrenAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectInChildrenAtIndex_( Handle, CachedSelectors.objectInChildrenAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject objectInNamespacesAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectInNamespacesAtIndex_( Handle, CachedSelectors.objectInNamespacesAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAttributeForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.removeAttributeForName_( Handle, CachedSelectors.removeAttributeForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeChildAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeChildAtIndex_( Handle, CachedSelectors.removeChildAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeNamespaceForPrefix_( string prefix ) {
			RuntimeObject ___occuredException;
			var ___wrappedprefix = Runtime.CreateStringProxy( prefix );
			NativeMethods.removeNamespaceForPrefix_( Handle, CachedSelectors.removeNamespaceForPrefix_, out ___occuredException, sizeof( IntPtr ), ___wrappedprefix );
			Runtime.ReleaseNativeObject( ___wrappedprefix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectFromAttributesAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectFromAttributesAtIndex_( Handle, CachedSelectors.removeObjectFromAttributesAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectFromChildrenAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectFromChildrenAtIndex_( Handle, CachedSelectors.removeObjectFromChildrenAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObjectFromNamespacesAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObjectFromNamespacesAtIndex_( Handle, CachedSelectors.removeObjectFromNamespacesAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceChildAtIndex_withNode_( uint index, NSXMLNode withNode ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceChildAtIndex_withNode_( Handle, CachedSelectors.replaceChildAtIndex_withNode_, out ___occuredException, sizeof( uint ) + sizeof( NSXMLNode ), index, withNode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceObjectInChildrenAtIndex_withObject_( uint index, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceObjectInChildrenAtIndex_withObject_( Handle, CachedSelectors.replaceObjectInChildrenAtIndex_withObject_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), index, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSXMLNode resolveNamespaceForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.resolveNamespaceForName_( Handle, CachedSelectors.resolveNamespaceForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public string resolvePrefixForNamespaceURI_( string uri ) {
			RuntimeObject ___occuredException;
			var ___wrappeduri = Runtime.CreateStringProxy( uri );
			var ___result = NativeMethods.resolvePrefixForNamespaceURI_( Handle, CachedSelectors.resolvePrefixForNamespaceURI_, out ___occuredException, sizeof( IntPtr ), ___wrappeduri );
			Runtime.ReleaseNativeObject( ___wrappeduri );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void setAttributes_( NSArray attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttributes_( Handle, CachedSelectors.setAttributes_, out ___occuredException, sizeof( NSArray ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAttributesAsDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttributesAsDictionary_( Handle, CachedSelectors.setAttributesAsDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChildren_( NSArray children ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChildren_( Handle, CachedSelectors.setChildren_, out ___occuredException, sizeof( NSArray ), children );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNamespaces_( NSArray namespaces ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNamespaces_( Handle, CachedSelectors.setNamespaces_, out ___occuredException, sizeof( NSArray ), namespaces );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateName_error_( System.IntPtr name, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateName_error_( Handle, CachedSelectors.validateName_error_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ), name, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNode attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNode child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addNamespace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNode @namespace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributeForLocalName_URI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr URI );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributeForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint countOfAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint countOfChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint countOfNamespaces( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementsForLocalName_URI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr URI );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementsForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLocalName_URI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject URI );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_stringValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr stringValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_URI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr URI );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithXMLString_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertChild_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNode child, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertChildren_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray children, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertObject_inAttributesAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, uint inAttributesAtIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertObject_inChildrenAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, uint inChildrenAtIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertObject_inNamespacesAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, uint inNamespacesAtIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr namespaceForPrefix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr prefix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr namespaces( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void normalizeAdjacentTextNodesPreservingCDATA_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool cdata );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectInAttributesAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectInChildrenAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectInNamespacesAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAttributeForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeChildAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeNamespaceForPrefix_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr prefix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectFromAttributesAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectFromChildrenAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObjectFromNamespacesAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceChildAtIndex_withNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NSXMLNode withNode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceObjectInChildrenAtIndex_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resolveNamespaceForName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resolvePrefixForNamespaceURI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr uri );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributesAsDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChildren_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray children );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNamespaces_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray namespaces );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateName_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr name, System.IntPtr error );
		}
		static internal class CachedSelectors {
			public static readonly Selector addAttribute_ = "addAttribute:";
			public static readonly Selector addChild_ = "addChild:";
			public static readonly Selector addNamespace_ = "addNamespace:";
			public static readonly Selector attributeForLocalName_URI_ = "attributeForLocalName:URI:";
			public static readonly Selector attributeForName_ = "attributeForName:";
			public static readonly Selector attributes = "attributes";
			public static readonly Selector countOfAttributes = "countOfAttributes";
			public static readonly Selector countOfChildren = "countOfChildren";
			public static readonly Selector countOfNamespaces = "countOfNamespaces";
			public static readonly Selector elementsForLocalName_URI_ = "elementsForLocalName:URI:";
			public static readonly Selector elementsForName_ = "elementsForName:";
			public static readonly Selector initWithLocalName_URI_ = "initWithLocalName:URI:";
			public static readonly Selector initWithName_ = "initWithName:";
			public static readonly Selector initWithName_stringValue_ = "initWithName:stringValue:";
			public static readonly Selector initWithName_URI_ = "initWithName:URI:";
			public static readonly Selector initWithXMLString_error_ = "initWithXMLString:error:";
			public static readonly Selector insertChild_atIndex_ = "insertChild:atIndex:";
			public static readonly Selector insertChildren_atIndex_ = "insertChildren:atIndex:";
			public static readonly Selector insertObject_inAttributesAtIndex_ = "insertObject:inAttributesAtIndex:";
			public static readonly Selector insertObject_inChildrenAtIndex_ = "insertObject:inChildrenAtIndex:";
			public static readonly Selector insertObject_inNamespacesAtIndex_ = "insertObject:inNamespacesAtIndex:";
			public static readonly Selector namespaceForPrefix_ = "namespaceForPrefix:";
			public static readonly Selector namespaces = "namespaces";
			public static readonly Selector normalizeAdjacentTextNodesPreservingCDATA_ = "normalizeAdjacentTextNodesPreservingCDATA:";
			public static readonly Selector objectInAttributesAtIndex_ = "objectInAttributesAtIndex:";
			public static readonly Selector objectInChildrenAtIndex_ = "objectInChildrenAtIndex:";
			public static readonly Selector objectInNamespacesAtIndex_ = "objectInNamespacesAtIndex:";
			public static readonly Selector removeAttributeForName_ = "removeAttributeForName:";
			public static readonly Selector removeChildAtIndex_ = "removeChildAtIndex:";
			public static readonly Selector removeNamespaceForPrefix_ = "removeNamespaceForPrefix:";
			public static readonly Selector removeObjectFromAttributesAtIndex_ = "removeObjectFromAttributesAtIndex:";
			public static readonly Selector removeObjectFromChildrenAtIndex_ = "removeObjectFromChildrenAtIndex:";
			public static readonly Selector removeObjectFromNamespacesAtIndex_ = "removeObjectFromNamespacesAtIndex:";
			public static readonly Selector replaceChildAtIndex_withNode_ = "replaceChildAtIndex:withNode:";
			public static readonly Selector replaceObjectInChildrenAtIndex_withObject_ = "replaceObjectInChildrenAtIndex:withObject:";
			public static readonly Selector resolveNamespaceForName_ = "resolveNamespaceForName:";
			public static readonly Selector resolvePrefixForNamespaceURI_ = "resolvePrefixForNamespaceURI:";
			public static readonly Selector setAttributes_ = "setAttributes:";
			public static readonly Selector setAttributesAsDictionary_ = "setAttributesAsDictionary:";
			public static readonly Selector setChildren_ = "setChildren:";
			public static readonly Selector setNamespaces_ = "setNamespaces:";
			public static readonly Selector validateName_error_ = "validateName:error:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSXMLNode ) )]
	public struct NSXMLElementDeclarationContent : IEquatable<NSXMLElementDeclarationContent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLElementDeclarationContent;
		public static implicit operator IntPtr( NSXMLElementDeclarationContent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLElementDeclarationContent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLElementDeclarationContent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLElementDeclarationContent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLElementDeclarationContent value1, NSXMLElementDeclarationContent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLElementDeclarationContent value1, NSXMLElementDeclarationContent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLElementDeclarationContent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLElementDeclarationContent alloc() {
			return new NSXMLElementDeclarationContent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject createElementContentFromString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createElementContentFromString_( ClassHandle, CachedSelectors.createElementContentFromString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int contentKind() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentKind( Handle, CachedSelectors.contentKind, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSXMLElementDeclarationContent initWithContentKind_occurrence_( int kind, int occurrence ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentKind_occurrence_( Handle, CachedSelectors.initWithContentKind_occurrence_, out ___occuredException, sizeof( int ) + sizeof( int ), kind, occurrence );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLElementDeclarationContent( ___result );
		}
		unsafe public NObjective.RuntimeObject leftChild() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.leftChild( Handle, CachedSelectors.leftChild, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int occurrence() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.occurrence( Handle, CachedSelectors.occurrence, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject rightChild() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rightChild( Handle, CachedSelectors.rightChild, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setLeftChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLeftChild_( Handle, CachedSelectors.setLeftChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRightChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRightChild_( Handle, CachedSelectors.setRightChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int contentKind( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createElementContentFromString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentKind_occurrence_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int kind, int occurrence );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr leftChild( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int occurrence( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rightChild( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLeftChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRightChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
		}
		static internal class CachedSelectors {
			public static readonly Selector contentKind = "contentKind";
			public static readonly Selector createElementContentFromString_ = "createElementContentFromString:";
			public static readonly Selector initWithContentKind_occurrence_ = "initWithContentKind:occurrence:";
			public static readonly Selector leftChild = "leftChild";
			public static readonly Selector occurrence = "occurrence";
			public static readonly Selector rightChild = "rightChild";
			public static readonly Selector setLeftChild_ = "setLeftChild:";
			public static readonly Selector setRightChild_ = "setRightChild:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSXMLElement ) )]
	public struct NSXMLFidelityElement : IEquatable<NSXMLFidelityElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLFidelityElement;
		public static implicit operator IntPtr( NSXMLFidelityElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLFidelityElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLFidelityElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLFidelityElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLFidelityElement value1, NSXMLFidelityElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLFidelityElement value1, NSXMLFidelityElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLFidelityElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLFidelityElement alloc() {
			return new NSXMLFidelityElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint fidelity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fidelity( Handle, CachedSelectors.fidelity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void setEndWhitespace_( NObjective.RuntimeObject whitespace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEndWhitespace_( Handle, CachedSelectors.setEndWhitespace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), whitespace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFidelity_( uint fidelity ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFidelity_( Handle, CachedSelectors.setFidelity_, out ___occuredException, sizeof( uint ), fidelity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWhitespace_( NObjective.RuntimeObject whitespace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWhitespace_( Handle, CachedSelectors.setWhitespace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), whitespace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fidelity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEndWhitespace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject whitespace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFidelity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint fidelity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWhitespace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject whitespace );
		}
		static internal class CachedSelectors {
			public static readonly Selector fidelity = "fidelity";
			public static readonly Selector setEndWhitespace_ = "setEndWhitespace:";
			public static readonly Selector setFidelity_ = "setFidelity:";
			public static readonly Selector setWhitespace_ = "setWhitespace:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSXMLNode ) )]
	public struct NSXMLFidelityNode : IEquatable<NSXMLFidelityNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLFidelityNode;
		public static implicit operator IntPtr( NSXMLFidelityNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLFidelityNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLFidelityNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLFidelityNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLFidelityNode value1, NSXMLFidelityNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLFidelityNode value1, NSXMLFidelityNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLFidelityNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLFidelityNode alloc() {
			return new NSXMLFidelityNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static ushort charRefToUnicode_( System.IntPtr unicode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.charRefToUnicode_( ClassHandle, CachedSelectors.charRefToUnicode_, out ___occuredException, sizeof( System.IntPtr ), unicode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void setObjectValuePreservingEntitiesForNode_string_( NObjective.RuntimeObject node, NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObjectValuePreservingEntitiesForNode_string_( ClassHandle, CachedSelectors.setObjectValuePreservingEntitiesForNode_string_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), node, @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject stringValueSubstitutingEntitiesForNode_ranges_names_objectValue_( NObjective.RuntimeObject node, NObjective.RuntimeObject ranges, NObjective.RuntimeObject names, NObjective.RuntimeObject objectValue ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringValueSubstitutingEntitiesForNode_ranges_names_objectValue_( ClassHandle, CachedSelectors.stringValueSubstitutingEntitiesForNode_ranges_names_objectValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), node, ranges, names, objectValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addEntity_index_( NObjective.RuntimeObject entity, int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.addEntity_index_( Handle, CachedSelectors.addEntity_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), entity, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint fidelity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fidelity( Handle, CachedSelectors.fidelity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public bool isCDATA() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCDATA( Handle, CachedSelectors.isCDATA, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setFidelity_( uint fidelity ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFidelity_( Handle, CachedSelectors.setFidelity_, out ___occuredException, sizeof( uint ), fidelity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNames_( NObjective.RuntimeObject names ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNames_( Handle, CachedSelectors.setNames_, out ___occuredException, sizeof( NObjective.RuntimeObject ), names );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRanges_( NObjective.RuntimeObject ranges ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRanges_( Handle, CachedSelectors.setRanges_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ranges );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWhitespace_( NObjective.RuntimeObject whitespace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWhitespace_( Handle, CachedSelectors.setWhitespace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), whitespace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject whitespace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.whitespace( Handle, CachedSelectors.whitespace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addEntity_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entity, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort charRefToUnicode_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr unicode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fidelity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isCDATA( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFidelity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint fidelity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNames_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject names );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObjectValuePreservingEntitiesForNode_string_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRanges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ranges );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWhitespace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject whitespace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringValueSubstitutingEntitiesForNode_ranges_names_objectValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node, NObjective.RuntimeObject ranges, NObjective.RuntimeObject names, NObjective.RuntimeObject objectValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr whitespace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addEntity_index_ = "addEntity:index:";
			public static readonly Selector charRefToUnicode_ = "charRefToUnicode:";
			public static readonly Selector fidelity = "fidelity";
			public static readonly Selector isCDATA = "isCDATA";
			public static readonly Selector setFidelity_ = "setFidelity:";
			public static readonly Selector setNames_ = "setNames:";
			public static readonly Selector setObjectValuePreservingEntitiesForNode_string_ = "setObjectValuePreservingEntitiesForNode:string:";
			public static readonly Selector setRanges_ = "setRanges:";
			public static readonly Selector setWhitespace_ = "setWhitespace:";
			public static readonly Selector stringValueSubstitutingEntitiesForNode_ranges_names_objectValue_ = "stringValueSubstitutingEntitiesForNode:ranges:names:objectValue:";
			public static readonly Selector whitespace = "whitespace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSXMLNamedNode ) )]
	public struct NSXMLNamedFidelityNode : IEquatable<NSXMLNamedFidelityNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLNamedFidelityNode;
		public static implicit operator IntPtr( NSXMLNamedFidelityNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLNamedFidelityNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLNamedFidelityNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLNamedFidelityNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLNamedFidelityNode value1, NSXMLNamedFidelityNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLNamedFidelityNode value1, NSXMLNamedFidelityNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLNamedFidelityNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLNamedFidelityNode alloc() {
			return new NSXMLNamedFidelityNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addEntity_index_( NObjective.RuntimeObject entity, int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.addEntity_index_( Handle, CachedSelectors.addEntity_index_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), entity, index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint fidelity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fidelity( Handle, CachedSelectors.fidelity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void setFidelity_( uint fidelity ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFidelity_( Handle, CachedSelectors.setFidelity_, out ___occuredException, sizeof( uint ), fidelity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNames_( NObjective.RuntimeObject names ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNames_( Handle, CachedSelectors.setNames_, out ___occuredException, sizeof( NObjective.RuntimeObject ), names );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRanges_( NObjective.RuntimeObject ranges ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRanges_( Handle, CachedSelectors.setRanges_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ranges );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWhitespace_( NObjective.RuntimeObject whitespace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWhitespace_( Handle, CachedSelectors.setWhitespace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), whitespace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addEntity_index_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entity, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fidelity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFidelity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint fidelity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNames_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject names );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRanges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ranges );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWhitespace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject whitespace );
		}
		static internal class CachedSelectors {
			public static readonly Selector addEntity_index_ = "addEntity:index:";
			public static readonly Selector fidelity = "fidelity";
			public static readonly Selector setFidelity_ = "setFidelity:";
			public static readonly Selector setNames_ = "setNames:";
			public static readonly Selector setRanges_ = "setRanges:";
			public static readonly Selector setWhitespace_ = "setWhitespace:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSXMLNode ) )]
	public struct NSXMLNamedNode : IEquatable<NSXMLNamedNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLNamedNode;
		public static implicit operator IntPtr( NSXMLNamedNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLNamedNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLNamedNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLNamedNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLNamedNode value1, NSXMLNamedNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLNamedNode value1, NSXMLNamedNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLNamedNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLNamedNode alloc() {
			return new NSXMLNamedNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSXMLNamedNode initWithKind_localName_stringValue_URI_( int kind, NObjective.RuntimeObject localName, NObjective.RuntimeObject stringValue, NObjective.RuntimeObject URI ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKind_localName_stringValue_URI_( Handle, CachedSelectors.initWithKind_localName_stringValue_URI_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), kind, localName, stringValue, URI );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNamedNode( ___result );
		}
		unsafe public NSXMLNamedNode initWithKind_name_stringValue_( int kind, NObjective.RuntimeObject name, NObjective.RuntimeObject stringValue ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKind_name_stringValue_( Handle, CachedSelectors.initWithKind_name_stringValue_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), kind, name, stringValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNamedNode( ___result );
		}
		unsafe public NSXMLNamedNode initWithKind_name_stringValue_URI_( int kind, NObjective.RuntimeObject name, NObjective.RuntimeObject stringValue, NObjective.RuntimeObject URI ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKind_name_stringValue_URI_( Handle, CachedSelectors.initWithKind_name_stringValue_URI_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), kind, name, stringValue, URI );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNamedNode( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKind_localName_stringValue_URI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int kind, NObjective.RuntimeObject localName, NObjective.RuntimeObject stringValue, NObjective.RuntimeObject URI );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKind_name_stringValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int kind, NObjective.RuntimeObject name, NObjective.RuntimeObject stringValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKind_name_stringValue_URI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int kind, NObjective.RuntimeObject name, NObjective.RuntimeObject stringValue, NObjective.RuntimeObject URI );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithKind_localName_stringValue_URI_ = "initWithKind:localName:stringValue:URI:";
			public static readonly Selector initWithKind_name_stringValue_ = "initWithKind:name:stringValue:";
			public static readonly Selector initWithKind_name_stringValue_URI_ = "initWithKind:name:stringValue:URI:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSXMLNode : IEquatable<NSXMLNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLNode;
		public static implicit operator IntPtr( NSXMLNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLNode value1, NSXMLNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLNode value1, NSXMLNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLNode alloc() {
			return new NSXMLNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject attributeWithLocalName_URI_stringValue_( NObjective.RuntimeObject name, NObjective.RuntimeObject URI, NObjective.RuntimeObject stringValue ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributeWithLocalName_URI_stringValue_( ClassHandle, CachedSelectors.attributeWithLocalName_URI_stringValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, URI, stringValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject attributeWithName_stringValue_( string name, string stringValue ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedstringValue = Runtime.CreateStringProxy( stringValue );
			var ___result = NativeMethods.attributeWithName_stringValue_( ClassHandle, CachedSelectors.attributeWithName_stringValue_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedstringValue );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedstringValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject attributeWithName_URI_stringValue_( string name, string URI, string stringValue ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedURI = Runtime.CreateStringProxy( URI );
			var ___wrappedstringValue = Runtime.CreateStringProxy( stringValue );
			var ___result = NativeMethods.attributeWithName_URI_stringValue_( ClassHandle, CachedSelectors.attributeWithName_URI_stringValue_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedURI, ___wrappedstringValue );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedURI );
			Runtime.ReleaseNativeObject( ___wrappedstringValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject commentWithStringValue_( string value ) {
			RuntimeObject ___occuredException;
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			var ___result = NativeMethods.commentWithStringValue_( ClassHandle, CachedSelectors.commentWithStringValue_, out ___occuredException, sizeof( IntPtr ), ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject document() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.document( ClassHandle, CachedSelectors.document, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject documentWithContentsOfURL_options_error_( NObjective.RuntimeObject url, uint options, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentWithContentsOfURL_options_error_( ClassHandle, CachedSelectors.documentWithContentsOfURL_options_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( System.IntPtr ), url, options, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject documentWithRootElement_( NSXMLElement element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentWithRootElement_( ClassHandle, CachedSelectors.documentWithRootElement_, out ___occuredException, sizeof( NSXMLElement ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject DTDNodeWithXMLString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.DTDNodeWithXMLString_( ClassHandle, CachedSelectors.DTDNodeWithXMLString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject elementWithLocalName_URI_( NObjective.RuntimeObject name, NObjective.RuntimeObject URI ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementWithLocalName_URI_( ClassHandle, CachedSelectors.elementWithLocalName_URI_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, URI );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject elementWithName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.elementWithName_( ClassHandle, CachedSelectors.elementWithName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject elementWithName_children_attributes_( string name, NSArray children, NSArray attributes ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.elementWithName_children_attributes_( ClassHandle, CachedSelectors.elementWithName_children_attributes_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSArray ) + sizeof( NSArray ), ___wrappedname, children, attributes );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject elementWithName_stringValue_( string name, string stringValue ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedstringValue = Runtime.CreateStringProxy( stringValue );
			var ___result = NativeMethods.elementWithName_stringValue_( ClassHandle, CachedSelectors.elementWithName_stringValue_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedstringValue );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedstringValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject elementWithName_URI_( string name, string URI ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedURI = Runtime.CreateStringProxy( URI );
			var ___result = NativeMethods.elementWithName_URI_( ClassHandle, CachedSelectors.elementWithName_URI_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedURI );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedURI );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static string localNameForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.localNameForName_( ClassHandle, CachedSelectors.localNameForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static NObjective.RuntimeObject namespaceWithName_stringValue_( string name, string stringValue ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedstringValue = Runtime.CreateStringProxy( stringValue );
			var ___result = NativeMethods.namespaceWithName_stringValue_( ClassHandle, CachedSelectors.namespaceWithName_stringValue_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedstringValue );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedstringValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSXMLNode predefinedNamespaceForPrefix_( string prefix ) {
			RuntimeObject ___occuredException;
			var ___wrappedprefix = Runtime.CreateStringProxy( prefix );
			var ___result = NativeMethods.predefinedNamespaceForPrefix_( ClassHandle, CachedSelectors.predefinedNamespaceForPrefix_, out ___occuredException, sizeof( IntPtr ), ___wrappedprefix );
			Runtime.ReleaseNativeObject( ___wrappedprefix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public static string prefixForName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.prefixForName_( ClassHandle, CachedSelectors.prefixForName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static NObjective.RuntimeObject processingInstructionWithName_stringValue_( string name, string stringValue ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___wrappedstringValue = Runtime.CreateStringProxy( stringValue );
			var ___result = NativeMethods.processingInstructionWithName_stringValue_( ClassHandle, CachedSelectors.processingInstructionWithName_stringValue_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedname, ___wrappedstringValue );
			Runtime.ReleaseNativeObject( ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedstringValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject textWithStringValue_( string value ) {
			RuntimeObject ___occuredException;
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			var ___result = NativeMethods.textWithStringValue_( ClassHandle, CachedSelectors.textWithStringValue_, out ___occuredException, sizeof( IntPtr ), ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string canonicalXMLStringPreservingComments_( bool comments ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canonicalXMLStringPreservingComments_( Handle, CachedSelectors.canonicalXMLStringPreservingComments_, out ___occuredException, sizeof( bool ), comments );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSXMLNode childAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childAtIndex_( Handle, CachedSelectors.childAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public uint childCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childCount( Handle, CachedSelectors.childCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSArray children() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.children( Handle, CachedSelectors.children, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void detach() {
			RuntimeObject ___occuredException;
			NativeMethods.detach( Handle, CachedSelectors.detach, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint index() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.index( Handle, CachedSelectors.index, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSXMLNode initWithKind_( NSXMLNodeKind kind ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKind_( Handle, CachedSelectors.initWithKind_, out ___occuredException, sizeof( NSXMLNodeKind ), kind );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public NSXMLNode initWithKind_options_( NSXMLNodeKind kind, uint options ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithKind_options_( Handle, CachedSelectors.initWithKind_options_, out ___occuredException, sizeof( NSXMLNodeKind ) + sizeof( uint ), kind, options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public NSXMLNodeKind kind() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.kind( Handle, CachedSelectors.kind, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSXMLNodeKind ) ___result;
		}
		unsafe public uint level() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.level( Handle, CachedSelectors.level, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string localName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localName( Handle, CachedSelectors.localName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSXMLNode nextNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextNode( Handle, CachedSelectors.nextNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public NSXMLNode nextSibling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextSibling( Handle, CachedSelectors.nextSibling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public NSArray nodesForXPath_error_( string path, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedpath = Runtime.CreateStringProxy( path );
			var ___result = NativeMethods.nodesForXPath_error_( Handle, CachedSelectors.nodesForXPath_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedpath, ref error );
			Runtime.ReleaseNativeObject( ___wrappedpath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray objectsForXQuery_constants_error_( string query, NSDictionary constants, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedquery = Runtime.CreateStringProxy( query );
			var ___result = NativeMethods.objectsForXQuery_constants_error_( Handle, CachedSelectors.objectsForXQuery_constants_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSDictionary ) + sizeof( IntPtr ), ___wrappedquery, constants, ref error );
			Runtime.ReleaseNativeObject( ___wrappedquery );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray objectsForXQuery_error_( string query, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___wrappedquery = Runtime.CreateStringProxy( query );
			var ___result = NativeMethods.objectsForXQuery_error_( Handle, CachedSelectors.objectsForXQuery_error_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ), ___wrappedquery, ref error );
			Runtime.ReleaseNativeObject( ___wrappedquery );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject objectValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectValue( Handle, CachedSelectors.objectValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSXMLNode parent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parent( Handle, CachedSelectors.parent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public string prefix() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.prefix( Handle, CachedSelectors.prefix, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSXMLNode previousNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousNode( Handle, CachedSelectors.previousNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public NSXMLNode previousSibling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.previousSibling( Handle, CachedSelectors.previousSibling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLNode( ___result );
		}
		unsafe public NSXMLDocument rootDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rootDocument( Handle, CachedSelectors.rootDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLDocument( ___result );
		}
		unsafe public void setName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObjectValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObjectValue_( Handle, CachedSelectors.setObjectValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStringValue_( string value ) {
			RuntimeObject ___occuredException;
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			NativeMethods.setStringValue_( Handle, CachedSelectors.setStringValue_, out ___occuredException, sizeof( IntPtr ), ___wrappedvalue );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStringValue_resolvingEntities_( string value, bool resolvingEntities ) {
			RuntimeObject ___occuredException;
			var ___wrappedvalue = Runtime.CreateStringProxy( value );
			NativeMethods.setStringValue_resolvingEntities_( Handle, CachedSelectors.setStringValue_resolvingEntities_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ), ___wrappedvalue, resolvingEntities );
			Runtime.ReleaseNativeObject( ___wrappedvalue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setURI_( string uri ) {
			RuntimeObject ___occuredException;
			var ___wrappeduri = Runtime.CreateStringProxy( uri );
			NativeMethods.setURI_( Handle, CachedSelectors.setURI_, out ___occuredException, sizeof( IntPtr ), ___wrappeduri );
			Runtime.ReleaseNativeObject( ___wrappeduri );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string stringValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringValue( Handle, CachedSelectors.stringValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string URI() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URI( Handle, CachedSelectors.URI, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject XMLData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.XMLData( Handle, CachedSelectors.XMLData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string XMLString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.XMLString( Handle, CachedSelectors.XMLString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string XMLStringWithOptions_( uint options ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.XMLStringWithOptions_( Handle, CachedSelectors.XMLStringWithOptions_, out ___occuredException, sizeof( uint ), options );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string XPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.XPath( Handle, CachedSelectors.XPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributeWithLocalName_URI_stringValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject URI, NObjective.RuntimeObject stringValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributeWithName_stringValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr stringValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributeWithName_URI_stringValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr URI, IntPtr stringValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr canonicalXMLStringPreservingComments_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool comments );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr childAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint childCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr children( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr commentWithStringValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detach( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr document( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr documentWithContentsOfURL_options_error_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, uint options, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr documentWithRootElement_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLElement element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr DTDNodeWithXMLString_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementWithLocalName_URI_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject URI );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementWithName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementWithName_children_attributes_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, NSArray children, NSArray attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementWithName_stringValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr stringValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementWithName_URI_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr URI );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint index( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKind_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNodeKind kind );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithKind_options_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSXMLNodeKind kind, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int kind( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint level( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localNameForName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr namespaceWithName_stringValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr stringValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextSibling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nodesForXPath_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr path, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectsForXQuery_constants_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr query, NSDictionary constants, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectsForXQuery_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr query, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr predefinedNamespaceForPrefix_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr prefix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr prefix( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr prefixForName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr previousNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr previousSibling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr processingInstructionWithName_stringValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, IntPtr stringValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rootDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObjectValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStringValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStringValue_resolvingEntities_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value, bool resolvingEntities );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setURI_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr uri );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textWithStringValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URI( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr XMLData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr XMLString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr XMLStringWithOptions_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint options );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr XPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attributeWithLocalName_URI_stringValue_ = "attributeWithLocalName:URI:stringValue:";
			public static readonly Selector attributeWithName_stringValue_ = "attributeWithName:stringValue:";
			public static readonly Selector attributeWithName_URI_stringValue_ = "attributeWithName:URI:stringValue:";
			public static readonly Selector canonicalXMLStringPreservingComments_ = "canonicalXMLStringPreservingComments:";
			public static readonly Selector childAtIndex_ = "childAtIndex:";
			public static readonly Selector childCount = "childCount";
			public static readonly Selector children = "children";
			public static readonly Selector commentWithStringValue_ = "commentWithStringValue:";
			public static readonly Selector detach = "detach";
			public static readonly Selector document = "document";
			public static readonly Selector documentWithContentsOfURL_options_error_ = "documentWithContentsOfURL:options:error:";
			public static readonly Selector documentWithRootElement_ = "documentWithRootElement:";
			public static readonly Selector DTDNodeWithXMLString_ = "DTDNodeWithXMLString:";
			public static readonly Selector elementWithLocalName_URI_ = "elementWithLocalName:URI:";
			public static readonly Selector elementWithName_ = "elementWithName:";
			public static readonly Selector elementWithName_children_attributes_ = "elementWithName:children:attributes:";
			public static readonly Selector elementWithName_stringValue_ = "elementWithName:stringValue:";
			public static readonly Selector elementWithName_URI_ = "elementWithName:URI:";
			public static readonly Selector index = "index";
			public static readonly Selector initWithKind_ = "initWithKind:";
			public static readonly Selector initWithKind_options_ = "initWithKind:options:";
			public static readonly Selector kind = "kind";
			public static readonly Selector level = "level";
			public static readonly Selector localName = "localName";
			public static readonly Selector localNameForName_ = "localNameForName:";
			public static readonly Selector name = "name";
			public static readonly Selector namespaceWithName_stringValue_ = "namespaceWithName:stringValue:";
			public static readonly Selector nextNode = "nextNode";
			public static readonly Selector nextSibling = "nextSibling";
			public static readonly Selector nodesForXPath_error_ = "nodesForXPath:error:";
			public static readonly Selector objectsForXQuery_constants_error_ = "objectsForXQuery:constants:error:";
			public static readonly Selector objectsForXQuery_error_ = "objectsForXQuery:error:";
			public static readonly Selector objectValue = "objectValue";
			public static readonly Selector parent = "parent";
			public static readonly Selector predefinedNamespaceForPrefix_ = "predefinedNamespaceForPrefix:";
			public static readonly Selector prefix = "prefix";
			public static readonly Selector prefixForName_ = "prefixForName:";
			public static readonly Selector previousNode = "previousNode";
			public static readonly Selector previousSibling = "previousSibling";
			public static readonly Selector processingInstructionWithName_stringValue_ = "processingInstructionWithName:stringValue:";
			public static readonly Selector rootDocument = "rootDocument";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setObjectValue_ = "setObjectValue:";
			public static readonly Selector setStringValue_ = "setStringValue:";
			public static readonly Selector setStringValue_resolvingEntities_ = "setStringValue:resolvingEntities:";
			public static readonly Selector setURI_ = "setURI:";
			public static readonly Selector stringValue = "stringValue";
			public static readonly Selector textWithStringValue_ = "textWithStringValue:";
			public static readonly Selector URI = "URI";
			public static readonly Selector XMLData = "XMLData";
			public static readonly Selector XMLString = "XMLString";
			public static readonly Selector XMLStringWithOptions_ = "XMLStringWithOptions:";
			public static readonly Selector XPath = "XPath";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSValueTransformer ) )]
	public struct NSXMLNSArrayTransformerName : IEquatable<NSXMLNSArrayTransformerName> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLNSArrayTransformerName;
		public static implicit operator IntPtr( NSXMLNSArrayTransformerName value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLNSArrayTransformerName value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLNSArrayTransformerName?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLNSArrayTransformerName value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLNSArrayTransformerName value1, NSXMLNSArrayTransformerName value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLNSArrayTransformerName value1, NSXMLNSArrayTransformerName value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLNSArrayTransformerName( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLNSArrayTransformerName alloc() {
			return new NSXMLNSArrayTransformerName( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSValueTransformer ) )]
	public struct NSXMLNSCalendarDateTransformerName : IEquatable<NSXMLNSCalendarDateTransformerName> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLNSCalendarDateTransformerName;
		public static implicit operator IntPtr( NSXMLNSCalendarDateTransformerName value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLNSCalendarDateTransformerName value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLNSCalendarDateTransformerName?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLNSCalendarDateTransformerName value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLNSCalendarDateTransformerName value1, NSXMLNSCalendarDateTransformerName value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLNSCalendarDateTransformerName value1, NSXMLNSCalendarDateTransformerName value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLNSCalendarDateTransformerName( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLNSCalendarDateTransformerName alloc() {
			return new NSXMLNSCalendarDateTransformerName( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSValueTransformer ) )]
	public struct NSXMLNSDataTransformerName : IEquatable<NSXMLNSDataTransformerName> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLNSDataTransformerName;
		public static implicit operator IntPtr( NSXMLNSDataTransformerName value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLNSDataTransformerName value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLNSDataTransformerName?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLNSDataTransformerName value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLNSDataTransformerName value1, NSXMLNSDataTransformerName value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLNSDataTransformerName value1, NSXMLNSDataTransformerName value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLNSDataTransformerName( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLNSDataTransformerName alloc() {
			return new NSXMLNSDataTransformerName( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSValueTransformer ) )]
	public struct NSXMLNSNumberTransformerName : IEquatable<NSXMLNSNumberTransformerName> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLNSNumberTransformerName;
		public static implicit operator IntPtr( NSXMLNSNumberTransformerName value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLNSNumberTransformerName value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLNSNumberTransformerName?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLNSNumberTransformerName value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLNSNumberTransformerName value1, NSXMLNSNumberTransformerName value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLNSNumberTransformerName value1, NSXMLNSNumberTransformerName value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLNSNumberTransformerName( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLNSNumberTransformerName alloc() {
			return new NSXMLNSNumberTransformerName( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSValueTransformer ) )]
	public struct NSXMLNSURLTransformerName : IEquatable<NSXMLNSURLTransformerName> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLNSURLTransformerName;
		public static implicit operator IntPtr( NSXMLNSURLTransformerName value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLNSURLTransformerName value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLNSURLTransformerName?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLNSURLTransformerName value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLNSURLTransformerName value1, NSXMLNSURLTransformerName value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLNSURLTransformerName value1, NSXMLNSURLTransformerName value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLNSURLTransformerName( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLNSURLTransformerName alloc() {
			return new NSXMLNSURLTransformerName( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSXMLParser : IEquatable<NSXMLParser> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLParser;
		public static implicit operator IntPtr( NSXMLParser value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLParser value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLParser?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLParser value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLParser value1, NSXMLParser value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLParser value1, NSXMLParser value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLParser( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLParser alloc() {
			return new NSXMLParser( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void abortParsing() {
			RuntimeObject ___occuredException;
			NativeMethods.abortParsing( Handle, CachedSelectors.abortParsing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int columnNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.columnNumber( Handle, CachedSelectors.columnNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSXMLParser initWithContentsOfURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_( Handle, CachedSelectors.initWithContentsOfURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLParser( ___result );
		}
		unsafe public NSXMLParser initWithData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_( Handle, CachedSelectors.initWithData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLParser( ___result );
		}
		unsafe public int lineNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lineNumber( Handle, CachedSelectors.lineNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool parse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parse( Handle, CachedSelectors.parse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSError parserError() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parserError( Handle, CachedSelectors.parserError, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSError( ___result );
		}
		unsafe public string publicID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.publicID( Handle, CachedSelectors.publicID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldProcessNamespaces_( bool namespaces ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldProcessNamespaces_( Handle, CachedSelectors.setShouldProcessNamespaces_, out ___occuredException, sizeof( bool ), namespaces );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldReportNamespacePrefixes_( bool prefixes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldReportNamespacePrefixes_( Handle, CachedSelectors.setShouldReportNamespacePrefixes_, out ___occuredException, sizeof( bool ), prefixes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldResolveExternalEntities_( bool entities ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldResolveExternalEntities_( Handle, CachedSelectors.setShouldResolveExternalEntities_, out ___occuredException, sizeof( bool ), entities );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldProcessNamespaces() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldProcessNamespaces( Handle, CachedSelectors.shouldProcessNamespaces, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool shouldReportNamespacePrefixes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldReportNamespacePrefixes( Handle, CachedSelectors.shouldReportNamespacePrefixes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool shouldResolveExternalEntities() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldResolveExternalEntities( Handle, CachedSelectors.shouldResolveExternalEntities, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string systemID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.systemID( Handle, CachedSelectors.systemID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void abortParsing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int columnNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int lineNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool parse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parserError( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr publicID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldProcessNamespaces_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool namespaces );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldReportNamespacePrefixes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool prefixes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldResolveExternalEntities_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool entities );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldProcessNamespaces( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldReportNamespacePrefixes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldResolveExternalEntities( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr systemID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector abortParsing = "abortParsing";
			public static readonly Selector columnNumber = "columnNumber";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector initWithContentsOfURL_ = "initWithContentsOfURL:";
			public static readonly Selector initWithData_ = "initWithData:";
			public static readonly Selector lineNumber = "lineNumber";
			public static readonly Selector parse = "parse";
			public static readonly Selector parserError = "parserError";
			public static readonly Selector publicID = "publicID";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setShouldProcessNamespaces_ = "setShouldProcessNamespaces:";
			public static readonly Selector setShouldReportNamespacePrefixes_ = "setShouldReportNamespacePrefixes:";
			public static readonly Selector setShouldResolveExternalEntities_ = "setShouldResolveExternalEntities:";
			public static readonly Selector shouldProcessNamespaces = "shouldProcessNamespaces";
			public static readonly Selector shouldReportNamespacePrefixes = "shouldReportNamespacePrefixes";
			public static readonly Selector shouldResolveExternalEntities = "shouldResolveExternalEntities";
			public static readonly Selector systemID = "systemID";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSXMLSAXParser : IEquatable<NSXMLSAXParser> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLSAXParser;
		public static implicit operator IntPtr( NSXMLSAXParser value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLSAXParser value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLSAXParser?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLSAXParser value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLSAXParser value1, NSXMLSAXParser value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLSAXParser value1, NSXMLSAXParser value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLSAXParser( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLSAXParser alloc() {
			return new NSXMLSAXParser( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char afterEntityLookup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.afterEntityLookup( Handle, CachedSelectors.afterEntityLookup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject content() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.content( Handle, CachedSelectors.content, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject current() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.current( Handle, CachedSelectors.current, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint fidelityMask() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fidelityMask( Handle, CachedSelectors.fidelityMask, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NSXMLSAXParser initWithContentsOfURL_options_error_( NObjective.RuntimeObject url, uint options, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithContentsOfURL_options_error_( Handle, CachedSelectors.initWithContentsOfURL_options_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( System.IntPtr ), url, options, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLSAXParser( ___result );
		}
		unsafe public NSXMLSAXParser initWithData_isSingleDTDNode_options_error_( NObjective.RuntimeObject data, char isSingleDTDNode, uint options, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_isSingleDTDNode_options_error_( Handle, CachedSelectors.initWithData_isSingleDTDNode_options_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( uint ) + sizeof( System.IntPtr ), data, isSingleDTDNode, options, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLSAXParser( ___result );
		}
		unsafe public NSXMLSAXParser initWithData_options_error_( NObjective.RuntimeObject data, uint options, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_options_error_( Handle, CachedSelectors.initWithData_options_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( System.IntPtr ), data, options, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLSAXParser( ___result );
		}
		unsafe public bool isSingleDTDNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSingleDTDNode( Handle, CachedSelectors.isSingleDTDNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject parse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parse( Handle, CachedSelectors.parse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject root() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.root( Handle, CachedSelectors.root, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAfterEntityLookup_( char lookup ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAfterEntityLookup_( Handle, CachedSelectors.setAfterEntityLookup_, out ___occuredException, sizeof( char ), lookup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setContent_( NObjective.RuntimeObject content ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContent_( Handle, CachedSelectors.setContent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), content );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCurrent_( NObjective.RuntimeObject current ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCurrent_( Handle, CachedSelectors.setCurrent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), current );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setError_info_fatal_( int error, NObjective.RuntimeObject info, char fatal ) {
			RuntimeObject ___occuredException;
			NativeMethods.setError_info_fatal_( Handle, CachedSelectors.setError_info_fatal_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), error, info, fatal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRoot_( NObjective.RuntimeObject root ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRoot_( Handle, CachedSelectors.setRoot_, out ___occuredException, sizeof( NObjective.RuntimeObject ), root );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWhitespace_( NObjective.RuntimeObject whitespace ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWhitespace_( Handle, CachedSelectors.setWhitespace_, out ___occuredException, sizeof( NObjective.RuntimeObject ), whitespace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject whitespace() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.whitespace( Handle, CachedSelectors.whitespace, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char afterEntityLookup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr content( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr current( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint fidelityMask( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithContentsOfURL_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, uint options, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_isSingleDTDNode_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, char isSingleDTDNode, uint options, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, uint options, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSingleDTDNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr root( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAfterEntityLookup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char lookup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject content );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject current );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setError_info_fatal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int error, NObjective.RuntimeObject info, char fatal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRoot_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject root );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWhitespace_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject whitespace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr whitespace( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector afterEntityLookup = "afterEntityLookup";
			public static readonly Selector content = "content";
			public static readonly Selector current = "current";
			public static readonly Selector fidelityMask = "fidelityMask";
			public static readonly Selector initWithContentsOfURL_options_error_ = "initWithContentsOfURL:options:error:";
			public static readonly Selector initWithData_isSingleDTDNode_options_error_ = "initWithData:isSingleDTDNode:options:error:";
			public static readonly Selector initWithData_options_error_ = "initWithData:options:error:";
			public static readonly Selector isSingleDTDNode = "isSingleDTDNode";
			public static readonly Selector parse = "parse";
			public static readonly Selector root = "root";
			public static readonly Selector setAfterEntityLookup_ = "setAfterEntityLookup:";
			public static readonly Selector setContent_ = "setContent:";
			public static readonly Selector setCurrent_ = "setCurrent:";
			public static readonly Selector setError_info_fatal_ = "setError:info:fatal:";
			public static readonly Selector setRoot_ = "setRoot:";
			public static readonly Selector setWhitespace_ = "setWhitespace:";
			public static readonly Selector whitespace = "whitespace";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSXMLSchemaType : IEquatable<NSXMLSchemaType> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLSchemaType;
		public static implicit operator IntPtr( NSXMLSchemaType value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLSchemaType value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLSchemaType?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLSchemaType value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLSchemaType value1, NSXMLSchemaType value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLSchemaType value1, NSXMLSchemaType value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLSchemaType( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLSchemaType alloc() {
			return new NSXMLSchemaType( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject stringValueForObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringValueForObject_( ClassHandle, CachedSelectors.stringValueForObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringValueForObject_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector stringValueForObject_ = "stringValueForObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSXMLTidy : IEquatable<NSXMLTidy> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLTidy;
		public static implicit operator IntPtr( NSXMLTidy value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLTidy value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLTidy?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLTidy value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLTidy value1, NSXMLTidy value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLTidy value1, NSXMLTidy value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLTidy( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLTidy alloc() {
			return new NSXMLTidy( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static bool isLoaded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLoaded( ClassHandle, CachedSelectors.isLoaded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void loadTidy() {
			RuntimeObject ___occuredException;
			NativeMethods.loadTidy( ClassHandle, CachedSelectors.loadTidy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLoaded( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadTidy( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector isLoaded = "isLoaded";
			public static readonly Selector loadTidy = "loadTidy";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSXMLTreeReader : IEquatable<NSXMLTreeReader> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = FoundationCachedClasses.NSXMLTreeReader;
		public static implicit operator IntPtr( NSXMLTreeReader value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSXMLTreeReader value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSXMLTreeReader?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSXMLTreeReader value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSXMLTreeReader value1, NSXMLTreeReader value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSXMLTreeReader value1, NSXMLTreeReader value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSXMLTreeReader( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSXMLTreeReader alloc() {
			return new NSXMLTreeReader( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject DTDString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.DTDString( Handle, CachedSelectors.DTDString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSXMLTreeReader initWithData_documentClass_isSingleDTDNode_options_error_( NObjective.RuntimeObject data, NObjective.RuntimeClass documentClass, char isSingleDTDNode, uint options, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_documentClass_isSingleDTDNode_options_error_( Handle, CachedSelectors.initWithData_documentClass_isSingleDTDNode_options_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ) + sizeof( char ) + sizeof( uint ) + sizeof( System.IntPtr ), data, documentClass, isSingleDTDNode, options, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLTreeReader( ___result );
		}
		unsafe public NSXMLTreeReader initWithData_documentClass_options_error_( NObjective.RuntimeObject data, NObjective.RuntimeClass documentClass, uint options, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_documentClass_options_error_( Handle, CachedSelectors.initWithData_documentClass_options_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeClass ) + sizeof( uint ) + sizeof( System.IntPtr ), data, documentClass, options, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSXMLTreeReader( ___result );
		}
		unsafe public NObjective.RuntimeObject parse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parse( Handle, CachedSelectors.parse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject root() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.root( Handle, CachedSelectors.root, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setContent_( NObjective.RuntimeObject content ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContent_( Handle, CachedSelectors.setContent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), content );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCurrent_( NObjective.RuntimeObject current ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCurrent_( Handle, CachedSelectors.setCurrent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), current );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setError_info_fatal_( int error, NObjective.RuntimeObject info, char fatal ) {
			RuntimeObject ___occuredException;
			NativeMethods.setError_info_fatal_( Handle, CachedSelectors.setError_info_fatal_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), error, info, fatal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRoot_( NObjective.RuntimeObject root ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRoot_( Handle, CachedSelectors.setRoot_, out ___occuredException, sizeof( NObjective.RuntimeObject ), root );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr DTDString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_documentClass_isSingleDTDNode_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, NObjective.RuntimeClass documentClass, char isSingleDTDNode, uint options, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_documentClass_options_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, NObjective.RuntimeClass documentClass, uint options, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr root( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject content );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject current );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setError_info_fatal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int error, NObjective.RuntimeObject info, char fatal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRoot_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject root );
		}
		static internal class CachedSelectors {
			public static readonly Selector DTDString = "DTDString";
			public static readonly Selector initWithData_documentClass_isSingleDTDNode_options_error_ = "initWithData:documentClass:isSingleDTDNode:options:error:";
			public static readonly Selector initWithData_documentClass_options_error_ = "initWithData:documentClass:options:error:";
			public static readonly Selector parse = "parse";
			public static readonly Selector root = "root";
			public static readonly Selector setContent_ = "setContent:";
			public static readonly Selector setCurrent_ = "setCurrent:";
			public static readonly Selector setError_info_fatal_ = "setError:info:fatal:";
			public static readonly Selector setRoot_ = "setRoot:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class FoundationExtensionsOfObject {
		private static int ___lazyLoad = FoundationCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject __autorelease() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__autorelease( Object.ClassHandle, CachedSelectors.__autorelease, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeClass classForKeyedUnarchiver() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForKeyedUnarchiver( Object.ClassHandle, CachedSelectors.classForKeyedUnarchiver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char instancesRespondToSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.instancesRespondToSelector_( Object.ClassHandle, CachedSelectors.instancesRespondToSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void poseAsClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			NativeMethods.poseAsClass_( Object.ClassHandle, CachedSelectors.poseAsClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void __release() {
			RuntimeObject ___occuredException;
			NativeMethods.__release( Object.ClassHandle, CachedSelectors.__release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject __retain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__retain( Object.ClassHandle, CachedSelectors.__retain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint __retainCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.__retainCount( Object.ClassHandle, CachedSelectors.__retainCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static NObjective.RuntimeObject autorelease( this NObjective.Proxies.Object ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autorelease( ___this, CachedSelectors.autorelease, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject awakeAfterUsingCoder_( this NObjective.Proxies.Object ___this, NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.awakeAfterUsingCoder_( ___this, CachedSelectors.awakeAfterUsingCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeClass classForArchiver( this NObjective.Proxies.Object ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForArchiver( ___this, CachedSelectors.classForArchiver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeClass classForCoder( this NObjective.Proxies.Object ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForCoder( ___this, CachedSelectors.classForCoder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeClass classForKeyedArchiver( this NObjective.Proxies.Object ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.classForKeyedArchiver( ___this, CachedSelectors.classForKeyedArchiver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char conformsToProtocol_( this NObjective.Proxies.Object ___this, NObjective.RuntimeObject protocol ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conformsToProtocol_( ___this, CachedSelectors.conformsToProtocol_, out ___occuredException, sizeof( NObjective.RuntimeObject ), protocol );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static string description( this NObjective.Proxies.Object ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.description( ___this, CachedSelectors.description, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static void doesNotRecognizeSelector_( this NObjective.Proxies.Object ___this, NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.doesNotRecognizeSelector_( ___this, CachedSelectors.doesNotRecognizeSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void encodeWithCoder_( this NObjective.Proxies.Object ___this, NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( ___this, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject initWithCoder_( this NObjective.Proxies.Object ___this, NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( ___this, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static bool isKindOfClass_( this NObjective.Proxies.Object ___this, NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isKindOfClass_( ___this, CachedSelectors.isKindOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isMemberOfClass_( this NObjective.Proxies.Object ___this, NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMemberOfClass_( ___this, CachedSelectors.isMemberOfClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject perform_withObject_( this NObjective.Proxies.Object ___this, NObjective.Selector perform, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.perform_withObject_( ___this, CachedSelectors.perform_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), perform, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject perform_withObject_withObject_( this NObjective.Proxies.Object ___this, NObjective.Selector perform, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.perform_withObject_withObject_( ___this, CachedSelectors.perform_withObject_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), perform, withObject, withObject2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject performSelector_withObject_( this NObjective.Proxies.Object ___this, NObjective.Selector selector, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performSelector_withObject_( ___this, CachedSelectors.performSelector_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject performSelector_withObject_withObject_( this NObjective.Proxies.Object ___this, NObjective.Selector selector, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performSelector_withObject_withObject_( ___this, CachedSelectors.performSelector_withObject_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), selector, withObject, withObject2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void release( this NObjective.Proxies.Object ___this ) {
			RuntimeObject ___occuredException;
			NativeMethods.release( ___this, CachedSelectors.release, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject replacementObjectForArchiver_( this NObjective.Proxies.Object ___this, NObjective.RuntimeObject archiver ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementObjectForArchiver_( ___this, CachedSelectors.replacementObjectForArchiver_, out ___occuredException, sizeof( NObjective.RuntimeObject ), archiver );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject replacementObjectForCoder_( this NObjective.Proxies.Object ___this, NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementObjectForCoder_( ___this, CachedSelectors.replacementObjectForCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject replacementObjectForKeyedArchiver_( this NObjective.Proxies.Object ___this, NObjective.RuntimeObject archiver ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replacementObjectForKeyedArchiver_( ___this, CachedSelectors.replacementObjectForKeyedArchiver_, out ___occuredException, sizeof( NObjective.RuntimeObject ), archiver );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char respondsToSelector_( this NObjective.Proxies.Object ___this, NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.respondsToSelector_( ___this, CachedSelectors.respondsToSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject retain( this NObjective.Proxies.Object ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.retain( ___this, CachedSelectors.retain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint retainCount( this NObjective.Proxies.Object ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.retainCount( ___this, CachedSelectors.retainCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __autorelease( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void __release( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr __retain( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint __retainCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr autorelease( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr awakeAfterUsingCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForArchiver( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForCoder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForKeyedArchiver( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass classForKeyedUnarchiver( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char conformsToProtocol_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr description( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doesNotRecognizeSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char instancesRespondToSelector_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isKindOfClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isMemberOfClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr perform_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector perform, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr perform_withObject_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector perform, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr performSelector_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr performSelector_withObject_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withObject2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void poseAsClass_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void release( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replacementObjectForArchiver_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject archiver );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replacementObjectForCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr replacementObjectForKeyedArchiver_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject archiver );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char respondsToSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr retain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint retainCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector __autorelease = "__autorelease";
			public static readonly Selector __release = "__release";
			public static readonly Selector __retain = "__retain";
			public static readonly Selector __retainCount = "__retainCount";
			public static readonly Selector autorelease = "autorelease";
			public static readonly Selector awakeAfterUsingCoder_ = "awakeAfterUsingCoder:";
			public static readonly Selector classForArchiver = "classForArchiver";
			public static readonly Selector classForCoder = "classForCoder";
			public static readonly Selector classForKeyedArchiver = "classForKeyedArchiver";
			public static readonly Selector classForKeyedUnarchiver = "classForKeyedUnarchiver";
			public static readonly Selector conformsToProtocol_ = "conformsToProtocol:";
			public static readonly Selector description = "description";
			public static readonly Selector doesNotRecognizeSelector_ = "doesNotRecognizeSelector:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector instancesRespondToSelector_ = "instancesRespondToSelector:";
			public static readonly Selector isKindOfClass_ = "isKindOfClass:";
			public static readonly Selector isMemberOfClass_ = "isMemberOfClass:";
			public static readonly Selector perform_withObject_ = "perform:withObject:";
			public static readonly Selector perform_withObject_withObject_ = "perform:withObject:withObject:";
			public static readonly Selector performSelector_withObject_ = "performSelector:withObject:";
			public static readonly Selector performSelector_withObject_withObject_ = "performSelector:withObject:withObject:";
			public static readonly Selector poseAsClass_ = "poseAsClass:";
			public static readonly Selector release = "release";
			public static readonly Selector replacementObjectForArchiver_ = "replacementObjectForArchiver:";
			public static readonly Selector replacementObjectForCoder_ = "replacementObjectForCoder:";
			public static readonly Selector replacementObjectForKeyedArchiver_ = "replacementObjectForKeyedArchiver:";
			public static readonly Selector respondsToSelector_ = "respondsToSelector:";
			public static readonly Selector retain = "retain";
			public static readonly Selector retainCount = "retainCount";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class FoundationExtensionsOfProtocol {
		private static int ___lazyLoad = FoundationCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject detailedDescription( this Protocol ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.detailedDescription( ___this, CachedSelectors.detailedDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr detailedDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector detailedDescription = "detailedDescription";
		}
	}
	static internal class FoundationCachedClasses {
		static internal int ___lazyLoad = Platform.NativeMethods.dlopen( "/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation" );
		public static readonly RuntimeClass _NSCFArray = "%NSCFArray";
		public static readonly RuntimeClass _NSCFAttributedString = "%NSCFAttributedString";
		public static readonly RuntimeClass _NSCFBoolean = "%NSCFBoolean";
		public static readonly RuntimeClass _NSCFCalendar = "%NSCFCalendar";
		public static readonly RuntimeClass _NSCFCharacterSet = "%NSCFCharacterSet";
		public static readonly RuntimeClass _NSCFData = "%NSCFData";
		public static readonly RuntimeClass _NSCFDate = "%NSCFDate";
		public static readonly RuntimeClass _NSCFDictionary = "%NSCFDictionary";
		public static readonly RuntimeClass _NSCFInputStream = "%NSCFInputStream";
		public static readonly RuntimeClass _NSCFLocale = "%NSCFLocale";
		public static readonly RuntimeClass _NSCFNumber = "%NSCFNumber";
		public static readonly RuntimeClass _NSCFOutputStream = "%NSCFOutputStream";
		public static readonly RuntimeClass _NSCFSet = "%NSCFSet";
		public static readonly RuntimeClass _NSCFString = "%NSCFString";
		public static readonly RuntimeClass _NSCFTimer = "%NSCFTimer";
		public static readonly RuntimeClass _NSCFTimeZone = "%NSCFTimeZone";
		public static readonly RuntimeClass _NSCFType = "%NSCFType";
		public static readonly RuntimeClass _NSMachPort = "%NSMachPort";
		public static readonly RuntimeClass _NSNull = "%NSNull";
		public static readonly RuntimeClass _NSURL = "%NSURL";
		public static readonly RuntimeClass _NSAECoercerData = "_NSAECoercerData";
		public static readonly RuntimeClass _NSAETranslatorData = "_NSAETranslatorData";
		public static readonly RuntimeClass _NSCDBinderMaps = "_NSCDBinderMaps";
		public static readonly RuntimeClass _NSClassToBinderMaps = "_NSClassToBinderMaps";
		public static readonly RuntimeClass _NSCreateCommandInstanceVariables = "_NSCreateCommandInstanceVariables";
		public static readonly RuntimeClass _NSHTTPBodyStreamWrapper = "_NSHTTPBodyStreamWrapper";
		public static readonly RuntimeClass _NSIndexPathUniqueTree = "_NSIndexPathUniqueTree";
		public static readonly RuntimeClass _NSIndexPathUniqueTreeNode = "_NSIndexPathUniqueTreeNode";
		public static readonly RuntimeClass _NSIndexSetEnumerator = "_NSIndexSetEnumerator";
		public static readonly RuntimeClass _NSIsNilTransformer = "_NSIsNilTransformer";
		public static readonly RuntimeClass _NSIsNotNilTransformer = "_NSIsNotNilTransformer";
		public static readonly RuntimeClass _NSKeyedCoderOldStyleArray = "_NSKeyedCoderOldStyleArray";
		public static readonly RuntimeClass _NSKeyForwardingGetBinding = "_NSKeyForwardingGetBinding";
		public static readonly RuntimeClass _NSKeyForwardingSetBinding = "_NSKeyForwardingSetBinding";
		public static readonly RuntimeClass _NSKVCPIvarGetBinding = "_NSKVCPIvarGetBinding";
		public static readonly RuntimeClass _NSKVCPIvarSetBinding = "_NSKVCPIvarSetBinding";
		public static readonly RuntimeClass _NSLocalNotificationCenter = "_NSLocalNotificationCenter";
		public static readonly RuntimeClass _NSMetadataQueryResultArray = "_NSMetadataQueryResultArray";
		public static readonly RuntimeClass _NSMetadataQueryResultGroupArray = "_NSMetadataQueryResultGroupArray";
		public static readonly RuntimeClass _NSMetadataQuerySortingPseudoItem = "_NSMetadataQuerySortingPseudoItem";
		public static readonly RuntimeClass _NSNegateBooleanTransformer = "_NSNegateBooleanTransformer";
		public static readonly RuntimeClass _NSNestedDictionary = "_NSNestedDictionary";
		public static readonly RuntimeClass _NSParserSyntaxNode = "_NSParserSyntaxNode";
		public static readonly RuntimeClass _NSPositionalSpecifierAdditionalIVars = "_NSPositionalSpecifierAdditionalIVars";
		public static readonly RuntimeClass _NSPredicateOperatorUtilities = "_NSPredicateOperatorUtilities";
		public static readonly RuntimeClass _NSPredicateUtilities = "_NSPredicateUtilities";
		public static readonly RuntimeClass _NSScriptClassDescriptionAdditionalInstanceVariables = "_NSScriptClassDescriptionAdditionalInstanceVariables";
		public static readonly RuntimeClass _NSScriptCommandAdditionalIVars = "_NSScriptCommandAdditionalIVars";
		public static readonly RuntimeClass _NSScriptCommandDescriptionAdditionalInstanceVariables = "_NSScriptCommandDescriptionAdditionalInstanceVariables";
		public static readonly RuntimeClass _NSSelectorGetBinding = "_NSSelectorGetBinding";
		public static readonly RuntimeClass _NSSelectorSetBinding = "_NSSelectorSetBinding";
		public static readonly RuntimeClass _NSSharedValueTransformer = "_NSSharedValueTransformer";
		public static readonly RuntimeClass _NSUnarchiveFromDataTransformer = "_NSUnarchiveFromDataTransformer";
		public static readonly RuntimeClass _NSUndoBeginMark = "_NSUndoBeginMark";
		public static readonly RuntimeClass _NSUndoEndMark = "_NSUndoEndMark";
		public static readonly RuntimeClass _NSUndoInvocation = "_NSUndoInvocation";
		public static readonly RuntimeClass _NSUndoLightInvocation = "_NSUndoLightInvocation";
		public static readonly RuntimeClass _NSUndoObject = "_NSUndoObject";
		public static readonly RuntimeClass _NSUndoStack = "_NSUndoStack";
		public static readonly RuntimeClass _NSXMLParserInfo = "_NSXMLParserInfo";
		public static readonly RuntimeClass _NSZombie = "_NSZombie";
		public static readonly RuntimeClass NSAboutURLProtocol = "NSAboutURLProtocol";
		public static readonly RuntimeClass NSAEDescriptorTranslator = "NSAEDescriptorTranslator";
		public static readonly RuntimeClass NSAffineTransform = "NSAffineTransform";
		public static readonly RuntimeClass NSAggregateExpression = "NSAggregateExpression";
		public static readonly RuntimeClass NSAllDescendantPathsEnumerator = "NSAllDescendantPathsEnumerator";
		public static readonly RuntimeClass NSAnyKeyExpression = "NSAnyKeyExpression";
		public static readonly RuntimeClass NSAppleEventDescriptor = "NSAppleEventDescriptor";
		public static readonly RuntimeClass NSAppleEventHandling = "NSAppleEventHandling";
		public static readonly RuntimeClass NSAppleEventManager = "NSAppleEventManager";
		public static readonly RuntimeClass NSAppleScript = "NSAppleScript";
		public static readonly RuntimeClass NSArchiver = "NSArchiver";
		public static readonly RuntimeClass NSArray = "NSArray";
		public static readonly RuntimeClass NSAssertionHandler = "NSAssertionHandler";
		public static readonly RuntimeClass NSAttributedString = "NSAttributedString";
		public static readonly RuntimeClass NSAutoreleasePool = "NSAutoreleasePool";
		public static readonly RuntimeClass NSBigMutableString = "NSBigMutableString";
		public static readonly RuntimeClass NSBinHexDecoder = "NSBinHexDecoder";
		public static readonly RuntimeClass NSBuiltinCharacterSet = "NSBuiltinCharacterSet";
		public static readonly RuntimeClass NSBundle = "NSBundle";
		public static readonly RuntimeClass NSCachedURLResponse = "NSCachedURLResponse";
		public static readonly RuntimeClass NSCachedURLResponseInternal = "NSCachedURLResponseInternal";
		public static readonly RuntimeClass NSCalendar = "NSCalendar";
		public static readonly RuntimeClass NSCalendarDate = "NSCalendarDate";
		public static readonly RuntimeClass NSCFArray = "NSCFArray";
		public static readonly RuntimeClass NSCFArray__ = "NSCFArray__";
		public static readonly RuntimeClass NSCFAttributedString = "NSCFAttributedString";
		public static readonly RuntimeClass NSCFAttributedString__ = "NSCFAttributedString__";
		public static readonly RuntimeClass NSCFBoolean = "NSCFBoolean";
		public static readonly RuntimeClass NSCFBoolean__ = "NSCFBoolean__";
		public static readonly RuntimeClass NSCFCalendar = "NSCFCalendar";
		public static readonly RuntimeClass NSCFCalendar__ = "NSCFCalendar__";
		public static readonly RuntimeClass NSCFCharacterSet = "NSCFCharacterSet";
		public static readonly RuntimeClass NSCFCharacterSet__ = "NSCFCharacterSet__";
		public static readonly RuntimeClass NSCFData = "NSCFData";
		public static readonly RuntimeClass NSCFData__ = "NSCFData__";
		public static readonly RuntimeClass NSCFDate = "NSCFDate";
		public static readonly RuntimeClass NSCFDate__ = "NSCFDate__";
		public static readonly RuntimeClass NSCFDictionary = "NSCFDictionary";
		public static readonly RuntimeClass NSCFDictionary__ = "NSCFDictionary__";
		public static readonly RuntimeClass NSCFInputStream = "NSCFInputStream";
		public static readonly RuntimeClass NSCFInputStream__ = "NSCFInputStream__";
		public static readonly RuntimeClass NSCFLocale = "NSCFLocale";
		public static readonly RuntimeClass NSCFLocale__ = "NSCFLocale__";
		public static readonly RuntimeClass NSCFNumber = "NSCFNumber";
		public static readonly RuntimeClass NSCFNumber__ = "NSCFNumber__";
		public static readonly RuntimeClass NSCFOutputStream = "NSCFOutputStream";
		public static readonly RuntimeClass NSCFOutputStream__ = "NSCFOutputStream__";
		public static readonly RuntimeClass NSCFSet = "NSCFSet";
		public static readonly RuntimeClass NSCFSet__ = "NSCFSet__";
		public static readonly RuntimeClass NSCFString__ = "NSCFString__";
		public static readonly RuntimeClass NSCFTimer = "NSCFTimer";
		public static readonly RuntimeClass NSCFTimer__ = "NSCFTimer__";
		public static readonly RuntimeClass NSCFTimeZone = "NSCFTimeZone";
		public static readonly RuntimeClass NSCFTimeZone__ = "NSCFTimeZone__";
		public static readonly RuntimeClass NSCFType__ = "NSCFType__";
		public static readonly RuntimeClass NSCharacterSet = "NSCharacterSet";
		public static readonly RuntimeClass NSCheapMutableString = "NSCheapMutableString";
		public static readonly RuntimeClass NSClassDescription = "NSClassDescription";
		public static readonly RuntimeClass NSCloneCommand = "NSCloneCommand";
		public static readonly RuntimeClass NSCloseCommand = "NSCloseCommand";
		public static readonly RuntimeClass NSCoder = "NSCoder";
		public static readonly RuntimeClass NSCoercionHandler = "NSCoercionHandler";
		public static readonly RuntimeClass NSComparisonPredicate = "NSComparisonPredicate";
		public static readonly RuntimeClass NSComparisonPredicateOperator = "NSComparisonPredicateOperator";
		public static readonly RuntimeClass NSCompoundPredicate = "NSCompoundPredicate";
		public static readonly RuntimeClass NSCompoundPredicateOperator = "NSCompoundPredicateOperator";
		public static readonly RuntimeClass NSConcreteAttributedString = "NSConcreteAttributedString";
		public static readonly RuntimeClass NSConcreteData = "NSConcreteData";
		public static readonly RuntimeClass NSConcreteDistantObjectRequest = "NSConcreteDistantObjectRequest";
		public static readonly RuntimeClass NSConcreteFileHandle = "NSConcreteFileHandle";
		public static readonly RuntimeClass NSConcreteMutableAttributedString = "NSConcreteMutableAttributedString";
		public static readonly RuntimeClass NSConcreteMutableCharacterSet = "NSConcreteMutableCharacterSet";
		public static readonly RuntimeClass NSConcreteMutableData = "NSConcreteMutableData";
		public static readonly RuntimeClass NSConcreteNotification = "NSConcreteNotification";
		public static readonly RuntimeClass NSConcretePipe = "NSConcretePipe";
		public static readonly RuntimeClass NSConcretePortCoder = "NSConcretePortCoder";
		public static readonly RuntimeClass NSConcreteProtocolChecker = "NSConcreteProtocolChecker";
		public static readonly RuntimeClass NSConcreteScanner = "NSConcreteScanner";
		public static readonly RuntimeClass NSConcreteTask = "NSConcreteTask";
		public static readonly RuntimeClass NSConcreteValue = "NSConcreteValue";
		public static readonly RuntimeClass NSCondition = "NSCondition";
		public static readonly RuntimeClass NSConditionLock = "NSConditionLock";
		public static readonly RuntimeClass NSConnection = "NSConnection";
		public static readonly RuntimeClass NSConnectionHTTPURLProtocol = "NSConnectionHTTPURLProtocol";
		public static readonly RuntimeClass NSConstantString = "NSConstantString";
		public static readonly RuntimeClass NSConstantValueExpression = "NSConstantValueExpression";
		public static readonly RuntimeClass NSCountCommand = "NSCountCommand";
		public static readonly RuntimeClass NSCountedSet = "NSCountedSet";
		public static readonly RuntimeClass NSCreateCommand = "NSCreateCommand";
		public static readonly RuntimeClass NSCustomPredicateOperator = "NSCustomPredicateOperator";
		public static readonly RuntimeClass NSData = "NSData";
		public static readonly RuntimeClass NSDataURLProtocol = "NSDataURLProtocol";
		public static readonly RuntimeClass NSDate = "NSDate";
		public static readonly RuntimeClass NSDateComponents = "NSDateComponents";
		public static readonly RuntimeClass NSDateFormatter = "NSDateFormatter";
		public static readonly RuntimeClass NSDebugString = "NSDebugString";
		public static readonly RuntimeClass NSDecimalNumber = "NSDecimalNumber";
		public static readonly RuntimeClass NSDecimalNumberHandler = "NSDecimalNumberHandler";
		public static readonly RuntimeClass NSDecimalNumberPlaceholder = "NSDecimalNumberPlaceholder";
		public static readonly RuntimeClass NSDeflateDecoder = "NSDeflateDecoder";
		public static readonly RuntimeClass NSDeleteCommand = "NSDeleteCommand";
		public static readonly RuntimeClass NSDeserializer = "NSDeserializer";
		public static readonly RuntimeClass NSDictionary = "NSDictionary";
		public static readonly RuntimeClass NSDictionaryEntry = "NSDictionaryEntry";
		public static readonly RuntimeClass NSDirectoryEnumerator = "NSDirectoryEnumerator";
		public static readonly RuntimeClass NSDistantObject = "NSDistantObject";
		public static readonly RuntimeClass NSDistantObjectRequest = "NSDistantObjectRequest";
		public static readonly RuntimeClass NSDistributedLock = "NSDistributedLock";
		public static readonly RuntimeClass NSDistributedNotificationCenter = "NSDistributedNotificationCenter";
		public static readonly RuntimeClass NSDistributedObjectsStatistics = "NSDistributedObjectsStatistics";
		public static readonly RuntimeClass NSDOStreamData = "NSDOStreamData";
		public static readonly RuntimeClass NSdoubleNumber = "NSdoubleNumber";
		public static readonly RuntimeClass NSEnumerator = "NSEnumerator";
		public static readonly RuntimeClass NSEqualityPredicateOperator = "NSEqualityPredicateOperator";
		public static readonly RuntimeClass NSError = "NSError";
		public static readonly RuntimeClass NSException = "NSException";
		public static readonly RuntimeClass NSExistsCommand = "NSExistsCommand";
		public static readonly RuntimeClass NSExpandedBuiltinCharacterSet = "NSExpandedBuiltinCharacterSet";
		public static readonly RuntimeClass NSExpression = "NSExpression";
		public static readonly RuntimeClass NSFalsePredicate = "NSFalsePredicate";
		public static readonly RuntimeClass NSFileAttributes = "NSFileAttributes";
		public static readonly RuntimeClass NSFileHandle = "NSFileHandle";
		public static readonly RuntimeClass NSFileManager = "NSFileManager";
		public static readonly RuntimeClass NSFileURLHandle = "NSFileURLHandle";
		public static readonly RuntimeClass NSFileURLProtocol = "NSFileURLProtocol";
		public static readonly RuntimeClass NSfloatNumber = "NSfloatNumber";
		public static readonly RuntimeClass NSFormatter = "NSFormatter";
		public static readonly RuntimeClass NSFTPURLHandle = "NSFTPURLHandle";
		public static readonly RuntimeClass NSFTPURLProtocol = "NSFTPURLProtocol";
		public static readonly RuntimeClass NSFunctionExpression = "NSFunctionExpression";
		public static readonly RuntimeClass NSGetCommand = "NSGetCommand";
		public static readonly RuntimeClass NSGZipDecoder = "NSGZipDecoder";
		public static readonly RuntimeClass NSHost = "NSHost";
		public static readonly RuntimeClass NSHTTPAuthenticator = "NSHTTPAuthenticator";
		public static readonly RuntimeClass NSHTTPConnectionCache = "NSHTTPConnectionCache";
		public static readonly RuntimeClass NSHTTPCookie = "NSHTTPCookie";
		public static readonly RuntimeClass NSHTTPCookieDiskStorage = "NSHTTPCookieDiskStorage";
		public static readonly RuntimeClass NSHTTPCookieDiskStoragePrivate = "NSHTTPCookieDiskStoragePrivate";
		public static readonly RuntimeClass NSHTTPCookieInternal = "NSHTTPCookieInternal";
		public static readonly RuntimeClass NSHTTPCookieStorage = "NSHTTPCookieStorage";
		public static readonly RuntimeClass NSHTTPCookieStorageInternal = "NSHTTPCookieStorageInternal";
		public static readonly RuntimeClass NSHTTPURLHandle = "NSHTTPURLHandle";
		public static readonly RuntimeClass NSHTTPURLProtocol = "NSHTTPURLProtocol";
		public static readonly RuntimeClass NSHTTPURLRequestParameters = "NSHTTPURLRequestParameters";
		public static readonly RuntimeClass NSHTTPURLResponse = "NSHTTPURLResponse";
		public static readonly RuntimeClass NSHTTPURLResponseInternal = "NSHTTPURLResponseInternal";
		public static readonly RuntimeClass NSIdEnumerator = "NSIdEnumerator";
		public static readonly RuntimeClass NSImmutableRangeCharacterSet = "NSImmutableRangeCharacterSet";
		public static readonly RuntimeClass NSImmutableStringCharacterSet = "NSImmutableStringCharacterSet";
		public static readonly RuntimeClass NSIndexPath = "NSIndexPath";
		public static readonly RuntimeClass NSIndexSet = "NSIndexSet";
		public static readonly RuntimeClass NSIndexSpecifier = "NSIndexSpecifier";
		public static readonly RuntimeClass NSInPredicateOperator = "NSInPredicateOperator";
		public static readonly RuntimeClass NSInputStream = "NSInputStream";
		public static readonly RuntimeClass NSintNumber = "NSintNumber";
		public static readonly RuntimeClass NSInvertedCharacterSet = "NSInvertedCharacterSet";
		public static readonly RuntimeClass NSInvocation = "NSInvocation";
		public static readonly RuntimeClass NSInvocationBuilder = "NSInvocationBuilder";
		public static readonly RuntimeClass NSKeyBinding = "NSKeyBinding";
		public static readonly RuntimeClass NSKeyedArchiver = "NSKeyedArchiver";
		public static readonly RuntimeClass NSKeyedUnarchiver = "NSKeyedUnarchiver";
		public static readonly RuntimeClass NSKeyGetBinding = "NSKeyGetBinding";
		public static readonly RuntimeClass NSKeyPathExpression = "NSKeyPathExpression";
		public static readonly RuntimeClass NSKeyPathSpecifierExpression = "NSKeyPathSpecifierExpression";
		public static readonly RuntimeClass NSKeySetBinding = "NSKeySetBinding";
		public static readonly RuntimeClass NSKeyValueAccessor = "NSKeyValueAccessor";
		public static readonly RuntimeClass NSKeyValueArray = "NSKeyValueArray";
		public static readonly RuntimeClass NSKeyValueCollectionGetter = "NSKeyValueCollectionGetter";
		public static readonly RuntimeClass NSKeyValueComputedProperty = "NSKeyValueComputedProperty";
		public static readonly RuntimeClass NSKeyValueContainerClass = "NSKeyValueContainerClass";
		public static readonly RuntimeClass NSKeyValueFastMutableArray = "NSKeyValueFastMutableArray";
		public static readonly RuntimeClass NSKeyValueFastMutableArray1 = "NSKeyValueFastMutableArray1";
		public static readonly RuntimeClass NSKeyValueFastMutableArray2 = "NSKeyValueFastMutableArray2";
		public static readonly RuntimeClass NSKeyValueFastMutableCollection1Getter = "NSKeyValueFastMutableCollection1Getter";
		public static readonly RuntimeClass NSKeyValueFastMutableCollection2Getter = "NSKeyValueFastMutableCollection2Getter";
		public static readonly RuntimeClass NSKeyValueFastMutableSet = "NSKeyValueFastMutableSet";
		public static readonly RuntimeClass NSKeyValueFastMutableSet1 = "NSKeyValueFastMutableSet1";
		public static readonly RuntimeClass NSKeyValueFastMutableSet2 = "NSKeyValueFastMutableSet2";
		public static readonly RuntimeClass NSKeyValueGetter = "NSKeyValueGetter";
		public static readonly RuntimeClass NSKeyValueIvarGetter = "NSKeyValueIvarGetter";
		public static readonly RuntimeClass NSKeyValueIvarMutableArray = "NSKeyValueIvarMutableArray";
		public static readonly RuntimeClass NSKeyValueIvarMutableCollectionGetter = "NSKeyValueIvarMutableCollectionGetter";
		public static readonly RuntimeClass NSKeyValueIvarMutableSet = "NSKeyValueIvarMutableSet";
		public static readonly RuntimeClass NSKeyValueIvarSetter = "NSKeyValueIvarSetter";
		public static readonly RuntimeClass NSKeyValueMethodGetter = "NSKeyValueMethodGetter";
		public static readonly RuntimeClass NSKeyValueMethodSetter = "NSKeyValueMethodSetter";
		public static readonly RuntimeClass NSKeyValueMutableArray = "NSKeyValueMutableArray";
		public static readonly RuntimeClass NSKeyValueMutableSet = "NSKeyValueMutableSet";
		public static readonly RuntimeClass NSKeyValueMutatingArrayMethodSet = "NSKeyValueMutatingArrayMethodSet";
		public static readonly RuntimeClass NSKeyValueMutatingCollectionMethodSet = "NSKeyValueMutatingCollectionMethodSet";
		public static readonly RuntimeClass NSKeyValueMutatingSetMethodSet = "NSKeyValueMutatingSetMethodSet";
		public static readonly RuntimeClass NSKeyValueNestedProperty = "NSKeyValueNestedProperty";
		public static readonly RuntimeClass NSKeyValueNilSetEnumerator = "NSKeyValueNilSetEnumerator";
		public static readonly RuntimeClass NSKeyValueNonmutatingArrayMethodSet = "NSKeyValueNonmutatingArrayMethodSet";
		public static readonly RuntimeClass NSKeyValueNonmutatingCollectionMethodSet = "NSKeyValueNonmutatingCollectionMethodSet";
		public static readonly RuntimeClass NSKeyValueNonmutatingSetMethodSet = "NSKeyValueNonmutatingSetMethodSet";
		public static readonly RuntimeClass NSKeyValueNotifyingMutableArray = "NSKeyValueNotifyingMutableArray";
		public static readonly RuntimeClass NSKeyValueNotifyingMutableCollectionGetter = "NSKeyValueNotifyingMutableCollectionGetter";
		public static readonly RuntimeClass NSKeyValueNotifyingMutableSet = "NSKeyValueNotifyingMutableSet";
		public static readonly RuntimeClass NSKeyValueObservance = "NSKeyValueObservance";
		public static readonly RuntimeClass NSKeyValueObservationForwarder = "NSKeyValueObservationForwarder";
		public static readonly RuntimeClass NSKeyValueProperty = "NSKeyValueProperty";
		public static readonly RuntimeClass NSKeyValueProxyGetter = "NSKeyValueProxyGetter";
		public static readonly RuntimeClass NSKeyValueProxyShareKey = "NSKeyValueProxyShareKey";
		public static readonly RuntimeClass NSKeyValueSet = "NSKeyValueSet";
		public static readonly RuntimeClass NSKeyValueSetter = "NSKeyValueSetter";
		public static readonly RuntimeClass NSKeyValueSlowGetter = "NSKeyValueSlowGetter";
		public static readonly RuntimeClass NSKeyValueSlowMutableArray = "NSKeyValueSlowMutableArray";
		public static readonly RuntimeClass NSKeyValueSlowMutableCollectionGetter = "NSKeyValueSlowMutableCollectionGetter";
		public static readonly RuntimeClass NSKeyValueSlowMutableSet = "NSKeyValueSlowMutableSet";
		public static readonly RuntimeClass NSKeyValueSlowSetter = "NSKeyValueSlowSetter";
		public static readonly RuntimeClass NSKeyValueUndefinedGetter = "NSKeyValueUndefinedGetter";
		public static readonly RuntimeClass NSKeyValueUndefinedSetter = "NSKeyValueUndefinedSetter";
		public static readonly RuntimeClass NSKeyValueUnnestedProperty = "NSKeyValueUnnestedProperty";
		public static readonly RuntimeClass NSLanguageContext = "NSLanguageContext";
		public static readonly RuntimeClass NSLikePredicateOperator = "NSLikePredicateOperator";
		public static readonly RuntimeClass NSLocale = "NSLocale";
		public static readonly RuntimeClass NSLocalTimeZone = "NSLocalTimeZone";
		public static readonly RuntimeClass NSLock = "NSLock";
		public static readonly RuntimeClass NSLogicalTest = "NSLogicalTest";
		public static readonly RuntimeClass NSlongLongNumber = "NSlongLongNumber";
		public static readonly RuntimeClass NSMacBinaryDecoder = "NSMacBinaryDecoder";
		public static readonly RuntimeClass NSMachBootstrapServer = "NSMachBootstrapServer";
		public static readonly RuntimeClass NSMachPort = "NSMachPort";
		public static readonly RuntimeClass NSMachPort__ = "NSMachPort__";
		public static readonly RuntimeClass NSMatchingPredicateOperator = "NSMatchingPredicateOperator";
		public static readonly RuntimeClass NSMessagePort = "NSMessagePort";
		public static readonly RuntimeClass NSMessagePortNameServer = "NSMessagePortNameServer";
		public static readonly RuntimeClass NSMetadataItem = "NSMetadataItem";
		public static readonly RuntimeClass NSMetadataQuery = "NSMetadataQuery";
		public static readonly RuntimeClass NSMetadataQueryAttributeValueTuple = "NSMetadataQueryAttributeValueTuple";
		public static readonly RuntimeClass NSMetadataQueryResultGroup = "NSMetadataQueryResultGroup";
		public static readonly RuntimeClass NSMethodSignature = "NSMethodSignature";
		public static readonly RuntimeClass NSMiddleSpecifier = "NSMiddleSpecifier";
		public static readonly RuntimeClass NSMoveCommand = "NSMoveCommand";
		public static readonly RuntimeClass NSMultiReadUniWriteLock = "NSMultiReadUniWriteLock";
		public static readonly RuntimeClass NSMutableArray = "NSMutableArray";
		public static readonly RuntimeClass NSMutableAttributedString = "NSMutableAttributedString";
		public static readonly RuntimeClass NSMutableCharacterSet = "NSMutableCharacterSet";
		public static readonly RuntimeClass NSMutableData = "NSMutableData";
		public static readonly RuntimeClass NSMutableDictionary = "NSMutableDictionary";
		public static readonly RuntimeClass NSMutableIndexSet = "NSMutableIndexSet";
		public static readonly RuntimeClass NSMutableRLEArray = "NSMutableRLEArray";
		public static readonly RuntimeClass NSMutableSet = "NSMutableSet";
		public static readonly RuntimeClass NSMutableString = "NSMutableString";
		public static readonly RuntimeClass NSMutableStringProxy = "NSMutableStringProxy";
		public static readonly RuntimeClass NSMutableStringProxyForMutableAttributedString = "NSMutableStringProxyForMutableAttributedString";
		public static readonly RuntimeClass NSMutableURLRequest = "NSMutableURLRequest";
		public static readonly RuntimeClass NSNameSpecifier = "NSNameSpecifier";
		public static readonly RuntimeClass NSNetService = "NSNetService";
		public static readonly RuntimeClass NSNetServiceBrowser = "NSNetServiceBrowser";
		public static readonly RuntimeClass NSNetworkSettings = "NSNetworkSettings";
		public static readonly RuntimeClass NSNetworkSettingsInternal = "NSNetworkSettingsInternal";
		public static readonly RuntimeClass NSNotification = "NSNotification";
		public static readonly RuntimeClass NSNotificationCenter = "NSNotificationCenter";
		public static readonly RuntimeClass NSNotificationQueue = "NSNotificationQueue";
		public static readonly RuntimeClass NSNull = "NSNull";
		public static readonly RuntimeClass NSNull__ = "NSNull__";
		public static readonly RuntimeClass NSNullFileHandle = "NSNullFileHandle";
		public static readonly RuntimeClass NSNumber = "NSNumber";
		public static readonly RuntimeClass NSNumberFormatter = "NSNumberFormatter";
		public static readonly RuntimeClass NSObject = "NSObject";
		public static readonly RuntimeClass NSObjectSpecifier = "NSObjectSpecifier";
		public static readonly RuntimeClass NSOutputStream = "NSOutputStream";
		public static readonly RuntimeClass NSParser = "NSParser";
		public static readonly RuntimeClass NSPathStore2 = "NSPathStore2";
		public static readonly RuntimeClass NSPipe = "NSPipe";
		public static readonly RuntimeClass NSPlaceholderArray = "NSPlaceholderArray";
		public static readonly RuntimeClass NSPlaceholderDictionary = "NSPlaceholderDictionary";
		public static readonly RuntimeClass NSPlaceholderMutableArray = "NSPlaceholderMutableArray";
		public static readonly RuntimeClass NSPlaceholderMutableDictionary = "NSPlaceholderMutableDictionary";
		public static readonly RuntimeClass NSPlaceholderMutableSet = "NSPlaceholderMutableSet";
		public static readonly RuntimeClass NSPlaceholderMutableString = "NSPlaceholderMutableString";
		public static readonly RuntimeClass NSPlaceholderNumber = "NSPlaceholderNumber";
		public static readonly RuntimeClass NSPlaceholderSet = "NSPlaceholderSet";
		public static readonly RuntimeClass NSPlaceholderString = "NSPlaceholderString";
		public static readonly RuntimeClass NSPlaceholderValue = "NSPlaceholderValue";
		public static readonly RuntimeClass NSPort = "NSPort";
		public static readonly RuntimeClass NSPortCoder = "NSPortCoder";
		public static readonly RuntimeClass NSPortMessage = "NSPortMessage";
		public static readonly RuntimeClass NSPortNameServer = "NSPortNameServer";
		public static readonly RuntimeClass NSPositionalSpecifier = "NSPositionalSpecifier";
		public static readonly RuntimeClass NSPredicate = "NSPredicate";
		public static readonly RuntimeClass NSPredicateOperator = "NSPredicateOperator";
		public static readonly RuntimeClass NSProcessInfo = "NSProcessInfo";
		public static readonly RuntimeClass NSPropertyListSerialization = "NSPropertyListSerialization";
		public static readonly RuntimeClass NSPropertySpecifier = "NSPropertySpecifier";
		public static readonly RuntimeClass NSProtocolChecker = "NSProtocolChecker";
		public static readonly RuntimeClass NSProxy = "NSProxy";
		public static readonly RuntimeClass NSQuitCommand = "NSQuitCommand";
		public static readonly RuntimeClass NSRandomSpecifier = "NSRandomSpecifier";
		public static readonly RuntimeClass NSRangeSpecifier = "NSRangeSpecifier";
		public static readonly RuntimeClass NSRecursiveLock = "NSRecursiveLock";
		public static readonly RuntimeClass NSRefCountingNumber = "NSRefCountingNumber";
		public static readonly RuntimeClass NSRelativeSpecifier = "NSRelativeSpecifier";
		public static readonly RuntimeClass NSRLEArray = "NSRLEArray";
		public static readonly RuntimeClass NSRunLoop = "NSRunLoop";
		public static readonly RuntimeClass NSScanner = "NSScanner";
		public static readonly RuntimeClass NSScriptArgumentDescription = "NSScriptArgumentDescription";
		public static readonly RuntimeClass NSScriptAttributeDescription = "NSScriptAttributeDescription";
		public static readonly RuntimeClass NSScriptClassDescription = "NSScriptClassDescription";
		public static readonly RuntimeClass NSScriptCoercionHandler = "NSScriptCoercionHandler";
		public static readonly RuntimeClass NSScriptCommand = "NSScriptCommand";
		public static readonly RuntimeClass NSScriptCommandConstructionContext = "NSScriptCommandConstructionContext";
		public static readonly RuntimeClass NSScriptCommandDescription = "NSScriptCommandDescription";
		public static readonly RuntimeClass NSScriptComplexTypeDescription = "NSScriptComplexTypeDescription";
		public static readonly RuntimeClass NSScriptDeclaredRecordTypeDescription = "NSScriptDeclaredRecordTypeDescription";
		public static readonly RuntimeClass NSScriptEnumerationDescription = "NSScriptEnumerationDescription";
		public static readonly RuntimeClass NSScriptEnumeratorDescription = "NSScriptEnumeratorDescription";
		public static readonly RuntimeClass NSScriptExecutionContext = "NSScriptExecutionContext";
		public static readonly RuntimeClass NSScriptFakeObjectTypeDescription = "NSScriptFakeObjectTypeDescription";
		public static readonly RuntimeClass NSScriptingAppleEventHandler = "NSScriptingAppleEventHandler";
		public static readonly RuntimeClass NSScriptListTypeDescription = "NSScriptListTypeDescription";
		public static readonly RuntimeClass NSScriptObjectSpecifier = "NSScriptObjectSpecifier";
		public static readonly RuntimeClass NSScriptObjectTypeDescription = "NSScriptObjectTypeDescription";
		public static readonly RuntimeClass NSScriptPropertiesRecordTypeDescription = "NSScriptPropertiesRecordTypeDescription";
		public static readonly RuntimeClass NSScriptPropertyDescription = "NSScriptPropertyDescription";
		public static readonly RuntimeClass NSScriptRecordFieldDescription = "NSScriptRecordFieldDescription";
		public static readonly RuntimeClass NSScriptRecordTypeDescription = "NSScriptRecordTypeDescription";
		public static readonly RuntimeClass NSScriptSDEFElement = "NSScriptSDEFElement";
		public static readonly RuntimeClass NSScriptSDEFParser = "NSScriptSDEFParser";
		public static readonly RuntimeClass NSScriptSuiteDescription = "NSScriptSuiteDescription";
		public static readonly RuntimeClass NSScriptSuiteRegistry = "NSScriptSuiteRegistry";
		public static readonly RuntimeClass NSScriptToManyRelationshipDescription = "NSScriptToManyRelationshipDescription";
		public static readonly RuntimeClass NSScriptToOneRelationshipDescription = "NSScriptToOneRelationshipDescription";
		public static readonly RuntimeClass NSScriptTypeDescription = "NSScriptTypeDescription";
		public static readonly RuntimeClass NSScriptValueTypeDescription = "NSScriptValueTypeDescription";
		public static readonly RuntimeClass NSScriptWhoseTest = "NSScriptWhoseTest";
		public static readonly RuntimeClass NSSelfExpression = "NSSelfExpression";
		public static readonly RuntimeClass NSSerializer = "NSSerializer";
		public static readonly RuntimeClass NSSet = "NSSet";
		public static readonly RuntimeClass NSSetCommand = "NSSetCommand";
		public static readonly RuntimeClass NSshortNumber = "NSshortNumber";
		public static readonly RuntimeClass NSSimpleAttributeDictionary = "NSSimpleAttributeDictionary";
		public static readonly RuntimeClass NSSimpleAttributeDictionaryEnumerator = "NSSimpleAttributeDictionaryEnumerator";
		public static readonly RuntimeClass NSSimpleCString = "NSSimpleCString";
		public static readonly RuntimeClass NSSocketPort = "NSSocketPort";
		public static readonly RuntimeClass NSSocketPortNameServer = "NSSocketPortNameServer";
		public static readonly RuntimeClass NSSortDescriptor = "NSSortDescriptor";
		public static readonly RuntimeClass NSSpecifierTest = "NSSpecifierTest";
		public static readonly RuntimeClass NSSpellServer = "NSSpellServer";
		public static readonly RuntimeClass NSStream = "NSStream";
		public static readonly RuntimeClass NSString = "NSString";
		public static readonly RuntimeClass NSStringPredicateOperator = "NSStringPredicateOperator";
		public static readonly RuntimeClass NSSubexpression = "NSSubexpression";
		public static readonly RuntimeClass NSSubrangeData = "NSSubrangeData";
		public static readonly RuntimeClass NSSubstringPredicateOperator = "NSSubstringPredicateOperator";
		public static readonly RuntimeClass NSSymbolicExpression = "NSSymbolicExpression";
		public static readonly RuntimeClass NSSynchronousURLConnectionDelegate = "NSSynchronousURLConnectionDelegate";
		public static readonly RuntimeClass NSTask = "NSTask";
		public static readonly RuntimeClass NSThread = "NSThread";
		public static readonly RuntimeClass NSTimer = "NSTimer";
		public static readonly RuntimeClass NSTimeZone = "NSTimeZone";
		public static readonly RuntimeClass NSTimeZoneDetail = "NSTimeZoneDetail";
		public static readonly RuntimeClass NSTimeZoneDetailDecoder = "NSTimeZoneDetailDecoder";
		public static readonly RuntimeClass NSTruePredicate = "NSTruePredicate";
		public static readonly RuntimeClass NSUnarchiver = "NSUnarchiver";
		public static readonly RuntimeClass NSUndoManager = "NSUndoManager";
		public static readonly RuntimeClass NSUniqueIDSpecifier = "NSUniqueIDSpecifier";
		public static readonly RuntimeClass NSunsignedIntNumber = "NSunsignedIntNumber";
		public static readonly RuntimeClass NSunsignedLongLongNumber = "NSunsignedLongLongNumber";
		public static readonly RuntimeClass NSunsignedShortNumber = "NSunsignedShortNumber";
		public static readonly RuntimeClass NSURL = "NSURL";
		public static readonly RuntimeClass NSURL__ = "NSURL__";
		public static readonly RuntimeClass NSURLAuthenticationChallenge = "NSURLAuthenticationChallenge";
		public static readonly RuntimeClass NSURLAuthenticationChallengeInternal = "NSURLAuthenticationChallengeInternal";
		public static readonly RuntimeClass NSURLAuthenticationChallengeState = "NSURLAuthenticationChallengeState";
		public static readonly RuntimeClass NSURLCache = "NSURLCache";
		public static readonly RuntimeClass NSURLCacheInternal = "NSURLCacheInternal";
		public static readonly RuntimeClass NSURLCacheNode = "NSURLCacheNode";
		public static readonly RuntimeClass NSURLConnection = "NSURLConnection";
		public static readonly RuntimeClass NSURLConnectionCallbackData = "NSURLConnectionCallbackData";
		public static readonly RuntimeClass NSURLConnectionDelegateProxy = "NSURLConnectionDelegateProxy";
		public static readonly RuntimeClass NSURLConnectionHandle = "NSURLConnectionHandle";
		public static readonly RuntimeClass NSURLConnectionInternal = "NSURLConnectionInternal";
		public static readonly RuntimeClass NSURLConnectionQueue = "NSURLConnectionQueue";
		public static readonly RuntimeClass NSURLCredential = "NSURLCredential";
		public static readonly RuntimeClass NSURLCredentialInternal = "NSURLCredentialInternal";
		public static readonly RuntimeClass NSURLCredentialStorage = "NSURLCredentialStorage";
		public static readonly RuntimeClass NSURLCredentialStorageInternal = "NSURLCredentialStorageInternal";
		public static readonly RuntimeClass NSURLDownload = "NSURLDownload";
		public static readonly RuntimeClass NSURLDownloadInternal = "NSURLDownloadInternal";
		public static readonly RuntimeClass NSURLFileTypeMappings = "NSURLFileTypeMappings";
		public static readonly RuntimeClass NSURLFileTypeMappingsInternal = "NSURLFileTypeMappingsInternal";
		public static readonly RuntimeClass NSURLHandle = "NSURLHandle";
		public static readonly RuntimeClass NSURLHandleProtocol = "NSURLHandleProtocol";
		public static readonly RuntimeClass NSURLHostNameAddressInfo = "NSURLHostNameAddressInfo";
		public static readonly RuntimeClass NSURLKeychainCredential = "NSURLKeychainCredential";
		public static readonly RuntimeClass NSURLKeychainCredentialInternal = "NSURLKeychainCredentialInternal";
		public static readonly RuntimeClass NSURLKeychainCredentialStorage = "NSURLKeychainCredentialStorage";
		public static readonly RuntimeClass NSURLKeychainCredentialStorageInternal = "NSURLKeychainCredentialStorageInternal";
		public static readonly RuntimeClass NSURLKeyValuePair = "NSURLKeyValuePair";
		public static readonly RuntimeClass NSURLMonitor = "NSURLMonitor";
		public static readonly RuntimeClass NSURLProtectionSpace = "NSURLProtectionSpace";
		public static readonly RuntimeClass NSURLProtectionSpaceInternal = "NSURLProtectionSpaceInternal";
		public static readonly RuntimeClass NSURLProtocol = "NSURLProtocol";
		public static readonly RuntimeClass NSURLProtocolInternal = "NSURLProtocolInternal";
		public static readonly RuntimeClass NSURLQueue = "NSURLQueue";
		public static readonly RuntimeClass NSURLReadWriteLock = "NSURLReadWriteLock";
		public static readonly RuntimeClass NSURLRecursiveReadWriteLock = "NSURLRecursiveReadWriteLock";
		public static readonly RuntimeClass NSURLRequest = "NSURLRequest";
		public static readonly RuntimeClass NSURLRequestInternal = "NSURLRequestInternal";
		public static readonly RuntimeClass NSURLResponse = "NSURLResponse";
		public static readonly RuntimeClass NSURLResponseInternal = "NSURLResponseInternal";
		public static readonly RuntimeClass NSURLSpinLock = "NSURLSpinLock";
		public static readonly RuntimeClass NSURLUpload = "NSURLUpload";
		public static readonly RuntimeClass NSURLUploadAuthenticationChallenge = "NSURLUploadAuthenticationChallenge";
		public static readonly RuntimeClass NSUserDefaults = "NSUserDefaults";
		public static readonly RuntimeClass NSValue = "NSValue";
		public static readonly RuntimeClass NSValueDecoder = "NSValueDecoder";
		public static readonly RuntimeClass NSValueTransformer = "NSValueTransformer";
		public static readonly RuntimeClass NSVariableAssignmentExpression = "NSVariableAssignmentExpression";
		public static readonly RuntimeClass NSVariableExpression = "NSVariableExpression";
		public static readonly RuntimeClass NSWhoseSpecifier = "NSWhoseSpecifier";
		public static readonly RuntimeClass NSWhoseTest = "NSWhoseTest";
		public static readonly RuntimeClass NSXMLAttributeDeclaration = "NSXMLAttributeDeclaration";
		public static readonly RuntimeClass NSXMLChildren = "NSXMLChildren";
		public static readonly RuntimeClass NSXMLContext = "NSXMLContext";
		public static readonly RuntimeClass NSXMLDocument = "NSXMLDocument";
		public static readonly RuntimeClass NSXMLDTD = "NSXMLDTD";
		public static readonly RuntimeClass NSXMLDTDNode = "NSXMLDTDNode";
		public static readonly RuntimeClass NSXMLElement = "NSXMLElement";
		public static readonly RuntimeClass NSXMLElementDeclarationContent = "NSXMLElementDeclarationContent";
		public static readonly RuntimeClass NSXMLFidelityElement = "NSXMLFidelityElement";
		public static readonly RuntimeClass NSXMLFidelityNode = "NSXMLFidelityNode";
		public static readonly RuntimeClass NSXMLNamedFidelityNode = "NSXMLNamedFidelityNode";
		public static readonly RuntimeClass NSXMLNamedNode = "NSXMLNamedNode";
		public static readonly RuntimeClass NSXMLNode = "NSXMLNode";
		public static readonly RuntimeClass NSXMLNSArrayTransformerName = "NSXMLNSArrayTransformerName";
		public static readonly RuntimeClass NSXMLNSCalendarDateTransformerName = "NSXMLNSCalendarDateTransformerName";
		public static readonly RuntimeClass NSXMLNSDataTransformerName = "NSXMLNSDataTransformerName";
		public static readonly RuntimeClass NSXMLNSNumberTransformerName = "NSXMLNSNumberTransformerName";
		public static readonly RuntimeClass NSXMLNSURLTransformerName = "NSXMLNSURLTransformerName";
		public static readonly RuntimeClass NSXMLParser = "NSXMLParser";
		public static readonly RuntimeClass NSXMLSAXParser = "NSXMLSAXParser";
		public static readonly RuntimeClass NSXMLSchemaType = "NSXMLSchemaType";
		public static readonly RuntimeClass NSXMLTidy = "NSXMLTidy";
		public static readonly RuntimeClass NSXMLTreeReader = "NSXMLTreeReader";
		public static readonly RuntimeClass Object = "Object";
		public static readonly RuntimeClass Protocol = "Protocol";
	}
}
