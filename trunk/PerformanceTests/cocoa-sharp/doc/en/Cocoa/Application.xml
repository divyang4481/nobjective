<Type Name="Application" FullName="Cocoa.Application">
  <TypeSignature Language="C#" Value="public class Application : Cocoa.Object" />
  <AssemblyInfo>
    <AssemblyName>cocoa-sharp</AssemblyName>
    <AssemblyVersion>1.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Cocoa.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Application (IntPtr native_object);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="native_object" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="native_object">A pointer to the Objective C object.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public static void Init ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method initializes the Cocoa runtime to be ready for Cocoa#.</summary>
        <remarks>This method will create and initialize a AutoreleasePool to deal with your managed objects as well as install the MachO Exception handler.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadNib">
      <MemberSignature Language="C#" Value="public static void LoadNib (string nibname);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nibname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nibname">The name of the nib to load.</param>
        <summary>Loads the specified NIB into the running instance.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFramework">
      <MemberSignature Language="C#" Value="public static void LoadFramework (string frameworkname);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frameworkname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="frameworkname">The name of the framework to load.</param>
        <summary>Loads the specified framework into the running instance.</summary>
        <remarks>This method will look for frameworks in the /System/Library/Frameworks directory first and the Resources section of your application bundle.  It will throw an Exception if the framework cannot be located.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Start the Cocoa RunLoop.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModalSessionForWindow">
      <MemberSignature Language="C#" Value="public IntPtr ModalSessionForWindow (Cocoa.Window window);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="window" Type="Cocoa.Window" />
      </Parameters>
      <Docs>
        <param name="window">Window to create the modal session for.</param>
        <summary>This method initializes a modal session for the specified window.</summary>
        <returns>A pointer to the modal session.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndModalSession">
      <MemberSignature Language="C#" Value="public void EndModalSession (IntPtr modalsession);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modalsession" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="modalsession">A modal session instance.</param>
        <summary>Ends the current modal session passed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunModalSession">
      <MemberSignature Language="C#" Value="public int RunModalSession (IntPtr modalsession);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modalsession" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="modalsession">A modal session pointer.</param>
        <summary>Run the specified modal session.</summary>
        <returns>RunContinuesResponse to continue or RunStoppedResponse to stop.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunApplication">
      <MemberSignature Language="C#" Value="public void RunApplication ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Run the RunLoop for this Application instance.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedApplication">
      <MemberSignature Language="C#" Value="public static Cocoa.Application SharedApplication { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Cocoa.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the Shared Application instance for this task.</summary>
        <value>The shared Application instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MainWindow">
      <MemberSignature Language="C#" Value="public Cocoa.Window MainWindow { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Cocoa.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the main Window for this task.</summary>
        <value>The main Window instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSheet">
      <MemberSignature Language="C#" Value="public void BeginSheet (Cocoa.Window sheet, Cocoa.Window docWindow, Cocoa.SheetHandler modalDelegate, IntPtr contextInfo);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sheet" Type="Cocoa.Window" />
        <Parameter Name="docWindow" Type="Cocoa.Window" />
        <Parameter Name="modalDelegate" Type="Cocoa.SheetHandler" />
        <Parameter Name="contextInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="sheet">The <see cref="T:Cocoa.Panel" /> or <see cref="T:Cocoa.Window" /> object to be displayed as the sheet.</param>
        <param name="docWindow">The <see cref="T:Cocoa.Window" /> object that the resulting sheet will be attached to.</param>
        <param name="modalDelegate">A <see cref="T:Cocoa.SheetHandler" /> instance that points to the callback method for the sheet ending event.</param>
        <param name="contextInfo">Contextual information that will be passed to the <see cref="T:Cocoa.SheetHandler" /> callback method.</param>
        <summary>Displays a <see cref="T:Cocoa.Panel" /> or <see cref="T:Cocoa.Window" /> object as a modal sheet attached to the specified window.</summary>
        <remarks>
          <para>The callback method should have the signature:</para>
          <c>
            <para>MethodName (Window sheet, int returnCode, System.IntPtr contextInfo)</para>
          </c>
          <para>The method should be decorated with an Export attribute in the following format:</para>
          <c>
            <para>[Export ("methodName:returnCode:contextInfo:")]</para>
          </c>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSheet">
      <MemberSignature Language="C#" Value="public void EndSheet (Cocoa.Window sheet);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sheet" Type="Cocoa.Window" />
      </Parameters>
      <Docs>
        <param name="sheet">The <see cref="T:Cocoa.Window" /> or <see cref="T:Cocoa.Panel" /> that should no longer be displayed as a sheet.</param>
        <summary>Ends the display of a sheet.</summary>
        <remarks>Consider using the overloaded method that takes a return code parameter if you need to pass information back to the <see cref="T:Cocoa.SheetHandler" /> callback method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSheet">
      <MemberSignature Language="C#" Value="public void EndSheet (Cocoa.Window sheet, int returnCode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sheet" Type="Cocoa.Window" />
        <Parameter Name="returnCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sheet">The <see cref="T:Cocoa.Window" /> or <see cref="T:Cocoa.Panel" /> that should no longer be displayed as a sheet.</param>
        <param name="returnCode">The integer return code to pass to the sheeDidEnd <see cref="T:Cocoa.SheetHandler" /> delegate method for the ending sheet.</param>
        <summary>Ends the display of a sheet.</summary>
        <remarks>Consider using the overloaded method that doesn't take a return code parameter if you don't need to pass information back to the <see cref="T:Cocoa.SheetHandler" /> callback method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public Cocoa.Image Icon { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Cocoa.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The image that will be displayed in the dock and the finder.</summary>
        <value>A <see cref="T:Cocoa.Image" /> icon. This will default to the bundle icon if one is found, otherwise it will display a 'generic' application icon.</value>
        <remarks>When using a macpack generated bundle, this will return the 'generic' application icon not the icon specified in the bundle's info.plist.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAppleMenu">
      <MemberSignature Language="C#" Value="public void SetAppleMenu (Cocoa.Menu menu);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Cocoa.Menu" />
      </Parameters>
      <Docs>
        <param name="menu">The menu to set as the "Apple Menu"</param>
        <summary>Sets the "Apple Menu" for the application</summary>
        <remarks>The "Apple Menu" is the first menu item in the Application's Main Menu (after the apple icon).  It is always overridden to show the name of the currently executing application, and usually contains options such as "About Application", "Preferences...", "Services", Hide/Show options, and of course, the all-important "Quit Application".  It should be noted that simply calling SetAppleMenu() is not enough to override the "Apple Menu" for your application; the menu that is chosen as the "Apple Menu" must also be the submenu for the first item in the Application's main menu (for details, see remarks on the MainMenu property).</remarks>
      </Docs>
    </Member>
    <Member MemberName="MainMenu">
      <MemberSignature Language="C#" Value="public Cocoa.Menu MainMenu { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Cocoa.Menu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets/Sets the Main Menu for the Application.</summary>
        <value>The Main Menu for the application.</value>
        <remarks>The Main Menu is the menu that is displayed at the top of the screen while the Application is active.  The first item/submenu in this menu is known as the "Apple Menu", and its title is always overridden to show the name of the Application.  In order for the "Apple Menu" to display properly, you must call SetAppleMenu() on the submenu for the first item of the Main Menu.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>Application is a managed representation of the NSApplication class.</summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
