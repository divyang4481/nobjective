#!/usr/bin/python
# Used to build Mac OS-X application bundles for mono applications.
from optparse import OptionParser
import os
import shutil
import stat
import string
import sys

def copyDebugFile(file, dst):
	if os.path.exists(file): 
		shutil.copy(file, dst)

# There is a shutil.copytree, but it copies the .svn directories inside
# nib bundles.
def copyTree(src, dst):
	if os.path.exists(src) and os.path.basename(src)[0] != '.': 
		dstPath = os.path.join(dst, os.path.basename(src))
		os.mkdir(dstPath)
		
		for root, dirs, files in os.walk(src):
			for file in files:
				shutil.copy(os.path.join(root, file), dstPath)
			for dir in dirs:
				copyTree(os.path.join(root, dir), dstPath)
			break

parser = OptionParser()
parser.add_option("--app", 												help="path to the bundle which will be created")
parser.add_option("--exe", 			 									help="path to the executable assembly")
parser.add_option("--mono-flags",	default="", 						help="flags to use with mono")
parser.add_option("--plist", 		 									help="path to the Info.plist to copy")
parser.add_option("--resources", 	action="append", 					help="files to copy into the resources dir")
parser.add_option("--vars", 		 									help="{name}s to expand in the plist")
parser.add_option("--usage", 		action="store_true", default=False,	help="prints usage info and exit")
                  
(options, args) = parser.parse_args()

if options.usage:
	print "Typical usage looks like this:"
	print "python cocoa-pack --app=bin/CoolApp.app --mono-flags=--debug --exe=bin/cool-app.exe --plist=Info.plist --resources=English.lproj:MainMenu.nib,Document.nib --vars=VERSION:0.1,APP_NAME:CoolApp"
	print "--resources may appear multiple times and the localization dir is optional"
	
else:
	appName = os.path.splitext(os.path.basename(options.app))[0]	# doesn't include .nib
	exeName = os.path.splitext(os.path.basename(options.exe))[0]	# doesn't include .exe
	
	contentsPath = options.app + "/Contents"
	macOSPath = contentsPath + "/MacOS"
	resourcesPath = contentsPath + "/Resources"
	
	# Remove the old bundle.
	if os.path.exists(options.app): 
		shutil.rmtree(options.app)
	
	# Create the directories for the new bundle.
	os.mkdir(options.app)
	os.mkdir(contentsPath)
	os.mkdir(macOSPath)
	os.mkdir(resourcesPath)
	
	# Copy the exe into the bundle.
	shutil.copy(options.exe, resourcesPath)
	if "--debug" in options.mono_flags:
		copyDebugFile(options.exe + ".mdb", resourcesPath)
		copyDebugFile(options.exe + ".xxx", resourcesPath)
		
	# Add a PkgInfo file. 
	file = open(contentsPath + "/PkgInfo", "w")
	file.write("APPL????")
	file.close()
	
	# Copy the resources into the bundle. 
	for resources in options.resources:
		dstPath = resourcesPath
		parts = resources.split(':')
		if len(parts) == 2:
			dstPath = resourcesPath + "/" + parts[0]
			resources = parts[1]
					
			if not os.path.exists(dstPath):
				os.mkdir(dstPath)

		for resource in resources.split(','):
			if os.path.isfile(resource): 
				shutil.copy(resource, dstPath)
				if "--debug" in options.mono_flags:
					copyDebugFile(resource + ".mdb", dstPath)
					copyTree(resource + ".dSYM", dstPath)
			else:
				copyTree(resource, dstPath)

	# Expand variables in the Info.plist file and write the new plist into the bundle.
	file = open(options.plist, "r")
	text = file.read()
	
	for entry in options.vars.split(','):
		name = entry.split(':')[0]
		value = entry.split(':')[1]
		text = text.replace("${" + name + "}", value) 
	
	file = open(contentsPath + "/Info.plist", "w")
	file.write(text)
	file.close()
	
	# Create a little script to run our assembly using mono. Note that we can't simply
	# run mono from its normal location or nibs won't load.
	script = """\
#!/bin/sh
APP_PATH=`echo \x240 | awk '{split(\x240,patharr,\"/\"); idx=1; while(patharr[idx+3] != \"\") { if (patharr[idx] != \"/\") {printf(\"%s/\", patharr[idx]); idx++ }} }'`
cd ${APP_PATH}/Contents/MacOS

if [ -f mono ]; then rm -f mono ; fi
ln -s \x60which mono\x60 mono

./mono $(mono-flags) ../Resources/$(exe-name).exe $@
"""
	script = script.replace("$(app-name)", appName)
	script = script.replace("$(mono-flags)", options.mono_flags)
	script = script.replace("$(exe-name)", exeName)
	
	file = open(macOSPath + "/launcher", "w")
	file.write(script)
	file.close()
	
	# Make the script executable/readable by everyone and writeable
	# by the current user.
	os.chmod(macOSPath + "/launcher", 0x1ED)
	
